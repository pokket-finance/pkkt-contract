{
  "address": "0x75c68e69775fA3E9DD38eA32E554f6BF259C1135",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CloseOption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CommitOption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "option",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "OpenOption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "option",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OptionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "OptionTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callOrPut",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetToTerminate",
          "type": "uint256"
        }
      ],
      "name": "cancelWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "closePrevious",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "releasedDepositAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedDepositAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollDepositAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollDepositAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollCounterPartyAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollCounterPartyAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            }
          ],
          "internalType": "struct StructureData.MaturedState",
          "name": "_maturedState",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitCurrent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "completeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterParty",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterPartyAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterPartyAssetAmountDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterPartyOption",
      "outputs": [
        {
          "internalType": "contract IPKKTStructureOption",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAssetAmountDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_terminates",
          "type": "uint256[]"
        }
      ],
      "name": "depositFromCounterParty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "dryRunSettlement",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollPremium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedPremium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollCounterPartyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollCounterPartyPremium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyPremium",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "option",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.SettlementAccountingResult",
          "name": "_result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccountBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pendingDepositAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedDepositAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedDepositAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyAssetAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct StructureData.UserBalance",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOptionSnapShot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalPending",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLocked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReleasedDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReleasedCounterParty",
              "type": "uint256"
            }
          ],
          "internalType": "struct StructureData.OptionSnapshot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blockHeight",
          "type": "uint256"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalTerminate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "pricePrecision",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callOrPut",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getWithdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_depositAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_counterPartyAsset",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_depositAssetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_counterPartyAssetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_callOrPut",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_settler",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetToTerminate",
          "type": "uint256"
        }
      ],
      "name": "initiateWithraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isEth",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCancelWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxInitiateWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "optionHeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "optionStates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalTerminate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "premiumRate",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "pricePrecision",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "callOrPut",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionVault",
      "outputs": [
        {
          "internalType": "contract IOptionVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redepositToCounterParty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quota",
          "type": "uint256"
        }
      ],
      "name": "rollToNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_pendingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_counterParty",
          "type": "address"
        }
      ],
      "name": "setCounterPartyOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "option",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "pricePrecision",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            }
          ],
          "internalType": "struct StructureData.OptionParameters",
          "name": "_optionParameters",
          "type": "tuple"
        }
      ],
      "name": "setOptionParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleasedCounterPartyAssetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleasedDepositAssetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underSettlement",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingAsset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tempLocked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ongoingAsset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetToTerminate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetToTerminateForNextRound",
          "type": "uint256"
        },
        {
          "internalType": "uint232",
          "name": "totalRound",
          "type": "uint232"
        },
        {
          "internalType": "bool",
          "name": "hasState",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usersInvolved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a2d6c23a27be44a8b695d0ebeb01906b17a15470d5ab35c24a5182dbd4f332f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x75c68e69775fA3E9DD38eA32E554f6BF259C1135",
    "transactionIndex": 0,
    "gasUsed": "5177850",
    "logsBloom": "0x
    "blockHash": "0x1718694f49c7fd04776a20e0b6a097cc0da617d6a542b3bbf0a721878434c729",
    "transactionHash": "0x5a2d6c23a27be44a8b695d0ebeb01906b17a15470d5ab35c24a5182dbd4f332f",
    "logs": [],
    "blockNumber": 13600304,
    "cumulativeGasUsed": "5177850",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4d1fa2e9fd4fdb5284870d53517b87d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CloseOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CommitOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"OpenOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"OptionTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callOrPut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetToTerminate\",\"type\":\"uint256\"}],\"name\":\"cancelWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"closePrevious\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"releasedDepositAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedDepositAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollDepositAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollDepositAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollCounterPartyAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollCounterPartyAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"internalType\":\"struct StructureData.MaturedState\",\"name\":\"_maturedState\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitCurrent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"completeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterParty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterPartyAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterPartyAssetAmountDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterPartyOption\",\"outputs\":[{\"internalType\":\"contract IPKKTStructureOption\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAssetAmountDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_terminates\",\"type\":\"uint256[]\"}],\"name\":\"depositFromCounterParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"dryRunSettlement\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollCounterPartyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollCounterPartyPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyPremium\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.SettlementAccountingResult\",\"name\":\"_result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pendingDepositAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedDepositAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedDepositAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyAssetAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StructureData.UserBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOptionSnapShot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalPending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReleasedDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReleasedCounterParty\",\"type\":\"uint256\"}],\"internalType\":\"struct StructureData.OptionSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockHeight\",\"type\":\"uint256\"}],\"name\":\"getRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTerminate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"pricePrecision\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_depositAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_counterPartyAsset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_counterPartyAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_callOrPut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_settler\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetToTerminate\",\"type\":\"uint256\"}],\"name\":\"initiateWithraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCancelWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInitiateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionHeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTerminate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"pricePrecision\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionVault\",\"outputs\":[{\"internalType\":\"contract IOptionVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redepositToCounterParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quota\",\"type\":\"uint256\"}],\"name\":\"rollToNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_counterParty\",\"type\":\"address\"}],\"name\":\"setCounterPartyOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"pricePrecision\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"}],\"internalType\":\"struct StructureData.OptionParameters\",\"name\":\"_optionParameters\",\"type\":\"tuple\"}],\"name\":\"setOptionParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleasedCounterPartyAssetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleasedDepositAssetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underSettlement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tempLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ongoingAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetToTerminate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetToTerminateForNextRound\",\"type\":\"uint256\"},{\"internalType\":\"uint232\",\"name\":\"totalRound\",\"type\":\"uint232\"},{\"internalType\":\"bool\",\"name\":\"hasState\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersInvolved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PKKTHodlBoosterOption.sol\":\"PKKTHodlBoosterOption\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/PKKTHodlBoosterOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n \\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\"; \\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n \\nimport {Utils} from \\\"./libraries/Utils.sol\\\";  \\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";     \\nimport \\\"./interfaces/IPKKTStructureOption.sol\\\";\\nimport \\\"./interfaces/IExecuteSettlement.sol\\\"; \\nimport \\\"./interfaces/IOptionVault.sol\\\"; \\n\\ncontract PKKTHodlBoosterOption is ERC20Upgradeable, AccessControlUpgradeable, ReentrancyGuardUpgradeable, IPKKTStructureOption, IExecuteSettlement {\\n    \\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using StructureData for StructureData.UserState;\\n    using Utils for uint256;\\n\\n    event Deposit(address indexed from, address indexed account, uint256 indexed round, uint256 amount, address option);\\n    event Withdraw(address indexed account, address indexed asset, uint256 amount);\\n    event CloseOption(uint256 indexed round);\\n    event CommitOption(uint256 indexed round);\\n    event OpenOption(uint256 indexed round);\\n    event OptionCreated(address indexed option, string name);\\n    event OptionTransfer(address from, address to, uint256 premium, uint256 round);\\n    uint8 public depositAssetAmountDecimals;\\n    uint8 public counterPartyAssetAmountDecimals;\\n      \\n    address public depositAsset;\\n    address public counterPartyAsset;\\n \\n    bool public isEth;\\n     uint256 public currentRound; \\n     mapping(uint256=>uint256) public optionHeights;\\n     mapping(uint256=>StructureData.OptionState) public optionStates;\\n     address[] public usersInvolved;  \\n     mapping(address=>StructureData.UserState) public userStates; \\n     bool public underSettlement; \\n     bool public callOrPut; //put accept stablecoin only, call accept asset coins only\\n     IPKKTStructureOption public counterPartyOption;\\n     address public counterParty;\\n     IOptionVault public optionVault;\\n     uint256 public totalReleasedDepositAssetAmount; \\n     uint256 public totalReleasedCounterPartyAssetAmount; \\n     \\n     //private data for complete withdrawal and redeposit \\n     mapping(address=>uint256) private releasedDepositAssetAmount;\\n     mapping(address=>uint256) private releasedCounterPartyAssetAmount;  \\n     uint256 private assetToTerminateForNextRound; \\n     uint256 private quota;\\n\\n\\n    //take if for eth, we make price precision as 4, then underlying price can be 40000000 for 4000$\\n    //for shib, we make price precision as 8, then underlying price can be 4000 for 0.00004000$\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address _depositAsset,\\n        address _counterPartyAsset,\\n        uint8 _depositAssetAmountDecimals,\\n        uint8 _counterPartyAssetAmountDecimals,\\n        address _vaultAddress,\\n        bool _callOrPut,\\n        address _settler\\n    ) public initializer {\\n        require(_vaultAddress != address(0), \\\"Empty vault address\\\");\\n        __ReentrancyGuard_init();\\n        ERC20Upgradeable.__ERC20_init(name, symbol);\\n        AccessControlUpgradeable.__AccessControl_init();\\n        // Contract deployer will be able to grant and revoke trading role\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        // Address capable of initiating and finizalizing settlement\\n        _setupRole(StructureData.SETTLER_ROLE, _settler);\\n        _setupRole(StructureData.SETTLER_ROLE, _vaultAddress);\\n        depositAsset = _depositAsset;\\n        counterPartyAsset = _counterPartyAsset;\\n        isEth = _depositAsset == address(0);\\n        depositAssetAmountDecimals = _depositAssetAmountDecimals;\\n        counterPartyAssetAmountDecimals = _counterPartyAssetAmountDecimals;\\n        optionVault = IOptionVault(_vaultAddress);\\n        callOrPut = _callOrPut;\\n        emit OptionCreated(address(this), symbol);\\n    } \\n    function setCounterPartyOption(address _counterParty) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_counterParty != address(this), \\\"Cannot set self as counter party\\\");\\n        counterPartyOption = IPKKTStructureOption(_counterParty);\\n        counterParty = _counterParty;\\n    }\\n          \\n    function decimals() public view override returns (uint8) {\\n        return depositAssetAmountDecimals;\\n    }\\n\\n    function vaultAddress() public view override returns(address) {\\n        return optionVault.getAddress();\\n    }\\n\\n\\n    function getAccountBalance() external override view returns (StructureData.UserBalance memory) {\\n       StructureData.UserState storage userState = userStates[msg.sender]; \\n\\n       StructureData.UserBalance memory result = StructureData.UserBalance({\\n           pendingDepositAssetAmount:userState.pendingAsset,\\n           releasedDepositAssetAmount: releasedDepositAssetAmount[msg.sender],\\n           releasedCounterPartyAssetAmount: releasedCounterPartyAssetAmount[msg.sender],\\n           lockedDepositAssetAmount:0 \\n       });\\n       if (underSettlement) { \\n           if (currentRound > 2) {\\n               result.lockedDepositAssetAmount = userState.deriveVirtualLocked(optionStates[currentRound - 2].premiumRate);\\n           }\\n           else { \\n                result.lockedDepositAssetAmount = userState.tempLocked;\\n           }\\n       }\\n       else {\\n           result.lockedDepositAssetAmount = userState.ongoingAsset;\\n       }\\n       return result;\\n    }\\n\\n    function getWithdrawable(address _asset) external override view returns(uint256) {\\n        if (_asset == depositAsset) { \\n            return optionStates[currentRound].totalAmount.add(totalReleasedDepositAssetAmount);\\n        }\\n        if (_asset == counterPartyAsset) {\\n            return totalReleasedCounterPartyAssetAmount;\\n        }\\n        revert(\\\"invalid asset\\\");\\n    }\\n\\n    function getOptionSnapShot() external override view returns(StructureData.OptionSnapshot memory) {\\n       StructureData.OptionState storage currentOption = optionStates[currentRound];\\n       StructureData.OptionState memory lockedOption;\\n       StructureData.OptionState memory onGoingOption;\\n       \\n       //StructureData.OptionState storage currentOption = optionStates[currentRound];\\n       StructureData.OptionSnapshot memory result = StructureData.OptionSnapshot({\\n            totalPending: currentOption.totalAmount,\\n            totalReleasedDeposit :  totalReleasedDepositAssetAmount,\\n            totalReleasedCounterParty : totalReleasedCounterPartyAssetAmount,\\n            totalLocked : 0 \\n       }); \\n       if (underSettlement) { \\n           lockedOption = optionStates[currentRound - 1];\\n           if (currentRound > 2) {\\n              onGoingOption = optionStates[currentRound - 2];\\n              result.totalLocked = lockedOption.totalAmount.add(\\n                onGoingOption.totalAmount.withPremium(onGoingOption.premiumRate)\\n              );\\n           }\\n           else{\\n               result.totalLocked = lockedOption.totalAmount;\\n           }\\n       }\\n       else if (currentRound > 1) {\\n           onGoingOption = optionStates[currentRound - 1];\\n           result.totalLocked = onGoingOption.totalAmount;\\n       }\\n       return result;\\n    }\\n\\n    function completeWithdraw(uint256 _amount, address _asset) external override nonReentrant { \\n       require(_amount > 0, \\\"!amount\\\");  \\n       require(!underSettlement, \\\"Being settled\\\");\\n       require(currentRound > 1, \\\"!No Matured\\\");  \\n       require(_asset == depositAsset || _asset == counterPartyAsset, \\\"Invalid asset address\\\");\\n       if (_asset == depositAsset) { \\n           releasedDepositAssetAmount[msg.sender] = releasedDepositAssetAmount[msg.sender].sub(_amount); \\n           totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.sub(_amount);\\n       }\\n       else { \\n           releasedCounterPartyAssetAmount[msg.sender] = releasedCounterPartyAssetAmount[msg.sender].sub(_amount);\\n           totalReleasedCounterPartyAssetAmount = totalReleasedCounterPartyAssetAmount.sub(_amount);\\n       }\\n       \\n        optionVault.withdraw(msg.sender, _amount, _asset, false);\\n    }\\n\\n\\n    function initiateWithraw(uint256 _assetToTerminate) external override {\\n        require(_assetToTerminate > 0 , \\\"!_assetToTerminate\\\"); \\n        require(currentRound > 1, \\\"No on going\\\");\\n        StructureData.UserState storage userState =  userStates[msg.sender]; \\n        if (underSettlement) {  \\n            uint256 newAssetToTerminate = userState.assetToTerminateForNextRound.add(_assetToTerminate); \\n            if (currentRound == 2) {\\n                require(newAssetToTerminate <=  userState.tempLocked, \\\"Exceeds available\\\"); \\n                StructureData.OptionState storage previousOption = optionStates[currentRound - 1]; \\n                previousOption.totalTerminate = previousOption.totalTerminate.add(_assetToTerminate);  \\n            }\\n            else {\\n                StructureData.OptionState storage onGoingOption = optionStates[currentRound - 2];\\n                uint256 totalLocked = userState.deriveVirtualLocked(onGoingOption.premiumRate); \\n                require(newAssetToTerminate <=  totalLocked, \\\"Exceeds available\\\");   \\n                //store temporarily\\n                assetToTerminateForNextRound = assetToTerminateForNextRound.add(_assetToTerminate); \\n            } \\n            userState.assetToTerminateForNextRound = newAssetToTerminate;\\n        }\\n        else {\\n            uint256 newAssetToTerminate = userState.assetToTerminate.add(_assetToTerminate); \\n            require(newAssetToTerminate <=  userState.ongoingAsset, \\\"Exceeds available\\\");\\n            userState.assetToTerminate = newAssetToTerminate;\\n            StructureData.OptionState storage previousOption = optionStates[currentRound - 1];\\n            previousOption.totalTerminate = previousOption.totalTerminate.add(_assetToTerminate);\\n        }\\n\\n    }\\n\\n    function cancelWithdraw(uint256 _assetToTerminate) external override { \\n        require(_assetToTerminate > 0 , \\\"!_assetToTerminate\\\"); \\n        require(currentRound > 1, \\\"No on going\\\");\\n        StructureData.UserState storage userState =  userStates[msg.sender]; \\n        if (underSettlement) {  \\n            userState.assetToTerminateForNextRound = userState.assetToTerminateForNextRound.sub(_assetToTerminate); \\n            if (currentRound == 2) { \\n                StructureData.OptionState storage previousOption = optionStates[currentRound - 1]; \\n                previousOption.totalTerminate = previousOption.totalTerminate.sub(_assetToTerminate);  \\n            }\\n            else { \\n                //store temporarily\\n                assetToTerminateForNextRound = assetToTerminateForNextRound.sub(_assetToTerminate); \\n            }  \\n        }\\n        else {  \\n            userState.assetToTerminate = userState.assetToTerminate.sub(_assetToTerminate); \\n            StructureData.OptionState storage previousOption = optionStates[currentRound - 1];\\n            previousOption.totalTerminate = previousOption.totalTerminate.sub(_assetToTerminate);\\n        }\\n\\n    } \\n    \\n    \\n    function maxInitiateWithdraw() external override {  \\n        require(currentRound > 1, \\\"No on going\\\");\\n        StructureData.UserState storage userState =  userStates[msg.sender]; \\n        \\n        if (underSettlement) {    \\n            if (currentRound == 2) { \\n                uint256 diff = userState.tempLocked.sub(userState.assetToTerminateForNextRound); \\n                if (diff > 0) { \\n                    userState.assetToTerminateForNextRound = userState.tempLocked; \\n                    StructureData.OptionState storage previousOption = optionStates[currentRound - 1]; \\n                    previousOption.totalTerminate = previousOption.totalTerminate.add(diff);  \\n                    //console.log(\\\"maxInitiateWithdraw %s %d %d\\\", name(), previousOption.round,  previousOption.totalTerminate);\\n                }\\n            }\\n            else {\\n                StructureData.OptionState storage onGoingOption = optionStates[currentRound - 2];\\n                uint256 totalLocked = userState.deriveVirtualLocked(onGoingOption.premiumRate); \\n                uint256 diff = totalLocked.sub(userState.assetToTerminateForNextRound);\\n                if (diff > 0) { \\n                    userState.assetToTerminateForNextRound = totalLocked;\\n                    //store temporarily\\n                    assetToTerminateForNextRound = assetToTerminateForNextRound.add(diff);  \\n                }\\n            } \\n        }\\n        else {    \\n            uint256 onGoing = userState.ongoingAsset;\\n            uint256 diff = onGoing.sub(userState.assetToTerminate);\\n            if (diff > 0) { \\n                userState.assetToTerminate = onGoing; \\n                StructureData.OptionState storage previousOption = optionStates[currentRound - 1]; \\n                previousOption.totalTerminate = previousOption.totalTerminate.add(diff);  \\n            }\\n        }\\n \\n    }\\n\\n    function maxCancelWithdraw() external override {   \\n        require(currentRound > 1, \\\"No on going\\\");\\n        StructureData.UserState storage userState =  userStates[msg.sender];  \\n        if (underSettlement) {   \\n            if (currentRound == 2) {  \\n                StructureData.OptionState storage previousOption = optionStates[currentRound - 1]; \\n                previousOption.totalTerminate = previousOption.totalTerminate.sub(userState.assetToTerminateForNextRound);   \\n            }\\n            else { \\n                //store temporarily\\n                assetToTerminateForNextRound = assetToTerminateForNextRound.sub(userState.assetToTerminateForNextRound);  \\n            }  \\n            userState.assetToTerminateForNextRound = 0;\\n        }\\n        else {   \\n            StructureData.OptionState storage onGoingOption = optionStates[currentRound - 1];\\n            onGoingOption.totalTerminate = onGoingOption.totalTerminate.sub(userState.assetToTerminate);\\n            userState.assetToTerminate = 0; \\n        } \\n    }\\n    \\n    \\n    function withdraw(uint256 _amount, address _asset) external override nonReentrant { \\n       require(_amount > 0, \\\"!amount\\\");  \\n       require(!underSettlement, \\\"Being settled\\\");  \\n       require(_asset == depositAsset || _asset == counterPartyAsset, \\\"Invalid asset address\\\"); \\n       if (_asset == depositAsset) {\\n           //todo: 0 out released amount if missing balance from trader\\n           uint256 releasedAmount = releasedDepositAssetAmount[msg.sender];\\n           if (releasedAmount <= _amount) { \\n               StructureData.UserState storage userState =  userStates[msg.sender];  \\n               uint256 redeemAmount = _amount.sub(releasedAmount);\\n               userState.pendingAsset = userState.pendingAsset.sub(redeemAmount);\\n               releasedDepositAssetAmount[msg.sender] = 0; \\n               totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.sub(releasedAmount);\\n               StructureData.OptionState storage optionState = optionStates[currentRound];\\n               optionState.totalAmount = optionState.totalAmount.sub(redeemAmount);  \\n           }\\n           else { \\n               releasedDepositAssetAmount[msg.sender] = releasedAmount.sub(_amount); \\n               totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.sub(_amount);\\n           }\\n       }\\n       else {\\n \\n           //same result as completeWithdraw  \\n           releasedCounterPartyAssetAmount[msg.sender] = releasedCounterPartyAssetAmount[msg.sender].sub(_amount);\\n           totalReleasedCounterPartyAssetAmount = totalReleasedCounterPartyAssetAmount.sub(_amount);\\n       }\\n        optionVault.withdraw(msg.sender, _amount, _asset, false);\\n        emit Withdraw(msg.sender, _asset, _amount);\\n    }\\n \\n\\n    //only allowed for re-depositing the matured deposit asset, the max can be deducted from getMatured() with asset matched depositAsset in address\\n    function redeposit(uint256 _amount) external override nonReentrant { \\n       require(currentRound > 1, \\\"!No Matured\\\");\\n       require(_amount > 0, \\\"!amount\\\");  \\n       releasedDepositAssetAmount[msg.sender] = releasedDepositAssetAmount[msg.sender].sub(_amount);\\n       totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.sub(_amount);\\n       _depositFor(msg.sender, _amount, currentRound, 0);\\n    }\\n\\n    //only allowed for re-depositing the matured counterParty asset, the max can be deducted from getMatured() with asset matched counterPartyAsset in address\\n    function redepositToCounterParty(uint256 _amount) external override { \\n       require(!underSettlement, \\\"Being settled\\\");\\n       require(currentRound > 1, \\\"!No Matured\\\");\\n       require(_amount > 0, \\\"!amount\\\");  \\n       releasedCounterPartyAssetAmount[msg.sender] = releasedCounterPartyAssetAmount[msg.sender].sub(_amount);\\n       totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.sub(_amount);\\n       address[] memory addresses = new address[](1);\\n       uint256[] memory amounts = new uint256[](1);\\n       uint256[] memory terminates = new uint256[](1);\\n       addresses[0] = msg.sender;\\n       amounts[0] = _amount;\\n       terminates[0] = 0;\\n       counterPartyOption.depositFromCounterParty(addresses, amounts, terminates);\\n    }\\n\\n\\n    //todo: what if quata is not enough\\n    function depositFromCounterParty(address[] memory addresses, uint256[] memory _amounts,  uint256[] memory _terminates) override external {\\n        require(msg.sender == counterParty, \\\"Only counter party option can call this method\\\");\\n        uint256 round = underSettlement ? currentRound - 1 : currentRound;\\n        for(uint256 i = 0; i < 0 ; i++){\\n            _depositFor(addresses[i], _amounts[i], round, _terminates[i]);\\n        } \\n    }\\n    //deposit eth\\n    function depositETH() external payable override nonReentrant{ \\n       require(currentRound > 0, \\\"!Started\\\");\\n       require(isEth, \\\"!ETH\\\");\\n       require(msg.value > 0, \\\"!value\\\"); \\n       \\n        //todo: convert to weth  \\n       _depositFor(msg.sender, msg.value, currentRound, 0);\\n       payable(vaultAddress()).transfer(msg.value);\\n    }\\n\\n    //deposit other erc20 coin, take wbtc\\n    function deposit(uint256 _amount) external override nonReentrant{   \\n        require(currentRound > 0, \\\"!Started\\\");\\n        require(!isEth, \\\"!ERC20\\\");\\n        require(_amount > 0, \\\"!amount\\\"); \\n        _depositFor(msg.sender, _amount,currentRound, 0);  \\n        IERC20(depositAsset).safeTransferFrom(msg.sender, vaultAddress(), _amount);\\n    }\\n \\n  \\n    function _depositFor(address _userAddress, uint256 _amount, uint256 _round, uint256 _toTerminate) private { \\n        StructureData.OptionState storage optionState = optionStates[_round];\\n        require(optionState.totalAmount.add(_amount) <= quota, \\\"Not enough quota\\\");\\n        StructureData.UserState storage userState =  userStates[_userAddress]; \\n        //first time added\\n        if (!userState.hasState) { \\n            userState.hasState = true;\\n            usersInvolved.push(_userAddress);\\n        } \\n        if (_round != currentRound) { \\n            userState.tempLocked = userState.tempLocked.add(_amount); \\n            userState.assetToTerminateForNextRound = userState.assetToTerminateForNextRound.add(_toTerminate);\\n            assetToTerminateForNextRound = assetToTerminateForNextRound.add(_toTerminate);\\n        }\\n        else { \\n            userState.pendingAsset = userState.pendingAsset.add(_amount); \\n        }\\n        optionState.totalAmount = optionState.totalAmount.add(_amount);\\n        \\n        emit Deposit(msg.sender, _userAddress, _round, _amount, address(this));\\n    }\\n\\n \\n    function redeem(uint256 _amount) external override nonReentrant{  \\n         require(_amount > 0, \\\"!amount\\\"); \\n         StructureData.UserState storage userState =  userStates[msg.sender];  \\n         userState.pendingAsset = userState.pendingAsset.sub(_amount); \\n         StructureData.OptionState storage optionState = optionStates[currentRound];\\n         optionState.totalAmount = optionState.totalAmount.sub(_amount);\\n         optionVault.withdraw(msg.sender, _amount, depositAsset, true); \\n         emit Withdraw(msg.sender, depositAsset, _amount);\\n    }\\n \\n  \\n    //used to render the history at client side, reading the minting transactions of a specific address,\\n    //for each transaction, read the blockheight and call this method to get the result\\n    //the blockheight is the the height when the round is committed  \\n    function getRoundData(uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\\n        return optionStates[optionHeights[_blockHeight]];\\n    } \\n\\n\\n   /*\\n    *  Following operations can only be triggered from ISettlementAggregator with the settler role\\n    */\\n\\n   //first, open t+1 round\\n   function rollToNext(uint256 _quota) external override onlyRole(StructureData.SETTLER_ROLE) returns(uint256 _pendingAmount){   \\n\\n       require(!underSettlement, \\\"Being settled\\\"); \\n      \\n       if (currentRound > 1) {\\n           require(optionStates[currentRound-1].strikePrice > 0,  \\\"Strike Price not set\\\");\\n       } \\n\\n       underSettlement = true; \\n       quota = _quota;\\n        currentRound = currentRound + 1;\\n        StructureData.OptionState memory currentOption =  \\n        StructureData.OptionState({\\n                            round: currentRound,\\n                            totalAmount: 0,\\n                            totalTerminate: 0,\\n                            premiumRate:  0,\\n                            pricePrecision: 0,\\n                            strikePrice: 0,\\n                            executed: false,\\n                            callOrPut: callOrPut\\n                        });\\n        optionStates[currentRound] = currentOption; \\n       if (currentRound > 1) {\\n            uint256 userCount = usersInvolved.length;\\n            for (uint i=0; i < userCount; i++) {\\n                address userAddress = usersInvolved[i];\\n                StructureData.UserState storage userState = userStates[userAddress]; \\n                if(userState.pendingAsset != 0) {  \\n                    userState.tempLocked = userState.pendingAsset;  \\n                }   \\n                userState.pendingAsset = 0;\\n            }\\n       }\\n       else {\\n           underSettlement = false;\\n       }\\n        emit OpenOption(currentRound); \\n        if (currentRound > 1) {\\n            return optionStates[currentRound-1].totalAmount;\\n        }\\n        return 0;\\n    }\\n    \\n\\n   //then dry run settlement and get accounting result\\n   function dryRunSettlement(bool _execute) external override view onlyRole(StructureData.SETTLER_ROLE) returns(StructureData.SettlementAccountingResult memory _result) {\\n        require(underSettlement, \\\"Not being settled\\\");\\n        require(currentRound > 1, \\\"Nothing to settle\\\");\\n\\n        StructureData.OptionState storage lockedOption = optionStates[currentRound - 1]; \\n        StructureData.SettlementAccountingResult memory result = StructureData.SettlementAccountingResult({\\n            option: address(this),\\n            round: currentRound - 1,\\n            depositAmount: lockedOption.totalAmount,\\n            executed: _execute,\\n            autoRollAmount: 0,\\n            autoRollPremium: 0,\\n            releasedAmount: 0,\\n            releasedPremium: 0,\\n            autoRollCounterPartyAmount: 0,\\n            autoRollCounterPartyPremium: 0,\\n            releasedCounterPartyAmount: 0,\\n            releasedCounterPartyPremium: 0\\n        });\\n       if (currentRound > 2) { \\n            StructureData.OptionState memory previousOptionState = optionStates[currentRound - 2];\\n            StructureData.MaturedState memory maturedState = StructureData.calculateMaturity(_execute, previousOptionState, callOrPut,\\n            depositAssetAmountDecimals, counterPartyAssetAmountDecimals); \\n            if (_execute) { \\n                result.autoRollCounterPartyAmount = maturedState.autoRollCounterPartyAssetAmount;\\n                result.autoRollCounterPartyPremium = maturedState.autoRollCounterPartyAssetPremiumAmount;\\n                result.releasedCounterPartyAmount = maturedState.releasedCounterPartyAssetAmount;\\n                result.releasedCounterPartyPremium = maturedState.releasedCounterPartyAssetPremiumAmount;\\n            }\\n            else { \\n                result.autoRollAmount = maturedState.autoRollDepositAssetAmount;\\n                result.autoRollPremium = maturedState.autoRollDepositAssetPremiumAmount;\\n                result.releasedAmount = maturedState.releasedDepositAssetAmount;\\n                result.releasedPremium = maturedState.releasedDepositAssetPremiumAmount;\\n            } \\n       } \\n       return result;\\n   }\\n\\n   //then, make decision based on dry run result and close t-1 round\\n   function closePrevious(bool _execute) external override onlyRole(StructureData.SETTLER_ROLE)  \\n   returns(StructureData.MaturedState memory _maturedState) {   \\n        require(underSettlement, \\\"Not being settled\\\");\\n        require (currentRound > 2, \\\"no matured\\\");\\n        uint maturedRound = currentRound - 2;\\n        StructureData.OptionState storage previousOptionState = optionStates[maturedRound];   \\n        StructureData.MaturedState memory maturedState = StructureData.calculateMaturity(_execute, previousOptionState, callOrPut,\\n            depositAssetAmountDecimals, counterPartyAssetAmountDecimals);     \\n        previousOptionState.executed = _execute;\\n        if (_execute) {\\n            totalReleasedCounterPartyAssetAmount = totalReleasedCounterPartyAssetAmount.\\n            add(maturedState.releasedCounterPartyAssetAmount).add(maturedState.releasedCounterPartyAssetPremiumAmount); \\n        }\\n        else {\\n            totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.\\n            add(maturedState.releasedDepositAssetAmount).add(maturedState.releasedDepositAssetPremiumAmount);\\n\\n        }\\n        if (previousOptionState.totalAmount > 0) { \\n            autoRoll(_execute, previousOptionState, maturedState);\\n        }    \\n        emit CloseOption(maturedRound);\\n        return maturedState;\\n   }\\n\\n   //next, commit t round\\n   function commitCurrent() external override onlyRole(StructureData.SETTLER_ROLE) nonReentrant {  \\n        require (currentRound > 1, \\\"not started\\\");\\n        if(currentRound <= 2 && !underSettlement) {\\n           underSettlement = true;\\n       }\\n        require(underSettlement, \\\"Not being settled\\\");\\n        \\n        uint256 lockedRound = currentRound - 1;\\n        StructureData.OptionState storage optionState = optionStates[lockedRound];  \\n        //mint for the current option\\n        _mint(address(this), optionState.totalAmount);\\n        uint256 userCount = usersInvolved.length;\\n        for (uint i=0; i < userCount; i++) {\\n            address userAddress = usersInvolved[i];\\n            StructureData.UserState storage userState = userStates[userAddress]; \\n            if (userState.assetToTerminateForNextRound != 0){ \\n                userState.assetToTerminate = userState.assetToTerminateForNextRound;\\n                userState.assetToTerminateForNextRound = 0;\\n            } \\n            else if (userState.assetToTerminate != 0){\\n                userState.assetToTerminate = 0;\\n            }            \\n            if(userState.tempLocked != 0) {  \\n                //transfer each user a share of the option to trigger transfer event\\n                //can be used to calculate the user option selling operations\\n                //utilizing some web3 indexed services, take etherscan api/graphql etc.\\n                _transfer(address(this), userAddress, userState.tempLocked);\\n                emit OptionTransfer(address(this), userAddress, optionState.premiumRate, optionState.round);\\n                userState.ongoingAsset = userState.tempLocked; \\n                userState.tempLocked = 0; \\n            } \\n         }\\n         \\n        optionState.totalTerminate = optionState.totalTerminate.add(assetToTerminateForNextRound); \\n        assetToTerminateForNextRound = 0;\\n        optionHeights[lockedRound] = block.number; //commit current option at current block\\n        emit CommitOption(lockedRound);\\n        underSettlement = false;\\n   }\\n       \\n   //at last, specify option parameters\\n   function setOptionParameters(StructureData.OptionParameters memory _optionParameters) external override onlyRole(StructureData.SETTLER_ROLE) {\\n        \\n        require (currentRound > 1, \\\"not started\\\"); \\n        require(!underSettlement, \\\"Being settled\\\"); \\n        uint256 previousRound = currentRound - 1;\\n        StructureData.OptionState storage optionState = optionStates[previousRound]; \\n        require(optionState.strikePrice == 0, \\\"Strike Price already set\\\");\\n        optionState.strikePrice = _optionParameters.strikePrice;\\n        optionState.premiumRate = _optionParameters.premiumRate;\\n        optionState.pricePrecision = _optionParameters.pricePrecision;\\n   }\\n\\n \\n\\n\\n   address[] private autoRolledUsers;\\n   uint256[] private autoRolledAmounts;\\n   uint256[] private toTerminateAmounts;\\n\\n   function autoRoll(bool _counterParty, StructureData.OptionState memory _optionState, StructureData.MaturedState memory _maturedState) private {\\n        uint256 userCount = usersInvolved.length; \\n        uint256 totalAutoRollBase = _optionState.totalAmount.sub(_optionState.totalTerminate);\\n        if (!_counterParty) {\\n            uint256 lockedRound = currentRound - 1; \\n            uint256 totalReleased = _maturedState.releasedDepositAssetAmount.add(_maturedState.releasedDepositAssetPremiumAmount);\\n            uint256 totalAutoRoll = _maturedState.autoRollDepositAssetAmount.add(_maturedState.autoRollDepositAssetPremiumAmount);\\n            for (uint i=0; i < userCount; i++) {\\n                address userAddress = usersInvolved[i];\\n                StructureData.UserState storage userState = userStates[userAddress];  \\n                if (userState.ongoingAsset == 0) {\\n                    userState.assetToTerminate = 0;\\n                    continue;\\n                }\\n                \\n                uint256 amountToTerminate = Utils.getAmountToTerminate(totalReleased, userState.assetToTerminate, _optionState.totalTerminate);\\n                if (amountToTerminate > 0) {\\n                    releasedDepositAssetAmount[userAddress] = \\n                    releasedDepositAssetAmount[userAddress].add(amountToTerminate); \\n                }\\n                uint256 remainingAmount = Utils.getAmountToTerminate(totalAutoRoll, userState.ongoingAsset.sub(userState.assetToTerminate), totalAutoRollBase);\\n                if (remainingAmount > 0) { \\n                    _depositFor(userAddress, remainingAmount, lockedRound, 0);\\n                } \\n                \\n                userState.assetToTerminate = 0;\\n            }  \\n            return;\\n        }\\n\\n        uint256 totalReleased2 = _maturedState.releasedCounterPartyAssetAmount.add(_maturedState.releasedCounterPartyAssetPremiumAmount);\\n        uint256 totalAutoRoll2 = _maturedState.autoRollCounterPartyAssetAmount.add(_maturedState.autoRollCounterPartyAssetPremiumAmount);  \\n        \\n        //debit assetToTerminateForNextRound if executed\\n        if (assetToTerminateForNextRound > 0 && totalAutoRoll2 > 0) {\\n             uint256 virtualAutoRoll = totalAutoRollBase.withPremium(_optionState.premiumRate);\\n             if (virtualAutoRoll >= assetToTerminateForNextRound) {\\n                 assetToTerminateForNextRound = 0;\\n             }\\n             else {\\n                 assetToTerminateForNextRound = assetToTerminateForNextRound.sub(virtualAutoRoll);\\n             }\\n        }\\n        for (uint i=0; i < userCount; i++) {\\n            address userAddress = usersInvolved[i];\\n            StructureData.UserState storage userState = userStates[userAddress];  \\n            \\n            uint256 onGoing = userState.ongoingAsset;  \\n            if (onGoing == 0) {\\n                userState.assetToTerminate = 0;\\n                continue;\\n            } \\n            uint256 amountToTerminate = Utils.getAmountToTerminate(totalReleased2, userState.assetToTerminate, _optionState.totalTerminate);\\n            if (amountToTerminate > 0) {\\n                releasedCounterPartyAssetAmount[userAddress] = \\n                releasedCounterPartyAssetAmount[userAddress].add(amountToTerminate);\\n            }\\n            onGoing = onGoing.sub(userState.assetToTerminate);\\n            uint256 remainingAmount = Utils.getAmountToTerminate(totalAutoRoll2, onGoing, totalAutoRollBase);\\n            if (remainingAmount > 0){   \\n                autoRolledAmounts.push(remainingAmount);\\n                autoRolledUsers.push(userAddress); \\n                (uint256 onGoingTerminate,) = userState.deriveWithdrawRequest(_optionState.premiumRate);\\n                if (onGoingTerminate != 0) {\\n                    uint256 virtualOnGoing =  onGoing.withPremium(_optionState.premiumRate);\\n                    onGoingTerminate = Utils.getAmountToTerminate(remainingAmount, onGoingTerminate, virtualOnGoing);\\n                } \\n                toTerminateAmounts.push(onGoingTerminate);\\n            } \\n            userState.assetToTerminate = 0;\\n        } \\n        \\n        uint256 count = autoRolledAmounts.length;\\n        if (count == 0) {\\n            return;\\n        }\\n        \\n        address[] memory localAutoRolledUsers = new address[](count);\\n        uint256[] memory localAutoRolledAmounts = new uint256[](count);\\n        uint256[] memory localToTerminateAmounts = new uint256[](count);\\n        for(uint i = 0; i < count; i++) {\\n            localAutoRolledUsers[i] = autoRolledUsers[i];\\n            localAutoRolledAmounts[i] = autoRolledAmounts[i];\\n            localToTerminateAmounts[i] = toTerminateAmounts[i];\\n        }\\n        delete autoRolledUsers;\\n        delete autoRolledAmounts;\\n        delete toTerminateAmounts;\\n        counterPartyOption.depositFromCounterParty(localAutoRolledUsers, localAutoRolledAmounts, localToTerminateAmounts); \\n   }\\n\\n}\",\"keccak256\":\"0x2352073d8ed1bc145b7828764cd2e264836559c78fe679047f1ae529b6c7cc3e\",\"license\":\"MIT\"},\"contracts/interfaces/IExecuteSettlement.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.4;\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";  \\ninterface IExecuteSettlement { \\n \\n    //open a new option\\n   function rollToNext(uint256 _quota) external returns(uint256 _pendingAmount); \\n \\n   //calculate the result of on going option    \\n   function closePrevious(bool _execute) external returns(StructureData.MaturedState memory _maturedState);\\n\\n   //close pending option and autoroll if capacity is enough based on the maturity result\\n   function commitCurrent() external ; \\n\\n   function setOptionParameters(StructureData.OptionParameters memory _optionParameters) external;\\n   \\n   function dryRunSettlement(bool _execute) external view returns(StructureData.SettlementAccountingResult memory _result);\\n}\\n\",\"keccak256\":\"0xb953dc12ab89869d4d308dd6ef603cff5687ab6e2ae43eea9f9775e1e556a465\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOptionVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.4;\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";\\n\\ninterface IOptionVault { \\n    function addOption(address _optionContract) external;\\n    function removeOption(address _optionContract) external;\\n    function getAddress() external view returns(address);\\n    function withdraw(address _target, uint256 _amount, address _contractAddress, bool _redeem) external;\\n     \\n}\\n\",\"keccak256\":\"0x9dd358b83f74379263fe03bdfc5727a7237193219e913bbcb270c104fb61437b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPKKTStructureOption.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.4;\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";\\n \\ninterface IPKKTStructureOption {\\n\\n    function setCounterPartyOption(address _counterParty) external;\\n    \\n    function getAccountBalance() external view returns (StructureData.UserBalance memory); \\n\\n    //ISettlementAggregator.balanceEnough needs to be called if there is any release amount\\n    function getOptionSnapShot() external view returns(StructureData.OptionSnapshot memory);\\n \\n    function getWithdrawable(address _asset) external view returns(uint256); \\n\\n    \\n    function vaultAddress() external view returns(address);\\n\\n    //deposit eth\\n    function depositETH() external payable;\\n\\n    //deposit other erc20 coin, take wbtc or stable coin\\n    function deposit(uint256 _amount) external;\\n\\n    //redeem unsettled amount\\n    function redeem(uint256 _amount) external;  \\n\\n    //complete withdraw happens on the option vault\\n    function initiateWithraw(uint256 _assetToTerminate) external; \\n\\n    function cancelWithdraw(uint256 _assetToTerminate) external;\\n\\n    function maxInitiateWithdraw() external;\\n\\n    function maxCancelWithdraw() external;\\n    \\n    function withdraw(uint256 _amount, address _asset) external; \\n\\n    function completeWithdraw(uint256 _amount, address _asset) external; \\n\\n    //only allowed for re-depositing the matured deposit asset, the max can be deducted from getMatured() with asset matched depositAsset in address\\n    function redeposit(uint256 _amount) external;\\n\\n\\n    //only allowed for re-depositing the matured counterParty asset, the max can be deducted from getMatured() with asset matched counterPartyAsset in address\\n    function redepositToCounterParty(uint256 _amount) external;\\n\\n    //can only be called from counterparty option \\n    function depositFromCounterParty(address[] memory _addresses, uint256[] memory _amounts, uint256[] memory _terminates) external;\\n \\n\\n    //used to render the history at client side, reading the minting transactions of a specific address,\\n    //for each transaction, read the blockheight and call this method to get the result\\n    //the blockheight is the the height when the round is committed \\n    function getRoundData(uint256 _blockHeight) external view returns(StructureData.OptionState memory);\\n\\n \\n}\\n\\n\",\"keccak256\":\"0x12a72f02c6c0b95195e7b72a861fdbafb6e45d7925f7f976c8daa09e4220d2fe\",\"license\":\"UNLICENSED\"},\"contracts/libraries/StructureData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport './Utils.sol';\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nlibrary StructureData {\\n     \\n    using SafeMath for uint256;\\n    \\n    bytes32 public constant OPTION_ROLE = keccak256(\\\"OPTION_ROLE\\\");\\n    bytes32 public constant SETTLER_ROLE = keccak256(\\\"SETTLER_ROLE\\\");\\n     uint8 public constant MATUREROUND= 1; //7 for daily settlement, 1 for daily settlement\\n     using Utils for uint256;\\n     struct OptionParameters {\\n         uint256 strikePrice;  // strike price if executed\\n         address option;\\n         uint8 pricePrecision;\\n         uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n     }\\n\\n    struct OptionState {\\n         uint256 round;\\n         uint256 totalAmount; \\n         uint256 totalTerminate;   \\n         uint256 strikePrice; \\n         uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n         uint8 pricePrecision; \\n         bool executed; \\n         bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral;\\n    }\\n \\n   struct MaturedState {\\n       uint256 releasedDepositAssetAmount;\\n       uint256 releasedDepositAssetPremiumAmount;\\n       uint256 releasedCounterPartyAssetAmount; \\n       uint256 releasedCounterPartyAssetPremiumAmount; \\n       uint256 autoRollDepositAssetAmount;\\n       uint256 autoRollDepositAssetPremiumAmount;\\n       uint256 autoRollCounterPartyAssetAmount; \\n       uint256 autoRollCounterPartyAssetPremiumAmount; \\n\\n       uint256 round;\\n       \\n   }\\n\\n    enum OptionType {\\n        HodlBooster,\\n        VolAlpha\\n    }\\n\\n    /*struct UserState {\\n        uint256 pendingAsset; //for current round\\n        uint256 tempLocked;//asset not sent to trader yet, but closed for deposit\\n        uint256[MATUREROUND] ongoingAsset; //for previous 7 rounds\\n        uint256 assetToTerminate;  \\n        uint256 assetToTerminateForNextRound;  \\n        uint8 nextCursor; //nextCursor\\n        uint232 totalRound; \\n        bool hasState;\\n    }*/\\n\\n    struct UserState {\\n        uint256 pendingAsset; //for current round\\n        uint256 tempLocked;//asset not sent to trader yet, but closed for deposit\\n        uint256 ongoingAsset; \\n        uint256 assetToTerminate;  \\n        uint256 assetToTerminateForNextRound;   \\n        uint232 totalRound; \\n        bool hasState;\\n    }\\n\\n    struct OptionSnapshot {\\n        uint256 totalPending;\\n        uint256 totalLocked;\\n        uint256 totalReleasedDeposit;\\n        uint256 totalReleasedCounterParty; \\n    }\\n\\n    struct UserBalance {\\n        uint256 pendingDepositAssetAmount; \\n        uint256 lockedDepositAssetAmount;  \\n        uint256 releasedDepositAssetAmount;\\n        uint256 releasedCounterPartyAssetAmount;\\n    }\\n\\n \\n\\n    function deriveWithdrawRequest(UserState memory userState, uint256 premiumRate) internal pure returns (uint256 _onGoingRoundAmount, uint256 _lockedRoundAmount) {\\n       if (userState.tempLocked == 0) {\\n           return (userState.assetToTerminateForNextRound, 0);\\n       }\\n       uint256 onGoing = userState.ongoingAsset;\\n       if (onGoing == 0) {\\n           return (0, userState.assetToTerminateForNextRound);\\n       }\\n       onGoing = onGoing.sub(userState.assetToTerminate);\\n       uint256 virtualOnGoing = onGoing.withPremium(premiumRate);\\n       if (userState.assetToTerminateForNextRound <= virtualOnGoing) {\\n           return (userState.assetToTerminateForNextRound, 0);\\n       }\\n       else {\\n           return (virtualOnGoing, userState.assetToTerminateForNextRound.sub(virtualOnGoing));\\n       }\\n    }\\n    function deriveVirtualLocked(UserState memory userState, uint256 premiumRate) internal pure returns (uint256) {\\n        uint256 onGoing = userState.ongoingAsset;\\n        if (onGoing == 0) {\\n            return userState.tempLocked;\\n        }\\n        onGoing = onGoing.sub(userState.assetToTerminate);\\n        if (userState.tempLocked == 0) {\\n            return onGoing.withPremium(premiumRate);\\n        }\\n        return userState.tempLocked.add(onGoing.withPremium(premiumRate));\\n        \\n    }\\n\\n       \\n     function calculateMaturity(bool _execute, StructureData.OptionState memory _optionState, bool _callOrPut, \\n     uint8 _depositAssetAmountDecimals, uint8 _counterPartyAssetAmountDecimals) internal pure\\n     returns(StructureData.MaturedState memory) {\\n       StructureData.MaturedState memory state = StructureData.MaturedState({\\n          releasedDepositAssetAmount: 0,\\n          releasedDepositAssetPremiumAmount: 0,\\n          autoRollDepositAssetAmount: 0,\\n          autoRollDepositAssetPremiumAmount: 0,\\n          releasedCounterPartyAssetAmount: 0, \\n          releasedCounterPartyAssetPremiumAmount: 0,\\n          autoRollCounterPartyAssetAmount: 0,\\n          autoRollCounterPartyAssetPremiumAmount: 0,\\n          round: _optionState.round\\n       });  \\n        if (_execute) {  \\n\\n           uint256 maturedCounterPartyAssetAmount = _callOrPut ? \\n            _optionState.totalAmount.mul(_optionState.strikePrice).mul(10**_counterPartyAssetAmountDecimals).\\n           div(10**(_optionState.pricePrecision + _depositAssetAmountDecimals))  :  \\n\\n           _optionState.totalAmount.mul(10**(_optionState.pricePrecision + _counterPartyAssetAmountDecimals)).\\n           div(_optionState.strikePrice).div(10** _depositAssetAmountDecimals); \\n \\n           uint256 maturedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetAmount.premium(_optionState.premiumRate); \\n           if (_optionState.totalTerminate > 0) { \\n               state.releasedCounterPartyAssetAmount = Utils.getAmountToTerminate(maturedCounterPartyAssetAmount, _optionState.totalTerminate, _optionState.totalAmount);\\n               state.releasedCounterPartyAssetPremiumAmount = Utils.getAmountToTerminate(maturedCounterPartyAssetPremiumAmount, _optionState.totalTerminate, _optionState.totalAmount);\\n           }\\n           state.autoRollCounterPartyAssetAmount = maturedCounterPartyAssetAmount.sub(state.releasedCounterPartyAssetAmount);\\n           state.autoRollCounterPartyAssetPremiumAmount = maturedCounterPartyAssetPremiumAmount.sub(state.releasedCounterPartyAssetPremiumAmount);\\n        }\\n        else { \\n           uint256 maturedDepositAssetAmount = _optionState.totalAmount;\\n           uint256 maturedDepositAssetPremiumAmount = maturedDepositAssetAmount.premium(_optionState.premiumRate);\\n           if (_optionState.totalTerminate > 0) { \\n               state.releasedDepositAssetAmount = Utils.getAmountToTerminate(maturedDepositAssetAmount, _optionState.totalTerminate, _optionState.totalAmount);\\n               state.releasedDepositAssetPremiumAmount = Utils.getAmountToTerminate(maturedDepositAssetPremiumAmount, _optionState.totalTerminate, _optionState.totalAmount);\\n           }\\n           state.autoRollDepositAssetAmount = maturedDepositAssetAmount.sub(state.releasedDepositAssetAmount);\\n           state.autoRollDepositAssetPremiumAmount = maturedDepositAssetPremiumAmount.sub(state.releasedDepositAssetPremiumAmount);\\n\\n        }\\n         return state;\\n     }\\n\\n\\n    struct OptionPairDefinition{\\n        address callOption;\\n        address putOption;\\n        address callOptionDeposit;\\n        address putOptionDeposit;\\n    }\\n    struct SettlementAccountingResult {\\n        uint256 round;\\n        uint256 depositAmount;  \\n        uint256 autoRollAmount; //T-1 Carried (filled only when not executed)\\n        uint256 autoRollPremium; //Premium (filled only when not executed)\\n        //maturedAmount+maturedPremium = requested withdrawal for deposit asset(filled only when not executed and with withdraw request)\\n        uint256 releasedAmount;  \\n        uint256 releasedPremium;\\n        //autoRollCounterPartyAmount + autoRollCounterPartyPremium = Execution rolled-out for deposit asset (Execution roll-in for counter party option)\\n        //filled only when executed\\n        uint256 autoRollCounterPartyAmount;\\n        uint256 autoRollCounterPartyPremium;\\n        //maturedCounterPartyAmount+maturedCounterPartyPremium= requested withdrawal for couter party asset(filled only when executed and with withdraw request)\\n        uint256 releasedCounterPartyAmount;\\n        uint256 releasedCounterPartyPremium; \\n \\n        address option; \\n        bool executed;\\n\\n    }\\n\\n    enum OptionExecution{\\n        NoExecution,\\n        ExecuteCall,\\n        ExecutePut\\n    }\\n\\n    struct OptionPairExecutionAccountingResult {  \\n        SettlementAccountingResult callOptionResult;\\n        SettlementAccountingResult putOptionResult;\\n        OptionExecution execute;\\n    }\\n\\n    struct OptionPairExecution {\\n        address callOption;\\n        address putOption;\\n        OptionExecution execute; \\n    }\\n\\n    \\n\\n    struct SettlementCashflowResult{ \\n        uint256 newDepositAmount;\\n        uint256 newReleasedAmount;\\n        int256 leftOverAmount; //positive, if trader didn't withdraw last time; negative, if trader failed to send back last time; \\n        address contractAddress; //0 for eth \\n    }\\n \\n}\",\"keccak256\":\"0x730e719eaeb89d7e4ec73b3e3357c4a6e1c0d6f9066f3f59919ea38010342d0b\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nlibrary Utils { \\n     \\n \\n      uint256 public constant RATIOMULTIPLIER = 10000;\\n     using SafeMath for uint256;\\n      function StringConcat(bytes memory _base, bytes memory _value) internal pure returns (string memory) {\\n        string memory _tmpValue = new string(_base.length + _value.length);\\n        bytes memory _newValue = bytes(_tmpValue);\\n\\n        uint i;\\n        uint j;\\n\\n        for(i=0; i<_base.length; i++) {\\n            _newValue[j++] = _base[i];\\n        }\\n\\n        for(i=0; i<_value.length; i++) {\\n            _newValue[j++] = _value[i++];\\n        }\\n\\n        return string(_newValue);\\n    }\\n\\n    function Uint8Sub(uint8 a, uint8 b) internal pure returns (uint8) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n \\n   function getAmountToTerminate(uint256 _maturedAmount, uint256 _assetToTerminate, uint256 _assetAmount) internal pure returns(uint256) {\\n       if (_assetToTerminate == 0 || _assetAmount == 0 || _maturedAmount == 0) return 0;\\n       return _assetToTerminate >= _assetAmount ?  _maturedAmount : _maturedAmount.mul(_assetToTerminate).div(_assetAmount);\\n   }\\n\\n   function withPremium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\n       return _baseAmount.mul(RATIOMULTIPLIER.add(_premimumRate)).div(RATIOMULTIPLIER);\\n   }\\n   \\n   function premium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\n       return _baseAmount.mul(_premimumRate).div(RATIOMULTIPLIER);\\n   }\\n   \\n\\n}\",\"keccak256\":\"0x6bae4b85176e81817159abf8d873b71c7df35bdf7ba35f3991e992045d408467\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061038b5760003560e01c806365235474116101dc578063a2589ef911610102578063c02337df116100a0578063db006a751161006f578063db006a7514610c74578063dd62ed3e14610c94578063eef9f5a514610cda578063f6326fb314610d0157600080fd5b8063c02337df14610bf9578063c515d7e714610c0e578063ccc41f2414610c2e578063d547741f14610c5457600080fd5b8063a9059cbb116100dc578063a9059cbb14610b79578063aac5001d14610b99578063b6b55f2514610bb9578063bb9662c814610bd957600080fd5b8063a2589ef914610b0c578063a457c2d714610b2c578063a5d3e5b114610b4c57600080fd5b80638cd893591161017a57806395d89b411161014957806395d89b4114610aa25780639e4cbd7d14610ab75780639f01f7ba14610ad7578063a217fddf14610af757600080fd5b80638cd8935914610a2d5780639020253914610a4d57806391d1485414610a6d57806392b4d26a14610a8d57600080fd5b806370349bfb116101b657806370349bfb146109ac57806370a08231146109c15780637a95adc7146109f75780638a19c8bc14610a1757600080fd5b806365235474146108b65780636896fabf1461096b5780636a2af8201461098d57600080fd5b80631de245af116102c1578063313ce5671161025f57806341b9f3291161022e57806341b9f32914610851578063430bf08a1461086b578063511db1141461088057806364057572146108a157600080fd5b8063313ce567146107cb57806332cc6ae6146107f157806336568abe14610811578063395093511461083157600080fd5b8063248a9ca31161029b578063248a9ca31461073a5780632c453bdf1461076a5780632f2ff15d1461078b578063301d11e4146107ab57600080fd5b80631de245af146106da57806321c9445c146106fa57806323b872dd1461071a57600080fd5b80630e777b4b1161032e57806311c8556d1161030857806311c8556d146105d2578063135ad9691461060b57806318160ddd14610638578063186a4a171461064d57600080fd5b80630e777b4b146104f55780630ecc535f146105155780630fd49173146105bb57600080fd5b80630720da521161036a5780630720da52146104095780630748248f14610495578063095ea7b3146104b05780630b2737e4146104d057600080fd5b8062f714ce1461039057806301ffc9a7146103b257806306fdde03146103e7575b600080fd5b34801561039c57600080fd5b506103b06103ab366004615443565b610d09565b005b3480156103be57600080fd5b506103d26103cd366004615467565b610fc5565b60405190151581526020015b60405180910390f35b3480156103f357600080fd5b506103fc610ffc565b6040516103de9190615748565b34801561041557600080fd5b5061042961042436600461542b565b61108e565b6040516103de91906000610100820190508251825260208301516020830152604083015160408301526060830151606083015261ffff608084015116608083015260ff60a08401511660a083015260c0830151151560c083015260e0830151151560e083015292915050565b3480156104a157600080fd5b50610102546103d29060ff1681565b3480156104bc57600080fd5b506103d26104cb3660046152e2565b611122565b3480156104dc57600080fd5b506104e76101055481565b6040519081526020016103de565b34801561050157600080fd5b506103b061051036600461542b565b611138565b34801561052157600080fd5b5061057b610530366004615232565b6101016020526000908152604090208054600182015460028301546003840154600485015460059095015493949293919290916001600160e81b03811690600160e81b900460ff1687565b60408051978852602088019690965294860193909352606085019190915260808401526001600160e81b031660a0830152151560c082015260e0016103de565b3480156105c757600080fd5b506104e76101065481565b3480156105de57600080fd5b50610104546105f3906001600160a01b031681565b6040516001600160a01b0390911681526020016103de565b34801561061757600080fd5b5061062b6106263660046153f3565b6113a9565b6040516103de9190615913565b34801561064457600080fd5b506035546104e7565b34801561065957600080fd5b5061066d6106683660046153f3565b611670565b6040516103de9190600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b3480156106e657600080fd5b506105f36106f536600461542b565b6118d3565b34801561070657600080fd5b506103b0610715366004615443565b6118fe565b34801561072657600080fd5b506103d26107353660046152a2565b611b0d565b34801561074657600080fd5b506104e761075536600461542b565b60009081526097602052604090206001015490565b34801561077657600080fd5b50610103546105f3906001600160a01b031681565b34801561079757600080fd5b506103b06107a6366004615443565b611bb9565b3480156107b757600080fd5b506103b06107c6366004615569565b611be4565b3480156107d757600080fd5b5060fb5460ff165b60405160ff90911681526020016103de565b3480156107fd57600080fd5b506104e761080c366004615232565b611d14565b34801561081d57600080fd5b506103b061082c366004615443565b611dac565b34801561083d57600080fd5b506103d261084c3660046152e2565b611e26565b34801561085d57600080fd5b5060fb546107df9060ff1681565b34801561087757600080fd5b506105f3611e62565b34801561088c57600080fd5b5060fc546103d290600160a01b900460ff1681565b3480156108ad57600080fd5b506103b0611ee5565b3480156108c257600080fd5b506109256108d136600461542b565b60ff6020819052600091825260409091208054600182015460028301546003840154600490940154929491939092909161ffff82169162010000810482169163010000008204811691600160201b90041688565b60408051988952602089019790975295870194909452606086019290925261ffff16608085015260ff1660a0840152151560c0830152151560e0820152610100016103de565b34801561097757600080fd5b506109806120e9565b6040516103de91906158e8565b34801561099957600080fd5b5060fb546107df90610100900460ff1681565b3480156109b857600080fd5b506103b0612231565b3480156109cd57600080fd5b506104e76109dc366004615232565b6001600160a01b031660009081526033602052604090205490565b348015610a0357600080fd5b506103b0610a1236600461530d565b612336565b348015610a2357600080fd5b506104e760fd5481565b348015610a3957600080fd5b506104e7610a4836600461542b565b6123d4565b348015610a5957600080fd5b50610102546103d290610100900460ff1681565b348015610a7957600080fd5b506103d2610a88366004615443565b612695565b348015610a9957600080fd5b506109806126c0565b348015610aae57600080fd5b506103fc612959565b348015610ac357600080fd5b506103b0610ad236600461542b565b612968565b348015610ae357600080fd5b506103b0610af236600461542b565b612b84565b348015610b0357600080fd5b506104e7600081565b348015610b1857600080fd5b506103b0610b2736600461542b565b612ca4565b348015610b3857600080fd5b506103d2610b473660046152e2565b612d66565b348015610b5857600080fd5b506104e7610b6736600461542b565b60fe6020526000908152604090205481565b348015610b8557600080fd5b506103d2610b943660046152e2565b612dff565b348015610ba557600080fd5b506103b0610bb436600461548f565b612e0c565b348015610bc557600080fd5b506103b0610bd436600461542b565b612ff0565b348015610be557600080fd5b5060fc546105f3906001600160a01b031681565b348015610c0557600080fd5b506103b06130ea565b348015610c1a57600080fd5b506103b0610c29366004615232565b61337b565b348015610c3a57600080fd5b5060fb546105f3906201000090046001600160a01b031681565b348015610c6057600080fd5b506103b0610c6f366004615443565b61341e565b348015610c8057600080fd5b506103b0610c8f36600461542b565b613444565b348015610ca057600080fd5b506104e7610caf36600461526a565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b348015610ce657600080fd5b50610102546105f3906201000090046001600160a01b031681565b6103b0613596565b600260c9541415610d355760405162461bcd60e51b8152600401610d2c906158b1565b60405180910390fd5b600260c95581610d575760405162461bcd60e51b8152600401610d2c9061586b565b6101025460ff1615610d7b5760405162461bcd60e51b8152600401610d2c906157a6565b60fb546001600160a01b0382811662010000909204161480610daa575060fc546001600160a01b038281169116145b610dee5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574206164647265737360581b6044820152606401610d2c565b60fb546001600160a01b0382811662010000909204161415610ed3573360009081526101076020526040902054828111610e9f573360009081526101016020526040812090610e3d85846136c2565b8254909150610e4c90826136c2565b8255336000908152610107602052604081205561010554610e6d90846136c2565b6101055560fd54600090815260ff602052604090206001810154610e9190836136c2565b60019091015550610ecd9050565b610ea981846136c2565b336000908152610107602052604090205561010554610ec890846136c2565b610105555b50610f12565b3360009081526101086020526040902054610eee90836136c2565b336000908152610108602052604090205561010654610f0d90836136c2565b610106555b610104546040516309777fbf60e11b81526001600160a01b03909116906312eeff7e90610f4a903390869086906000906004016156b3565b600060405180830381600087803b158015610f6457600080fd5b505af1158015610f78573d6000803e3d6000fd5b50506040518481526001600160a01b03841692503391507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a35050600160c955565b60006001600160e01b03198216637965db0b60e01b1480610ff657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606036805461100b90615bc5565b80601f016020809104026020016040519081016040528092919081815260200182805461103790615bc5565b80156110845780601f1061105957610100808354040283529160200191611084565b820191906000526020600020905b81548152906001019060200180831161106757829003601f168201915b5050505050905090565b611096614fd9565b50600090815260fe6020908152604080832054835260ff8083529281902081516101008101835281548152600182015493810193909352600281015491830191909152600381015460608301526004015461ffff81166080830152620100008104831660a0830152630100000081048316151560c0830152600160201b9004909116151560e082015290565b600061112f3384846136ce565b50600192915050565b6000811161117d5760405162461bcd60e51b8152602060048201526012602482015271215f6173736574546f5465726d696e61746560701b6044820152606401610d2c565b600160fd541161119f5760405162461bcd60e51b8152600401610d2c9061588c565b336000908152610101602052604090206101025460ff16156113205760048101546000906111cd90846137f2565b905060fd54600214156112455781600101548111156111fe5760405162461bcd60e51b8152600401610d2c9061577b565b600060ff6000600160fd546112139190615b6b565b8152602001908152602001600020905061123a8482600201546137f290919063ffffffff16565b600290910155611317565b600060ff6000600260fd5461125a9190615b6b565b815260208082019290925260409081016000908120600480820154845160e0810186528954815260018a01549681019690965260028901549486019490945260038801546060860152870154608085015260058701546001600160e81b03811660a0860152600160e81b900460ff16151560c08501529350916112e09161ffff166137fe565b9050808311156113025760405162461bcd60e51b8152600401610d2c9061577b565b6101095461131090866137f2565b6101095550505b60048201555050565b600381015460009061133290846137f2565b905081600201548111156113585760405162461bcd60e51b8152600401610d2c9061577b565b808260030181905550600060ff6000600160fd546113769190615b6b565b8152602001908152602001600020905061139d8482600201546137f290919063ffffffff16565b600290910155505b5050565b6114186040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581525090565b600080516020615c658339815191526114318133613860565b6101025460ff166114545760405162461bcd60e51b8152600401610d2c90615840565b600160fd541161149a5760405162461bcd60e51b81526020600482015260116024820152704e6f7468696e6720746f20736574746c6560781b6044820152606401610d2c565b600060ff6000600160fd546114af9190615b6b565b815260200190815260200160002090506000604051806101800160405280600160fd546114dc9190615b6b565b8152602001836001015481526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001306001600160a01b031681526020018615158152509050600260fd54111561166657600060ff6000600260fd5461155a9190615b6b565b8152602080820192909252604090810160009081208251610100808201855282548252600183015495820195909552600282015493810193909352600381015460608401526004015461ffff8116608084015260ff620100008204811660a0850152630100000082048116151560c0850152600160201b9091048116151560e08401526101025460fb549395509193611603938b938793908390048116928282169204166138c4565b9050861561163a5760c0808201519084015260e0808201519084015260408101516101008401526060810151610120840152611663565b608080820151604085015260a08083015160608601528251918501919091526020820151908401525b50505b9250505b50919050565b611678615029565b600080516020615c658339815191526116918133613860565b6101025460ff166116b45760405162461bcd60e51b8152600401610d2c90615840565b600260fd54116116f35760405162461bcd60e51b815260206004820152600a6024820152691b9bc81b585d1d5c995960b21b6044820152606401610d2c565b6000600260fd546117049190615b6b565b600081815260ff60208181526040808420815161010080820184528254825260018301549482019490945260028201549281019290925260038101546060830152600481015461ffff81166080840152620100008104851660a0840152630100000081048516151560c0840152600160201b90048416151560e08301526101025460fb5496975090956117a5948b94928390048116928282169204166138c4565b6004830180548815801563010000000263ff00000019909216919091179091559091506117fd576117f481606001516117ee8360400151610106546137f290919063ffffffff16565b906137f2565b6101065561181c565b602081015181516101055461181792916117ee91906137f2565b610105555b60018201541561189f576040805161010081018252835481526001840154602082015260028401549181019190915260038301546060820152600483015461ffff8116608083015260ff620100008204811660a0840152630100000082048116151560c0840152600160201b90910416151560e082015261189f90879083613ad8565b60405183907f5fd55b58a9ef8c29a9db39dd9a05dec64993eb227ad0177941238778e9ea896290600090a295945050505050565b61010081815481106118e457600080fd5b6000918252602090912001546001600160a01b0316905081565b600260c95414156119215760405162461bcd60e51b8152600401610d2c906158b1565b600260c955816119435760405162461bcd60e51b8152600401610d2c9061586b565b6101025460ff16156119675760405162461bcd60e51b8152600401610d2c906157a6565b600160fd54116119895760405162461bcd60e51b8152600401610d2c9061581b565b60fb546001600160a01b03828116620100009092041614806119b8575060fc546001600160a01b038281169116145b6119fc5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574206164647265737360581b6044820152606401610d2c565b60fb546001600160a01b0382811662010000909204161415611a5b573360009081526101076020526040902054611a3390836136c2565b336000908152610107602052604090205561010554611a5290836136c2565b61010555611a9a565b3360009081526101086020526040902054611a7690836136c2565b336000908152610108602052604090205561010654611a9590836136c2565b610106555b610104546040516309777fbf60e11b81526001600160a01b03909116906312eeff7e90611ad2903390869086906000906004016156b3565b600060405180830381600087803b158015611aec57600080fd5b505af1158015611b00573d6000803e3d6000fd5b5050600160c95550505050565b6000611b1a848484614281565b6001600160a01b038416600090815260346020908152604080832033845290915290205482811015611b9f5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610d2c565b611bac85338584036136ce565b60019150505b9392505050565b600082815260976020526040902060010154611bd58133613860565b611bdf8383614450565b505050565b600080516020615c65833981519152611bfd8133613860565b600160fd5411611c3d5760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd185c9d195960aa1b6044820152606401610d2c565b6101025460ff1615611c615760405162461bcd60e51b8152600401610d2c906157a6565b6000600160fd54611c729190615b6b565b600081815260ff6020526040902060038101549192509015611cd65760405162461bcd60e51b815260206004820152601860248201527f537472696b6520507269636520616c72656164792073657400000000000000006044820152606401610d2c565b8351600382015560608401516004909101805460409095015160ff16620100000262ffffff1990951661ffff90921691909117939093179092555050565b60fb546000906001600160a01b0383811662010000909204161415611d55576101055460fd54600090815260ff6020526040902060010154610ff6916137f2565b60fc546001600160a01b0383811691161415611d745750506101065490565b60405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a5908185cdcd95d609a1b6044820152606401610d2c565b6001600160a01b0381163314611e1c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610d2c565b6113a582826144d6565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909161112f918590611e5d908690615a01565b6136ce565b61010454604080516338cc483160e01b815290516000926001600160a01b0316916338cc4831916004808301926020929190829003018186803b158015611ea857600080fd5b505afa158015611ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee0919061524e565b905090565b600160fd5411611f075760405162461bcd60e51b8152600401610d2c9061588c565b336000908152610101602052604090206101025460ff16156120815760fd5460021415611fa3576000611f4b826004015483600101546136c290919063ffffffff16565b905080156113a557600180830154600484015560fd5460009160ff918391611f7291615b6b565b81526020019081526020016000209050611f998282600201546137f290919063ffffffff16565b6002909101555050565b600060ff6000600260fd54611fb89190615b6b565b815260208082019290925260409081016000908120600480820154845160e0810186528854815260018901549681019690965260028801549486019490945260038701546060860152860154608085015260058601546001600160e81b03811660a0860152600160e81b900460ff16151560c085015293509161203e9161ffff166137fe565b905060006120598460040154836136c290919063ffffffff16565b9050801561207b57600484018290556101095461207690826137f2565b610109555b50505050565b600281015460038201546000906120999083906136c2565b90508015611bdf57818360030181905550600060ff6000600160fd546120bf9190615b6b565b8152602001908152602001600020905061139d8282600201546137f290919063ffffffff16565b50565b6121146040518060800160405280600081526020016000815260200160008152602001600081525090565b33600081815261010160209081526040808320815160808101835281548152808401859052858552610107845282852054818401529484526101089092529091205460608301526101025490919060ff161561222157600260fd5411156122125761220860ff6000600260fd5461218b9190615b6b565b81526020808201929092526040908101600020600490810154825160e0810184528754815260018801549481019490945260028701549284019290925260038601546060840152850154608083015260058501546001600160e81b03811660a0840152600160e81b900460ff16151560c083015261ffff166137fe565b6020820152610ff6565b60018201546020820152610ff6565b6002820154602082015292915050565b600160fd54116122535760405162461bcd60e51b8152600401610d2c9061588c565b336000908152610101602052604090206101025460ff16156122e65760fd54600214156122c557600060ff6000600160fd5461228f9190615b6b565b815260200190815260200160002090506122ba826004015482600201546136c290919063ffffffff16565b6002909101556122dc565b6004810154610109546122d7916136c2565b610109555b6000600482015550565b600060ff6000600160fd546122fb9190615b6b565b81526020019081526020016000209050612326826003015482600201546136c290919063ffffffff16565b6002909101556000600382015550565b610103546001600160a01b031633146123a85760405162461bcd60e51b815260206004820152602e60248201527f4f6e6c7920636f756e746572207061727479206f7074696f6e2063616e20636160448201526d1b1b081d1a1a5cc81b595d1a1bd960921b6064820152608401610d2c565b6101025460009060ff166123be5760fd546123cd565b600160fd546123cd9190615b6b565b5050505050565b6000600080516020615c658339815191526123ef8133613860565b6101025460ff16156124135760405162461bcd60e51b8152600401610d2c906157a6565b600160fd54111561248957600060ff6000600160fd546124339190615b6b565b815260200190815260200160002060030154116124895760405162461bcd60e51b815260206004820152601460248201527314dd1c9a5ad948141c9a58d9481b9bdd081cd95d60621b6044820152606401610d2c565b610102805460ff1916600190811790915561010a84905560fd546124ac91615a01565b60fd81815560408051610100808201835284825260006020808401828152848601838152606086018481526080870185815260a0880186815260c089018781526101025460ff9990048916151560e08b019081529c885295889052989095208751815592516001808501919091559151600284015551600383015592516004909101805496519251985161ffff90921662ffffff19909716969096176201000092909416919091029290921764ffff000000191663010000009615159690960264ff00000000191695909517600160201b911515919091021790915590549091101561261b576101005460005b8181101561261457600061010082815481106125c557634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168083526101019091526040909120805491925090156125fd57805460018201555b60009055508061260c81615bfa565b915050612599565b5050612627565b610102805460ff191690555b60fd546040517f10f419fb017d3101d854d4433e414ff27f232bb2f4aae83d987ad0219efa6c9b90600090a2600160fd54111561268b5760ff6000600160fd546126719190615b6b565b81526020019081526020016000206001015492505061166a565b5060009392505050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6126eb6040518060800160405280600081526020016000815260200160008152602001600081525090565b60fd54600090815260ff60205260409020612704614fd9565b61270c614fd9565b60408051608081018252600185015481526000602082015261010554918101919091526101065460608201526101025460ff16156128ac5760ff6000600160fd546127579190615b6b565b815260208082019290925260409081016000208151610100810183528154815260018201549381019390935260028082015492840192909252600381015460608401526004015461ffff8116608084015260ff620100008204811660a0850152630100000082048116151560c0850152600160201b90910416151560e083015260fd54919450101561289d5760ff6000600260fd546127f69190615b6b565b81526020808201929092526040908101600020815161010081018352815481526001820154938101849052600282015492810192909252600381015460608301526004015461ffff81166080830181905260ff620100008304811660a0850152630100000083048116151560c0850152600160201b909204909116151560e083015290935061289391612888916146e9565b6020850151906137f2565b6020820152612951565b60208084015190820152612951565b600160fd5411156129515760ff6000600160fd546128ca9190615b6b565b815260208082019290925260409081016000208151610100810183528154815260018201548185018190526002830154938201939093526003820154606082015260049091015461ffff8116608083015260ff620100008204811660a0840152630100000082048116151560c0840152600160201b90910416151560e08201529183015291505b949350505050565b60606037805461100b90615bc5565b6101025460ff161561298c5760405162461bcd60e51b8152600401610d2c906157a6565b600160fd54116129ae5760405162461bcd60e51b8152600401610d2c9061581b565b600081116129ce5760405162461bcd60e51b8152600401610d2c9061586b565b33600090815261010860205260409020546129e990826136c2565b336000908152610108602052604090205561010554612a0890826136c2565b6101055560408051600180825281830190925260009160208083019080368337505060408051600180825281830190925292935060009291506020808301908036833750506040805160018082528183019092529293506000929150602080830190803683370190505090503383600081518110612a9657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508382600081518110612ad857634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600081600081518110612b0757634e487b7160e01b600052603260045260246000fd5b602090810291909101015261010254604051637a95adc760e01b8152620100009091046001600160a01b031690637a95adc790612b4c908690869086906004016156dd565b600060405180830381600087803b158015612b6657600080fd5b505af1158015612b7a573d6000803e3d6000fd5b5050505050505050565b60008111612bc95760405162461bcd60e51b8152602060048201526012602482015271215f6173736574546f5465726d696e61746560701b6044820152606401610d2c565b600160fd5411612beb5760405162461bcd60e51b8152600401610d2c9061588c565b336000908152610101602052604090206101025460ff1615612c78576004810154612c1690836136c2565b600482015560fd5460021415612c6257600060ff6000600160fd54612c3b9190615b6b565b81526020019081526020016000209050611f998382600201546136c290919063ffffffff16565b61010954612c7090836136c2565b610109555050565b6003810154612c8790836136c2565b8160030181905550600060ff6000600160fd54612c3b9190615b6b565b600260c9541415612cc75760405162461bcd60e51b8152600401610d2c906158b1565b600260c95560fd54600110612cee5760405162461bcd60e51b8152600401610d2c9061581b565b60008111612d0e5760405162461bcd60e51b8152600401610d2c9061586b565b3360009081526101076020526040902054612d2990826136c2565b336000908152610107602052604090205561010554612d4890826136c2565b61010581905550612d5e338260fd54600061453d565b50600160c955565b3360009081526034602090815260408083206001600160a01b038616845290915281205482811015612de85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610d2c565b612df533858584036136ce565b5060019392505050565b600061112f338484614281565b600054610100900460ff1680612e25575060005460ff16155b612e415760405162461bcd60e51b8152600401610d2c906157cd565b600054610100900460ff16158015612e63576000805461ffff19166101011790555b6001600160a01b038416612eaf5760405162461bcd60e51b8152602060048201526013602482015272456d707479207661756c74206164647265737360681b6044820152606401610d2c565b612eb7614705565b612ec18a8a614778565b612ec96147f7565b612ed4600033614866565b612eec600080516020615c6583398151915283614866565b612f04600080516020615c6583398151915285614866565b60fb805460fc80546001600160a01b038b81166001600160a81b0319909216919091178c82168015600160a01b029190911790925560ff8a81166001600160b01b03199094166201000090930261ffff1916929092179290921761010091891682021790925561010480546001600160a01b031916918716919091179055610102805461ff00191685151590920291909117905560405130907f8f61f0def895309a310dec5facf78f589cf18d834f0ba4030a5e68e32180ec9790612fca908c90615748565b60405180910390a28015612fe4576000805461ff00191690555b50505050505050505050565b600260c95414156130135760405162461bcd60e51b8152600401610d2c906158b1565b600260c95560fd546130525760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610d2c565b60fc54600160a01b900460ff16156130955760405162461bcd60e51b815260206004820152600660248201526502145524332360d41b6044820152606401610d2c565b600081116130b55760405162461bcd60e51b8152600401610d2c9061586b565b6130c4338260fd54600061453d565b612d5e336130d0611e62565b60fb546201000090046001600160a01b0316919084614870565b600080516020615c658339815191526131038133613860565b600260c95414156131265760405162461bcd60e51b8152600401610d2c906158b1565b600260c95560fd5460011061316b5760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd185c9d195960aa1b6044820152606401610d2c565b600260fd541115801561318257506101025460ff16155b1561319657610102805460ff191660011790555b6101025460ff166131b95760405162461bcd60e51b8152600401610d2c90615840565b6000600160fd546131ca9190615b6b565b600081815260ff602052604090206001810154919250906131ec9030906148ca565b6101005460005b8181101561330f576000610100828154811061321f57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835261010190915260409091206004810154919250901561326657600481018054600383015560009055613278565b60038101541561327857600060038201555b6001810154156132fa5761329130838360010154614281565b60048501548554604080513081526001600160a01b038616602082015261ffff9093169083015260608201527fe32540b403abb4ebf4396862a5996e4798b57d9312e048b14b0e0e5e3fb9eaeb9060800160405180910390a16001810180546002830155600090555b5050808061330790615bfa565b9150506131f3565b50610109546002830154613322916137f2565b6002830155600061010981905583815260fe60205260408082204390555184917ffa513f17b83baf0c2da337ab931a96429f75c55f0ee2115b7acd007a1a35dd5191a25050610102805460ff191690555050600160c955565b60006133878133613860565b6001600160a01b0382163014156133e05760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f74207365742073656c6620617320636f756e7465722070617274796044820152606401610d2c565b50610102805462010000600160b01b031916620100006001600160a01b039390931692830217905561010380546001600160a01b0319169091179055565b60008281526097602052604090206001015461343a8133613860565b611bdf83836144d6565b600260c95414156134675760405162461bcd60e51b8152600401610d2c906158b1565b600260c955806134895760405162461bcd60e51b8152600401610d2c9061586b565b3360009081526101016020526040902080546134a590836136c2565b815560fd54600090815260ff6020526040902060018101546134c790846136c2565b6001808301919091556101045460fb546040516309777fbf60e11b81526001600160a01b03928316936312eeff7e936135119333938a9362010000909204909216916004016156b3565b600060405180830381600087803b15801561352b57600080fd5b505af115801561353f573d6000803e3d6000fd5b505060fb54604051868152620100009091046001600160a01b031692503391507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a35050600160c95550565b600260c95414156135b95760405162461bcd60e51b8152600401610d2c906158b1565b600260c95560fd546135f85760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610d2c565b60fc54600160a01b900460ff1661363a5760405162461bcd60e51b8152600401610d2c906020808252600490820152630428aa8960e31b604082015260600190565b600034116136735760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b6044820152606401610d2c565b613682333460fd54600061453d565b61368a611e62565b6001600160a01b03166108fc349081150290604051600060405180830381858888f19350505050158015612d5e573d6000803e3d6000fd5b6000611bb28284615b6b565b6001600160a01b0383166137305760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610d2c565b6001600160a01b0382166137915760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610d2c565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000611bb28284615a01565b6040820151600090806138175750506020820151610ff6565b60608401516138279082906136c2565b90508360200151600014156138485761384081846146e9565b915050610ff6565b61295161385582856146e9565b6020860151906137f2565b61386a8282612695565b6113a557613882816001600160a01b031660146149a9565b61388d8360206149a9565b60405160200161389e92919061563e565b60408051601f198184030181529082905262461bcd60e51b8252610d2c91600401615748565b6138cc615029565b60006040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001876000015181525090508615613a4b576000856139735761396e61393786600a615aa1565b6139688960600151613968888c60a001516139529190615a19565b61395d90600a615aa1565b60208d015190614b8b565b90614b97565b6139b8565b6139b8858860a001516139869190615a19565b61399190600a615aa1565b61396861399f87600a615aa1565b60608b015160208c01516139b291614b8b565b90614b8b565b905060006139d7886080015161ffff1683614ba390919063ffffffff16565b604089015190915015613a19576139f78289604001518a60200151614bb5565b836040018181525050613a138189604001518a60200151614bb5565b60608401525b6040830151613a299083906136c2565b60c08401526060830151613a3e9082906136c2565b60e084015250613ace9050565b60208601516080870151600090613a6790839061ffff16614ba3565b604089015190915015613aa457613a878289604001518a60200151614bb5565b835260408801516020890151613a9e918391614bb5565b60208401525b8251613ab19083906136c2565b60808401526020830151613ac69082906136c2565b60a084015250505b9695505050505050565b6101005460408301516020840151600091613af391906136c2565b905084613c72576000600160fd54613b0b9190615b6b565b60208501518551919250600091613b21916137f2565b90506000613b408660a0015187608001516137f290919063ffffffff16565b905060005b85811015613c675760006101008281548110613b7157634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168083526101019091526040909120600281015491925090613bb157600060039091015550613c55565b6000613bc68683600301548d60400151614bb5565b90508015613c0d576001600160a01b03831660009081526101076020526040902054613bf290826137f2565b6001600160a01b038416600090815261010760205260409020555b6000613c3486613c2e856003015486600201546136c290919063ffffffff16565b8b614bb5565b90508015613c4957613c4984828a600061453d565b50506000600390910155505b80613c5f81615bfa565b915050613b45565b505050505050505050565b6000613c8f846060015185604001516137f290919063ffffffff16565b90506000613cae8560e001518660c001516137f290919063ffffffff16565b9050600061010954118015613cc35750600081115b15613d11576000613ce5876080015161ffff16856146e990919063ffffffff16565b9050610109548110613cfc57600061010955613d0f565b61010954613d0a90826136c2565b610109555b505b60005b84811015613f7f5760006101008281548110613d4057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316808352610101909152604090912060028101549192509080613d825750600060039091015550613f6d565b6000613d978784600301548d60400151614bb5565b90508015613dde576001600160a01b03841660009081526101086020526040902054613dc390826137f2565b6001600160a01b038516600090815261010860205260409020555b6003830154613dee9083906136c2565b91506000613dfd87848b614bb5565b90508015613f5d5761010c805460018082019092557f7bb4d7b0eaf94112c5cb7345d79f45887f7ebc12d67faa4efd6cf1d7c430cd340182905561010b8054808301825560009182527fc4a0eda7235d7f6fd09c1e1f9f82dc3264d0d2f064cb41576c42a996a7be28920180546001600160a01b0319166001600160a01b03891617905560808e8101516040805160e081018252895481529489015460208601526002890154908501526003880154606085015260048801549184019190915260058701546001600160e81b03811660a0850152600160e81b900460ff16151560c08401529091613ef19161ffff16614bfb565b5090508015613f28576000613f178e6080015161ffff16866146e990919063ffffffff16565b9050613f24838383614bb5565b9150505b61010d80546001810182556000919091527fd37d5aab611bd3c946977441ea77c3eceb623a7966962fbc75015048e8640bfb01555b6000846003018190555050505050505b80613f7781615bfa565b915050613d14565b5061010c5480613f93575050505050505050565b60008167ffffffffffffffff811115613fbc57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613fe5578160200160208202803683370190505b50905060008267ffffffffffffffff81111561401157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561403a578160200160208202803683370190505b50905060008367ffffffffffffffff81111561406657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561408f578160200160208202803683370190505b50905060005b848110156141e05761010b81815481106140bf57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b03168482815181106140fd57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505061010c818154811061413f57634e487b7160e01b600052603260045260246000fd5b906000526020600020015483828151811061416a57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505061010d818154811061419857634e487b7160e01b600052603260045260246000fd5b90600052602060002001548282815181106141c357634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806141d881615bfa565b915050614095565b506141ee61010b6000615075565b6141fb61010c6000615075565b61420861010d6000615075565b61010254604051637a95adc760e01b8152620100009091046001600160a01b031690637a95adc790614242908690869086906004016156dd565b600060405180830381600087803b15801561425c57600080fd5b505af1158015614270573d6000803e3d6000fd5b505050505050505050505050505050565b6001600160a01b0383166142e55760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610d2c565b6001600160a01b0382166143475760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610d2c565b6001600160a01b038316600090815260336020526040902054818110156143bf5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610d2c565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906143f6908490615a01565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161444291815260200190565b60405180910390a350505050565b61445a8282612695565b6113a55760008281526097602090815260408083206001600160a01b03851684529091529020805460ff191660011790556144923390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6144e08282612695565b156113a55760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600082815260ff6020526040902061010a54600182015461455e90866137f2565b111561459f5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682071756f746160801b6044820152606401610d2c565b6001600160a01b0385166000908152610101602052604090206005810154600160e81b900460ff1661462f5760058101805460ff60e81b1916600160e81b17905561010080546001810182556000919091527f45e010b9ae401e2eb71529478da8bd513a9bdc2d095a111e324f5b95c09ed87b0180546001600160a01b0388166001600160a01b03199091161790555b60fd54841461467757600181015461464790866137f2565b6001820155600481015461465b90846137f2565b60048201556101095461466e90846137f2565b61010955614686565b805461468390866137f2565b81555b600182015461469590866137f2565b60018301556040805186815230602082015285916001600160a01b0389169133917ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b910160405180910390a4505050505050565b6000611bb26127106139686146fe82866137f2565b8690614b8b565b600054610100900460ff168061471e575060005460ff16155b61473a5760405162461bcd60e51b8152600401610d2c906157cd565b600054610100900460ff1615801561475c576000805461ffff19166101011790555b614764614c8d565b80156120e6576000805461ff001916905550565b600054610100900460ff1680614791575060005460ff16155b6147ad5760405162461bcd60e51b8152600401610d2c906157cd565b600054610100900460ff161580156147cf576000805461ffff19166101011790555b6147d7614cfd565b6147e18383614d67565b8015611bdf576000805461ff0019169055505050565b600054610100900460ff1680614810575060005460ff16155b61482c5760405162461bcd60e51b8152600401610d2c906157cd565b600054610100900460ff1615801561484e576000805461ffff19166101011790555b614856614cfd565b61485e614cfd565b614764614cfd565b6113a58282614450565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261207b908590614dfc565b6001600160a01b0382166149205760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610d2c565b80603560008282546149329190615a01565b90915550506001600160a01b0382166000908152603360205260408120805483929061495f908490615a01565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b606060006149b8836002615b4c565b6149c3906002615a01565b67ffffffffffffffff8111156149e957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614a13576020820181803683370190505b509050600360fc1b81600081518110614a3c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614a7957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000614a9d846002615b4c565b614aa8906001615a01565b90505b6001811115614b3c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110614aea57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110614b0e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93614b3581615bae565b9050614aab565b508315611bb25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d2c565b6000611bb28284615b4c565b6000611bb28284615a3e565b6000611bb26127106139688585614b8b565b6000821580614bc2575081155b80614bcb575083155b15614bd857506000611bb2565b81831015614bf357614bee826139688686614b8b565b612951565b509192915050565b600080836020015160001415614c1957505060808201516000614c86565b604084015180614c33575050506080820151600090614c86565b6060850151614c439082906136c2565b90506000614c5182866146e9565b905080866080015111614c6e575050505060808201516000614c86565b60808601518190614c7f90826136c2565b9350935050505b9250929050565b600054610100900460ff1680614ca6575060005460ff16155b614cc25760405162461bcd60e51b8152600401610d2c906157cd565b600054610100900460ff16158015614ce4576000805461ffff19166101011790555b600160c95580156120e6576000805461ff001916905550565b600054610100900460ff1680614d16575060005460ff16155b614d325760405162461bcd60e51b8152600401610d2c906157cd565b600054610100900460ff16158015614764576000805461ffff191661010117905580156120e6576000805461ff001916905550565b600054610100900460ff1680614d80575060005460ff16155b614d9c5760405162461bcd60e51b8152600401610d2c906157cd565b600054610100900460ff16158015614dbe576000805461ffff19166101011790555b8251614dd1906036906020860190615093565b508151614de5906037906020850190615093565b508015611bdf576000805461ff0019169055505050565b6000614e51826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614ece9092919063ffffffff16565b805190915015611bdf5780806020019051810190614e6f919061540f565b611bdf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d2c565b6060612951848460008585843b614f275760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d2c565b600080866001600160a01b03168587604051614f439190615622565b60006040518083038185875af1925050503d8060008114614f80576040519150601f19603f3d011682016040523d82523d6000602084013e614f85565b606091505b5091509150614f95828286614fa0565b979650505050505050565b60608315614faf575081611bb2565b825115614fbf5782518084602001fd5b8160405162461bcd60e51b8152600401610d2c9190615748565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600061ffff168152602001600060ff1681526020016000151581526020016000151581525090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b50805460008255906000526020600020908101906120e69190615117565b82805461509f90615bc5565b90600052602060002090601f0160209004810192826150c15760008555615107565b82601f106150da57805160ff1916838001178555615107565b82800160010185558215615107579182015b828111156151075782518255916020019190600101906150ec565b50615113929150615117565b5090565b5b808211156151135760008155600101615118565b803561513781615c41565b919050565b600082601f83011261514c578081fd5b8135602061516161515c836159dd565b6159ac565b80838252828201915082860187848660051b8901011115615180578586fd5b855b8581101561519e57813584529284019290840190600101615182565b5090979650505050505050565b803561513781615c56565b600082601f8301126151c6578081fd5b813567ffffffffffffffff8111156151e0576151e0615c2b565b6151f3601f8201601f19166020016159ac565b818152846020838601011115615207578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461513757600080fd5b600060208284031215615243578081fd5b8135611bb281615c41565b60006020828403121561525f578081fd5b8151611bb281615c41565b6000806040838503121561527c578081fd5b823561528781615c41565b9150602083013561529781615c41565b809150509250929050565b6000806000606084860312156152b6578081fd5b83356152c181615c41565b925060208401356152d181615c41565b929592945050506040919091013590565b600080604083850312156152f4578182fd5b82356152ff81615c41565b946020939093013593505050565b600080600060608486031215615321578283fd5b833567ffffffffffffffff80821115615338578485fd5b818601915086601f83011261534b578485fd5b8135602061535b61515c836159dd565b8083825282820191508286018b848660051b890101111561537a57898afd5b8996505b848710156153a557803561539181615c41565b83526001969096019591830191830161537e565b50975050870135925050808211156153bb578384fd5b6153c78783880161513c565b935060408601359150808211156153dc578283fd5b506153e98682870161513c565b9150509250925092565b600060208284031215615404578081fd5b8135611bb281615c56565b600060208284031215615420578081fd5b8151611bb281615c56565b60006020828403121561543c578081fd5b5035919050565b60008060408385031215615455578182fd5b82359150602083013561529781615c41565b600060208284031215615478578081fd5b81356001600160e01b031981168114611bb2578182fd5b60008060008060008060008060006101208a8c0312156154ad578687fd5b893567ffffffffffffffff808211156154c4578889fd5b6154d08d838e016151b6565b9a5060208c01359150808211156154e5578889fd5b506154f28c828d016151b6565b98505060408a013561550381615c41565b965060608a013561551381615c41565b955061552160808b01615221565b945061552f60a08b01615221565b935061553d60c08b0161512c565b925061554b60e08b016151ab565b915061555a6101008b0161512c565b90509295985092959850929598565b60006080828403121561557a578081fd5b6040516080810181811067ffffffffffffffff8211171561559d5761559d615c2b565b6040528235815260208301356155b281615c41565b60208201526155c360408401615221565b6040820152606083013561ffff811681146155dc578283fd5b60608201529392505050565b6000815180845260208085019450808401835b83811015615617578151875295820195908201906001016155fb565b509495945050505050565b60008251615634818460208701615b82565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615676816017850160208801615b82565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516156a7816028840160208801615b82565b01602801949350505050565b6001600160a01b039485168152602081019390935292166040820152901515606082015260800190565b606080825284519082018190526000906020906080840190828801845b8281101561571f5781516001600160a01b0316845292840192908401906001016156fa565b5050508381038285015261573381876155e8565b9150508281036040840152613ace81856155e8565b6020815260008251806020840152615767816040850160208701615b82565b601f01601f19169190910160400192915050565b6020808252601190820152704578636565647320617661696c61626c6560781b604082015260600190565b6020808252600d908201526c10995a5b99c81cd95d1d1b1959609a1b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600b908201526a08539bc813585d1d5c995960aa1b604082015260600190565b602080825260119082015270139bdd0818995a5b99c81cd95d1d1b1959607a1b604082015260600190565b60208082526007908201526608585b5bdd5b9d60ca1b604082015260600190565b6020808252600b908201526a4e6f206f6e20676f696e6760a81b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b8151815260208083015190820152604080830151908201526060808301519082015260808101610ff6565b600061018082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151615999828501826001600160a01b03169052565b5050610160928301511515919092015290565b604051601f8201601f1916810167ffffffffffffffff811182821017156159d5576159d5615c2b565b604052919050565b600067ffffffffffffffff8211156159f7576159f7615c2b565b5060051b60200190565b60008219821115615a1457615a14615c15565b500190565b600060ff821660ff84168060ff03821115615a3657615a36615c15565b019392505050565b600082615a5957634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115615a99578160001904821115615a7f57615a7f615c15565b80851615615a8c57918102915b93841c9390800290615a63565b509250929050565b6000611bb260ff841683600082615aba57506001610ff6565b81615ac757506000610ff6565b8160018114615add5760028114615ae757615b03565b6001915050610ff6565b60ff841115615af857615af8615c15565b50506001821b610ff6565b5060208310610133831016604e8410600b8410161715615b26575081810a610ff6565b615b308383615a5e565b8060001904821115615b4457615b44615c15565b029392505050565b6000816000190483118215151615615b6657615b66615c15565b500290565b600082821015615b7d57615b7d615c15565b500390565b60005b83811015615b9d578181015183820152602001615b85565b8381111561207b5750506000910152565b600081615bbd57615bbd615c15565b506000190190565b600181811c90821680615bd957607f821691505b6020821081141561166a57634e487b7160e01b600052602260045260246000fd5b6000600019821415615c0e57615c0e615c15565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146120e657600080fd5b80151581146120e657600080fdfe6666bf5bfee463d10a7fc50448047f8a53b7762d7e28fbc5c643182785f3fd3fa2646970667358221220f3757c8e5df5968df4cb697a6b73f6e4004c1c42a456ebf9c2e020c698a3eadb64736f6c63430008040033",
  "libraries": {
    "StructureData": false
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 538,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 541,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1355,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 655,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 661,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 663,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 665,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 667,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1208,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 1604,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 333,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 592,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 635,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7432,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "depositAssetAmountDecimals",
        "offset": 0,
        "slot": "251",
        "type": "t_uint8"
      },
      {
        "astId": 7434,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "counterPartyAssetAmountDecimals",
        "offset": 1,
        "slot": "251",
        "type": "t_uint8"
      },
      {
        "astId": 7436,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "depositAsset",
        "offset": 2,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 7438,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "counterPartyAsset",
        "offset": 0,
        "slot": "252",
        "type": "t_address"
      },
      {
        "astId": 7440,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "isEth",
        "offset": 20,
        "slot": "252",
        "type": "t_bool"
      },
      {
        "astId": 7442,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "currentRound",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 7446,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "optionHeights",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7451,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "optionStates",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_uint256,t_struct(OptionState)13450_storage)"
      },
      {
        "astId": 7454,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "usersInvolved",
        "offset": 0,
        "slot": "256",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7459,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "userStates",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_address,t_struct(UserState)13487_storage)"
      },
      {
        "astId": 7461,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "underSettlement",
        "offset": 0,
        "slot": "258",
        "type": "t_bool"
      },
      {
        "astId": 7463,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "callOrPut",
        "offset": 1,
        "slot": "258",
        "type": "t_bool"
      },
      {
        "astId": 7466,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "counterPartyOption",
        "offset": 2,
        "slot": "258",
        "type": "t_contract(IPKKTStructureOption)13294"
      },
      {
        "astId": 7468,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "counterParty",
        "offset": 0,
        "slot": "259",
        "type": "t_address"
      },
      {
        "astId": 7471,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "optionVault",
        "offset": 0,
        "slot": "260",
        "type": "t_contract(IOptionVault)13187"
      },
      {
        "astId": 7473,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "totalReleasedDepositAssetAmount",
        "offset": 0,
        "slot": "261",
        "type": "t_uint256"
      },
      {
        "astId": 7475,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "totalReleasedCounterPartyAssetAmount",
        "offset": 0,
        "slot": "262",
        "type": "t_uint256"
      },
      {
        "astId": 7479,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "releasedDepositAssetAmount",
        "offset": 0,
        "slot": "263",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7483,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "releasedCounterPartyAssetAmount",
        "offset": 0,
        "slot": "264",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7485,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "assetToTerminateForNextRound",
        "offset": 0,
        "slot": "265",
        "type": "t_uint256"
      },
      {
        "astId": 7487,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "quota",
        "offset": 0,
        "slot": "266",
        "type": "t_uint256"
      },
      {
        "astId": 9864,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "autoRolledUsers",
        "offset": 0,
        "slot": "267",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9867,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "autoRolledAmounts",
        "offset": 0,
        "slot": "268",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9870,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "toTerminateAmounts",
        "offset": 0,
        "slot": "269",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IOptionVault)13187": {
        "encoding": "inplace",
        "label": "contract IOptionVault",
        "numberOfBytes": "20"
      },
      "t_contract(IPKKTStructureOption)13294": {
        "encoding": "inplace",
        "label": "contract IPKKTStructureOption",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserState)13487_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)13487_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_struct(OptionState)13450_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StructureData.OptionState)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionState)13450_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(OptionState)13450_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionState",
        "members": [
          {
            "astId": 13435,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13437,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "totalAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13439,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "totalTerminate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13441,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "strikePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13443,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "premiumRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 13445,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "pricePrecision",
            "offset": 2,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 13447,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "executed",
            "offset": 3,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 13449,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "callOrPut",
            "offset": 4,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserState)13487_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.UserState",
        "members": [
          {
            "astId": 13474,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "pendingAsset",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13476,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "tempLocked",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13478,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "ongoingAsset",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13480,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "assetToTerminate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13482,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "assetToTerminateForNextRound",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13484,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "totalRound",
            "offset": 0,
            "slot": "5",
            "type": "t_uint232"
          },
          {
            "astId": 13486,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "hasState",
            "offset": 29,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint232": {
        "encoding": "inplace",
        "label": "uint232",
        "numberOfBytes": "29"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}