{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IClaimable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.4;\n\ninterface IClaimable {\n    function harvestAllPools() external;\n}\n"
    },
    "contracts/PKKTRewardAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport \"./interfaces/IClaimable.sol\"; \nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract PKKTRewardAggregator is Ownable{\n    \n    address[] managers;\n    constructor(address[] memory _manangers) {\n       managers = _manangers;\n    }\n    \n    \n    function addManager(address _mananger) external onlyOwner {\n        managers.push(_mananger);\n    }\n    function harvest() external {\n        uint256 length = managers.length;\n        for (uint256 i = 0; i < length; ++i) {\n            IClaimable(managers[i]).harvestAllPools();\n        }\n    }\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/PKKTToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract PKKTToken is ERC20, Ownable {\n\n    using SafeMath for uint256; \n    /**\n     * @dev A record status of minter.\n     */\n    mapping (address => bool) public minters;\n    mapping (address => uint256) public mintingAllowance;\n    \n     /**\n     * @dev maximum amount can be minted.\n     */\n    uint256 private immutable _cap;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n    event MintingAllowanceUpdated(address indexed account, uint256 oldAllowance, uint256 newAllowance);\n\n    constructor(string memory tokenName, string memory symbol, uint256 cap_) ERC20(tokenName, symbol) {\n        minters[msg.sender] = true;\n        _cap = cap_;\n    }\n     \n    function cap() public view returns(uint256) {\n        return _cap;\n    }\n\n    function isMinter(address _account) public view returns(bool) {\n        return minters[_account];\n    }\n\n      /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint _amount) public onlyOwner {\n        _burn(msg.sender, _amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address _account, uint256 _amount) public virtual onlyOwner {\n        uint256 decreasedAllowance = \n        allowance(_account, msg.sender).sub(_amount, \"ERC20: burn amount exceeds allowance\");\n        _approve(_account, msg.sender, decreasedAllowance);\n        _burn(_account, _amount);\n    }\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the minter .\n    function mint(address _to, uint256 _amount) public virtual {\n        require(minters[msg.sender], \"must have minter role to mint\");\n        require(mintingAllowance[msg.sender] >= _amount, \"mint amount exceeds allowance\");\n        require(totalSupply().add(_amount) <= _cap, \"mint amount exceeds cap\");\n        mintingAllowance[msg.sender] = mintingAllowance[msg.sender].sub(_amount);\n        _mint(_to, _amount);\n    }\n    /// @notice Add `_minter` . Must only be called by the owner .\n    function addMinter(address _minter,uint256 _amount) public virtual onlyOwner {\n        minters[_minter] = true;\n        mintingAllowance[_minter] = _amount;\n        emit MinterAdded(_minter);\n    }\n\n    /// @notice Remove `_minter` . Must only be called by the owner .\n    function removeMinter(address _minter) public virtual onlyOwner {\n        minters[_minter] = false;\n        mintingAllowance[_minter] = 0;\n        emit MinterRemoved(_minter);\n    }\n\n    /// @notice Increase minting allowance for minter` . Must only be called by the owner .\n    function increaseMintingAllowance(address _minter, uint256 _addedValue) public virtual onlyOwner {\n        uint256 currentMintingAllowance = mintingAllowance[_minter];\n        mintingAllowance[_minter] = currentMintingAllowance.add(_addedValue);\n        emit MintingAllowanceUpdated(_minter, currentMintingAllowance, currentMintingAllowance.add(_addedValue));\n    }\n\n    /// @notice Decrease minting allowance for minter` . Must only be called by the owner .\n    function decreaseMintingAllowance(address _minter, uint256 _subtractedValue) public virtual onlyOwner {\n        uint256 currentMintingAllowance = mintingAllowance[_minter];\n        mintingAllowance[_minter] = currentMintingAllowance.sub(_subtractedValue,\"decreased allowance below zero\");\n        emit MintingAllowanceUpdated(_minter, currentMintingAllowance, currentMintingAllowance.sub(_subtractedValue));\n    }\n\n}\n\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/PKKTVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\"; \nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {Vault} from \"./libraries/Vault.sol\";  \nimport {PoolData, UserData} from \"./libraries/SharedData.sol\";  \nimport \"./PKKTToken.sol\";\nimport \"./PKKTRewardManager.sol\";\nimport \"hardhat/console.sol\";\n\n\ncontract PKKTVault is PKKTRewardManager, AccessControlUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256; \n    using Vault for Vault.VaultInfo;\n    \n    Vault.VaultInfo[] public vaultInfo;\n\n    bool public isSettelled; \n \n    mapping(uint256 => mapping(address => Vault.UserInfo)) public userInfo; \n    \n    mapping(uint256 => address[]) userAddresses;\n\n    mapping(uint256 => int256 ) public settlementResult;\n    uint8 maxDecimals;\n\n    bytes32 public constant TRADER_ROLE = keccak256(\"TRADER_ROLE\");\n\n\n    /************************************************\n     *  EVENTS\n     ***********************************************/\n \n    event Deposit(address indexed account, uint256 indexed vid, uint256 amount, bool fromWallet); \n\n    event InitiateWithdraw(address indexed account, uint256 indexed vid,uint256 amount);\n    \n    event CancelWithdraw(address indexed account, uint256 indexed vid, uint256 amount);\n\n    event Redeem(address indexed account, uint256 indexed vid, uint256 amount);\n\n    event CompleteWithdraw(address indexed account, uint256 indexed vid, uint256 amount);\n \n \n\n    /************************************************\n     *  CONSTRUCTOR & INITIALIZATION\n     ***********************************************/\n\n    /// @notice Initializes the contract with storage variables\n    /// @param _pkktPerBlock total number of PKKT rewarded to users\n    /// @param trader address of trader who manages settlements\n    function initialize(PKKTToken _pkkt, uint256 _pkktPerBlock, uint256 _startBlock, address trader) public initializer {\n        PKKTRewardManager.initialize(_pkkt, \"Vault\", _pkktPerBlock, _startBlock);\n        AccessControlUpgradeable.__AccessControl_init();\n        // Contract deployer will be able to grant and revoke trading role\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        // Address capable of initiating and finizalizing settlement\n        _setupRole(TRADER_ROLE, trader);\n        isSettelled = true;\n    }\n\n    // Add a range of new underlyings to the vault. Can only be called by the owner.\n    function addMany(Vault.VaultSettings[] memory _vaults, bool _withUpdate) external onlyOwner {\n         for(uint256 i = 0; i < _vaults.length; i++) {\n            IERC20  underlying = _vaults[i].underlying;\n            require(!isAdded[address(underlying)], \"Vault already is added\"); \n            //here to ensure it's a valid address\n            uint256 underlyingSupply = underlying.balanceOf(address(this));\n            require(underlyingSupply == 0, \"Vault should not be staked\");\n        }  \n        if (_withUpdate) {\n            massUpdatePools();\n        } \n        for(uint256 i = 0; i <  _vaults.length; i++) {\n            Vault.VaultSettings memory setting = _vaults[i];\n            uint256 lastRewardBlock =\n                block.number > startBlock ? block.number : startBlock; \n            vaultInfo.push(\n                        Vault.VaultInfo({\n                            underlying: setting.underlying, \n                            lastRewardBlock: lastRewardBlock,\n                            decimals: setting.decimals,\n                            accPKKTPerShare: 0, \n                            totalPending: 0,\n                            totalOngoing: 0,\n                            totalRequesting: 0,\n                            totalMatured: 0\n                        })\n                    );\n            if (maxDecimals < setting.decimals) {\n                maxDecimals = setting.decimals;\n            }\n            isAdded[address(setting.underlying)] = true;\n        }         \n    }\n    // Add a new underlying  to the vault. Can only be called by the owner.\n    // XXX DO NOT add the same underlying token more than once. Rewards will be messed up if you do.\n    function add(Vault.VaultSettings memory _vault,\n        bool _withUpdate\n    ) external onlyOwner {\n        require(!isAdded[address(_vault.underlying)], \"Vault already is added\");\n        //here to ensure it's a valid address\n        uint256 underlyingSupply = _vault.underlying.balanceOf(address(this));\n        require(underlyingSupply == 0, \"Vault should not been stake\");\n        \n        if (_withUpdate) {\n            massUpdatePools();\n        }\n  \n\n        uint256 lastRewardBlock =\n            block.number > startBlock ? block.number : startBlock; \n        vaultInfo.push(\n                    Vault.VaultInfo({\n                        underlying: _vault.underlying, \n                        lastRewardBlock: lastRewardBlock,\n                        decimals: _vault.decimals,\n                        accPKKTPerShare: 0,\n                        totalPending: 0,\n                        totalOngoing: 0,\n                        totalRequesting: 0,\n                        totalMatured: 0\n                    })\n                );\n        if (maxDecimals < _vault.decimals) {\n            maxDecimals = _vault.decimals;\n        }               \n        isAdded[address(_vault.underlying)] = true;\n    }\n\n\n    /************************************************\n     *  DEPOSIT & WITHDRAWALS\n     ***********************************************/\n\n \n    function deposit(uint256 _vid, uint256 _amount) external validatePoolById(_vid) {\n        require(_amount > 0, \"!amount\");\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \n\n        // An approve() by the msg.sender is required beforehand\n        IERC20(vault.underlying).safeTransferFrom(msg.sender, address(this), _amount);\n        if (!user.hasDeposit) {\n            user.hasDeposit = true;\n            userAddresses[_vid].push(msg.sender);\n        }\n        user.pendingAmount = user.pendingAmount.add(_amount); \n        vault.totalPending = vault.totalPending.add(_amount);\n        emit Deposit(msg.sender, _vid, _amount, true);\n    }\n  \n \n    function redeem(uint256 _vid, uint256 _amount) external validatePoolById(_vid) {\n        require(_amount > 0, \"!amount\");\n        _redeem(_vid, _amount, false);\n    }\n \n    function maxRedeem(uint256 _vid) external validatePoolById(_vid) {\n        _redeem(_vid, 0, true);\n    }\n\n \n    function _redeem(uint256 _vid, uint256 _amount, bool _isMax) internal {\n        \n        Vault.VaultInfo storage vault = vaultInfo[_vid];\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \n \n        _amount = _isMax ? user.pendingAmount : _amount;\n        if (_amount == 0) {\n            return;\n        }\n        require(_amount <= user.pendingAmount, \"Exceeds available\");\n\n        user.pendingAmount = user.pendingAmount.sub(_amount);  \n        vault.totalPending = vault.totalPending.sub(_amount);\n        IERC20(vault.underlying).safeTransfer(msg.sender, _amount); \n        \n\n        emit Redeem(msg.sender, _vid, _amount); \n    }\n  \n    function initiateWithdraw(uint256 _vid, uint256 _amount) external validatePoolById(_vid)  {\n        _initiateWithdraw(_vid, _amount, false);\n   \n    }\n \n    function maxInitiateWithdraw(uint256 _vid) external validatePoolById(_vid) {\n        _initiateWithdraw(_vid, 0, true);\n    }\n\n \n    function _initiateWithdraw(uint256 _vid, uint256 _amount, bool _isMax) internal {\n        require(_amount > 0, \"!amount\");\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \n\n        uint256 maxAmountForRequest = user.ongoingAmount.sub(user.requestingAmount);\n       \n        _amount = _isMax ? maxAmountForRequest : _amount;\n        if (_amount == 0) {\n            return;\n        }\n        \n        require(_amount <= maxAmountForRequest,\"Exceeds available\"); \n        user.requestingAmount = user.requestingAmount.add(_amount);  \n        vault.totalRequesting = vault.totalRequesting.add(_amount);\n        emit InitiateWithdraw(msg.sender, _vid, _amount);\n\n    }\n \n    function cancelWithdraw(uint256 _vid, uint256 _amount) external validatePoolById(_vid) {\n        _cancelWithdraw(_vid, _amount, false); \n    }\n \n    function maxCancelWithdraw(uint256 _vid) external validatePoolById(_vid) {\n        _cancelWithdraw(_vid, 0, true); \n    }\n \n    function _cancelWithdraw(uint256 _vid, uint256 _amount, bool _isMax) internal {\n        require(_amount > 0, \"!amount\");\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \n \n       _amount = _isMax ? user.requestingAmount : _amount;\n        if (_amount == 0) {\n            return;\n        }\n        \n        require(_amount <= user.requestingAmount,  \"Exceeds available\"); \n        user.requestingAmount = user.requestingAmount.sub(_amount); \n        vault.totalRequesting = vault.totalRequesting.sub(_amount);\n        emit CancelWithdraw(msg.sender, _vid, _amount); \n    }\n\n \n    function completeWithdraw(uint256 _vid, uint256 _amount) external validatePoolById(_vid) {\n        _completeWithdraw(_vid, _amount, false); \n  \n    }\n \n    function maxCompleteWithdraw(uint256 _vid) external validatePoolById(_vid) {\n        _completeWithdraw(_vid, 0, true);\n    }\n \n    function _completeWithdraw(uint256 _vid, uint256 _amount, bool _isMax) internal {\n        require(isSettelled, \"Settlment not finished yet\");\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \n \n        _amount = _isMax ? user.maturedAmount : _amount;\n        if (_amount == 0) {\n            return;\n        }\n\n        require(_amount <= user.maturedAmount, \"Exceeds available\");\n    \n        IERC20(vault.underlying).safeTransfer(msg.sender, _amount); \n        \n        user.maturedAmount = user.maturedAmount.sub(_amount); \n        vault.totalMatured = vault.totalMatured.sub(_amount);\n        emit CompleteWithdraw(msg.sender, _vid, _amount);\n\n    }\n    \n \n    function redeposit(uint256 _vid, uint256 _amount) external validatePoolById(_vid) {\n       \n         _redeposit(_vid, _amount, false); \n    }\n\n        \n \n    function maxRedeposit(uint256 _vid) external validatePoolById(_vid) {\n         _redeposit(_vid, 0, true); \n    } \n \n \n    function _redeposit(uint256 _vid, uint256 _amount, bool _isMax) internal {\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \n \n        _amount = _isMax ? user.maturedAmount : _amount;\n        if (_amount == 0) {\n            return;\n        }\n\n        require(_amount <= user.maturedAmount, \"Exceeds available\");\n   \n        user.pendingAmount = user.pendingAmount.add(_amount);\n        user.maturedAmount = user.maturedAmount.sub(_amount); \n        //todo:do we need totalPending?\n        vault.totalPending = vault.totalPending.add(_amount);\n        vault.totalMatured = vault.totalMatured.sub(_amount); \n        emit Deposit(msg.sender, _vid, _amount, false); \n    }\n \n\n    /************************************************\n     *  SETTLEMENT\n     ***********************************************/\n    function initiateSettlement(uint256 _pkktPerBlock, address target) external onlyRole(TRADER_ROLE) {\n        massUpdatePools();\n        isSettelled = false;\n        uint256 vaultCount = vaultInfo.length; \n        for(uint256 vid = 0; vid < vaultCount; vid++){\n            Vault.VaultInfo storage vault = vaultInfo[vid];\n            address[] storage addresses = userAddresses[vid];  \n            mapping(address=>Vault.UserInfo) storage users = userInfo[vid];\n            uint256 userCount = addresses.length;\n            int256 diff = 0;\n            uint256 totalOngoing = 0;\n            uint256 totalMatured = 0;\n            for (uint i=0; i < userCount; i++) {\n                Vault.UserInfo storage user = users[addresses[i]]; \n                diff = diff + int256(user.pendingAmount) - int256(user.requestingAmount); \n                uint256 newUserOngoing = user.ongoingAmount.add(user.pendingAmount).sub(user.requestingAmount); //it must be possitive \n                totalOngoing = totalOngoing.add(newUserOngoing);\n                updateUserReward(vid, addresses[i],  \n                    user.ongoingAmount, newUserOngoing, true); \n                user.ongoingAmount = newUserOngoing;\n                user.pendingAmount = 0;\n                user.maturedAmount =  user.maturedAmount.add(user.requestingAmount);\n                totalMatured = totalMatured.add(user.maturedAmount);\n                user.requestingAmount = 0; \n            }\n            vault.totalOngoing = totalOngoing; \n            vault.totalPending = 0;\n            vault.totalRequesting = 0;\n            vault.totalMatured  = totalMatured;\n            settlementResult[vid] = diff; \n        }\n        if (_pkktPerBlock != pkktPerBlock) {\n            setPKKTPerBlock(_pkktPerBlock);\n        }\n        bool allDone = true;\n        for(uint256 vid = 0; vid < vaultCount; vid++){ \n           int256 diff2 = settlementResult[vid];\n           if (diff2 < 0) {\n               allDone = false;\n           }\n           else if (diff2 > 0) {\n               Vault.VaultInfo storage vault = vaultInfo[vid];\n               IERC20(vault.underlying).safeTransfer(address(target), uint256(diff2)); \n           }\n        }\n        if (allDone) {\n            for(uint256 vid = 0; vid < vaultCount; vid++){  \n                settlementResult[vid] = 0;\n            }\n            isSettelled = true;\n        }\n    }\n\n     \n    function finishSettlement() external onlyRole(TRADER_ROLE) {\n        require(!isSettelled, \"Settlement already finished\");\n        uint256 length = vaultInfo.length;\n        for (uint256 vid = 0; vid < length; vid++) {\n           Vault.VaultInfo memory vault = vaultInfo[vid];\n           //check if the totalMatured is fullfilled or not\n           require(IERC20(vault.underlying).balanceOf(address(this)) >=  vault.totalMatured, \"Matured amount not fullfilled\");\n        }\n        for (uint256 vid = 0; vid < length; vid++) {\n            settlementResult[vid] = 0;\n        }\n        isSettelled = true;\n    }\n\n    //Update number of pkkt per block \n    function setPKKTPerBlock(uint256 _pkktPerBlock) public override {\n        require(hasRole(TRADER_ROLE, msg.sender) || owner() == msg.sender, \"Only the owner or trader can set PKKT per block.\");\n        massUpdatePools();\n        pkktPerBlock = _pkktPerBlock;\n    }\n\n    function poolLength() public override view returns (uint256) {\n        return vaultInfo.length;\n    }\n    \n \n\n    function _updatePool(uint256 _pid, uint256 _accPKKTPerShare) internal override {\n\n        Vault.VaultInfo storage vault = vaultInfo[_pid];\n        vault.lastRewardBlock = block.number;\n         \n        if (_accPKKTPerShare > 0) { \n           vault.accPKKTPerShare = _accPKKTPerShare;\n        }\n    }\n\n\n    function _getPoolData(uint256 _poolId, bool _getShare) internal override view returns(PoolData.Data memory){\n        Vault.VaultInfo storage vault = vaultInfo[_poolId];  \n        return PoolData.Data({\n            lastRewardBlock: vault.lastRewardBlock,\n            accPKKTPerShare: vault.accPKKTPerShare, \n            shareAmount: _getShare ? vault.totalOngoing : 0,\n            id: _poolId\n        });\n    }\n\n    function _getUserData(uint256 _poolId, address _userAddress) internal override view returns (UserData.Data memory) { \n        Vault.UserInfo storage user = userInfo[_poolId][_userAddress]; \n        return UserData.Data({\n            shareAmount: user.ongoingAmount,\n            rewardDebt: user.rewardDebt,\n            pendingReward: user.pendingReward\n        });\n    }\n\n    function _getPoolPercentage(PoolData.Data memory _poolData) internal override view returns(uint256) {\n         Vault.VaultInfo storage vault = vaultInfo[_poolData.id];    \n         return vault.getShare(maxDecimals).mul(normalizer).div(getTotalShare());\n    }\n\n    \n    function _updateUserRewardDebt(uint256 _poolId, address _userAddress, uint256 _newValue) internal override {\n         Vault.UserInfo storage user = userInfo[_poolId][_userAddress];\n         user.rewardDebt = _newValue;\n    }\n    function  _updateUserPendingReward(uint256 _poolId, address _userAddress, uint256 _newValue) internal override{\n         Vault.UserInfo storage user = userInfo[_poolId][_userAddress];\n         user.pendingReward = _newValue;\n    }\n \n\n    function getTotalShare() private view returns(uint256) {\n       uint256 totalShares = 0;\n       uint256 vaultCount = vaultInfo.length;\n       for(uint256 vid = 0; vid < vaultCount; vid++){\n           Vault.VaultInfo storage vault = vaultInfo[vid]; \n           totalShares = totalShares.add(vault.getShare(maxDecimals));\n       }\n       //console.log(\"TotalShare: %d\", totalShares);\n       return totalShares;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/libraries/Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n \n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; \nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport './Utils.sol';\n\nlibrary Vault { \n    \n    using SafeMath for uint256;\n\n    struct UserInfo {\n        uint256 pendingAmount;  \n        uint256 ongoingAmount;   \n        uint256 requestingAmount;\n        uint256 maturedAmount; \n        uint256 pendingPKKTReward;  \n        uint256 rewardDebt; // Reward debt. See explanation below.\n        uint256 pendingReward;// Reward but not harvest\n        //\n        //   pending reward = (user.amount * pool.accPKKTPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accPKKTPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n        bool hasDeposit;\n    } \n \n    struct VaultInfo {   \n        uint256 lastRewardBlock; // Last block number that PKKTs distribution occurs.\n        uint256 accPKKTPerShare; // Accumulated PKKTs per share, times 1e12. See below.\n        uint256 totalPending;\n        uint256 totalOngoing;\n        uint256 totalRequesting;\n        uint256 totalMatured;\n      \n        // the underlying token: usdt/usdc/dai/etc.\n        IERC20 underlying;\n        uint8 decimals;\n    }\n    \n    function getShare(VaultInfo storage _vault, uint8 _maxDecimals) external view returns(uint256) {\n        uint8 extraDecimals = Utils.Uint8Sub(_maxDecimals, _vault.decimals);\n        if (extraDecimals > 0) {\n            return _vault.totalOngoing.mul(10 ** uint256(extraDecimals));\n        }\n        else {\n            return _vault.totalOngoing;\n        }\n    }\n\n \n    struct VaultSettings {\n        \n        IERC20 underlying; \n        uint8 decimals;\n    }\n\n     \n}\n"
    },
    "contracts/libraries/SharedData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n \nlibrary PoolData { \n    // Info of each user.\n    struct Data { \n        uint256 lastRewardBlock;\n        uint256 accPKKTPerShare;\n        uint256 shareAmount; \n        uint256 id;\n    }\n \n}\n\nlibrary UserData {\n    struct Data {\n      uint256 shareAmount;\n      uint256 pendingReward;\n      uint256 rewardDebt;\n    }\n}\n"
    },
    "contracts/PKKTRewardManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n//import {SafeERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\"; \nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./PKKTToken.sol\";  \nimport {PoolData, UserData} from \"./libraries/SharedData.sol\";  \nimport \"./libraries/Utils.sol\";  \nimport \"./interfaces/IClaimable.sol\"; \nimport \"hardhat/console.sol\";\n\n\nabstract contract PKKTRewardManager is IClaimable, OwnableUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /**********************************************\n    *  NON UPGRADABLE STORAGE\n    ***********************************************/\n\n    uint256 public pkktPerBlock;\n    // A record status of LP pool.\n    mapping(address => bool) public isAdded; \n    string itemName;\n    // The PKKT TOKEN!\n    PKKTToken public pkkt;\n    // The block number when PKKT mining starts.\n    uint256 public startBlock;\n\n    // TODO: Research whether or not we need a uint256[30] private __gap here for safety\n\n    /**********************************************\n    *  IMMUTABLES AND CONSTANTS\n    ***********************************************/\n\n    uint256 public constant normalizer = 1e18;\n\n\n    event RewardsHarvested(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount\n    );\n\n    /// @notice Initializes the contract with storage variables\n    /// @param _itemName name of underlying storage ex: \"Vault\" or \"Pool\"\n    /// @param _pkktPerBlock total number of PKKT rewarded to users per block\n    function initialize(\n        PKKTToken _pkkt,\n        string memory _itemName,\n        uint256 _pkktPerBlock,\n        uint256 _startBlock) internal initializer {\n        require(address(_pkkt) != address(0), \"Zero address\");\n        OwnableUpgradeable.__Ownable_init();\n        pkkt = _pkkt;\n        pkktPerBlock = _pkktPerBlock;\n        itemName = _itemName;\n        startBlock = _startBlock;\n    }\n\n \n    // Update reward vairables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolLength();\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n \n    modifier validatePoolById(uint256 _pid) {\n        require(_pid < poolLength() , Utils.StringConcat(bytes(itemName), bytes(\" doesn't exist\")));\n        _;\n    }\n\n    //Update number of pkkt per block \n    function setPKKTPerBlock(uint256 _pkktPerBlock) public virtual onlyOwner {\n        massUpdatePools();\n        pkktPerBlock = _pkktPerBlock;\n    }\n \n\n    // View function to see pending PKKTs on frontend.\n    function pendingPKKT(uint256 _pid, address _user)\n        external\n        view\n        validatePoolById(_pid)\n        returns (uint256)\n    {\n        PoolData.Data memory poolData = _getPoolData(_pid, true);\n        UserData.Data memory userData = _getUserData(_pid, _user); \n       \n        uint256 accPKKTPerShare = poolData.accPKKTPerShare;  \n        if (block.number > poolData.lastRewardBlock && poolData.shareAmount > 0) {   \n            accPKKTPerShare = _getAccPKKTPerShare(poolData); \n        }  \n        return userData.pendingReward.add(userData.shareAmount.mul(accPKKTPerShare).div(normalizer).sub(userData.rewardDebt)); \n    }\n    \n       // Update reward variables of the given pool to be up-to-date. \n    function updatePool(uint256 _pid) public validatePoolById(_pid) {\n        PoolData.Data memory poolData = _getPoolData(_pid, true);\n        if (block.number <= poolData.lastRewardBlock) {\n            return;\n        } \n        if (poolData.shareAmount == 0) { \n             _updatePool(_pid, 0); \n            return;\n        }  \n         _updatePool(_pid, _getAccPKKTPerShare(poolData)); \n    }\n\n\n    //Harvest proceeds of all pools for msg.sender\n    function harvestAll(uint256[] memory _pids) external {\n       uint256 length = _pids.length;\n        for (uint256 i = 0; i < length; ++i) {\n            harvest(_pids[i]);\n        }\n    }\n\n    function harvestAllPools() override external  {\n        uint256 length = poolLength();\n        for (uint256 i = 0; i < length; ++i) {\n            harvest(i);\n        }\n    }\n    //Harvest proceeds msg.sender\n    function harvest(uint256 _pid) public validatePoolById(_pid) returns(uint256) {\n        updatePool(_pid); \n        PoolData.Data memory poolData = _getPoolData(_pid, false);\n        UserData.Data memory userData = _getUserData(_pid, msg.sender); \n \n        uint256 pendingReward = userData.pendingReward;\n        uint256 totalPending = userData.shareAmount.mul(poolData.accPKKTPerShare)\n                                        .div(normalizer)\n                                        .sub(userData.rewardDebt)\n                                        .add(pendingReward); \n        _updateUserPendingReward(_pid, msg.sender, 0);\n        if (totalPending > 0) {\n            pkkt.mint(address(this), totalPending);\n            pkkt.transfer(msg.sender, totalPending);\n        }\n        _updateUserRewardDebt(_pid, msg.sender, userData.shareAmount.mul(poolData.accPKKTPerShare).div(normalizer)); \n        emit RewardsHarvested(msg.sender, _pid, totalPending);\n        return totalPending;\n    }\n\n    function updateUserReward(uint256 _pid, address _userAddress, uint256 _oldShareAmount, uint256 _newShareAmount, bool _updatePending) internal validatePoolById(_pid) {\n        PoolData.Data memory poolData = _getPoolData(_pid, false);\n        UserData.Data memory userData = _getUserData(_pid,_userAddress);  \n\n        if (_updatePending){\n            uint256 pending =\n                    _oldShareAmount.mul(poolData.accPKKTPerShare).div(normalizer).sub(\n                        userData.rewardDebt\n                    );\n            _updateUserPendingReward(_pid, _userAddress, userData.pendingReward.add(pending)); \n        }\n        _updateUserRewardDebt(_pid,_userAddress, _newShareAmount.mul(poolData.accPKKTPerShare).div(normalizer));  \n    }\n\n  \n\n    function _getAccPKKTPerShare(PoolData.Data memory _poolData) private view returns(uint256) {  \n        uint256 pkktReward = block.number.sub(_poolData.lastRewardBlock).mul(pkktPerBlock).mul(_getPoolPercentage(_poolData)); \n        return _poolData.accPKKTPerShare.add(\n                pkktReward.div(_poolData.shareAmount)\n            );\n    }\n\n    function _updatePool(uint256 _pid, uint256 _accPKKTPerShare) internal virtual;\n    function poolLength() public virtual view returns (uint256);\n    function _updateUserPendingReward(uint256 _poolId, address _userAddress, uint256 _newValue) internal virtual;\n    function _updateUserRewardDebt(uint256 _poolId, address _userAddress, uint256 _newValue) internal virtual;\n    function _getPoolPercentage(PoolData.Data memory _poolData) internal virtual view returns(uint256);\n    function _getPoolData(uint256 _poolId, bool _getShare) internal virtual view returns(PoolData.Data memory);\n    function _getUserData(uint256 _poolId, address _userAddress) internal virtual view returns(UserData.Data memory);\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/libraries/Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nlibrary Utils { \n     \n \n      uint256 public constant RATIOMULTIPLIER = 10000;\n     using SafeMath for uint256;\n      function StringConcat(bytes memory _base, bytes memory _value) internal pure returns (string memory) {\n        string memory _tmpValue = new string(_base.length + _value.length);\n        bytes memory _newValue = bytes(_tmpValue);\n\n        uint i;\n        uint j;\n\n        for(i=0; i<_base.length; i++) {\n            _newValue[j++] = _base[i];\n        }\n\n        for(i=0; i<_value.length; i++) {\n            _newValue[j++] = _value[i++];\n        }\n\n        return string(_newValue);\n    }\n\n    function Uint8Sub(uint8 a, uint8 b) internal pure returns (uint8) {\n        assert(b <= a);\n        return a - b;\n    }\n \n   function getAmountToTerminate(uint256 _maturedAmount, uint256 _assetToTerminate, uint256 _assetAmount) internal pure returns(uint256) {\n       if (_assetToTerminate == 0 || _assetAmount == 0 || _maturedAmount == 0) return 0;\n       return _assetToTerminate >= _assetAmount ?  _maturedAmount : _maturedAmount.mul(_assetToTerminate).div(_assetAmount);\n   }\n\n   function withPremium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\n       return _baseAmount.mul(RATIOMULTIPLIER.add(_premimumRate)).div(RATIOMULTIPLIER);\n   }\n   \n   function premium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\n       return _baseAmount.mul(_premimumRate).div(RATIOMULTIPLIER);\n   }\n   \n\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/PKKTHodlBoosterOption.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n \nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\"; \nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {\n    ReentrancyGuardUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"hardhat/console.sol\";\n \nimport {Utils} from \"./libraries/Utils.sol\";  \nimport {StructureData} from \"./libraries/StructureData.sol\";     \nimport \"./interfaces/IPKKTStructureOption.sol\";\nimport \"./interfaces/IExecuteSettlement.sol\"; \nimport \"./interfaces/IOptionVault.sol\"; \n\ncontract PKKTHodlBoosterOption is ERC20Upgradeable, AccessControlUpgradeable, ReentrancyGuardUpgradeable, IPKKTStructureOption, IExecuteSettlement {\n    \n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using StructureData for StructureData.UserState;\n    using Utils for uint256;\n\n    event Deposit(address indexed from, address indexed account, uint256 indexed round, uint256 amount, address option);\n    event Withdraw(address indexed account, address indexed asset, uint256 amount);\n    event CloseOption(uint256 indexed round);\n    event CommitOption(uint256 indexed round);\n    event OpenOption(uint256 indexed round);\n    event OptionCreated(address indexed option, string name);\n    event OptionTransfer(address from, address to, uint256 premium, uint256 round);\n    uint8 public depositAssetAmountDecimals;\n    uint8 public counterPartyAssetAmountDecimals;\n      \n    address public depositAsset;\n    address public counterPartyAsset;\n \n    bool public isEth;\n     uint256 private quota;\n     uint256 public currentRound; \n     mapping(uint256=>uint256) public optionHeights;\n     mapping(uint256=>StructureData.OptionState) public optionStates;\n     address[] public usersInvolved;  \n     mapping(address=>StructureData.UserState) public userStates; \n     bool public underSettlement; \n     bool public callOrPut; //put accept stablecoin only, call accept asset coins only\n     IPKKTStructureOption public counterPartyOption;\n     address public counterParty;\n     IOptionVault public optionVault;\n     uint256 public totalReleasedDepositAssetAmount; \n     uint256 public totalReleasedCounterPartyAssetAmount; \n     \n     //private data for complete withdrawal and redeposit \n     mapping(address=>uint256) private releasedDepositAssetAmount;\n     mapping(address=>uint256) private releasedCounterPartyAssetAmount;  \n     uint256 private assetToTerminateForNextRound;\n     \n\n    bytes32 public constant OPTION_ROLE = keccak256(\"OPTION_ROLE\");\n    bytes32 public constant SETTLER_ROLE = keccak256(\"SETTLER_ROLE\");\n\n    //take if for eth, we make price precision as 4, then underlying price can be 40000000 for 4000$\n    //for shib, we make price precision as 8, then underlying price can be 4000 for 0.00004000$\n    function initialize(\n        string memory name,\n        string memory symbol,\n        address _depositAsset,\n        address _counterPartyAsset,\n        uint8 _depositAssetAmountDecimals,\n        uint8 _counterPartyAssetAmountDecimals,\n        address _vaultAddress,\n        bool _callOrPut,\n        address _settler\n    ) public initializer {\n        require(_vaultAddress != address(0), \"Empty vault address\");\n        __ReentrancyGuard_init();\n        ERC20Upgradeable.__ERC20_init(name, symbol);\n        AccessControlUpgradeable.__AccessControl_init();\n        // Contract deployer will be able to grant and revoke trading role\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        // Address capable of initiating and finizalizing settlement\n        _setupRole(SETTLER_ROLE, _settler);\n        _setupRole(SETTLER_ROLE, _vaultAddress);\n        depositAsset = _depositAsset;\n        counterPartyAsset = _counterPartyAsset;\n        isEth = _depositAsset == address(0);\n        depositAssetAmountDecimals = _depositAssetAmountDecimals;\n        counterPartyAssetAmountDecimals = _counterPartyAssetAmountDecimals;\n        optionVault = IOptionVault(_vaultAddress);\n        callOrPut = _callOrPut;\n        emit OptionCreated(address(this), symbol);\n    } \n    function setCounterPartyOption(address _counterParty) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(_counterParty != address(this), \"Cannot set self as counter party\");\n        counterPartyOption = IPKKTStructureOption(_counterParty);\n        counterParty = _counterParty;\n    }\n          \n    function decimals() public view override returns (uint8) {\n        return depositAssetAmountDecimals;\n    }\n\n    function vaultAddress() public view override returns(address) {\n        return optionVault.getAddress();\n    }\n\n\n    function getAccountBalance() external override view returns (StructureData.UserBalance memory) {\n       StructureData.UserState storage userState = userStates[msg.sender]; \n\n       StructureData.UserBalance memory result = StructureData.UserBalance({\n           pendingDepositAssetAmount:userState.pendingAsset,\n           releasedDepositAssetAmount: releasedDepositAssetAmount[msg.sender],\n           releasedCounterPartyAssetAmount: releasedCounterPartyAssetAmount[msg.sender],\n           lockedDepositAssetAmount:0 \n       });\n       if (underSettlement) { \n           if (currentRound > 2) {\n               result.lockedDepositAssetAmount = userState.deriveVirtualLocked(optionStates[currentRound - 2].premiumRate);\n           }\n           else { \n                result.lockedDepositAssetAmount = userState.tempLocked;\n           }\n       }\n       else {\n           result.lockedDepositAssetAmount = userState.GetOngoingAsset(0);\n       }\n       return result;\n    }\n\n    function getWithdrawable(address _asset) external override view returns(uint256) {\n        if (_asset == depositAsset) { \n            return optionStates[currentRound].totalAmount.add(totalReleasedDepositAssetAmount);\n        }\n        if (_asset == counterPartyAsset) {\n            return totalReleasedCounterPartyAssetAmount;\n        }\n        revert(\"invalid asset\");\n    }\n\n    function getOptionSnapShot() external override view returns(StructureData.OptionSnapshot memory) {\n       StructureData.OptionState storage currentOption = optionStates[currentRound];\n       StructureData.OptionState memory lockedOption;\n       StructureData.OptionState memory onGoingOption;\n       \n       //StructureData.OptionState storage currentOption = optionStates[currentRound];\n       StructureData.OptionSnapshot memory result = StructureData.OptionSnapshot({\n            totalPending: currentOption.totalAmount,\n            totalReleasedDeposit :  totalReleasedDepositAssetAmount,\n            totalReleasedCounterParty : totalReleasedCounterPartyAssetAmount,\n            totalLocked : 0 \n       }); \n       if (underSettlement) { \n           lockedOption = optionStates[currentRound - 1];\n           if (currentRound > 2) {\n              onGoingOption = optionStates[currentRound - 2];\n              result.totalLocked = lockedOption.totalAmount.add(\n                onGoingOption.totalAmount.withPremium(onGoingOption.premiumRate)\n              );\n           }\n           else{\n               result.totalLocked = lockedOption.totalAmount;\n           }\n       }\n       else if (currentRound > 1) {\n           onGoingOption = optionStates[currentRound - 1];\n           result.totalLocked = onGoingOption.totalAmount;\n       }\n       return result;\n    }\n\n    function completeWithdraw(uint256 _amount, address _asset) external override nonReentrant { \n       require(_amount > 0, \"!amount\");  \n       require(!underSettlement, \"Being settled\");\n       require(currentRound > 1, \"!No Matured\");  \n       require(_asset == depositAsset || _asset == counterPartyAsset, \"Invalid asset address\");\n       if (_asset == depositAsset) {\n           uint256 releasedAmount = releasedDepositAssetAmount[msg.sender];\n           require(releasedAmount >= _amount, \"Exceed available\");\n           releasedDepositAssetAmount[msg.sender] = releasedAmount.sub(_amount); \n           totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.sub(_amount);\n       }\n       else {\n           \n           uint256 releasedAmount = releasedCounterPartyAssetAmount[msg.sender];\n           require(releasedAmount >= _amount, \"Exceed available\");\n           releasedCounterPartyAssetAmount[msg.sender] = releasedAmount.sub(_amount);\n           totalReleasedCounterPartyAssetAmount = totalReleasedCounterPartyAssetAmount.sub(_amount);\n       }\n       \n        optionVault.withdraw(msg.sender, _amount, _asset, false);\n    }\n\n\n    function initiateWithraw(uint256 _assetToTerminate) external override {\n        require(_assetToTerminate > 0 , \"!_assetToTerminate\"); \n        require(currentRound > 1, \"No on going\");\n        StructureData.UserState storage userState =  userStates[msg.sender]; \n        if (underSettlement) {  \n            uint256 newAssetToTerminate = userState.assetToTerminateForNextRound.add(_assetToTerminate); \n            if (currentRound == 2) {\n                require(newAssetToTerminate <=  userState.tempLocked, \"Exceeds available\"); \n                userState.assetToTerminateForNextRound = newAssetToTerminate;\n                StructureData.OptionState storage previousOption = optionStates[currentRound - 1]; \n                previousOption.totalTerminate = previousOption.totalTerminate.add(_assetToTerminate);  \n            }\n            else {\n                StructureData.OptionState storage onGoingOption = optionStates[currentRound - 2];\n                uint256 totalLocked = userState.deriveVirtualLocked(onGoingOption.premiumRate); \n                require(newAssetToTerminate <=  totalLocked, \"Exceeds available\");   \n                userState.assetToTerminateForNextRound = newAssetToTerminate;\n                //store temporarily\n                assetToTerminateForNextRound = assetToTerminateForNextRound.add(_assetToTerminate); \n            } \n        }\n        else {\n            uint256 newAssetToTerminate = userState.assetToTerminate.add(_assetToTerminate);\n            uint256 ongoing = userState.GetOngoingAsset(0);\n            require(newAssetToTerminate <= ongoing, \"Exceeds available\");\n            userState.assetToTerminate = newAssetToTerminate;\n            StructureData.OptionState storage previousOption = optionStates[currentRound - 1];\n            previousOption.totalTerminate = previousOption.totalTerminate.add(_assetToTerminate);\n        }\n\n    }\n\n    function cancelWithdraw(uint256 _assetToTerminate) external override { \n        require(_assetToTerminate > 0 , \"!_assetToTerminate\"); \n        require(currentRound > 1, \"No on going\");\n        StructureData.UserState storage userState =  userStates[msg.sender]; \n        if (underSettlement) {  \n            require(_assetToTerminate <= userState.assetToTerminateForNextRound, \"Exceed available\");\n            userState.assetToTerminateForNextRound = userState.assetToTerminateForNextRound.sub(_assetToTerminate); \n            if (currentRound == 2) { \n                StructureData.OptionState storage previousOption = optionStates[currentRound - 1]; \n                previousOption.totalTerminate = previousOption.totalTerminate.sub(_assetToTerminate);  \n            }\n            else { \n                //store temporarily\n                assetToTerminateForNextRound = assetToTerminateForNextRound.sub(_assetToTerminate); \n            }  \n        }\n        else {  \n            require(_assetToTerminate <= userState.assetToTerminate, \"Exceed available\");\n            userState.assetToTerminate = userState.assetToTerminate.sub(_assetToTerminate); \n            StructureData.OptionState storage previousOption = optionStates[currentRound - 1];\n            previousOption.totalTerminate = previousOption.totalTerminate.sub(_assetToTerminate);\n        }\n\n    } \n    \n    \n    function maxInitiateWithdraw() external override {  \n        require(currentRound > 1, \"No on going\");\n        StructureData.UserState storage userState =  userStates[msg.sender]; \n        \n        if (underSettlement) {    \n            if (currentRound == 2) { \n                uint256 diff = userState.tempLocked.sub(userState.assetToTerminateForNextRound);\n                if (diff > 0) { \n                    userState.assetToTerminateForNextRound = userState.tempLocked; \n                    StructureData.OptionState storage previousOption = optionStates[currentRound - 1]; \n                    previousOption.totalTerminate = previousOption.totalTerminate.add(diff);  \n                }\n            }\n            else {\n                StructureData.OptionState storage onGoingOption = optionStates[currentRound - 2];\n                uint256 totalLocked = userState.deriveVirtualLocked(onGoingOption.premiumRate);  \n                uint256 diff = totalLocked.sub(userState.assetToTerminateForNextRound);\n                if (diff > 0) { \n                    userState.assetToTerminateForNextRound = totalLocked;\n                    //store temporarily\n                    assetToTerminateForNextRound = assetToTerminateForNextRound.add(totalLocked); \n                }\n            } \n        }\n        else {    \n            uint256 onGoing = userState.GetOngoingAsset(0);\n            uint256 diff = onGoing.sub(userState.assetToTerminate);\n            if (diff > 0) { \n                userState.assetToTerminate = onGoing; \n                StructureData.OptionState storage previousOption = optionStates[currentRound - 1]; \n                previousOption.totalTerminate = previousOption.totalTerminate.add(diff);  \n            }\n        }\n \n    }\n\n    function maxCancelWithdraw() external override {   \n        require(currentRound > 1, \"No on going\");\n        StructureData.UserState storage userState =  userStates[msg.sender];  \n        if (underSettlement) {   \n            if (currentRound == 2) {  \n                StructureData.OptionState storage previousOption = optionStates[currentRound - 1]; \n                previousOption.totalTerminate = previousOption.totalTerminate.sub(userState.assetToTerminateForNextRound);   \n                userState.assetToTerminateForNextRound = 0;\n            }\n            else { \n                //store temporarily\n                assetToTerminateForNextRound = assetToTerminateForNextRound.sub(userState.assetToTerminateForNextRound); \n                userState.assetToTerminateForNextRound = 0;\n            }  \n        }\n        else {   \n            StructureData.OptionState storage onGoingOption = optionStates[currentRound - 1];\n            onGoingOption.totalTerminate = onGoingOption.totalTerminate.sub(userState.assetToTerminate);\n            userState.assetToTerminate = 0; \n        } \n    }\n    \n    \n    function withdraw(uint256 _amount, address _asset) external override nonReentrant { \n       require(_amount > 0, \"!amount\");  \n       require(!underSettlement, \"Being settled\");  \n       require(_asset == depositAsset || _asset == counterPartyAsset, \"Invalid asset address\"); \n       if (_asset == depositAsset) {\n           //todo: 0 out released amount if missing balance from trader\n           uint256 releasedAmount = releasedDepositAssetAmount[msg.sender];\n           if (releasedAmount <= _amount) { \n               StructureData.UserState storage userState =  userStates[msg.sender];  \n               uint256 redeemAmount = _amount.sub(releasedAmount);\n               require(userState.pendingAsset >= redeemAmount, \"Exceeds available\"); \n               releasedDepositAssetAmount[msg.sender] = 0; \n               totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.sub(releasedAmount);\n               userState.pendingAsset = userState.pendingAsset.sub(redeemAmount);\n               StructureData.OptionState storage optionState = optionStates[currentRound];\n               optionState.totalAmount = optionState.totalAmount.sub(redeemAmount);  \n           }\n           else { \n               releasedDepositAssetAmount[msg.sender] = releasedAmount.sub(_amount); \n               totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.sub(_amount);\n           }\n       }\n       else {\n \n           //same result as completeWithdraw \n           uint256 releasedAmount = releasedCounterPartyAssetAmount[msg.sender];\n           require(releasedAmount >= _amount, \"Exceed available\");\n           releasedCounterPartyAssetAmount[msg.sender] = releasedAmount.sub(_amount);\n           totalReleasedCounterPartyAssetAmount = totalReleasedCounterPartyAssetAmount.sub(_amount);\n       }\n        optionVault.withdraw(msg.sender, _amount, _asset, false);\n        emit Withdraw(msg.sender, _asset, _amount);\n    }\n \n\n    //only allowed for re-depositing the matured deposit asset, the max can be deducted from getMatured() with asset matched depositAsset in address\n    function redeposit(uint256 _amount) external override nonReentrant { \n       require(currentRound > 1, \"!No Matured\");\n       require(_amount > 0, \"!amount\"); \n       uint256 releasedAmount = releasedDepositAssetAmount[msg.sender];\n       require(releasedAmount >= _amount, \"Exceed available\");\n       releasedDepositAssetAmount[msg.sender] = releasedAmount.sub(_amount);\n       totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.sub(_amount);\n       _depositFor(msg.sender, _amount, currentRound, 0);\n    }\n\n    //only allowed for re-depositing the matured counterParty asset, the max can be deducted from getMatured() with asset matched counterPartyAsset in address\n    function redepositToCounterParty(uint256 _amount) external override { \n       require(!underSettlement, \"Being settled\");\n       require(currentRound > 1, \"!No Matured\");\n       require(_amount > 0, \"!amount\"); \n       uint256 releasedAmount = releasedCounterPartyAssetAmount[msg.sender];\n       require(releasedAmount >= _amount, \"Exceed available\");\n       releasedCounterPartyAssetAmount[msg.sender] = releasedAmount.sub(_amount);\n       totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.sub(_amount);\n       address[] memory addresses = new address[](1);\n       uint256[] memory amounts = new uint256[](1);\n       uint256[] memory terminates = new uint256[](1);\n       addresses[0] = msg.sender;\n       amounts[0] = _amount;\n       terminates[0] = 0;\n       counterPartyOption.depositFromCounterParty(addresses, amounts, terminates);\n    }\n\n\n    //todo: what if quata is not enough\n    function depositFromCounterParty(address[] memory addresses, uint256[] memory _amounts,  uint256[] memory _terminates) override external {\n        require(msg.sender == counterParty, \"Only counter party option can call this method\");\n        uint256 round = underSettlement ? currentRound - 1 : currentRound;\n        for(uint256 i = 0; i < 0 ; i++){\n            _depositFor(addresses[i], _amounts[i], round, _terminates[i]);\n        } \n    }\n    //deposit eth\n    function depositETH() external payable override nonReentrant{ \n       require(currentRound > 0, \"!Started\");\n       require(isEth, \"!ETH\");\n       require(msg.value > 0, \"!value\"); \n       \n        //todo: convert to weth  \n       _depositFor(msg.sender, msg.value, currentRound, 0);\n       payable(vaultAddress()).transfer(msg.value);\n    }\n\n    //deposit other erc20 coin, take wbtc\n    function deposit(uint256 _amount) external override nonReentrant{   \n        require(currentRound > 0, \"!Started\");\n        require(!isEth, \"!ERC20\");\n        require(_amount > 0, \"!amount\"); \n        _depositFor(msg.sender, _amount,currentRound, 0);  \n        IERC20(depositAsset).safeTransferFrom(msg.sender, vaultAddress(), _amount);\n    }\n \n  \n    function _depositFor(address _userAddress, uint256 _amount, uint256 _round, uint256 _toTerminate) private { \n        StructureData.OptionState storage optionState = optionStates[_round];\n        require(optionState.totalAmount.add(_amount) <= quota, \"Not enough quota\");\n        StructureData.UserState storage userState =  userStates[_userAddress]; \n        //first time added\n        if (!userState.hasState) { \n            userState.hasState = true;\n            usersInvolved.push(_userAddress);\n        } \n        if (_round != currentRound) { \n            userState.tempLocked = userState.tempLocked.add(_amount); \n            userState.assetToTerminateForNextRound = userState.assetToTerminateForNextRound.add(_toTerminate);\n            assetToTerminateForNextRound = assetToTerminateForNextRound.add(_toTerminate);\n        }\n        else { \n            userState.pendingAsset = userState.pendingAsset.add(_amount); \n        }\n        optionState.totalAmount = optionState.totalAmount.add(_amount);\n        \n        emit Deposit(msg.sender, _userAddress, _round, _amount, address(this));\n    }\n\n \n    function redeem(uint256 _amount) external override nonReentrant{  \n         require(_amount > 0, \"!amount\"); \n         StructureData.UserState storage userState =  userStates[msg.sender]; \n         require(userState.pendingAsset >= _amount, \"Exceeds available\");\n         userState.pendingAsset = userState.pendingAsset.sub(_amount); \n         StructureData.OptionState storage optionState = optionStates[currentRound];\n         optionState.totalAmount = optionState.totalAmount.sub(_amount);\n         optionVault.withdraw(msg.sender, _amount, depositAsset, true); \n         emit Withdraw(msg.sender, depositAsset, _amount);\n    }\n \n  \n    //used to render the history at client side, reading the minting transactions of a specific address,\n    //for each transaction, read the blockheight and call this method to get the result\n    //the blockheight is the the height when the round is committed  \n    function getRoundData(uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\n        return optionStates[optionHeights[_blockHeight]];\n    } \n\n\n   /*\n    *  Following operations can only be triggered from ISettlementAggregator with the settler role\n    */\n\n   //first, open t+1 round\n   function rollToNext(uint256 _quota) external override onlyRole(SETTLER_ROLE) returns(uint256 _pendingAmount){   \n\n       require(!underSettlement, \"Being settled\"); \n      \n       if (currentRound > 1) {\n           require(optionStates[currentRound-1].strikePrice > 0,  \"Strike Price not set\");\n       } \n\n       underSettlement = true; \n       quota = _quota;\n        currentRound = currentRound + 1;\n        StructureData.OptionState memory currentOption =  \n        StructureData.OptionState({\n                            round: currentRound,\n                            totalAmount: 0,\n                            totalTerminate: 0,\n                            premiumRate:  0,\n                            pricePrecision: 0,\n                            strikePrice: 0,\n                            executed: false,\n                            callOrPut: callOrPut\n                        });\n        optionStates[currentRound] = currentOption; \n       if (currentRound > 1) {\n            uint256 userCount = usersInvolved.length;\n            for (uint i=0; i < userCount; i++) {\n                address userAddress = usersInvolved[i];\n                StructureData.UserState storage userState = userStates[userAddress]; \n                if(userState.pendingAsset != 0) {  \n                    userState.tempLocked = userState.pendingAsset;  \n                }   \n                userState.pendingAsset = 0;\n            }\n       }\n       else {\n           underSettlement = false;\n       }\n        emit OpenOption(currentRound); \n        if (currentRound > 1) {\n            return optionStates[currentRound-1].totalAmount;\n        }\n        return 0;\n    }\n    \n\n   //then dry run settlement and get accounting result\n   function dryRunSettlement(bool _execute) external override view onlyRole(SETTLER_ROLE) returns(StructureData.SettlementAccountingResult memory _result) {\n        require(underSettlement, \"Not being settled\");\n        require(currentRound > 1, \"Nothing to settle\");\n\n        StructureData.OptionState storage lockedOption = optionStates[currentRound - 1]; \n        StructureData.SettlementAccountingResult memory result = StructureData.SettlementAccountingResult({\n            option: address(this),\n            round: currentRound - 1,\n            depositAmount: lockedOption.totalAmount,\n            executed: _execute,\n            autoRollAmount: 0,\n            autoRollPremium: 0,\n            releasedAmount: 0,\n            releasedPremium: 0,\n            autoRollCounterPartyAmount: 0,\n            autoRollCounterPartyPremium: 0,\n            releasedCounterPartyAmount: 0,\n            releasedCounterPartyPremium: 0\n        });\n       if (currentRound > StructureData.MATUREROUND + 1) { \n            StructureData.OptionState memory previousOptionState = optionStates[currentRound - StructureData.MATUREROUND - 1];\n            StructureData.MaturedState memory maturedState = _calculateMaturity(_execute, previousOptionState); \n            if (_execute) { \n                result.autoRollCounterPartyAmount = maturedState.autoRollCounterPartyAssetAmount;\n                result.autoRollCounterPartyPremium = maturedState.autoRollCounterPartyAssetPremiumAmount;\n                result.releasedCounterPartyAmount = maturedState.releasedCounterPartyAssetAmount;\n                result.releasedCounterPartyPremium = maturedState.releasedCounterPartyAssetPremiumAmount;\n            }\n            else { \n                result.autoRollAmount = maturedState.autoRollDepositAssetAmount;\n                result.autoRollPremium = maturedState.autoRollDepositAssetPremiumAmount;\n                result.releasedAmount = maturedState.releasedDepositAssetAmount;\n                result.releasedPremium = maturedState.releasedDepositAssetPremiumAmount;\n            } \n       } \n       return result;\n   }\n\n   //then, make decision based on dry run result and close t-1 round\n   function closePrevious(bool _execute) external override onlyRole(SETTLER_ROLE)  \n   returns(StructureData.MaturedState memory _maturedState) {   \n        require(underSettlement, \"Not being settled\");\n        require (currentRound > StructureData.MATUREROUND + 1, \"no matured\");\n        uint maturedRound = currentRound - StructureData.MATUREROUND - 1;\n        StructureData.OptionState storage previousOptionState = optionStates[maturedRound];   \n        StructureData.MaturedState memory maturedState = _calculateMaturity(_execute, previousOptionState);    \n        previousOptionState.executed = _execute;\n        if (_execute) {\n            totalReleasedCounterPartyAssetAmount = totalReleasedCounterPartyAssetAmount.\n            add(maturedState.releasedCounterPartyAssetAmount).add(maturedState.releasedCounterPartyAssetPremiumAmount); \n        }\n        else {\n            totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.\n            add(maturedState.releasedDepositAssetAmount).add(maturedState.releasedDepositAssetPremiumAmount);\n\n        }\n        if (previousOptionState.totalAmount > 0) { \n            autoRoll(_execute, previousOptionState, maturedState);\n        }    \n        emit CloseOption(maturedRound);\n        return maturedState;\n   }\n\n   //next, commit t round\n   function commitCurrent() external override onlyRole(SETTLER_ROLE) nonReentrant {  \n        require (currentRound > 1, \"not started\");\n        if(currentRound <= 2 && !underSettlement) {\n           underSettlement = true;\n       }\n        require(underSettlement, \"Not being settled\");\n        \n        uint256 lockedRound = currentRound - 1;\n        StructureData.OptionState storage optionState = optionStates[lockedRound];  \n        //mint for the current option\n        _mint(address(this), optionState.totalAmount);\n        uint256 userCount = usersInvolved.length;\n        for (uint i=0; i < userCount; i++) {\n            address userAddress = usersInvolved[i];\n            StructureData.UserState storage userState = userStates[userAddress]; \n            if(userState.tempLocked != 0) {  \n                //transfer each user a share of the option to trigger transfer event\n                //can be used to calculate the user option selling operations\n                //utilizing some web3 indexed services, take etherscan api/graphql etc.\n                _transfer(address(this), userAddress, userState.tempLocked);\n                emit OptionTransfer(address(this), userAddress, optionState.premiumRate, optionState.round);\n            } \n            if (userState.assetToTerminateForNextRound != 0){ \n                userState.assetToTerminate = userState.assetToTerminateForNextRound;\n                userState.assetToTerminateForNextRound = 0;\n            } \n            else {\n                userState.assetToTerminate = 0;\n            }\n            userState.SetOngoingAsset(userState.tempLocked); \n            userState.tempLocked = 0; \n         }\n        optionState.totalTerminate = assetToTerminateForNextRound;\n        assetToTerminateForNextRound = 0;\n        optionHeights[lockedRound] = block.number; //commit current option at current block\n        emit CommitOption(lockedRound);\n        underSettlement = false;\n   }\n       \n   //at last, specify option parameters\n   function setOptionParameters(StructureData.OptionParameters memory _optionParameters) external override onlyRole(SETTLER_ROLE) {\n        \n        require (currentRound > 1, \"not started\"); \n        require(!underSettlement, \"Being settled\"); \n        uint256 previousRound = currentRound - 1;\n        StructureData.OptionState storage optionState = optionStates[previousRound]; \n        require(optionState.strikePrice == 0, \"Strike Price already set\");\n        optionState.strikePrice = _optionParameters.strikePrice;\n        optionState.premiumRate = _optionParameters.premiumRate;\n        optionState.pricePrecision = _optionParameters.pricePrecision;\n   }\n\n   \n     function _calculateMaturity(bool _execute, StructureData.OptionState memory _optionState) private view\n     returns(StructureData.MaturedState memory) {\n       StructureData.MaturedState memory state = StructureData.MaturedState({\n          releasedDepositAssetAmount: 0,\n          releasedDepositAssetPremiumAmount: 0,\n          autoRollDepositAssetAmount: 0,\n          autoRollDepositAssetPremiumAmount: 0,\n          releasedCounterPartyAssetAmount: 0, \n          releasedCounterPartyAssetPremiumAmount: 0,\n          autoRollCounterPartyAssetAmount: 0,\n          autoRollCounterPartyAssetPremiumAmount: 0,\n          round: _optionState.round\n       });  \n        if (_execute) {  \n\n           uint256 maturedCounterPartyAssetAmount = callOrPut ? \n            _optionState.totalAmount.mul(_optionState.strikePrice).mul(10**counterPartyAssetAmountDecimals).\n           div(10**(_optionState.pricePrecision + depositAssetAmountDecimals))  :  \n\n           _optionState.totalAmount.mul(10**(_optionState.pricePrecision + counterPartyAssetAmountDecimals)).\n           div(_optionState.strikePrice).div(10** depositAssetAmountDecimals); \n \n           uint256 maturedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetAmount.premium(_optionState.premiumRate); \n           if (_optionState.totalTerminate > 0) { \n               state.releasedCounterPartyAssetAmount = Utils.getAmountToTerminate(maturedCounterPartyAssetAmount, _optionState.totalTerminate, _optionState.totalAmount);\n               state.releasedCounterPartyAssetPremiumAmount = Utils.getAmountToTerminate(maturedCounterPartyAssetPremiumAmount, _optionState.totalTerminate, _optionState.totalAmount);\n           }\n           state.autoRollCounterPartyAssetAmount = maturedCounterPartyAssetAmount.sub(state.releasedCounterPartyAssetAmount);\n           state.autoRollCounterPartyAssetPremiumAmount = maturedCounterPartyAssetPremiumAmount.sub(state.releasedCounterPartyAssetPremiumAmount);\n        }\n        else { \n           uint256 maturedDepositAssetAmount = _optionState.totalAmount;\n           uint256 maturedDepositAssetPremiumAmount = maturedDepositAssetAmount.premium(_optionState.premiumRate);\n           if (_optionState.totalTerminate > 0) { \n               state.releasedDepositAssetAmount = Utils.getAmountToTerminate(maturedDepositAssetAmount, _optionState.totalTerminate, _optionState.totalAmount);\n               state.releasedDepositAssetPremiumAmount = Utils.getAmountToTerminate(maturedDepositAssetPremiumAmount, _optionState.totalTerminate, _optionState.totalAmount);\n           }\n           state.autoRollDepositAssetAmount = maturedDepositAssetAmount.sub(state.releasedDepositAssetAmount);\n           state.autoRollDepositAssetPremiumAmount = maturedDepositAssetPremiumAmount.sub(state.releasedDepositAssetPremiumAmount);\n\n        }\n         return state;\n     }\n\n\n   address[] private autoRolledUsers;\n   uint256[] private autoRolledAmounts;\n   uint256[] private toTerminateAmounts;\n\n   function autoRoll(bool _counterParty, StructureData.OptionState memory _optionState, StructureData.MaturedState memory _maturedState) private {\n        uint256 userCount = usersInvolved.length; \n        uint256 totalAutoRollBase = _optionState.totalAmount.sub(_optionState.totalTerminate);\n        if (!_counterParty) {\n            uint256 lockedRound = currentRound - 1; \n            uint256 totalReleased = _maturedState.releasedDepositAssetAmount.add(_maturedState.releasedDepositAssetPremiumAmount);\n            uint256 totalAutoRoll = _maturedState.autoRollDepositAssetAmount.add(_maturedState.autoRollDepositAssetPremiumAmount);\n            for (uint i=0; i < userCount; i++) {\n                address userAddress = usersInvolved[i];\n                StructureData.UserState storage userState = userStates[userAddress]; \n                \n                uint256 ongoing = userState.GetOngoingAsset(0);  \n                if (ongoing == 0) {\n                    userState.assetToTerminate = 0;\n                    continue;\n                }\n                uint256 amountToTerminate = Utils.getAmountToTerminate(totalReleased, userState.assetToTerminate, _optionState.totalTerminate);\n                if (amountToTerminate > 0) {\n                    releasedDepositAssetAmount[userAddress] = \n                    releasedDepositAssetAmount[userAddress].add(amountToTerminate); \n                }\n                uint256 remainingAmount = Utils.getAmountToTerminate(totalAutoRoll, ongoing.sub(userState.assetToTerminate), totalAutoRollBase);\n                if (remainingAmount > 0) { \n                    _depositFor(userAddress, remainingAmount, lockedRound, 0);\n                } \n                userState.assetToTerminate = 0;\n            }  \n            return;\n        }\n\n        uint256 totalReleased2 = _maturedState.releasedCounterPartyAssetAmount.add(_maturedState.releasedCounterPartyAssetPremiumAmount);\n        uint256 totalAutoRoll2 = _maturedState.autoRollCounterPartyAssetAmount.add(_maturedState.autoRollCounterPartyAssetPremiumAmount);  \n        \n        //debit assetToTerminateForNextRound if executed\n        if (assetToTerminateForNextRound > 0 && totalAutoRoll2 > 0) {\n             uint256 virtualAutoRoll = totalAutoRollBase.withPremium(_optionState.premiumRate);\n             if (virtualAutoRoll >= assetToTerminateForNextRound) {\n                 assetToTerminateForNextRound = 0;\n             }\n             else {\n                 assetToTerminateForNextRound = assetToTerminateForNextRound.sub(virtualAutoRoll);\n             }\n        }\n        for (uint i=0; i < userCount; i++) {\n            address userAddress = usersInvolved[i];\n            StructureData.UserState storage userState = userStates[userAddress];  \n            \n            uint256 onGoing = userState.GetOngoingAsset(0);  \n            if (onGoing == 0) {\n                userState.assetToTerminate = 0;\n                continue;\n            } \n            uint256 amountToTerminate = Utils.getAmountToTerminate(totalReleased2, userState.assetToTerminate, _optionState.totalTerminate);\n            if (amountToTerminate > 0) {\n                releasedCounterPartyAssetAmount[userAddress] = \n                releasedCounterPartyAssetAmount[userAddress].add(amountToTerminate);\n            }\n            onGoing = onGoing.sub(userState.assetToTerminate);\n            uint256 remainingAmount = Utils.getAmountToTerminate(totalAutoRoll2, onGoing, totalAutoRollBase);\n            if (remainingAmount > 0){   \n                autoRolledAmounts.push(remainingAmount);\n                autoRolledUsers.push(userAddress); \n                (uint256 onGoingTerminate,) = userState.deriveWithdrawRequest(_optionState.premiumRate);\n                if (onGoingTerminate != 0) {\n                    uint256 virtualOnGoing =  onGoing.withPremium(_optionState.premiumRate);\n                    onGoingTerminate = Utils.getAmountToTerminate(remainingAmount, onGoingTerminate, virtualOnGoing);\n                } \n                toTerminateAmounts.push(onGoingTerminate);\n            } \n            userState.assetToTerminate = 0;\n        } \n        \n        uint256 count = autoRolledAmounts.length;\n        if (count == 0) {\n            return;\n        }\n        \n        address[] memory localAutoRolledUsers = new address[](count);\n        uint256[] memory localAutoRolledAmounts = new uint256[](count);\n        uint256[] memory localToTerminateAmounts = new uint256[](count);\n        for(uint i = 0; i < count; i++) {\n            localAutoRolledUsers[i] = autoRolledUsers[i];\n            localAutoRolledAmounts[i] = autoRolledAmounts[i];\n            localToTerminateAmounts[i] = toTerminateAmounts[i];\n        }\n        delete autoRolledUsers;\n        delete autoRolledAmounts;\n        counterPartyOption.depositFromCounterParty(localAutoRolledUsers, localAutoRolledAmounts, localToTerminateAmounts); \n   }\n\n}"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/libraries/StructureData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport './Utils.sol';\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nlibrary StructureData {\n     \n    using SafeMath for uint256;\n     uint8 public constant MATUREROUND= 1; //7 for daily settlement, 1 for daily settlement\n     using Utils for uint256;\n     struct OptionParameters {\n         address option;\n         uint256 strikePrice;  // strike price if executed\n         uint8 pricePrecision;\n         uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\n     }\n\n    struct OptionState {\n         uint256 round;\n         uint256 totalAmount; \n         uint256 totalTerminate;   \n         uint256 strikePrice; \n         uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\n         uint8 pricePrecision; \n         bool executed; \n         bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral;\n    }\n \n   struct MaturedState {\n       uint256 releasedDepositAssetAmount;\n       uint256 releasedDepositAssetPremiumAmount;\n       uint256 releasedCounterPartyAssetAmount; \n       uint256 releasedCounterPartyAssetPremiumAmount; \n       uint256 autoRollDepositAssetAmount;\n       uint256 autoRollDepositAssetPremiumAmount;\n       uint256 autoRollCounterPartyAssetAmount; \n       uint256 autoRollCounterPartyAssetPremiumAmount; \n\n       uint256 round;\n       \n   }\n\n    enum OptionType {\n        HodlBooster,\n        VolAlpha\n    }\n\n    struct UserState {\n        uint256 pendingAsset; //for current round\n        uint256 tempLocked;//asset not sent to trader yet, but closed for deposit\n        uint256[MATUREROUND] ongoingAsset; //for previous 7 rounds\n        uint8 nextCursor; //nextCursor\n        uint232 totalRound; \n        bool hasState;\n        uint256 assetToTerminate;  \n        uint256 assetToTerminateForNextRound;  \n    }\n\n    struct OptionSnapshot {\n        uint256 totalPending;\n        uint256 totalLocked;\n        uint256 totalReleasedDeposit;\n        uint256 totalReleasedCounterParty; \n    }\n\n    struct UserBalance {\n        uint256 pendingDepositAssetAmount; \n        uint256 lockedDepositAssetAmount;  \n        uint256 releasedDepositAssetAmount;\n        uint256 releasedCounterPartyAssetAmount;\n    }\n\n    function SetOngoingAsset(UserState storage userState, uint256 newValue) internal { \n        uint cursor = userState.nextCursor;\n        userState.ongoingAsset[cursor] = newValue;\n        uint8 nextCursor = cursor == (MATUREROUND - 1) ? uint8(0) : uint8(cursor + 1);\n        userState.nextCursor = nextCursor;\n        userState.totalRound = userState.totalRound + 1; //won't overflow\n    }\n    \n    function GetOngoingAsset(UserState storage userState, uint8 backwardRound) internal view returns(uint256) {\n        if (userState.totalRound <= backwardRound) return 0;\n        require(backwardRound < MATUREROUND);\n        int8 previousCursor = int8(userState.nextCursor) - int8(backwardRound) - 1;\n        if (previousCursor < 0) {\n            previousCursor = previousCursor + int8(MATUREROUND);\n        }\n        return userState.ongoingAsset[uint8(previousCursor)];\n    }\n\n    function deriveWithdrawRequest(UserState storage userState, uint256 premiumRate) internal view returns (uint256 _onGoingRoundAmount, uint256 _lockedRoundAmount) {\n       if (userState.tempLocked == 0) {\n           return (userState.assetToTerminateForNextRound, 0);\n       }\n       uint256 onGoing = GetOngoingAsset(userState, 0);\n       if (onGoing == 0) {\n           return (0, userState.assetToTerminateForNextRound);\n       }\n       onGoing = onGoing.sub(userState.assetToTerminate);\n       uint256 virtualOnGoing = onGoing.withPremium(premiumRate);\n       if (userState.assetToTerminateForNextRound <= virtualOnGoing) {\n           return (userState.assetToTerminateForNextRound, 0);\n       }\n       else {\n           return (virtualOnGoing, userState.assetToTerminateForNextRound.sub(virtualOnGoing));\n       }\n    }\n    function deriveVirtualLocked(UserState storage userState, uint256 premiumRate) internal view returns (uint256) {\n        uint256 onGoing = GetOngoingAsset(userState, 0);\n        if (onGoing == 0) {\n            return userState.tempLocked;\n        }\n        onGoing = onGoing.sub(userState.assetToTerminate);\n        if (userState.tempLocked == 0) {\n            return onGoing.withPremium(premiumRate);\n        }\n        return userState.tempLocked.add(onGoing.withPremium(premiumRate));\n        \n    }\n    struct OptionPairDefinition{\n        address callOption;\n        address putOption;\n        address callOptionDeposit;\n        address putOptionDeposit;\n    }\n    struct SettlementAccountingResult {\n        //won't change regardless execute or not\n        address option;\n        uint256 round;\n        uint256 depositAmount;  \n\n        //following will change if execute or not\n        bool executed;\n        uint256 autoRollAmount; //T-1 Carried (filled only when not executed)\n        uint256 autoRollPremium; //Premium (filled only when not executed)\n        //maturedAmount+maturedPremium = requested withdrawal for deposit asset(filled only when not executed and with withdraw request)\n        uint256 releasedAmount;  \n        uint256 releasedPremium;\n        //autoRollCounterPartyAmount + autoRollCounterPartyPremium = Execution rolled-out for deposit asset (Execution roll-in for counter party option)\n        //filled only when executed\n        uint256 autoRollCounterPartyAmount;\n        uint256 autoRollCounterPartyPremium;\n        //maturedCounterPartyAmount+maturedCounterPartyPremium= requested withdrawal for couter party asset(filled only when executed and with withdraw request)\n        uint256 releasedCounterPartyAmount;\n        uint256 releasedCounterPartyPremium; \n\n    }\n\n    enum OptionExecution{\n        NoExecution,\n        ExecuteCall,\n        ExecutePut\n    }\n\n    struct OptionPairExecutionAccountingResult {  \n        SettlementAccountingResult callOptionResult;\n        SettlementAccountingResult putOptionResult;\n        OptionExecution execute;\n    }\n\n    struct OptionPairExecution {\n        address callOption;\n        address putOption;\n        OptionExecution execute; \n    }\n\n    \n\n    struct SettlementCashflowResult{ \n        address contractAddress; //0 for eth \n        uint256 newDepositAmount;\n        uint256 newReleasedAmount;\n        int256 leftOverAmount; //positive, if trader didn't withdraw last time; negative, if trader failed to send back last time; \n    }\n \n}"
    },
    "contracts/interfaces/IPKKTStructureOption.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.4;\nimport {StructureData} from \"../libraries/StructureData.sol\";\n \ninterface IPKKTStructureOption {\n\n    function setCounterPartyOption(address _counterParty) external;\n    \n    function getAccountBalance() external view returns (StructureData.UserBalance memory); \n\n    //ISettlementAggregator.balanceEnough needs to be called if there is any release amount\n    function getOptionSnapShot() external view returns(StructureData.OptionSnapshot memory);\n \n    function getWithdrawable(address _asset) external view returns(uint256); \n\n    \n    function vaultAddress() external view returns(address);\n\n    //deposit eth\n    function depositETH() external payable;\n\n    //deposit other erc20 coin, take wbtc or stable coin\n    function deposit(uint256 _amount) external;\n\n    //redeem unsettled amount\n    function redeem(uint256 _amount) external;  \n\n    //complete withdraw happens on the option vault\n    function initiateWithraw(uint256 _assetToTerminate) external; \n\n    function cancelWithdraw(uint256 _assetToTerminate) external;\n\n    function maxInitiateWithdraw() external;\n\n    function maxCancelWithdraw() external;\n    \n    function withdraw(uint256 _amount, address _asset) external; \n\n    function completeWithdraw(uint256 _amount, address _asset) external; \n\n    //only allowed for re-depositing the matured deposit asset, the max can be deducted from getMatured() with asset matched depositAsset in address\n    function redeposit(uint256 _amount) external;\n\n\n    //only allowed for re-depositing the matured counterParty asset, the max can be deducted from getMatured() with asset matched counterPartyAsset in address\n    function redepositToCounterParty(uint256 _amount) external;\n\n    //can only be called from counterparty option \n    function depositFromCounterParty(address[] memory _addresses, uint256[] memory _amounts, uint256[] memory _terminates) external;\n \n\n    //used to render the history at client side, reading the minting transactions of a specific address,\n    //for each transaction, read the blockheight and call this method to get the result\n    //the blockheight is the the height when the round is committed \n    function getRoundData(uint256 _blockHeight) external view returns(StructureData.OptionState memory);\n\n \n}\n\n"
    },
    "contracts/interfaces/IExecuteSettlement.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.4;\nimport {StructureData} from \"../libraries/StructureData.sol\";  \ninterface IExecuteSettlement { \n \n    //open a new option\n   function rollToNext(uint256 _quota) external returns(uint256 _pendingAmount); \n \n   //calculate the result of on going option    \n   function closePrevious(bool _execute) external returns(StructureData.MaturedState memory _maturedState);\n\n   //close pending option and autoroll if capacity is enough based on the maturity result\n   function commitCurrent() external ; \n\n   function setOptionParameters(StructureData.OptionParameters memory _optionParameters) external;\n   \n   function dryRunSettlement(bool _execute) external view returns(StructureData.SettlementAccountingResult memory _result);\n}\n"
    },
    "contracts/interfaces/IOptionVault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.4;\nimport {StructureData} from \"../libraries/StructureData.sol\";\n\ninterface IOptionVault { \n    function addOption(address _optionContract) external;\n    function removeOption(address _optionContract) external;\n    function getAddress() external view returns(address);\n    function withdraw(address _target, uint256 _amount, address _contractAddress, bool _redeem) external;\n     \n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/OptionVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n \nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; \nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\"; \nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\"; \nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"hardhat/console.sol\";\n \nimport {StructureData} from \"./libraries/StructureData.sol\";      \nimport \"./interfaces/IOptionVault.sol\"; \nimport \"./interfaces/ISettlementAggregator.sol\"; \nimport \"./interfaces/IExecuteSettlement.sol\"; \nimport \"./interfaces/IPKKTStructureOption.sol\";\n\ncontract OptionVault is IOptionVault, ISettlementAggregator, AccessControl {\n    \n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n     \n     uint256 public override currentRound; \n    /*\n     * cash flow perspective (based on asset address)\n     */\n    address[] private asset;  \n    mapping(address=>bool) private assetExistence;\n    mapping(address=>StructureData.SettlementCashflowResult) public settlementCashflowResult; \n    mapping(address=>uint256) private releasedAmount; //debit\n    mapping(address=>uint256) private depositAmount; //credit\n    mapping(address=>int256) private leftOverAmount;  //history balance\n    \n    /*\n     *  actual balance perspective\n     *  withdrawable = redeemable + released\n     *  balance = withdrawable + leftOver  \n     */\n    mapping(address=>uint256) private assetBalanceAfterSettle;\n    mapping(address=>uint256) private assetWithdrawableAfterSettle;\n    mapping(address=>uint256) private assetTraderWithdrawn;\n\n    /*\n     * accounting perspective(based on option pair)\n     */ \n    StructureData.OptionPairDefinition[] private optionPairs;\n    StructureData.OptionPairExecutionAccountingResult[] public executionAccountingResult; \n\n\n    bytes32 public constant OPTION_ROLE = keccak256(\"OPTION_ROLE\");\n    bytes32 public constant SETTLER_ROLE = keccak256(\"SETTLER_ROLE\");\n\n    constructor(address _settler) {\n       // Contract deployer will be able to grant and revoke option role\n       _setupRole(DEFAULT_ADMIN_ROLE, msg.sender); \n       _setupRole(SETTLER_ROLE, _settler); \n    }\n    \n    function addOption(address _optionContract) public override onlyRole(DEFAULT_ADMIN_ROLE){\n        _setupRole(OPTION_ROLE, _optionContract);  \n    }\n\n    function removeOption(address _optionContract) public override onlyRole(DEFAULT_ADMIN_ROLE){\n        revokeRole(OPTION_ROLE, _optionContract);  \n    }\n    function getAddress() public view override returns(address){\n        return address(this);\n    }\n\n     \n    function withdraw(address _target, uint256 _amount, address _contractAddress, bool _redeem) external override onlyRole(OPTION_ROLE){\n         if (!_redeem) {\n             require(balanceEnough(_contractAddress), \"Released amount not available yet\");\n         }\n        _withdraw(_target, _amount, _contractAddress);\n    }\n    function addAssetIfNeeded(address _asset) private{\n        if (!assetExistence[_asset]) {\n            assetExistence[_asset] = true;\n            asset.push(_asset);\n        }\n    } \n     function _withdraw(address _target, uint256 _amount, address _contractAddress) private{\n\n        if (_contractAddress == address(0)) {\n            payable(_target).transfer(_amount);\n        }\n        else { \n            IERC20(_contractAddress).safeTransfer(_target, _amount); \n        }\n    }  \n \n\n \n    function addOptionPair(StructureData.OptionPairDefinition memory _pair) external override onlyRole(DEFAULT_ADMIN_ROLE){\n        addOption(_pair.callOption);\n        addOption(_pair.putOption);   \n        optionPairs.push(_pair);\n        //IPKKTStructureOption(_pair.callOption).setCounterPartyOption(_pair.putOption);\n        //IPKKTStructureOption(_pair.putOption).setCounterPartyOption(_pair.callOption);\n        addAssetIfNeeded(_pair.callOptionDeposit);\n        addAssetIfNeeded(_pair.putOptionDeposit); \n    }\n\n    function removeOptionPair(StructureData.OptionPairDefinition memory _pair) external override onlyRole(DEFAULT_ADMIN_ROLE){\n        removeOption(_pair.callOption);\n        removeOption(_pair.putOption);\n        uint256 count = optionPairs.length;\n        for(uint256 i = 0; i < count; i++) {\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\n            if (pair.callOption == _pair.callOption &&\n                pair.putOption == _pair.putOption) {\n                //fake remove\n                pair.callOption = address(0);\n                pair.putOption = address(0); \n                break;\n            }\n        }\n    }\n\n\n\n    uint256 MAX_INT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n\n    function initiateSettlement() external override onlyRole(SETTLER_ROLE) {\n        currentRound = currentRound + 1;\n        if (currentRound > 1) { \n            delete executionAccountingResult;\n        } \n        uint256 count = optionPairs.length; \n        for(uint256 i = 0; i < count; i++) {\n            StructureData.OptionPairDefinition memory pair = optionPairs[i];\n            if (pair.callOption == address(0) &&\n                pair.putOption == address(0)) {\n                continue;\n            }\n            IExecuteSettlement callOption = IExecuteSettlement(pair.callOption);\n            IExecuteSettlement putOption = IExecuteSettlement(pair.putOption);\n            uint256 pending1 = callOption.rollToNext(MAX_INT);\n            uint256 pending2 = putOption.rollToNext(MAX_INT);\n            if (pending1 > 0) { \n                depositAmount[pair.callOptionDeposit] = depositAmount[pair.callOptionDeposit].add(pending1);\n            }\n            if (pending2 > 0) { \n                depositAmount[pair.putOptionDeposit] = depositAmount[pair.putOptionDeposit].add(pending2);\n            }\n            if (currentRound <= 2) {\n                continue;\n            }\n            StructureData.SettlementAccountingResult memory noneExecuteCallOption = callOption.dryRunSettlement(false);\n            StructureData.SettlementAccountingResult memory noneExecutePutOption = putOption.dryRunSettlement(false);\n            StructureData.OptionPairExecutionAccountingResult memory pairResult = StructureData.OptionPairExecutionAccountingResult({\n                execute: StructureData.OptionExecution.NoExecution,\n                callOptionResult: noneExecuteCallOption,\n                putOptionResult: noneExecutePutOption\n            });\n            executionAccountingResult.push(pairResult); \n            StructureData.SettlementAccountingResult memory executeCallOption = callOption.dryRunSettlement(true); \n            StructureData.OptionPairExecutionAccountingResult memory pairResult2 = StructureData.OptionPairExecutionAccountingResult({\n                execute: StructureData.OptionExecution.ExecuteCall,\n                callOptionResult: executeCallOption,\n                putOptionResult: noneExecutePutOption\n            });\n            executionAccountingResult.push(pairResult2);\n\n            StructureData.SettlementAccountingResult memory executePutOption = putOption.dryRunSettlement(true); \n            StructureData.OptionPairExecutionAccountingResult memory pairResult3 = StructureData.OptionPairExecutionAccountingResult({\n                execute: StructureData.OptionExecution.ExecutePut,\n                callOptionResult: noneExecuteCallOption,\n                putOptionResult: executePutOption\n            });\n            executionAccountingResult.push(pairResult3);  \n        } \n    }\n\n    function settle(StructureData.OptionPairExecution[] memory _execution) external override onlyRole(SETTLER_ROLE) {  \n\n        uint256 count = _execution.length; \n        if (currentRound <= 2) {\n            require(count == 0, \"no matured round\");\n        }\n        for(uint256 i = 0; i < count; i++) { \n            StructureData.OptionPairExecution memory pair = _execution[i];\n            (address callOptionDeposit, address putOptionDeposit) = getDespositAddress(pair.callOption, pair.putOption); \n            //console.log(\"currentRound %d: callOptionDeposit:%s putOptionDeposit:%s\", currentRound, callOptionDeposit,putOptionDeposit );\n            IExecuteSettlement callOption = IExecuteSettlement(pair.callOption);\n            IExecuteSettlement putOption = IExecuteSettlement(pair.putOption); \n            StructureData.MaturedState memory maturedState;\n            StructureData.MaturedState memory maturedState2; \n\n            if (pair.execute == StructureData.OptionExecution.NoExecution) {\n                maturedState = callOption.closePrevious(false);\n                maturedState2 = putOption.closePrevious(false); \n            }\n            else if (pair.execute == StructureData.OptionExecution.ExecuteCall) {\n                maturedState = callOption.closePrevious(true);\n                maturedState2 = putOption.closePrevious(false); \n            }\n            if (pair.execute == StructureData.OptionExecution.ExecutePut) {\n                maturedState = callOption.closePrevious(false);\n                maturedState2 = putOption.closePrevious(true); \n            } \n            if (maturedState.releasedDepositAssetAmount > 0) {\n                uint256 releasedDepositAssetAmount  = releasedAmount[callOptionDeposit];\n                releasedAmount[callOptionDeposit] = releasedDepositAssetAmount.add(maturedState.releasedDepositAssetAmount)\n                .add(maturedState.releasedDepositAssetPremiumAmount); \n            }\n            else if (maturedState.releasedCounterPartyAssetAmount > 0) {\n                uint256 releasedCounterPartyAssetAmount = releasedAmount[putOptionDeposit];\n                releasedAmount[putOptionDeposit] = releasedCounterPartyAssetAmount.add(maturedState.releasedCounterPartyAssetAmount)\n                .add(maturedState.releasedCounterPartyAssetPremiumAmount); \n            }  \n            \n            if (maturedState2.releasedDepositAssetAmount > 0) {\n                uint256 releasedDepositAssetAmount  = releasedAmount[putOptionDeposit];\n                releasedAmount[putOptionDeposit] = releasedDepositAssetAmount.add(maturedState2.releasedDepositAssetAmount)\n                .add(maturedState2.releasedDepositAssetPremiumAmount); \n            }\n            else if (maturedState2.releasedCounterPartyAssetAmount > 0) {\n                uint256 releasedCounterPartyAssetAmount = releasedAmount[callOptionDeposit];\n                releasedAmount[callOptionDeposit] = releasedCounterPartyAssetAmount.add(maturedState2.releasedCounterPartyAssetAmount)\n                .add(maturedState2.releasedCounterPartyAssetPremiumAmount);  \n            }  \n        }\n        if (currentRound > 1) {\n            uint256 count2 = optionPairs.length; \n            for(uint256 i = 0; i < count2; i++) {\n                StructureData.OptionPairDefinition memory pair = optionPairs[i];\n                if (pair.callOption == address(0) &&\n                    pair.putOption == address(0)) {\n                    continue;\n                }\n                IExecuteSettlement callOption = IExecuteSettlement(pair.callOption);\n                IExecuteSettlement putOption = IExecuteSettlement(pair.putOption); \n                callOption.commitCurrent();\n                putOption.commitCurrent();\n            } \n        }\n\n\n        uint256 assetCount = asset.length; \n        for(uint256 i = 0; i < assetCount; i++) {\n            address assetAddress = asset[i];\n            uint256 released = releasedAmount[assetAddress];\n            uint256 deposit = depositAmount[assetAddress]; \n            int256 leftOver = leftOverAmount[assetAddress]; \n            \n            //no snaphot previously, so, no balance change\n            int256 balanceChange = currentRound == 2 ? int256(0) : (getBalanceChange(assetAddress) - int256(deposit) + int256(released));\n            /*if (leftOver >= 0 && balanceChange >= 0) { \n                console.log(\"currentRound %d leftOver:%d balanceChange:%d\", currentRound, uint256(leftOver) , uint256(balanceChange));\n            }\n            else if (leftOver >= 0) { \n                console.log(\"currentRound %d leftOver:%d balanceChange:-%d\", currentRound, uint256(leftOver) , uint256(-balanceChange));\n            }\n            else if (balanceChange >= 0) { \n                console.log(\"currentRound %d leftOver:-%d balanceChange:%d\", currentRound, uint256(-leftOver) , uint256(balanceChange));\n            }\n            else{ \n                console.log(\"currentRound %d leftOver:-%d balanceChange:-%d\", currentRound, uint256(-leftOver) , uint256(-balanceChange));\n            }*/\n            leftOver = leftOver + balanceChange;\n\n            assetTraderWithdrawn[assetAddress] = 0;\n            assetBalanceAfterSettle[assetAddress] = getAvailableBalance(assetAddress);\n            assetWithdrawableAfterSettle[assetAddress] = collectWithdrawable(assetAddress);\n            //console.log(\"asset %s balance:%d withdrawable:%d\", assetAddress, assetBalanceAfterSettle[assetAddress], assetWithdrawableAfterSettle[assetAddress]);\n\n            //console.log(\"asset %s released:%d deposit:%d\", assetAddress, released, deposit);\n            \n            StructureData.SettlementCashflowResult memory instruction = StructureData.SettlementCashflowResult({\n                newReleasedAmount: released,\n                newDepositAmount: deposit,\n                leftOverAmount: leftOver,\n                contractAddress: assetAddress\n            }); \n            settlementCashflowResult[assetAddress] = instruction;\n            releasedAmount[assetAddress] = 0;\n            depositAmount[assetAddress] = 0;\n            //todo: check overflow\n            leftOverAmount[assetAddress] = leftOver + int256(deposit) - int256(released);\n        }\n    } \n\n\n    function setOptionParameters(StructureData.OptionParameters[] memory _parameters) external override onlyRole(SETTLER_ROLE) {\n\n          uint256 count = _parameters.length;        \n          if (currentRound == 1) {\n             require(count == 0, \"nothing to set\");\n          }\n          for(uint256 i = 0; i < count; i++) {\n              StructureData.OptionParameters memory parameter = _parameters[i];\n              IExecuteSettlement(parameter.option).setOptionParameters(parameter);\n          }\n    }\n\n    //todo: whitelist / nonReentrancy check\n    function withdrawAsset(address _trader, address _asset) external override onlyRole(SETTLER_ROLE) {\n        int256 balance  = leftOverAmount[_asset]; \n        require(balance > 0, \"nothing to withdraw\");\n        assetTraderWithdrawn[_asset] = uint256(balance);\n         _withdraw(_trader, uint256(balance), _asset);\n         leftOverAmount[_asset] = 0;\n    }\n\n    function balanceEnough(address _asset) public override view returns(bool) {\n        int256 balance  = leftOverAmount[_asset]; \n        if (balance >= 0) {\n            return true;\n        }\n        uint256 availableBalance = getAvailableBalance(_asset); \n        if (availableBalance == 0) {\n            return false;\n        }\n         \n        return (balance + getBalanceChange(_asset)) >= 0;\n    }\n\n\n\n    function getDespositAddress(address _callOption, address _putOption) private view returns(address _callOptionDesposit, address _putOptionDeposit){\n        uint256 count = optionPairs.length; \n        for(uint256 i = 0; i < count; i++) {\n            StructureData.OptionPairDefinition memory pair = optionPairs[i];\n            if (pair.callOption == _callOption &&\n                pair.putOption == _putOption) {\n                return (pair.callOptionDeposit, pair.putOptionDeposit);\n            }\n        }\n        revert(\"invalid callOption/putOption\");\n    }\n\n    function getAvailableBalance(address _asset) private view returns(uint256) {\n       if (_asset != address(0)) {\n            return IERC20(_asset).balanceOf(getAddress()); \n       }\n       else{\n          return getAddress().balance;\n       }\n    } \n     \n    function getBalanceChange(address _asset) private view returns(int256){\n        int256 availableBalance = int256(getAvailableBalance(_asset));  \n        int256 balanceAfterSettle = int256(assetBalanceAfterSettle[_asset]);\n        int256 withdrawableAfterSettle = int256(assetWithdrawableAfterSettle[_asset]);\n        int256 withdrawableNow = int256(collectWithdrawable(_asset)); \n        int256 traderWithdraw = int256(assetTraderWithdrawn[_asset]); \n        int256 leastBalance =  balanceAfterSettle + withdrawableNow - withdrawableAfterSettle; \n        return availableBalance - leastBalance + traderWithdraw; \n    }\n \n    function collectWithdrawable(address _asset) private view returns(uint256) {\n         uint256 count = optionPairs.length;\n         uint256 total = 0;\n        for(uint256 i = 0; i < count; i++) {\n            StructureData.OptionPairDefinition memory pair = optionPairs[i];\n            if (pair.callOption == address(0) &&\n                pair.putOption == address(0)) {\n                continue;\n            }\n            if (pair.callOptionDeposit == _asset ||\n                pair.putOptionDeposit == _asset) {\n               total = total.add(IPKKTStructureOption(pair.callOption).getWithdrawable(_asset))\n               .add(IPKKTStructureOption(pair.putOption).getWithdrawable(_asset)); \n            }   \n        }\n        return total;\n    }\n    event Received(address indexed source, uint amount);\n    receive() external payable { \n        emit Received(msg.sender, msg.value);\n    }\n}"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ISettlementAggregator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.4;\nimport {StructureData} from \"../libraries/StructureData.sol\";  \n\ninterface ISettlementAggregator {\n         \n    function addOptionPair(StructureData.OptionPairDefinition memory _pair) external;\n    function removeOptionPair(StructureData.OptionPairDefinition memory _pair) external;\n\n    function currentRound() external view returns(uint256);\n    //rollToNext + dryRunSettlement\n    //todo: specifying quota\n    function initiateSettlement() external; \n\n    //closePrevious + calculate cash flow \n    function settle(StructureData.OptionPairExecution[] memory _execution) external;\n\n    function setOptionParameters(StructureData.OptionParameters[] memory _paramters) external;\n\n    function withdrawAsset(address _trader, address _asset) external;\n\n    function balanceEnough(address _asset) external view returns(bool); \n}"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/PKKTFarmV2Test.sol": {
      "content": "// Test file to test upgradeability\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\"; \r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {Pool} from \"./libraries/Pool.sol\"; \r\nimport {PoolData, UserData} from \"./libraries/SharedData.sol\";   \r\nimport \"./PKKTToken.sol\"; \r\nimport \"./PKKTRewardManager.sol\";\r\n\r\ncontract PKKTFarmV2Test is PKKTRewardManager {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n \r\n    // Info of each pool.\r\n    Pool.PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => Pool.UserInfo)) public userInfo;\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n\r\n    /// @notice Initializes the contract with storage variables\r\n    /// @param _pkktPerBlock total number of PKKT rewarded to users\r\n    function initialize(PKKTToken _pkkt, uint256 _pkktPerBlock, uint256 _startBlock) public initializer {\r\n        PKKTRewardManager.initialize(_pkkt, \"Pool\", _pkktPerBlock, _startBlock);\r\n        totalAllocPoint = 0;\r\n    }\r\n\r\n  \r\n    function poolLength() public override view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Function to test upgradeablity\r\n    function testUpgrade() public view returns(uint256) {\r\n        return poolInfo.length + 1;\r\n    }\r\n    \r\n    \r\n    // Add an array of new lps to the pool. Can only be called by the owner.\r\n    function addMany(Pool.PoolSettings[] calldata _pools, bool _withUpdate) external onlyOwner {\r\n        for(uint256 i = 0; i < _pools.length; i++) {\r\n            Pool.PoolSettings memory pool = _pools[i];\r\n            require(!isAdded[address(pool.lpToken)], \"Pool already is added\");\r\n            uint256 lpSupply = pool.lpToken.balanceOf(address(this)); \r\n            require(lpSupply == 0, \"Pool should not be staked\"); \r\n        }  \r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        for(uint256 i = 0; i < _pools.length; i++) {\r\n            \r\n            Pool.PoolSettings memory pool = _pools[i];\r\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\r\n            poolInfo.push(\r\n                Pool.PoolInfo({\r\n                    lpToken: pool.lpToken,\r\n                    allocPoint: pool.allocPoint,\r\n                    lastRewardBlock: lastRewardBlock,\r\n                    accPKKTPerShare: 0\r\n                })\r\n            );\r\n            isAdded[address(pool.lpToken)] = true;\r\n        }  \r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(Pool.PoolSettings memory _pool, bool _withUpdate) external onlyOwner {\r\n        require(!isAdded[address(_pool.lpToken)], \"Pool already is added\");\r\n        //here to ensure it's a valid address\r\n        uint256 lpSupply = _pool.lpToken.balanceOf(address(this));\r\n        require(lpSupply == 0, \"Pool should not be staked\");\r\n        \r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock =\r\n            block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_pool.allocPoint);\r\n        poolInfo.push(\r\n            Pool.PoolInfo({\r\n                lpToken: _pool.lpToken,\r\n                allocPoint: _pool.allocPoint,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accPKKTPerShare: 0\r\n            })\r\n        );\r\n        isAdded[address(_pool.lpToken)] = true;\r\n    }\r\n\r\n    // Update the given array of pools' PKKT allocation points. Can only be called by the owner.\r\n    function setMany(Pool.UpdatePoolParameters[] memory _newSettings, bool _withUpdate) external onlyOwner  {\r\n        for(uint256 i = 0; i < _newSettings.length; i++) {\r\n           Pool.UpdatePoolParameters memory newSetting = _newSettings[i]; \r\n           require(newSetting.pid < poolInfo.length , \"Pool doesn't exist\"); \r\n        }  \r\n\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        for(uint256 i = 0; i < _newSettings.length; i++) {\r\n            Pool.UpdatePoolParameters memory newSetting = _newSettings[i]; \r\n            totalAllocPoint = totalAllocPoint.sub(poolInfo[newSetting.pid].allocPoint).add(\r\n                newSetting.allocPoint\r\n            );\r\n            poolInfo[newSetting.pid].allocPoint = newSetting.allocPoint;\r\n        }  \r\n    }\r\n\r\n    // Update the given pool's PKKT allocation point. Can only be called by the owner.\r\n    function set(Pool.UpdatePoolParameters memory _newSetting, bool _withUpdate) external \r\n    onlyOwner validatePoolById(_newSetting.pid) \r\n    {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_newSetting.pid].allocPoint).add(\r\n            _newSetting.allocPoint\r\n        );\r\n        poolInfo[_newSetting.pid].allocPoint = _newSetting.allocPoint;\r\n    }\r\n\r\n\r\n \r\n    // Deposit LP tokens to PKKT Farm for PKKT allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public validatePoolById(_pid) {\r\n        require(_amount > 0, \"!amount\");\r\n        Pool.PoolInfo storage pool = poolInfo[_pid];\r\n        Pool.UserInfo storage user = userInfo[_pid][msg.sender]; \r\n        updatePool(_pid);\r\n        updateUserReward(_pid, msg.sender, user.amount, user.amount.add(_amount), true);\r\n        user.amount = user.amount.add(_amount); \r\n        pool.lpToken.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        ); \r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from Pool.\r\n    function withdraw(uint256 _pid, uint256 _amount, bool _harvestReward)\r\n        external\r\n        validatePoolById(_pid)\r\n    {\r\n        require(_amount > 0, \"!amount\");\r\n        Pool.PoolInfo storage pool = poolInfo[_pid];\r\n        Pool.UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: exceeds available\");\r\n        bool updatePending = false;\r\n        if (_harvestReward || user.amount == _amount) {\r\n            harvest(_pid); \r\n        }\r\n        else { \r\n            updatePool(_pid); \r\n            updatePending = true;\r\n        }\r\n        \r\n        updateUserReward(_pid, msg.sender, user.amount, user.amount.sub(_amount), updatePending); \r\n        user.amount = user.amount.sub(_amount);  \r\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) external validatePoolById(_pid) {\r\n        Pool.PoolInfo storage pool = poolInfo[_pid];\r\n        Pool.UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\r\n    }\r\n\r\n    //Compound rewards to pkkt pool\r\n    function compoundReward(uint256 _pkktPoolId) external validatePoolById(_pkktPoolId) {\r\n        Pool.PoolInfo memory pool = poolInfo[_pkktPoolId];\r\n        require(pool.lpToken == IERC20(pkkt), \"not pkkt pool\");\r\n        uint256 totalPending = harvest(_pkktPoolId);\r\n        if(totalPending > 0) {\r\n            deposit(_pkktPoolId, totalPending);\r\n        }\r\n    }\r\n \r\n    \r\n    function _getPoolData(uint256 _poolId, bool _getShare) internal override view returns(PoolData.Data memory){\r\n        Pool.PoolInfo storage pool = poolInfo[_poolId];\r\n        return PoolData.Data({\r\n            lastRewardBlock: pool.lastRewardBlock,\r\n            accPKKTPerShare: pool.accPKKTPerShare,\r\n            shareAmount: _getShare ? pool.lpToken.balanceOf(address(this)) : 0,\r\n            id: _poolId\r\n        });\r\n    }\r\n\r\n    function _getUserData(uint256 _poolId, address _userAddress) internal override view returns(UserData.Data memory) {\r\n        \r\n        Pool.UserInfo storage user = userInfo[_poolId][_userAddress];\r\n\r\n        return UserData.Data({\r\n            shareAmount: user.amount,\r\n            rewardDebt: user.rewardDebt,\r\n            pendingReward: user.pendingReward\r\n        });\r\n    }\r\n\r\n    function _getPoolPercentage(PoolData.Data memory _poolData) internal override view returns(uint256) {\r\n         Pool.PoolInfo storage pool = poolInfo[_poolData.id];  \r\n         return pool.allocPoint.mul(normalizer).div(totalAllocPoint);\r\n    }\r\n \r\n    function _updatePool(uint256 _pid, uint256 _accPKKTPerShare) internal override {\r\n        Pool.PoolInfo storage pool = poolInfo[_pid];\r\n        pool.lastRewardBlock = block.number;\r\n        if (_accPKKTPerShare > 0) { \r\n           pool.accPKKTPerShare = _accPKKTPerShare;\r\n        }\r\n    }\r\n    function  _updateUserPendingReward(uint256 _poolId, address _userAddress, uint256 _newValue) internal override{\r\n         Pool.UserInfo storage user = userInfo[_poolId][_userAddress];\r\n         user.pendingReward = _newValue;\r\n    }\r\n\r\n    function _updateUserRewardDebt(uint256 _poolId, address _userAddress, uint256 _newValue) internal override {\r\n         Pool.UserInfo storage user = userInfo[_poolId][_userAddress];\r\n         user.rewardDebt = _newValue;\r\n    }\r\n     \r\n}\r\n"
    },
    "contracts/libraries/Pool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.4;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; \n\nlibrary Pool { \n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        uint pendingReward;// Reward but not harvest\n        //\n        //   pending reward = (user.amount * pool.accPKKTPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accPKKTPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; \n        uint256 allocPoint; // How many allocation points assigned to this pool. PKKTs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that PKKTs distribution occurs.\n        uint256 accPKKTPerShare; // Accumulated PKKTs per share, times 1e12. See below.\n    }\n\n    struct PoolSettings {\n        \n        IERC20 lpToken; \n        uint256 allocPoint;\n    }\n\n    \n    struct UpdatePoolParameters {\n        \n        uint256 pid; \n        uint256 allocPoint;\n    }\n\n\n}\n"
    },
    "contracts/PKKTFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\"; \nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {Pool} from \"./libraries/Pool.sol\"; \nimport {PoolData, UserData} from \"./libraries/SharedData.sol\";   \nimport \"./PKKTToken.sol\"; \nimport \"./PKKTRewardManager.sol\";\n\ncontract PKKTFarm is PKKTRewardManager {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n \n    // Info of each pool.\n    Pool.PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => Pool.UserInfo)) public userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount\n    );\n\n    /// @notice Initializes the contract with storage variables\n    /// @param _pkktPerBlock total number of PKKT rewarded to users\n    function initialize(PKKTToken _pkkt, uint256 _pkktPerBlock, uint256 _startBlock) public initializer {\n        PKKTRewardManager.initialize(_pkkt, \"Pool\", _pkktPerBlock, _startBlock);\n        totalAllocPoint = 0;\n    }\n\n  \n    function poolLength() public override view returns (uint256) {\n        return poolInfo.length;\n    }\n    \n    \n    // Add an array of new lps to the pool. Can only be called by the owner.\n    function addMany(Pool.PoolSettings[] calldata _pools, bool _withUpdate) external onlyOwner {\n        for(uint256 i = 0; i < _pools.length; i++) {\n            Pool.PoolSettings memory pool = _pools[i];\n            require(!isAdded[address(pool.lpToken)], \"Pool already is added\");\n            uint256 lpSupply = pool.lpToken.balanceOf(address(this)); \n            require(lpSupply == 0, \"Pool should not be staked\"); \n        }  \n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        for(uint256 i = 0; i < _pools.length; i++) {\n            \n            Pool.PoolSettings memory pool = _pools[i];\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\n            poolInfo.push(\n                Pool.PoolInfo({\n                    lpToken: pool.lpToken,\n                    allocPoint: pool.allocPoint,\n                    lastRewardBlock: lastRewardBlock,\n                    accPKKTPerShare: 0\n                })\n            );\n            isAdded[address(pool.lpToken)] = true;\n        }  \n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    function add(Pool.PoolSettings memory _pool, bool _withUpdate) external onlyOwner {\n        require(!isAdded[address(_pool.lpToken)], \"Pool already is added\");\n        //here to ensure it's a valid address\n        uint256 lpSupply = _pool.lpToken.balanceOf(address(this));\n        require(lpSupply == 0, \"Pool should not be staked\");\n        \n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock =\n            block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_pool.allocPoint);\n        poolInfo.push(\n            Pool.PoolInfo({\n                lpToken: _pool.lpToken,\n                allocPoint: _pool.allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accPKKTPerShare: 0\n            })\n        );\n        isAdded[address(_pool.lpToken)] = true;\n    }\n\n    // Update the given array of pools' PKKT allocation points. Can only be called by the owner.\n    function setMany(Pool.UpdatePoolParameters[] memory _newSettings, bool _withUpdate) external onlyOwner  {\n        for(uint256 i = 0; i < _newSettings.length; i++) {\n           Pool.UpdatePoolParameters memory newSetting = _newSettings[i]; \n           require(newSetting.pid < poolInfo.length , \"Pool doesn't exist\"); \n        }  \n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        for(uint256 i = 0; i < _newSettings.length; i++) {\n            Pool.UpdatePoolParameters memory newSetting = _newSettings[i]; \n            totalAllocPoint = totalAllocPoint.sub(poolInfo[newSetting.pid].allocPoint).add(\n                newSetting.allocPoint\n            );\n            poolInfo[newSetting.pid].allocPoint = newSetting.allocPoint;\n        }  \n    }\n\n    // Update the given pool's PKKT allocation point. Can only be called by the owner.\n    function set(Pool.UpdatePoolParameters memory _newSetting, bool _withUpdate) external \n    onlyOwner validatePoolById(_newSetting.pid) \n    {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_newSetting.pid].allocPoint).add(\n            _newSetting.allocPoint\n        );\n        poolInfo[_newSetting.pid].allocPoint = _newSetting.allocPoint;\n    }\n\n\n \n    // Deposit LP tokens to PKKT Farm for PKKT allocation.\n    function deposit(uint256 _pid, uint256 _amount) public validatePoolById(_pid) {\n        require(_amount > 0, \"!amount\");\n        Pool.PoolInfo storage pool = poolInfo[_pid];\n        Pool.UserInfo storage user = userInfo[_pid][msg.sender]; \n        updatePool(_pid);\n        updateUserReward(_pid, msg.sender, user.amount, user.amount.add(_amount), true);\n        user.amount = user.amount.add(_amount); \n        pool.lpToken.safeTransferFrom(\n            address(msg.sender),\n            address(this),\n            _amount\n        ); \n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens from Pool.\n    function withdraw(uint256 _pid, uint256 _amount, bool _harvestReward)\n        external\n        validatePoolById(_pid)\n    {\n        require(_amount > 0, \"!amount\");\n        Pool.PoolInfo storage pool = poolInfo[_pid];\n        Pool.UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: exceeds available\");\n        bool updatePending = false;\n        if (_harvestReward || user.amount == _amount) {\n            harvest(_pid); \n        }\n        else { \n            updatePool(_pid); \n            updatePending = true;\n        }\n        \n        updateUserReward(_pid, msg.sender, user.amount, user.amount.sub(_amount), updatePending); \n        user.amount = user.amount.sub(_amount);  \n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) external validatePoolById(_pid) {\n        Pool.PoolInfo storage pool = poolInfo[_pid];\n        Pool.UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    //Compound rewards to pkkt pool\n    function compoundReward(uint256 _pkktPoolId) external validatePoolById(_pkktPoolId) {\n        Pool.PoolInfo memory pool = poolInfo[_pkktPoolId];\n        require(pool.lpToken == IERC20(pkkt), \"not pkkt pool\");\n        uint256 totalPending = harvest(_pkktPoolId);\n        if(totalPending > 0) {\n            deposit(_pkktPoolId, totalPending);\n        }\n    }\n \n    \n    function _getPoolData(uint256 _poolId, bool _getShare) internal override view returns(PoolData.Data memory){\n        Pool.PoolInfo storage pool = poolInfo[_poolId];\n        return PoolData.Data({\n            lastRewardBlock: pool.lastRewardBlock,\n            accPKKTPerShare: pool.accPKKTPerShare,\n            shareAmount: _getShare ? pool.lpToken.balanceOf(address(this)) : 0,\n            id: _poolId\n        });\n    }\n\n    function _getUserData(uint256 _poolId, address _userAddress) internal override view returns(UserData.Data memory) {\n        \n        Pool.UserInfo storage user = userInfo[_poolId][_userAddress];\n\n        return UserData.Data({\n            shareAmount: user.amount,\n            rewardDebt: user.rewardDebt,\n            pendingReward: user.pendingReward\n        });\n    }\n\n    function _getPoolPercentage(PoolData.Data memory _poolData) internal override view returns(uint256) {\n         Pool.PoolInfo storage pool = poolInfo[_poolData.id];  \n         return pool.allocPoint.mul(normalizer).div(totalAllocPoint);\n    }\n \n    function _updatePool(uint256 _pid, uint256 _accPKKTPerShare) internal override {\n        Pool.PoolInfo storage pool = poolInfo[_pid];\n        pool.lastRewardBlock = block.number;\n        if (_accPKKTPerShare > 0) { \n           pool.accPKKTPerShare = _accPKKTPerShare;\n        }\n    }\n    function  _updateUserPendingReward(uint256 _poolId, address _userAddress, uint256 _newValue) internal override{\n         Pool.UserInfo storage user = userInfo[_poolId][_userAddress];\n         user.pendingReward = _newValue;\n    }\n\n    function _updateUserRewardDebt(uint256 _poolId, address _userAddress, uint256 _newValue) internal override {\n         Pool.UserInfo storage user = userInfo[_poolId][_userAddress];\n         user.rewardDebt = _newValue;\n    }\n     \n}\n"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mock is ERC20 {\n    uint8 private _decimals;\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 supply,\n        uint8 decimals_\n    ) ERC20(name, symbol) {\n        _decimals = decimals_;\n        _mint(msg.sender, supply);\n    }\n\n      \n     function decimals() public view override returns (uint8) {\n        return _decimals;\n     }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}