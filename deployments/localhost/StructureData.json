{
  "address": "0xc96304e3c037f81dA488ed9dEa1D8F2a48278a75",
  "abi": [
    {
      "inputs": [],
      "name": "MATUREROUND",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ec450189ff6554d7f40980fd757aff7976396be7d4c679ea448f3798352225a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc96304e3c037f81dA488ed9dEa1D8F2a48278a75",
    "transactionIndex": 0,
    "gasUsed": "83666",
    "logsBloom": "0x
    "blockHash": "0xd33f645604b3f9c2841524f78d23dd5ac40c581f9ac830ef8d3fcd7839935b38",
    "transactionHash": "0x3ec450189ff6554d7f40980fd757aff7976396be7d4c679ea448f3798352225a",
    "logs": [],
    "blockNumber": 13600028,
    "cumulativeGasUsed": "83666",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7d69c30e7365c7d7ac5fe4ffeeb2fb6a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MATUREROUND\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/StructureData.sol\":\"StructureData\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/StructureData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary StructureData {\\n     \\n     uint8 public constant MATUREROUND= 1; //7 for daily settlement, 1 for daily settlement\\n    //the strike price is calculated based on assetPrice * (1 +/- strikePriceRatio/100)\\n    //for hodl, if the asset price is higher than the strike price, the option would be executed, it's a call option  \\n    struct OptionParameters {\\n         uint256 strikePrice;  // strike price if executed\\n         uint8 pricePrecision;\\n         uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n     }\\n\\n    struct OptionState {\\n         uint256 round;\\n         uint256 totalAmount; \\n         uint256 strikePrice; \\n         uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n         uint8 pricePrecision; \\n         bool executed; \\n         bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral;\\n    }\\n \\n   struct MaturedState {\\n       uint256 maturedDepositAssetAmount;\\n       uint256 maturedCounterPartyAssetAmount;\\n       bool executed;\\n       uint256 round;\\n       \\n   }\\n\\n    enum OptionType {\\n        HodlBooster,\\n        VolAlpha\\n    }\\n\\n    struct UserState {\\n        uint256 pendingAsset; //for current round\\n        uint256 lockedAsset;//asset undersettlement\\n        uint256[MATUREROUND] ongoingAsset; //for previous 7 rounds\\n        uint8 nextCursor; //nextCursor\\n        uint232 totalRound; \\n        bool hasState;\\n        uint256 assetToTerminate;  \\n        uint256 assetToTerminateForNextRound;  \\n    }\\n\\n    struct OptionSnapshot {\\n        uint256 totalPending;\\n        uint256 totalLocked;\\n        uint256 totalOngoing;\\n        uint256 totalMaturedDeposit;\\n        uint256 totalMaturedCounterParty;\\n    }\\n\\n    struct UserBalance {\\n        uint256 pendingDepositAssetAmount; \\n        uint256 lockedDepositAssetAmount; \\n        uint256 ongoingDepositAssetAmount;\\n        uint256 maturedDepositAssetAmount;\\n        uint256 maturedCounterPartyAssetAmount;\\n    }\\n\\n    function SetOngoingAsset(UserState storage userState, uint256 newValue) internal { \\n        uint cursor = userState.nextCursor;\\n        userState.ongoingAsset[cursor] = newValue;\\n        uint8 nextCursor = cursor == (MATUREROUND - 1) ? uint8(0) : uint8(cursor + 1);\\n        userState.nextCursor = nextCursor;\\n        userState.totalRound = userState.totalRound + 1; //won't overflow\\n    }\\n    \\n    function GetOngoingAsset(UserState storage userState, uint8 backwardRound) internal view returns(uint256) {\\n        if (userState.totalRound <= backwardRound) return 0;\\n        require(backwardRound < MATUREROUND);\\n        int8 previousCursor = int8(userState.nextCursor) - int8(backwardRound) - 1;\\n        if (previousCursor < 0) {\\n            previousCursor = previousCursor + int8(MATUREROUND);\\n        }\\n        return userState.ongoingAsset[uint8(previousCursor)];\\n    }\\n\\n    enum Direction {\\n        None,\\n        SendToTrader,\\n        SendBackToVault\\n    }\\n    struct SettlementInstruction {\\n        uint256 amount;\\n        address contractAddress; //0 for eth\\n        address targetAddress; //vault address\\n        Direction direction;\\n        bool fullfilled;\\n    }\\n\\n    struct MaturedAmount {\\n        uint256 amount;\\n        address asset;\\n    }\\n\\n    struct SettlementResult {\\n        address option;\\n        uint256 round;\\n        bool executed;\\n        uint256 depositAmount; //New-Deposit\\n        uint256 autoRollAmount; //T-1 Carried (filled only when not executed)\\n        uint256 autoRollPremium; //Premium (filled only when not executed)\\n        //maturedAmount+maturedPremium = requested withdrawal for deposit asset(filled only when not executed and with withdraw request)\\n        uint256 maturedAmount;  \\n        uint256 maturedPremium;\\n        //autoRollCounterPartyAmount + autoRollCounterPartyPremium = Execution rolled-out for deposit asset (Execution roll-in for counter party option)\\n        //filled only when executed\\n        uint256 autoRollCounterPartyAmount;\\n        uint256 autoRollCounterPartyPremium;\\n        //maturedCounterPartyAmount+maturedCounterPartyPremium= requested withdrawal for couter party asset(filled only when executed and with withdraw request)\\n        uint256 maturedCounterPartyAmount;\\n        uint256 maturedCounterPartyPremium;\\n\\n    }\\n}\",\"keccak256\":\"0x2277fb06bbe56c90f8a45f1dd11371f580056c2692176cbca8d8f3b794780d18\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608b610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063f747e177146038575b600080fd5b603f600181565b60405160ff909116815260200160405180910390f3fea264697066735822122087765bf70b36ae18be1aa38ae49b2e1a34e75503d10fd7802afb2d7031e6232464736f6c63430008040033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063f747e177146038575b600080fd5b603f600181565b60405160ff909116815260200160405180910390f3fea264697066735822122087765bf70b36ae18be1aa38ae49b2e1a34e75503d10fd7802afb2d7031e6232464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}