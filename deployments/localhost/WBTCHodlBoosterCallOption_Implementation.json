{
  "address": "0x46b142DD1E924FAb83eCc3c08e4D46E82f005e0E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CloseOption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CommitOption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "option",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "OpenOption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "option",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OptionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "OptionTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPTION_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIOMULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SETTLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callOrPut",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetToTerminate",
          "type": "uint256"
        }
      ],
      "name": "cancelWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "closePrevious",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "releasedDepositAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedDepositAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollDepositAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollDepositAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollCounterPartyAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollCounterPartyAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            }
          ],
          "internalType": "struct StructureData.MaturedState",
          "name": "_maturedState",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitCurrent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "completeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterParty",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterPartyAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterPartyAssetAmountDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterPartyOption",
      "outputs": [
        {
          "internalType": "contract IPKKTStructureOption",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAssetAmountDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "depositFromCounterParty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "dryRunSettlement",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "option",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "autoRollAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollPremium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedPremium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollCounterPartyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollCounterPartyPremium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyPremium",
              "type": "uint256"
            }
          ],
          "internalType": "struct StructureData.SettlementAccountingResult",
          "name": "_result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccountBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pendingDepositAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedDepositAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ongoingDepositAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedDepositAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyAssetAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct StructureData.UserBalance",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOptionSnapShot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalPending",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLocked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalOngoing",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReleasedDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReleasedCounterParty",
              "type": "uint256"
            }
          ],
          "internalType": "struct StructureData.OptionSnapshot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blockHeight",
          "type": "uint256"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalTerminate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "pricePrecision",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callOrPut",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getWithdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_depositAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_counterPartyAsset",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_depositAssetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_counterPartyAssetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_callOrPut",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_settler",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetToTerminate",
          "type": "uint256"
        }
      ],
      "name": "initiateWithraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isEth",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCancelWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxInitiateWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "optionHeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "optionStates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalTerminate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "premiumRate",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "pricePrecision",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "callOrPut",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionVault",
      "outputs": [
        {
          "internalType": "contract IOptionVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redepositToCounterParty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quota",
          "type": "uint256"
        }
      ],
      "name": "rollToNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_pendingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_counterParty",
          "type": "address"
        }
      ],
      "name": "setCounterPartyOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "option",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "pricePrecision",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            }
          ],
          "internalType": "struct StructureData.OptionParameters",
          "name": "_optionParameters",
          "type": "tuple"
        }
      ],
      "name": "setOptionParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleasedCounterPartyAssetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleasedDepositAssetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underSettlement",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingAsset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedAsset",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "nextCursor",
          "type": "uint8"
        },
        {
          "internalType": "uint232",
          "name": "totalRound",
          "type": "uint232"
        },
        {
          "internalType": "bool",
          "name": "hasState",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "assetToTerminate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetToTerminateForNextRound",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usersInvolved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa97245ff5a2f5cfdfb01ec63d4462b04c983e3365ef9b1308587bd3fdc1e9c48",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x46b142DD1E924FAb83eCc3c08e4D46E82f005e0E",
    "transactionIndex": 0,
    "gasUsed": "4933341",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb64a6189f080fdba58fec7e87b4ce3ec4608fcfe06750e9725b4d31312b07e3a",
    "transactionHash": "0xa97245ff5a2f5cfdfb01ec63d4462b04c983e3365ef9b1308587bd3fdc1e9c48",
    "logs": [],
    "blockNumber": 13600006,
    "cumulativeGasUsed": "4933341",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "39dac7b7e15464a94896fcb316e3bb5b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CloseOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CommitOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"OpenOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"OptionTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTION_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIOMULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callOrPut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetToTerminate\",\"type\":\"uint256\"}],\"name\":\"cancelWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"closePrevious\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"releasedDepositAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedDepositAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollDepositAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollDepositAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollCounterPartyAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollCounterPartyAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"internalType\":\"struct StructureData.MaturedState\",\"name\":\"_maturedState\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitCurrent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"completeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterParty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterPartyAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterPartyAssetAmountDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterPartyOption\",\"outputs\":[{\"internalType\":\"contract IPKKTStructureOption\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAssetAmountDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositFromCounterParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"dryRunSettlement\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"autoRollAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollCounterPartyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollCounterPartyPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyPremium\",\"type\":\"uint256\"}],\"internalType\":\"struct StructureData.SettlementAccountingResult\",\"name\":\"_result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pendingDepositAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedDepositAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ongoingDepositAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedDepositAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyAssetAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StructureData.UserBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOptionSnapShot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalPending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOngoing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReleasedDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReleasedCounterParty\",\"type\":\"uint256\"}],\"internalType\":\"struct StructureData.OptionSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockHeight\",\"type\":\"uint256\"}],\"name\":\"getRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTerminate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"pricePrecision\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_depositAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_counterPartyAsset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_counterPartyAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_callOrPut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_settler\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetToTerminate\",\"type\":\"uint256\"}],\"name\":\"initiateWithraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCancelWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInitiateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionHeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTerminate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"pricePrecision\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionVault\",\"outputs\":[{\"internalType\":\"contract IOptionVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redepositToCounterParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quota\",\"type\":\"uint256\"}],\"name\":\"rollToNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_counterParty\",\"type\":\"address\"}],\"name\":\"setCounterPartyOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"pricePrecision\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"}],\"internalType\":\"struct StructureData.OptionParameters\",\"name\":\"_optionParameters\",\"type\":\"tuple\"}],\"name\":\"setOptionParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleasedCounterPartyAssetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleasedDepositAssetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underSettlement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"nextCursor\",\"type\":\"uint8\"},{\"internalType\":\"uint232\",\"name\":\"totalRound\",\"type\":\"uint232\"},{\"internalType\":\"bool\",\"name\":\"hasState\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"assetToTerminate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetToTerminateForNextRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersInvolved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PKKTHodlBoosterOption.sol\":\"PKKTHodlBoosterOption\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/PKKTHodlBoosterOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n \\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\"; \\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n \\nimport {Utils} from \\\"./libraries/Utils.sol\\\";  \\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";     \\nimport \\\"./interfaces/IPKKTStructureOption.sol\\\";\\nimport \\\"./interfaces/IExecuteSettlement.sol\\\"; \\nimport \\\"./interfaces/IOptionVault.sol\\\"; \\n\\ncontract PKKTHodlBoosterOption is ERC20Upgradeable, AccessControlUpgradeable, ReentrancyGuardUpgradeable, IPKKTStructureOption, IExecuteSettlement {\\n    \\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using StructureData for StructureData.UserState;\\n\\n    event Deposit(address indexed from, address indexed account, uint256 indexed round, uint256 amount, address option);\\n    event Withdraw(address indexed account, address indexed asset, uint256 amount);\\n    event CloseOption(uint256 indexed round);\\n    event CommitOption(uint256 indexed round);\\n    event OpenOption(uint256 indexed round);\\n    event OptionCreated(address indexed option, string name);\\n    event OptionTransfer(address from, address to, uint256 premium, uint256 round);\\n \\n    uint256 public constant RATIOMULTIPLIER = 10000;\\n    uint8 public depositAssetAmountDecimals;\\n    uint8 public counterPartyAssetAmountDecimals;\\n      \\n    address public depositAsset;\\n    address public counterPartyAsset;\\n \\n    bool public isEth;\\n     uint256 private quota;\\n     uint256 public currentRound; \\n     mapping(uint256=>uint256) public optionHeights;\\n     mapping(uint256=>StructureData.OptionState) public optionStates;\\n     address[] public usersInvolved;  \\n     mapping(address=>StructureData.UserState) public userStates; \\n     bool public underSettlement; \\n     bool public callOrPut; //put accept stablecoin only, call accept asset coins only\\n     IPKKTStructureOption public counterPartyOption;\\n     address public counterParty;\\n     IOptionVault public optionVault;\\n     uint256 public totalReleasedDepositAssetAmount; \\n     uint256 public totalReleasedCounterPartyAssetAmount; \\n     \\n     //private data for complete withdrawal and redeposit \\n     mapping(address=>uint256) private releasedDepositAssetAmount;\\n     mapping(address=>uint256) private releasedCounterPartyAssetAmount;  \\n\\n    bytes32 public constant OPTION_ROLE = keccak256(\\\"OPTION_ROLE\\\");\\n    bytes32 public constant SETTLER_ROLE = keccak256(\\\"SETTLER_ROLE\\\");\\n\\n    //take if for eth, we make price precision as 4, then underlying price can be 40000000 for 4000$\\n    //for shib, we make price precision as 8, then underlying price can be 4000 for 0.00004000$\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address _depositAsset,\\n        address _counterPartyAsset,\\n        uint8 _depositAssetAmountDecimals,\\n        uint8 _counterPartyAssetAmountDecimals,\\n        address _vaultAddress,\\n        bool _callOrPut,\\n        address _settler\\n    ) public initializer {\\n        require(_vaultAddress != address(0), \\\"Empty vault address\\\");\\n        __ReentrancyGuard_init();\\n        ERC20Upgradeable.__ERC20_init(name, symbol);\\n        AccessControlUpgradeable.__AccessControl_init();\\n        // Contract deployer will be able to grant and revoke trading role\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        // Address capable of initiating and finizalizing settlement\\n        _setupRole(SETTLER_ROLE, _settler);\\n        _setupRole(SETTLER_ROLE, _vaultAddress);\\n        depositAsset = _depositAsset;\\n        counterPartyAsset = _counterPartyAsset;\\n        isEth = _depositAsset == address(0);\\n        depositAssetAmountDecimals = _depositAssetAmountDecimals;\\n        counterPartyAssetAmountDecimals = _counterPartyAssetAmountDecimals;\\n        optionVault = IOptionVault(_vaultAddress);\\n        callOrPut = _callOrPut;\\n        emit OptionCreated(address(this), symbol);\\n    } \\n    function setCounterPartyOption(address _counterParty) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_counterParty != address(this), \\\"Cannot set self as counter party\\\");\\n        counterPartyOption = IPKKTStructureOption(_counterParty);\\n        counterParty = _counterParty;\\n    }\\n          \\n    function decimals() public view override returns (uint8) {\\n        return depositAssetAmountDecimals;\\n    }\\n\\n    function vaultAddress() public view override returns(address) {\\n        return optionVault.getAddress();\\n    }\\n\\n\\n    function getAccountBalance() external override view returns (StructureData.UserBalance memory) {\\n       StructureData.UserState storage userState = userStates[msg.sender]; \\n       StructureData.UserBalance memory result = StructureData.UserBalance({\\n           pendingDepositAssetAmount:userState.pendingAsset,\\n           releasedDepositAssetAmount: releasedDepositAssetAmount[msg.sender],\\n           releasedCounterPartyAssetAmount: releasedCounterPartyAssetAmount[msg.sender],\\n           lockedDepositAssetAmount:userState.lockedAsset, \\n           ongoingDepositAssetAmount: userState.GetOngoingAsset(0)\\n       });\\n       return result;\\n    }\\n\\n    function getWithdrawable(address _asset) external override view returns(uint256) {\\n        if (_asset == depositAsset) { \\n            return optionStates[currentRound].totalAmount.add(totalReleasedDepositAssetAmount);\\n        }\\n        if (_asset == counterPartyAsset) {\\n            return totalReleasedCounterPartyAssetAmount;\\n        }\\n        revert(\\\"invalid asset\\\");\\n    }\\n\\n    function getOptionSnapShot() external override view returns(StructureData.OptionSnapshot memory) {\\n       StructureData.OptionState storage currentOption = optionStates[currentRound];\\n       StructureData.OptionState storage lockedOption = optionStates[underSettlement ? currentRound - 1 : currentRound];\\n       StructureData.OptionState storage onGoingOption = optionStates[underSettlement ? currentRound - 2 : currentRound - 1];\\n       \\n       //StructureData.OptionState storage currentOption = optionStates[currentRound];\\n       StructureData.OptionSnapshot memory result = StructureData.OptionSnapshot({\\n            totalPending: currentOption.totalAmount,\\n            totalReleasedDeposit :  totalReleasedDepositAssetAmount,\\n            totalReleasedCounterParty : totalReleasedCounterPartyAssetAmount,\\n            totalOngoing : onGoingOption.totalAmount,\\n            totalLocked: underSettlement ? lockedOption.totalAmount : 0\\n       }); \\n       return result;\\n    }\\n\\n    function completeWithdraw(uint256 _amount, address _asset) external override nonReentrant { \\n       require(_amount > 0, \\\"!amount\\\");  \\n       require(!underSettlement, \\\"Being settled\\\");\\n       require(currentRound > 1, \\\"!No Matured\\\");  \\n       require(_asset == depositAsset || _asset == counterPartyAsset, \\\"Invalid asset address\\\");\\n       if (_asset == depositAsset) {\\n           uint256 releasedAmount = releasedDepositAssetAmount[msg.sender];\\n           require(releasedAmount >= _amount, \\\"Exceed available\\\");\\n           releasedDepositAssetAmount[msg.sender] = releasedAmount.sub(_amount); \\n           totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.sub(_amount);\\n       }\\n       else {\\n           \\n           uint256 releasedAmount = releasedCounterPartyAssetAmount[msg.sender];\\n           require(releasedAmount >= _amount, \\\"Exceed available\\\");\\n           releasedCounterPartyAssetAmount[msg.sender] = releasedAmount.sub(_amount);\\n           totalReleasedCounterPartyAssetAmount = totalReleasedCounterPartyAssetAmount.sub(_amount);\\n       }\\n       \\n        optionVault.withdraw(msg.sender, _amount, _asset, false);\\n    }\\n    function initiateWithraw(uint256 _assetToTerminate) external override {\\n        require(_assetToTerminate > 0 , \\\"!_assetToTerminate\\\"); \\n        require(currentRound > 1, \\\"No on going\\\");\\n        StructureData.UserState storage userState =  userStates[msg.sender]; \\n        if (underSettlement) {  \\n            uint256 newAssetToTerminate = userState.assetToTerminateForNextRound.add(_assetToTerminate);\\n            uint256 locked = userState.lockedAsset;\\n            require(newAssetToTerminate <= locked, \\\"Exceeds available\\\");\\n            userState.assetToTerminateForNextRound = newAssetToTerminate;\\n        }\\n        else {\\n            uint256 newAssetToTerminate = userState.assetToTerminate.add(_assetToTerminate);\\n            uint256 ongoing = userState.GetOngoingAsset(0);\\n            require(newAssetToTerminate <= ongoing, \\\"Exceeds available\\\");\\n            userState.assetToTerminate = newAssetToTerminate;\\n        }\\n\\n        StructureData.OptionState storage previousOption = optionStates[currentRound - 1];\\n        previousOption.totalTerminate = previousOption.totalTerminate.add(_assetToTerminate);\\n    }\\n\\n    function cancelWithdraw(uint256 _assetToTerminate) external override { \\n        require(_assetToTerminate > 0 , \\\"!_assetToTerminate\\\"); \\n        require(currentRound > 1, \\\"No on going\\\");\\n        StructureData.UserState storage userState =  userStates[msg.sender]; \\n        if (underSettlement) {  \\n            require(_assetToTerminate <= userState.assetToTerminateForNextRound, \\\"Exceed available\\\");\\n            userState.assetToTerminateForNextRound = userState.assetToTerminateForNextRound.sub(_assetToTerminate);  \\n        }\\n        else {  \\n            require(_assetToTerminate <= userState.assetToTerminate, \\\"Exceed available\\\");\\n            userState.assetToTerminate = userState.assetToTerminate.sub(_assetToTerminate); \\n        }\\n\\n        StructureData.OptionState storage previousOption = optionStates[currentRound - 1];\\n        previousOption.totalTerminate = previousOption.totalTerminate.sub(_assetToTerminate);\\n    } \\n    \\n    \\n    function maxInitiateWithdraw() external override {  \\n        require(currentRound > 1, \\\"No on going\\\");\\n        StructureData.UserState storage userState =  userStates[msg.sender]; \\n        if (underSettlement) {   \\n            userState.assetToTerminateForNextRound = userState.lockedAsset;\\n            StructureData.OptionState storage lockedOption = optionStates[currentRound - 1];\\n            lockedOption.totalTerminate = lockedOption.totalTerminate.add(userState.lockedAsset);\\n        }\\n        else {   \\n            userState.assetToTerminate = userState.GetOngoingAsset(0);\\n            StructureData.OptionState storage onGoingOption = optionStates[currentRound - 1];\\n            onGoingOption.totalTerminate = onGoingOption.totalTerminate.add(userState.assetToTerminate); \\n        }\\n \\n    }\\n\\n    function maxCancelWithdraw() external override {   \\n        require(currentRound > 1, \\\"No on going\\\");\\n        StructureData.UserState storage userState =  userStates[msg.sender];  \\n        if (underSettlement) {   \\n            StructureData.OptionState storage lockedOption = optionStates[currentRound - 1];\\n            lockedOption.totalTerminate = lockedOption.totalTerminate.sub( userState.assetToTerminateForNextRound);\\n            userState.assetToTerminateForNextRound = 0;\\n        }\\n        else {   \\n            StructureData.OptionState storage onGoingOption = optionStates[currentRound - 1];\\n            onGoingOption.totalTerminate = onGoingOption.totalTerminate.sub(userState.assetToTerminate);\\n            userState.assetToTerminate = 0; \\n        } \\n    }\\n    \\n    \\n    function withdraw(uint256 _amount, address _asset) external override nonReentrant { \\n       require(_amount > 0, \\\"!amount\\\");  \\n       require(!underSettlement, \\\"Being settled\\\");  \\n       require(_asset == depositAsset || _asset == counterPartyAsset, \\\"Invalid asset address\\\"); \\n       if (_asset == depositAsset) {\\n           //todo: 0 out released amount if missing balance from trader\\n           uint256 releasedAmount = releasedDepositAssetAmount[msg.sender];\\n           if (releasedAmount <= _amount) { \\n               StructureData.UserState storage userState =  userStates[msg.sender];  \\n               uint256 redeemAmount = _amount.sub(releasedAmount);\\n               require(userState.pendingAsset >= redeemAmount, \\\"Exceeds available\\\"); \\n               releasedDepositAssetAmount[msg.sender] = 0; \\n               totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.sub(releasedAmount);\\n               userState.pendingAsset = userState.pendingAsset.sub(redeemAmount);\\n               StructureData.OptionState storage optionState = optionStates[currentRound];\\n               optionState.totalAmount = optionState.totalAmount.sub(redeemAmount);  \\n           }\\n           else { \\n               releasedDepositAssetAmount[msg.sender] = releasedAmount.sub(_amount); \\n               totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.sub(_amount);\\n           }\\n       }\\n       else {\\n \\n           //same result as completeWithdraw \\n           uint256 releasedAmount = releasedCounterPartyAssetAmount[msg.sender];\\n           require(releasedAmount >= _amount, \\\"Exceed available\\\");\\n           releasedCounterPartyAssetAmount[msg.sender] = releasedAmount.sub(_amount);\\n           totalReleasedCounterPartyAssetAmount = totalReleasedCounterPartyAssetAmount.sub(_amount);\\n       }\\n        optionVault.withdraw(msg.sender, _amount, _asset, false);\\n        emit Withdraw(msg.sender, _asset, _amount);\\n    }\\n \\n\\n    //only allowed for re-depositing the matured deposit asset, the max can be deducted from getMatured() with asset matched depositAsset in address\\n    function redeposit(uint256 _amount) external override nonReentrant { \\n       require(currentRound > 1, \\\"!No Matured\\\");\\n       require(_amount > 0, \\\"!amount\\\"); \\n       uint256 releasedAmount = releasedDepositAssetAmount[msg.sender];\\n       require(releasedAmount >= _amount, \\\"Exceed available\\\");\\n       releasedDepositAssetAmount[msg.sender] = releasedAmount.sub(_amount);\\n       totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.sub(_amount);\\n       _depositFor(msg.sender, _amount, currentRound);\\n    }\\n\\n    //only allowed for re-depositing the matured counterParty asset, the max can be deducted from getMatured() with asset matched counterPartyAsset in address\\n    function redepositToCounterParty(uint256 _amount) external override { \\n       require(!underSettlement, \\\"Being settled\\\");\\n       require(currentRound > 1, \\\"!No Matured\\\");\\n       require(_amount > 0, \\\"!amount\\\"); \\n       uint256 releasedAmount = releasedCounterPartyAssetAmount[msg.sender];\\n       require(releasedAmount >= _amount, \\\"Exceed available\\\");\\n       releasedCounterPartyAssetAmount[msg.sender] = releasedAmount.sub(_amount);\\n       totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.sub(_amount);\\n       address[] memory addresses = new address[](1);\\n       uint256[] memory amounts = new uint256[](1);\\n       addresses[0] = msg.sender;\\n       amounts[0] = _amount;\\n       counterPartyOption.depositFromCounterParty(addresses, amounts);\\n    }\\n\\n\\n    //todo: what if quata is not enough\\n    function depositFromCounterParty(address[] memory addresses, uint256[] memory _amounts) override external {\\n        require(msg.sender == counterParty, \\\"Only counter party option can call this method\\\");\\n        uint256 round = underSettlement ? currentRound - 1 : currentRound;\\n        for(uint256 i = 0; i < 0 ; i++){\\n            _depositFor(addresses[i], _amounts[i], round);\\n        } \\n    }\\n    //deposit eth\\n    function depositETH() external payable override nonReentrant{ \\n       require(currentRound > 0, \\\"!Started\\\");\\n       require(isEth, \\\"!ETH\\\");\\n       require(msg.value > 0, \\\"!value\\\"); \\n       \\n        //todo: convert to weth  \\n       _depositFor(msg.sender, msg.value, currentRound);\\n       payable(vaultAddress()).transfer(msg.value);\\n    }\\n\\n    //deposit other erc20 coin, take wbtc\\n    function deposit(uint256 _amount) external override nonReentrant{   \\n        require(currentRound > 0, \\\"!Started\\\");\\n        require(!isEth, \\\"!ERC20\\\");\\n        require(_amount > 0, \\\"!amount\\\"); \\n        _depositFor(msg.sender, _amount,currentRound);  \\n        IERC20(depositAsset).safeTransferFrom(msg.sender, vaultAddress(), _amount);\\n    }\\n \\n  \\n    function _depositFor(address _userAddress, uint256 _amount, uint256 _round) private { \\n        StructureData.OptionState storage optionState = optionStates[_round];\\n        require(optionState.totalAmount.add(_amount) <= quota, \\\"Not enough quota\\\");\\n        StructureData.UserState storage userState =  userStates[_userAddress]; \\n        //first time added\\n        if (!userState.hasState) { \\n            userState.hasState = true;\\n            usersInvolved.push(_userAddress);\\n        } \\n        userState.pendingAsset = userState.pendingAsset.add(_amount); \\n        optionState.totalAmount = optionState.totalAmount.add(_amount);\\n        \\n        emit Deposit(msg.sender, _userAddress, _round, _amount, address(this));\\n    }\\n\\n \\n    function redeem(uint256 _amount) external override nonReentrant{  \\n         require(_amount > 0, \\\"!amount\\\"); \\n         StructureData.UserState storage userState =  userStates[msg.sender]; \\n         require(userState.pendingAsset >= _amount, \\\"Exceeds available\\\");\\n         userState.pendingAsset = userState.pendingAsset.sub(_amount); \\n         StructureData.OptionState storage optionState = optionStates[currentRound];\\n         optionState.totalAmount = optionState.totalAmount.sub(_amount);\\n         optionVault.withdraw(msg.sender, _amount, depositAsset, true); \\n         emit Withdraw(msg.sender, depositAsset, _amount);\\n    }\\n \\n  \\n    //used to render the history at client side, reading the minting transactions of a specific address,\\n    //for each transaction, read the blockheight and call this method to get the result\\n    //the blockheight is the the height when the round is committed  \\n    function getRoundData(uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\\n        return optionStates[optionHeights[_blockHeight]];\\n    } \\n\\n\\n   /*\\n    *  Following operations can only be triggered from ISettlementAggregator with the settler role\\n    */\\n\\n   //first, open t+1 round\\n   function rollToNext(uint256 _quota) external override onlyRole(SETTLER_ROLE) returns(uint256 _pendingAmount){   \\n\\n       require(!underSettlement, \\\"Being settled\\\"); \\n\\n       if (currentRound > 1) {\\n           require(optionStates[currentRound-1].strikePrice > 0,  \\\"Strike Price not set\\\");\\n       } \\n\\n       underSettlement = true; \\n       quota = _quota;\\n        currentRound = currentRound + 1;\\n        StructureData.OptionState memory currentOption =  \\n        StructureData.OptionState({\\n                            round: currentRound,\\n                            totalAmount: 0,\\n                            totalTerminate: 0,\\n                            premiumRate:  0,\\n                            pricePrecision: 0,\\n                            strikePrice: 0,\\n                            executed: false,\\n                            callOrPut: callOrPut\\n                        });\\n        optionStates[currentRound] = currentOption; \\n       if (currentRound > 1) {\\n            uint256 userCount = usersInvolved.length;\\n            for (uint i=0; i < userCount; i++) {\\n                address userAddress = usersInvolved[i];\\n                StructureData.UserState storage userState = userStates[userAddress]; \\n                if(userState.pendingAsset != 0) {  \\n                    userState.lockedAsset = userState.pendingAsset;\\n                }  \\n                userState.pendingAsset = 0;\\n            }\\n       }\\n       else {\\n           underSettlement = false;\\n       }\\n        emit OpenOption(currentRound); \\n        if (currentRound > 1) {\\n            return optionStates[currentRound-1].totalAmount;\\n        }\\n        return 0;\\n    }\\n    \\n\\n   //then dry run settlement and get accounting result\\n   function dryRunSettlement(bool _execute) external override view onlyRole(SETTLER_ROLE) returns(StructureData.SettlementAccountingResult memory _result) {\\n        require(underSettlement, \\\"Not being settled\\\");\\n        require(currentRound > 1, \\\"Nothing to settle\\\");\\n\\n        StructureData.OptionState storage lockedOption = optionStates[currentRound - 1]; \\n        StructureData.SettlementAccountingResult memory result = StructureData.SettlementAccountingResult({\\n            option: address(this),\\n            round: currentRound - 1,\\n            depositAmount: lockedOption.totalAmount,\\n            executed: _execute,\\n            autoRollAmount: 0,\\n            autoRollPremium: 0,\\n            releasedAmount: 0,\\n            releasedPremium: 0,\\n            autoRollCounterPartyAmount: 0,\\n            autoRollCounterPartyPremium: 0,\\n            releasedCounterPartyAmount: 0,\\n            releasedCounterPartyPremium: 0\\n        });\\n       if (currentRound > StructureData.MATUREROUND + 1) { \\n            StructureData.OptionState memory previousOptionState = optionStates[currentRound - StructureData.MATUREROUND - 1];\\n            StructureData.MaturedState memory maturedState = _calculateMaturity(_execute, previousOptionState); \\n            if (_execute) { \\n                result.autoRollCounterPartyAmount = maturedState.autoRollCounterPartyAssetAmount;\\n                result.autoRollCounterPartyPremium = maturedState.autoRollCounterPartyAssetPremiumAmount;\\n                result.releasedCounterPartyAmount = maturedState.releasedCounterPartyAssetAmount;\\n                result.releasedCounterPartyPremium = maturedState.releasedCounterPartyAssetPremiumAmount;\\n            }\\n            else { \\n                result.autoRollAmount = maturedState.autoRollDepositAssetAmount;\\n                result.autoRollPremium = maturedState.autoRollDepositAssetPremiumAmount;\\n                result.releasedAmount = maturedState.releasedDepositAssetAmount;\\n                result.releasedPremium = maturedState.releasedDepositAssetPremiumAmount;\\n            } \\n       } \\n       return result;\\n   }\\n\\n   //then, make decision based on dry run result and close t-1 round\\n   function closePrevious(bool _execute) external override onlyRole(SETTLER_ROLE)  \\n   returns(StructureData.MaturedState memory _maturedState) {   \\n        require(underSettlement, \\\"Not being settled\\\");\\n        require (currentRound > StructureData.MATUREROUND + 1, \\\"no matured\\\");\\n        uint maturedRound = currentRound - StructureData.MATUREROUND - 1;\\n        StructureData.OptionState storage previousOptionState = optionStates[maturedRound];   \\n        StructureData.MaturedState memory maturedState = _calculateMaturity(_execute, previousOptionState);    \\n        previousOptionState.executed = _execute;\\n        if (_execute) {\\n            totalReleasedCounterPartyAssetAmount = totalReleasedCounterPartyAssetAmount.\\n            add(maturedState.releasedCounterPartyAssetAmount).add(maturedState.releasedCounterPartyAssetPremiumAmount); \\n        }\\n        else {\\n            totalReleasedDepositAssetAmount = totalReleasedDepositAssetAmount.\\n            add(maturedState.releasedDepositAssetAmount).add(maturedState.releasedDepositAssetPremiumAmount);\\n        }\\n        if (previousOptionState.totalAmount > 0) { \\n            autoRoll(_execute, previousOptionState, maturedState);\\n        }   \\n        \\n        emit CloseOption(maturedRound);\\n        return maturedState;\\n   }\\n\\n   //next, commit t round\\n   function commitCurrent() external override onlyRole(SETTLER_ROLE) nonReentrant {  \\n        require (currentRound > 1, \\\"not started\\\");\\n        if(currentRound <= 2 && !underSettlement) {\\n           underSettlement = true;\\n       }\\n        require(underSettlement, \\\"Not being settled\\\");\\n        \\n        uint256 lockedRound = currentRound - 1;\\n        StructureData.OptionState storage optionState = optionStates[lockedRound]; \\n        //mint for the current option\\n        _mint(address(this), optionState.totalAmount);\\n        uint256 userCount = usersInvolved.length;\\n        for (uint i=0; i < userCount; i++) {\\n            address userAddress = usersInvolved[i];\\n            StructureData.UserState storage userState = userStates[userAddress]; \\n            if(userState.lockedAsset != 0) {  \\n                //transfer each user a share of the option to trigger transfer event\\n                //can be used to calculate the user option selling operations\\n                //utilizing some web3 indexed services, take etherscan api/graphql etc.\\n                _transfer(address(this), userAddress, userState.lockedAsset);\\n                emit OptionTransfer(address(this), userAddress, optionState.premiumRate, optionState.round);\\n            } \\n            if (userState.assetToTerminateForNextRound != 0){\\n                userState.assetToTerminate = userState.assetToTerminateForNextRound;\\n                userState.assetToTerminateForNextRound = 0;\\n            } \\n            else {\\n                userState.assetToTerminate = 0;\\n            }\\n            userState.SetOngoingAsset(userState.lockedAsset); \\n            userState.lockedAsset = 0;\\n         }\\n\\n      \\n        optionHeights[lockedRound] = block.number; //commit current option at current block\\n        emit CommitOption(lockedRound);\\n        underSettlement = false;\\n   }\\n       \\n   //at last, specify option parameters\\n   function setOptionParameters(StructureData.OptionParameters memory _optionParameters) external override onlyRole(SETTLER_ROLE) {\\n        \\n        require (currentRound > 1, \\\"not started\\\"); \\n        require(!underSettlement, \\\"Being settled\\\"); \\n        uint256 previousRound = currentRound - 1;\\n        StructureData.OptionState storage optionState = optionStates[previousRound]; \\n        require(optionState.strikePrice == 0, \\\"Strike Price already set\\\");\\n        optionState.strikePrice = _optionParameters.strikePrice;\\n        optionState.premiumRate = _optionParameters.premiumRate;\\n        optionState.pricePrecision = _optionParameters.pricePrecision;\\n   }\\n\\n   \\n     function _calculateMaturity(bool _execute, StructureData.OptionState memory _optionState) private view\\n     returns(StructureData.MaturedState memory) {\\n       StructureData.MaturedState memory state = StructureData.MaturedState({\\n          releasedDepositAssetAmount: 0,\\n          releasedDepositAssetPremiumAmount: 0,\\n          autoRollDepositAssetAmount: 0,\\n          autoRollDepositAssetPremiumAmount: 0,\\n          releasedCounterPartyAssetAmount: 0, \\n          releasedCounterPartyAssetPremiumAmount: 0,\\n          autoRollCounterPartyAssetAmount: 0,\\n          autoRollCounterPartyAssetPremiumAmount: 0,\\n          round: _optionState.round\\n       });  \\n        if (_execute) {  \\n\\n           uint256 maturedCounterPartyAssetAmount = callOrPut ? \\n            _optionState.totalAmount.mul(_optionState.strikePrice).mul(10**counterPartyAssetAmountDecimals).\\n           div(10**(_optionState.pricePrecision + depositAssetAmountDecimals))  :  \\n\\n           _optionState.totalAmount.mul(10**(_optionState.pricePrecision + counterPartyAssetAmountDecimals)).\\n           div(_optionState.strikePrice).div(10** depositAssetAmountDecimals); \\n \\n           uint256 maturedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetAmount.mul(_optionState.premiumRate).div(RATIOMULTIPLIER); \\n           if (_optionState.totalTerminate > 0) { \\n               state.releasedCounterPartyAssetAmount = Utils.getAmountToTerminate(maturedCounterPartyAssetAmount, _optionState.totalTerminate, _optionState.totalAmount);\\n               state.releasedCounterPartyAssetPremiumAmount = Utils.getAmountToTerminate(maturedCounterPartyAssetPremiumAmount, _optionState.totalTerminate, _optionState.totalAmount);\\n           }\\n           state.autoRollCounterPartyAssetAmount = maturedCounterPartyAssetAmount.sub(state.releasedCounterPartyAssetAmount);\\n           state.autoRollCounterPartyAssetPremiumAmount = maturedCounterPartyAssetPremiumAmount.sub(state.releasedCounterPartyAssetPremiumAmount);\\n        }\\n        else { \\n           uint256 maturedDepositAssetAmount = _optionState.totalAmount;\\n           uint256 maturedDepositAssetPremiumAmount = maturedDepositAssetAmount.mul(_optionState.premiumRate).div(RATIOMULTIPLIER);\\n           if (_optionState.totalTerminate > 0) { \\n               state.releasedDepositAssetAmount = Utils.getAmountToTerminate(maturedDepositAssetAmount, _optionState.totalTerminate, _optionState.totalAmount);\\n               state.releasedDepositAssetPremiumAmount = Utils.getAmountToTerminate(maturedDepositAssetPremiumAmount, _optionState.totalTerminate, _optionState.totalAmount);\\n           }\\n           state.autoRollDepositAssetAmount = maturedDepositAssetAmount.sub(state.releasedDepositAssetAmount);\\n           state.autoRollDepositAssetPremiumAmount = maturedDepositAssetPremiumAmount.sub(state.releasedDepositAssetPremiumAmount);\\n\\n        }\\n         return state;\\n     }\\n\\n\\n   address[] private autoRolledUsers;\\n   uint256[] private autoRolledAmounts;\\n\\n   function autoRoll(bool _counterParty, StructureData.OptionState memory _optionState, StructureData.MaturedState memory _maturedState) private {\\n        uint256 userCount = usersInvolved.length; \\n        uint256 totalAutoRollBase = _optionState.totalAmount.sub(_optionState.totalTerminate);\\n        if (!_counterParty) {\\n            uint256 lockedRound = currentRound - 1; \\n            uint256 totalReleased = _maturedState.releasedDepositAssetAmount.add(_maturedState.releasedDepositAssetPremiumAmount);\\n            uint256 totalAutoRoll = _maturedState.autoRollDepositAssetAmount.add(_maturedState.autoRollDepositAssetPremiumAmount);\\n            for (uint i=0; i < userCount; i++) {\\n                address userAddress = usersInvolved[i];\\n                StructureData.UserState storage userState = userStates[userAddress]; \\n                \\n                uint256 ongoing = userState.GetOngoingAsset(0);  \\n                if (ongoing == 0) {\\n                    userState.assetToTerminate = 0;\\n                    continue;\\n                }\\n                uint256 amountToTerminate = Utils.getAmountToTerminate(totalReleased, userState.assetToTerminate, _optionState.totalTerminate);\\n                if (amountToTerminate > 0) {\\n                    releasedDepositAssetAmount[userAddress] = \\n                    releasedDepositAssetAmount[userAddress].add(amountToTerminate); \\n                }\\n                uint256 remainingAmount = Utils.getAmountToTerminate(totalAutoRoll, ongoing.sub(userState.assetToTerminate), totalAutoRollBase);\\n                if (remainingAmount > 0) { \\n                    _depositFor(userAddress, remainingAmount, lockedRound);\\n                } \\n                userState.assetToTerminate = 0;\\n            }  \\n            return;\\n        }\\n\\n        uint256 totalReleased2 = _maturedState.releasedCounterPartyAssetAmount.add(_maturedState.releasedCounterPartyAssetPremiumAmount);\\n        uint256 totalAutoRoll2 = _maturedState.autoRollCounterPartyAssetPremiumAmount.add(_maturedState.autoRollCounterPartyAssetPremiumAmount);  \\n        for (uint i=0; i < userCount; i++) {\\n            address userAddress = usersInvolved[i];\\n            StructureData.UserState storage userState = userStates[userAddress];  \\n            \\n            uint256 ongoing = userState.GetOngoingAsset(0);  \\n            if (ongoing == 0) {\\n                userState.assetToTerminate = 0;\\n                continue;\\n            } \\n            uint256 amountToTerminate = Utils.getAmountToTerminate(totalReleased2, userState.assetToTerminate, _optionState.totalTerminate);\\n            if (amountToTerminate > 0) {\\n                releasedCounterPartyAssetAmount[userAddress] = \\n                releasedCounterPartyAssetAmount[userAddress].add(amountToTerminate);\\n            }\\n            uint256 remainingAmount = Utils.getAmountToTerminate(totalAutoRoll2, ongoing.sub(userState.assetToTerminate), totalAutoRollBase);\\n            if (remainingAmount > 0){   \\n                autoRolledAmounts.push(remainingAmount);\\n                autoRolledUsers.push(userAddress);\\n            } \\n            userState.assetToTerminate = 0;\\n        } \\n        \\n        uint256 count = autoRolledAmounts.length;\\n        if (count == 0) {\\n            return;\\n        }\\n        \\n        address[] memory localAutoRolledUsers = new address[](count);\\n        uint256[] memory localAutoRolledAmounts = new uint256[](count);\\n        for(uint i = 0; i < count; i++) {\\n            localAutoRolledUsers[i] = autoRolledUsers[i];\\n            localAutoRolledAmounts[i] = autoRolledAmounts[i];\\n        }\\n        delete autoRolledUsers;\\n        delete autoRolledAmounts;\\n        counterPartyOption.depositFromCounterParty(localAutoRolledUsers, localAutoRolledAmounts); \\n   }\\n\\n}\",\"keccak256\":\"0x6dbe766903eeae5659107eb7495e0e88bfcbf24210200080d62d16e12c815924\",\"license\":\"MIT\"},\"contracts/interfaces/IExecuteSettlement.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.4;\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";  \\ninterface IExecuteSettlement { \\n \\n    //open a new option\\n   function rollToNext(uint256 _quota) external returns(uint256 _pendingAmount); \\n \\n   //calculate the result of on going option    \\n   function closePrevious(bool _execute) external returns(StructureData.MaturedState memory _maturedState);\\n\\n   //close pending option and autoroll if capacity is enough based on the maturity result\\n   function commitCurrent() external ; \\n\\n   function setOptionParameters(StructureData.OptionParameters memory _optionParameters) external;\\n   \\n   function dryRunSettlement(bool _execute) external view returns(StructureData.SettlementAccountingResult memory _result);\\n}\\n\",\"keccak256\":\"0xb953dc12ab89869d4d308dd6ef603cff5687ab6e2ae43eea9f9775e1e556a465\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOptionVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.4;\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";\\n\\ninterface IOptionVault { \\n    function addOption(address _optionContract) external;\\n    function removeOption(address _optionContract) external;\\n    function getAddress() external view returns(address);\\n    function withdraw(address _target, uint256 _amount, address _contractAddress, bool _redeem) external;\\n     \\n}\\n\",\"keccak256\":\"0x9dd358b83f74379263fe03bdfc5727a7237193219e913bbcb270c104fb61437b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPKKTStructureOption.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.4;\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";\\n \\ninterface IPKKTStructureOption {\\n\\n    function setCounterPartyOption(address _counterParty) external;\\n    \\n    function getAccountBalance() external view returns (StructureData.UserBalance memory); \\n\\n    //ISettlementAggregator.balanceEnough needs to be called if there is any release amount\\n    function getOptionSnapShot() external view returns(StructureData.OptionSnapshot memory);\\n \\n    function getWithdrawable(address _asset) external view returns(uint256); \\n\\n    \\n    function vaultAddress() external view returns(address);\\n\\n    //deposit eth\\n    function depositETH() external payable;\\n\\n    //deposit other erc20 coin, take wbtc or stable coin\\n    function deposit(uint256 _amount) external;\\n\\n    //redeem unsettled amount\\n    function redeem(uint256 _amount) external;  \\n\\n    //complete withdraw happens on the option vault\\n    function initiateWithraw(uint256 _assetToTerminate) external; \\n\\n    function cancelWithdraw(uint256 _assetToTerminate) external;\\n\\n    function maxInitiateWithdraw() external;\\n\\n    function maxCancelWithdraw() external;\\n    \\n    function withdraw(uint256 _amount, address _asset) external; \\n\\n    function completeWithdraw(uint256 _amount, address _asset) external; \\n\\n    //only allowed for re-depositing the matured deposit asset, the max can be deducted from getMatured() with asset matched depositAsset in address\\n    function redeposit(uint256 _amount) external;\\n\\n\\n    //only allowed for re-depositing the matured counterParty asset, the max can be deducted from getMatured() with asset matched counterPartyAsset in address\\n    function redepositToCounterParty(uint256 _amount) external;\\n\\n    //can only be called from counterparty option \\n    function depositFromCounterParty(address[] memory _addresses, uint256[] memory _amounts) external;\\n \\n\\n    //used to render the history at client side, reading the minting transactions of a specific address,\\n    //for each transaction, read the blockheight and call this method to get the result\\n    //the blockheight is the the height when the round is committed \\n    function getRoundData(uint256 _blockHeight) external view returns(StructureData.OptionState memory);\\n\\n \\n}\\n\\n\",\"keccak256\":\"0x2c6b8cff3763a36bc2acf5a5a8ea24d4aa34a003a0e69db71c4d4a892bd5042a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/StructureData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary StructureData {\\n     \\n     uint8 public constant MATUREROUND= 1; //7 for daily settlement, 1 for daily settlement\\n \\n     struct OptionParameters {\\n         address option;\\n         uint256 strikePrice;  // strike price if executed\\n         uint8 pricePrecision;\\n         uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n     }\\n\\n    struct OptionState {\\n         uint256 round;\\n         uint256 totalAmount; \\n         uint256 totalTerminate;   \\n         uint256 strikePrice; \\n         uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n         uint8 pricePrecision; \\n         bool executed; \\n         bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral;\\n    }\\n \\n   struct MaturedState {\\n       uint256 releasedDepositAssetAmount;\\n       uint256 releasedDepositAssetPremiumAmount;\\n       uint256 releasedCounterPartyAssetAmount; \\n       uint256 releasedCounterPartyAssetPremiumAmount; \\n       uint256 autoRollDepositAssetAmount;\\n       uint256 autoRollDepositAssetPremiumAmount;\\n       uint256 autoRollCounterPartyAssetAmount; \\n       uint256 autoRollCounterPartyAssetPremiumAmount; \\n\\n       uint256 round;\\n       \\n   }\\n\\n    enum OptionType {\\n        HodlBooster,\\n        VolAlpha\\n    }\\n\\n    struct UserState {\\n        uint256 pendingAsset; //for current round\\n        uint256 lockedAsset;//asset undersettlement\\n        uint256[MATUREROUND] ongoingAsset; //for previous 7 rounds\\n        uint8 nextCursor; //nextCursor\\n        uint232 totalRound; \\n        bool hasState;\\n        uint256 assetToTerminate;  \\n        uint256 assetToTerminateForNextRound;  \\n    }\\n\\n    struct OptionSnapshot {\\n        uint256 totalPending;\\n        uint256 totalLocked;\\n        uint256 totalOngoing;\\n        uint256 totalReleasedDeposit;\\n        uint256 totalReleasedCounterParty; \\n    }\\n\\n    struct UserBalance {\\n        uint256 pendingDepositAssetAmount; \\n        uint256 lockedDepositAssetAmount; \\n        uint256 ongoingDepositAssetAmount;\\n        uint256 releasedDepositAssetAmount;\\n        uint256 releasedCounterPartyAssetAmount;\\n    }\\n\\n    function SetOngoingAsset(UserState storage userState, uint256 newValue) internal { \\n        uint cursor = userState.nextCursor;\\n        userState.ongoingAsset[cursor] = newValue;\\n        uint8 nextCursor = cursor == (MATUREROUND - 1) ? uint8(0) : uint8(cursor + 1);\\n        userState.nextCursor = nextCursor;\\n        userState.totalRound = userState.totalRound + 1; //won't overflow\\n    }\\n    \\n    function GetOngoingAsset(UserState storage userState, uint8 backwardRound) internal view returns(uint256) {\\n        if (userState.totalRound <= backwardRound) return 0;\\n        require(backwardRound < MATUREROUND);\\n        int8 previousCursor = int8(userState.nextCursor) - int8(backwardRound) - 1;\\n        if (previousCursor < 0) {\\n            previousCursor = previousCursor + int8(MATUREROUND);\\n        }\\n        return userState.ongoingAsset[uint8(previousCursor)];\\n    }\\n  \\n    struct OptionPairDefinition{\\n        address callOption;\\n        address putOption;\\n        address callOptionDeposit;\\n        address putOptionDeposit;\\n    }\\n    struct SettlementAccountingResult {\\n        //won't change regardless execute or not\\n        address option;\\n        uint256 round;\\n        uint256 depositAmount;  \\n\\n        //following will change if execute or not\\n        bool executed;\\n        uint256 autoRollAmount; //T-1 Carried (filled only when not executed)\\n        uint256 autoRollPremium; //Premium (filled only when not executed)\\n        //maturedAmount+maturedPremium = requested withdrawal for deposit asset(filled only when not executed and with withdraw request)\\n        uint256 releasedAmount;  \\n        uint256 releasedPremium;\\n        //autoRollCounterPartyAmount + autoRollCounterPartyPremium = Execution rolled-out for deposit asset (Execution roll-in for counter party option)\\n        //filled only when executed\\n        uint256 autoRollCounterPartyAmount;\\n        uint256 autoRollCounterPartyPremium;\\n        //maturedCounterPartyAmount+maturedCounterPartyPremium= requested withdrawal for couter party asset(filled only when executed and with withdraw request)\\n        uint256 releasedCounterPartyAmount;\\n        uint256 releasedCounterPartyPremium; \\n\\n    }\\n\\n    enum OptionExecution{\\n        NoExecution,\\n        ExecuteCall,\\n        ExecutePut\\n    }\\n\\n    struct OptionPairExecutionAccountingResult {  \\n        SettlementAccountingResult callOptionResult;\\n        SettlementAccountingResult putOptionResult;\\n        OptionExecution execute;\\n    }\\n\\n    struct OptionPairExecution {\\n        address callOption;\\n        address putOption;\\n        OptionExecution execute; \\n    }\\n\\n    \\n\\n    struct SettlementCashflowResult{ \\n        address contractAddress; //0 for eth \\n        uint256 newDepositAmount;\\n        uint256 newReleasedAmount;\\n        int256 leftOverAmount; //positive, if trader didn't withdraw last time; negative, if trader failed to send back last time; \\n    }\\n \\n}\",\"keccak256\":\"0x5e0adb375c34b2f8ee9371b6b82d76b930ff57e4b7b98e99d92aecfbcd8ec653\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nlibrary Utils { \\n     \\n     using SafeMath for uint256;\\n      function StringConcat(bytes memory _base, bytes memory _value) internal pure returns (string memory) {\\n        string memory _tmpValue = new string(_base.length + _value.length);\\n        bytes memory _newValue = bytes(_tmpValue);\\n\\n        uint i;\\n        uint j;\\n\\n        for(i=0; i<_base.length; i++) {\\n            _newValue[j++] = _base[i];\\n        }\\n\\n        for(i=0; i<_value.length; i++) {\\n            _newValue[j++] = _value[i++];\\n        }\\n\\n        return string(_newValue);\\n    }\\n\\n    function Uint8Sub(uint8 a, uint8 b) internal pure returns (uint8) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n \\n   function getAmountToTerminate(uint256 _maturedAmount, uint256 _assetToTerminate, uint256 _assetAmount) internal pure returns(uint256) {\\n       if (_assetToTerminate == 0 || _assetAmount == 0 || _maturedAmount == 0) return 0;\\n       return _assetToTerminate >= _assetAmount ?  _maturedAmount : _maturedAmount.mul(_assetToTerminate).div(_assetAmount);\\n   }\\n\\n}\",\"keccak256\":\"0x63e33411bf5e7da3e9cdb808658c53c043589de0f869172a7cdc73d1fe02e39b\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061584f80620000216000396000f3fe6080604052600436106103ac5760003560e01c80636896fabf116101e7578063a217fddf1161010d578063c02337df116100a0578063db006a751161006f578063db006a7514610dce578063dd62ed3e14610dee578063eef9f5a514610e34578063f6326fb314610e5b57600080fd5b8063c02337df14610d53578063c515d7e714610d68578063ccc41f2414610d88578063d547741f14610dae57600080fd5b8063a9059cbb116100dc578063a9059cbb14610cd3578063aac5001d14610cf3578063b6b55f2514610d13578063bb9662c814610d3357600080fd5b8063a217fddf14610c51578063a2589ef914610c66578063a457c2d714610c86578063a5d3e5b114610ca657600080fd5b80638a19c8bc1161018557806392b4d26a1161015457806392b4d26a14610be757806395d89b4114610bfc5780639e4cbd7d14610c115780639f01f7ba14610c3157600080fd5b80638a19c8bc14610b715780638cd8935914610b875780639020253914610ba757806391d1485414610bc757600080fd5b806370a08231116101c157806370a0823114610ae35780637445e85c14610b1957806376e7a47814610b3b5780637ba0eabe14610b5157600080fd5b80636896fabf14610a8d5780636a2af82014610aaf57806370349bfb14610ace57600080fd5b806321c9445c116102d7578063395093511161026a578063511db11411610239578063511db114146109815780635973ff3a146109a257806364057572146109c257806365235474146109d757600080fd5b806339509351146108fe57806341b9f3291461091e578063430bf08a1461093857806347276abf1461094d57600080fd5b80632f2ff15d116102a65780632f2ff15d14610878578063313ce5671461089857806332cc6ae6146108be57806336568abe146108de57600080fd5b806321c9445c146107e757806323b872dd14610807578063248a9ca3146108275780632c453bdf1461085757600080fd5b80630e777b4b1161034f578063135ad9691161031e578063135ad969146106f857806318160ddd14610725578063186a4a171461073a5780631de245af146107c757600080fd5b80630e777b4b146105d95780630ecc535f146105f95780630fd49173146106a857806311c8556d146106bf57600080fd5b80630720da521161038b5780630720da521461042a5780630748248f14610579578063095ea7b3146105945780630b2737e4146105b457600080fd5b8062f714ce146103b157806301ffc9a7146103d357806306fdde0314610408575b600080fd5b3480156103bd57600080fd5b506103d16103cc366004614f01565b610e63565b005b3480156103df57600080fd5b506103f36103ee366004614f25565b611164565b60405190151581526020015b60405180910390f35b34801561041457600080fd5b5061041d61119b565b6040516103ff91906151d7565b34801561043657600080fd5b5061050d610445366004614ee9565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915250600090815260ff60208181526040808420548452610100808352938190208151948501825280548552600181015492850192909252600282015490840152600381015460608401526004015461ffff81166080840152620100008104821660a0840152630100000081048216151560c0840152640100000000900416151560e082015290565b6040516103ff91906000610100820190508251825260208301516020830152604083015160408301526060830151606083015261ffff608084015116608083015260ff60a08401511660a083015260c0830151151560c083015260e0830151151560e083015292915050565b34801561058557600080fd5b50610103546103f39060ff1681565b3480156105a057600080fd5b506103f36105af366004614dc3565b61122d565b3480156105c057600080fd5b506105cb6101065481565b6040519081526020016103ff565b3480156105e557600080fd5b506103d16105f4366004614ee9565b611243565b34801561060557600080fd5b50610661610614366004614d13565b61010260205260009081526040902080546001820154600383015460048401546005909401549293919260ff808316936001600160e81b0361010085041693600160f01b90049091169187565b60408051978852602088019690965260ff909416948601949094526001600160e81b0390911660608501521515608084015260a083019190915260c082015260e0016103ff565b3480156106b457600080fd5b506105cb6101075481565b3480156106cb57600080fd5b50610105546106e0906001600160a01b031681565b6040516001600160a01b0390911681526020016103ff565b34801561070457600080fd5b50610718610713366004614eb1565b61139b565b6040516103ff91906153da565b34801561073157600080fd5b506035546105cb565b34801561074657600080fd5b5061075a610755366004614eb1565b611667565b6040516103ff9190600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b3480156107d357600080fd5b506106e06107e2366004614ee9565b6118cd565b3480156107f357600080fd5b506103d1610802366004614f01565b6118f8565b34801561081357600080fd5b506103f3610822366004614d83565b611b49565b34801561083357600080fd5b506105cb610842366004614ee9565b60009081526097602052604090206001015490565b34801561086357600080fd5b50610104546106e0906001600160a01b031681565b34801561088457600080fd5b506103d1610893366004614f01565b611bf5565b3480156108a457600080fd5b5060fb5460ff165b60405160ff90911681526020016103ff565b3480156108ca57600080fd5b506105cb6108d9366004614d13565b611c20565b3480156108ea57600080fd5b506103d16108f9366004614f01565b611cb9565b34801561090a57600080fd5b506103f3610919366004614dc3565b611d37565b34801561092a57600080fd5b5060fb546108ac9060ff1681565b34801561094457600080fd5b506106e0611d73565b34801561095957600080fd5b506105cb7ffd0eee74c7609b4290ae42cfa22435eabf285017ea12017ed27c2e820eae6a7781565b34801561098d57600080fd5b5060fc546103f390600160a01b900460ff1681565b3480156109ae57600080fd5b506103d16109bd366004614dee565b611df6565b3480156109ce57600080fd5b506103d1611e98565b3480156109e357600080fd5b50610a476109f2366004614ee9565b61010060205260009081526040902080546001820154600283015460038401546004909401549293919290919061ffff81169060ff620100008204811691630100000081048216916401000000009091041688565b60408051988952602089019790975295870194909452606086019290925261ffff16608085015260ff1660a0840152151560c0830152151560e0820152610100016103ff565b348015610a9957600080fd5b50610aa2611f81565b6040516103ff91906153a1565b348015610abb57600080fd5b5060fb546108ac90610100900460ff1681565b348015610ada57600080fd5b506103d161201d565b348015610aef57600080fd5b506105cb610afe366004614d13565b6001600160a01b031660009081526033602052604090205490565b348015610b2557600080fd5b506105cb6000805160206157fa83398151915281565b348015610b4757600080fd5b506105cb61271081565b348015610b5d57600080fd5b506103d1610b6c366004615027565b6120fd565b348015610b7d57600080fd5b506105cb60fe5481565b348015610b9357600080fd5b506105cb610ba2366004614ee9565b612231565b348015610bb357600080fd5b50610103546103f390610100900460ff1681565b348015610bd357600080fd5b506103f3610be2366004614f01565b6124f2565b348015610bf357600080fd5b50610aa261251d565b348015610c0857600080fd5b5061041d612648565b348015610c1d57600080fd5b506103d1610c2c366004614ee9565b612657565b348015610c3d57600080fd5b506103d1610c4c366004614ee9565b61283f565b348015610c5d57600080fd5b506105cb600081565b348015610c7257600080fd5b506103d1610c81366004614ee9565b612975565b348015610c9257600080fd5b506103f3610ca1366004614dc3565b612a56565b348015610cb257600080fd5b506105cb610cc1366004614ee9565b60ff6020526000908152604090205481565b348015610cdf57600080fd5b506103f3610cee366004614dc3565b612aef565b348015610cff57600080fd5b506103d1610d0e366004614f4d565b612afc565b348015610d1f57600080fd5b506103d1610d2e366004614ee9565b612ce0565b348015610d3f57600080fd5b5060fc546106e0906001600160a01b031681565b348015610d5f57600080fd5b506103d1612de0565b348015610d7457600080fd5b506103d1610d83366004614d13565b613052565b348015610d9457600080fd5b5060fb546106e0906201000090046001600160a01b031681565b348015610dba57600080fd5b506103d1610dc9366004614f01565b6130f5565b348015610dda57600080fd5b506103d1610de9366004614ee9565b61311b565b348015610dfa57600080fd5b506105cb610e09366004614d4b565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b348015610e4057600080fd5b50610103546106e0906201000090046001600160a01b031681565b6103d161328f565b600260c9541415610e8f5760405162461bcd60e51b8152600401610e869061536a565b60405180910390fd5b600260c95581610eb15760405162461bcd60e51b8152600401610e86906152fa565b6101035460ff1615610ed55760405162461bcd60e51b8152600401610e8690615235565b60fb546001600160a01b0382811662010000909204161480610f04575060fc546001600160a01b038281169116145b610f485760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574206164647265737360581b6044820152606401610e86565b60fb546001600160a01b038281166201000090920416141561105157336000908152610108602052604090205482811161101d573360009081526101026020526040812090610f9785846133b9565b90508082600001541015610fbd5760405162461bcd60e51b8152600401610e869061520a565b336000908152610108602052604081205561010654610fdc90846133b9565b610106558154610fec90826133b9565b825560fe54600090815261010060205260409020600181015461100f90836133b9565b6001909101555061104b9050565b61102781846133b9565b33600090815261010860205260409020556101065461104690846133b9565b610106555b506110b1565b3360009081526101096020526040902054828110156110825760405162461bcd60e51b8152600401610e869061531b565b61108c81846133b9565b3360009081526101096020526040902055610107546110ab90846133b9565b61010755505b610105546040516309777fbf60e11b81526001600160a01b03909116906312eeff7e906110e990339086908690600090600401615137565b600060405180830381600087803b15801561110357600080fd5b505af1158015611117573d6000803e3d6000fd5b50506040518481526001600160a01b03841692503391507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a35050600160c955565b60006001600160e01b03198216637965db0b60e01b148061119557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060603680546111aa9061575a565b80601f01602080910402602001604051908101604052809291908181526020018280546111d69061575a565b80156112235780601f106111f857610100808354040283529160200191611223565b820191906000526020600020905b81548152906001019060200180831161120657829003601f168201915b5050505050905090565b600061123a3384846133c5565b50600192915050565b600081116112885760405162461bcd60e51b8152602060048201526012602482015271215f6173736574546f5465726d696e61746560701b6044820152606401610e86565b600160fe54116112aa5760405162461bcd60e51b8152600401610e8690615345565b336000908152610102602052604090206101035460ff161561130b5760058101546000906112d890846134e9565b6001830154909150808211156113005760405162461bcd60e51b8152600401610e869061520a565b506005820155611354565b600481015460009061131d90846134e9565b9050600061132b83826134f5565b90508082111561134d5760405162461bcd60e51b8152600401610e869061520a565b5060048201555b60006101006000600160fe5461136a91906156dd565b815260200190815260200160002090506113918382600201546134e990919063ffffffff16565b6002909101555050565b61140a60405180610180016040528060006001600160a01b03168152602001600081526020016000815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000805160206157fa833981519152611423813361359c565b6101035460ff166114465760405162461bcd60e51b8152600401610e86906152cf565b600160fe541161148c5760405162461bcd60e51b81526020600482015260116024820152704e6f7468696e6720746f20736574746c6560781b6044820152606401610e86565b60006101006000600160fe546114a291906156dd565b815260200190815260200160002090506000604051806101800160405280306001600160a01b03168152602001600160fe546114de91906156dd565b8152602001836001015481526020018615158152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815250905060018061153a919061554a565b60ff1660fe54111561165d576000610100600060018060ff1660fe5461156091906156dd565b61156a91906156dd565b815260208082019290925260409081016000908120825161010081018452815481526001820154948101949094526002810154928401929092526003820154606084015260049091015461ffff8116608084015260ff620100008204811660a0850152630100000082048116151560c085015264010000000090910416151560e08301529091506115fb8783613600565b905086156116345760c081015161010084015260e08101516101208401526040810151610140840152606081015161016084015261165a565b6080808201519084015260a08082015190840152805160c0840152602081015160e08401525b50505b9250505b50919050565b61166f614b0a565b6000805160206157fa833981519152611688813361359c565b6101035460ff166116ab5760405162461bcd60e51b8152600401610e86906152cf565b6116b660018061554a565b60ff1660fe54116116f65760405162461bcd60e51b815260206004820152600a6024820152691b9bc81b585d1d5c995960b21b6044820152606401610e86565b600060018060ff1660fe5461170b91906156dd565b61171591906156dd565b600081815261010060208181526040808420815193840182528054845260018101549284019290925260028201549083015260038101546060830152600481015461ffff8116608084015260ff620100008204811660a0850152630100000082048116151560c085015264010000000090910416151560e083015292935061179e908790613600565b6004830180548815801563010000000263ff00000019909216919091179091559091506117f6576117ed81606001516117e78360400151610107546134e990919063ffffffff16565b906134e9565b61010755611815565b602081015181516101065461181092916117e791906134e9565b610106555b600182015415611899576040805161010081018252835481526001840154602082015260028401549181019190915260038301546060820152600483015461ffff8116608083015260ff620100008204811660a0840152630100000082048116151560c084015264010000000090910416151560e082015261189990879083613854565b60405183907f5fd55b58a9ef8c29a9db39dd9a05dec64993eb227ad0177941238778e9ea896290600090a295945050505050565b61010181815481106118de57600080fd5b6000918252602090912001546001600160a01b0316905081565b600260c954141561191b5760405162461bcd60e51b8152600401610e869061536a565b600260c9558161193d5760405162461bcd60e51b8152600401610e86906152fa565b6101035460ff16156119615760405162461bcd60e51b8152600401610e8690615235565b600160fe54116119835760405162461bcd60e51b8152600401610e86906152aa565b60fb546001600160a01b03828116620100009092041614806119b2575060fc546001600160a01b038281169116145b6119f65760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574206164647265737360581b6044820152606401610e86565b60fb546001600160a01b0382811662010000909204161415611a7657336000908152610108602052604090205482811015611a435760405162461bcd60e51b8152600401610e869061531b565b611a4d81846133b9565b336000908152610108602052604090205561010654611a6c90846133b9565b6101065550611ad6565b336000908152610109602052604090205482811015611aa75760405162461bcd60e51b8152600401610e869061531b565b611ab181846133b9565b336000908152610109602052604090205561010754611ad090846133b9565b61010755505b610105546040516309777fbf60e11b81526001600160a01b03909116906312eeff7e90611b0e90339086908690600090600401615137565b600060405180830381600087803b158015611b2857600080fd5b505af1158015611b3c573d6000803e3d6000fd5b5050600160c95550505050565b6000611b56848484613e07565b6001600160a01b038416600090815260346020908152604080832033845290915290205482811015611bdb5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610e86565b611be885338584036133c5565b60019150505b9392505050565b600082815260976020526040902060010154611c11813361359c565b611c1b8383613fd5565b505050565b60fb546000906001600160a01b0383811662010000909204161415611c62576101065460fe5460009081526101006020526040902060010154611195916134e9565b60fc546001600160a01b0383811691161415611c815750506101075490565b60405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a5908185cdcd95d609a1b6044820152606401610e86565b6001600160a01b0381163314611d295760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610e86565b611d33828261405b565b5050565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909161123a918590611d6e908690615532565b6133c5565b61010554604080516338cc483160e01b815290516000926001600160a01b0316916338cc4831916004808301926020929190829003018186803b158015611db957600080fd5b505afa158015611dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df19190614d2f565b905090565b610104546001600160a01b03163314611e685760405162461bcd60e51b815260206004820152602e60248201527f4f6e6c7920636f756e746572207061727479206f7074696f6e2063616e20636160448201526d1b1b081d1a1a5cc81b595d1a1bd960921b6064820152608401610e86565b6101035460009060ff16611e7e5760fe54611e8d565b600160fe54611e8d91906156dd565b905060005b50505050565b600160fe5411611eba5760405162461bcd60e51b8152600401610e8690615345565b336000908152610102602052604090206101035460ff1615611f2a57600180820154600583015560fe54600091610100918391611ef6916156dd565b81526020019081526020016000209050611f21826001015482600201546134e990919063ffffffff16565b60029091015550565b611f358160006134f5565b816004018190555060006101006000600160fe54611f5391906156dd565b81526020019081526020016000209050611f21826004015482600201546134e990919063ffffffff16565b50565b611fb36040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b33600090815261010260209081526040808320815160a081018352815481526001820154938101939093529291908101611fed84846134f5565b81523360008181526101086020908152604080832054828601529282526101099052819020549101529392505050565b600160fe541161203f5760405162461bcd60e51b8152600401610e8690615345565b336000908152610102602052604090206101035460ff16156120ac5760006101006000600160fe5461207191906156dd565b8152602001908152602001600020905061209c826005015482600201546133b990919063ffffffff16565b6002909101556000600582015550565b60006101006000600160fe546120c291906156dd565b815260200190815260200160002090506120ed826004015482600201546133b990919063ffffffff16565b6002909101556000600482015550565b6000805160206157fa833981519152612116813361359c565b600160fe54116121565760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd185c9d195960aa1b6044820152606401610e86565b6101035460ff161561217a5760405162461bcd60e51b8152600401610e8690615235565b6000600160fe5461218b91906156dd565b600081815261010060205260409020600381015491925090156121f05760405162461bcd60e51b815260206004820152601860248201527f537472696b6520507269636520616c72656164792073657400000000000000006044820152606401610e86565b6020840151600382015560608401516004909101805460409095015160ff16620100000262ffffff1990951661ffff90921691909117939093179092555050565b60006000805160206157fa83398151915261224c813361359c565b6101035460ff16156122705760405162461bcd60e51b8152600401610e8690615235565b600160fe5411156122e75760006101006000600160fe5461229191906156dd565b815260200190815260200160002060030154116122e75760405162461bcd60e51b815260206004820152601460248201527314dd1c9a5ad948141c9a58d9481b9bdd081cd95d60621b6044820152606401610e86565b610103805460ff1916600190811790915560fd84905560fe5461230991615532565b60fe81815560408051610100808201835284825260006020808401828152848601838152606086018481526080870185815260a0880186815260c089018781526101035489900460ff908116151560e08c019081529d895298909652989095208751815592516001848101919091559151600284015551600383015592516004909101805496519251985115156401000000000264ff00000000199915156301000000029990991664ffff0000001993909516620100000262ffffff1990971661ffff929092169190911795909517169190911794909417909155905490911015612477576101015460005b81811015612470576000610101828154811061242157634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835261010290915260409091208054919250901561245957805460018201555b6000905550806124688161578f565b9150506123f5565b5050612483565b610103805460ff191690555b60fe546040517f10f419fb017d3101d854d4433e414ff27f232bb2f4aae83d987ad0219efa6c9b90600090a2600160fe5411156124e8576101006000600160fe546124ce91906156dd565b815260200190815260200160002060010154925050611661565b5060009392505050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61254f6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60fe5460009081526101006020819052604082206101035490929190829060ff1661257c5760fe5461258b565b600160fe5461258b91906156dd565b8152602081019190915260400160009081206101035490925061010090829060ff166125c557600160fe546125c091906156dd565b6125d4565b600260fe546125d491906156dd565b8152602001908152602001600020905060006040518060a001604052808560010154815260200161010360009054906101000a900460ff1661261757600061261d565b84600101545b8152602001836001015481526020016101065481526020016101075481525090508094505050505090565b6060603780546111aa9061575a565b6101035460ff161561267b5760405162461bcd60e51b8152600401610e8690615235565b600160fe541161269d5760405162461bcd60e51b8152600401610e86906152aa565b600081116126bd5760405162461bcd60e51b8152600401610e86906152fa565b3360009081526101096020526040902054818110156126ee5760405162461bcd60e51b8152600401610e869061531b565b6126f881836133b9565b33600090815261010960205260409020556101065461271790836133b9565b61010655604080516001808252818301909252600091602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337019050509050338260008151811061278257634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505083816000815181106127c457634e487b7160e01b600052603260045260246000fd5b602090810291909101015261010354604051632cb9ff9d60e11b8152620100009091046001600160a01b031690635973ff3a906128079085908590600401615161565b600060405180830381600087803b15801561282157600080fd5b505af1158015612835573d6000803e3d6000fd5b5050505050505050565b600081116128845760405162461bcd60e51b8152602060048201526012602482015271215f6173736574546f5465726d696e61746560701b6044820152606401610e86565b600160fe54116128a65760405162461bcd60e51b8152600401610e8690615345565b336000908152610102602052604090206101035460ff16156128ff5780600501548211156128e65760405162461bcd60e51b8152600401610e869061531b565b60058101546128f590836133b9565b6005820155612938565b80600401548211156129235760405162461bcd60e51b8152600401610e869061531b565b600481015461293290836133b9565b60048201555b60006101006000600160fe5461294e91906156dd565b815260200190815260200160002090506113918382600201546133b990919063ffffffff16565b600260c95414156129985760405162461bcd60e51b8152600401610e869061536a565b600260c95560fe546001106129bf5760405162461bcd60e51b8152600401610e86906152aa565b600081116129df5760405162461bcd60e51b8152600401610e86906152fa565b336000908152610108602052604090205481811015612a105760405162461bcd60e51b8152600401610e869061531b565b612a1a81836133b9565b336000908152610108602052604090205561010654612a3990836133b9565b61010681905550612a4d338360fe546140c2565b5050600160c955565b3360009081526034602090815260408083206001600160a01b038616845290915281205482811015612ad85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610e86565b612ae533858584036133c5565b5060019392505050565b600061123a338484613e07565b600054610100900460ff1680612b15575060005460ff16155b612b315760405162461bcd60e51b8152600401610e869061525c565b600054610100900460ff16158015612b53576000805461ffff19166101011790555b6001600160a01b038416612b9f5760405162461bcd60e51b8152602060048201526013602482015272456d707479207661756c74206164647265737360681b6044820152606401610e86565b612ba7614224565b612bb18a8a614297565b612bb9614316565b612bc4600033614385565b612bdc6000805160206157fa83398151915283614385565b612bf46000805160206157fa83398151915285614385565b60fb805460fc80546001600160a01b038b81166001600160a81b0319909216919091178c82168015600160a01b029190911790925560ff8a81166001600160b01b03199094166201000090930261ffff1916929092179290921761010091891682021790925561010580546001600160a01b031916918716919091179055610103805461ff00191685151590920291909117905560405130907f8f61f0def895309a310dec5facf78f589cf18d834f0ba4030a5e68e32180ec9790612cba908c906151d7565b60405180910390a28015612cd4576000805461ff00191690555b50505050505050505050565b600260c9541415612d035760405162461bcd60e51b8152600401610e869061536a565b600260c95560fe54612d425760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610e86565b60fc54600160a01b900460ff1615612d855760405162461bcd60e51b815260206004820152600660248201526502145524332360d41b6044820152606401610e86565b60008111612da55760405162461bcd60e51b8152600401610e86906152fa565b612db2338260fe546140c2565b612dd833612dbe611d73565b60fb546201000090046001600160a01b031691908461438f565b50600160c955565b6000805160206157fa833981519152612df9813361359c565b600260c9541415612e1c5760405162461bcd60e51b8152600401610e869061536a565b600260c95560fe54600110612e615760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd185c9d195960aa1b6044820152606401610e86565b600260fe5411158015612e7857506101035460ff16155b15612e8c57610103805460ff191660011790555b6101035460ff16612eaf5760405162461bcd60e51b8152600401610e86906152cf565b6000600160fe54612ec091906156dd565b600081815261010060205260409020600181015491925090612ee39030906143e9565b6101015460005b818110156130035760006101018281548110612f1657634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316808352610102909152604090912060018101549192509015612fb257612f5830838360010154613e07565b60048501548554604080513081526001600160a01b038616602082015261ffff9093169083015260608201527fe32540b403abb4ebf4396862a5996e4798b57d9312e048b14b0e0e5e3fb9eaeb9060800160405180910390a15b600581015415612fd057600581018054600483015560009055612fd8565b600060048201555b6001810154612fe89082906144c8565b60006001909101555080612ffb8161578f565b915050612eea565b50600083815260ff60205260408082204390555184917ffa513f17b83baf0c2da337ab931a96429f75c55f0ee2115b7acd007a1a35dd5191a25050610103805460ff191690555050600160c955565b600061305e813361359c565b6001600160a01b0382163014156130b75760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f74207365742073656c6620617320636f756e7465722070617274796044820152606401610e86565b50610103805462010000600160b01b031916620100006001600160a01b039390931692830217905561010480546001600160a01b0319169091179055565b600082815260976020526040902060010154613111813361359c565b611c1b838361405b565b600260c954141561313e5760405162461bcd60e51b8152600401610e869061536a565b600260c955806131605760405162461bcd60e51b8152600401610e86906152fa565b3360009081526101026020526040902080548211156131915760405162461bcd60e51b8152600401610e869061520a565b805461319d90836133b9565b815560fe5460009081526101006020526040902060018101546131c090846133b9565b6001808301919091556101055460fb546040516309777fbf60e11b81526001600160a01b03928316936312eeff7e9361320a9333938a936201000090920490921691600401615137565b600060405180830381600087803b15801561322457600080fd5b505af1158015613238573d6000803e3d6000fd5b505060fb54604051868152620100009091046001600160a01b031692503391507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a35050600160c95550565b600260c95414156132b25760405162461bcd60e51b8152600401610e869061536a565b600260c95560fe546132f15760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610e86565b60fc54600160a01b900460ff166133335760405162461bcd60e51b8152600401610e86906020808252600490820152630428aa8960e31b604082015260600190565b6000341161336c5760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b6044820152606401610e86565b613379333460fe546140c2565b613381611d73565b6001600160a01b03166108fc349081150290604051600060405180830381858888f19350505050158015612dd8573d6000803e3d6000fd5b6000611bee82846156dd565b6001600160a01b0383166134275760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610e86565b6001600160a01b0382166134885760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610e86565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000611bee8284615532565b600382015460009060ff83166101009091046001600160e81b03161161351d57506000611195565b600160ff83161061352d57600080fd5b600383015460009060019061354690859060ff1661569c565b613550919061569c565b905060008160000b121561356c576135696001826154c7565b90505b836002018160ff166001811061359257634e487b7160e01b600052603260045260246000fd5b0154949350505050565b6135a682826124f2565b611d33576135be816001600160a01b0316601461457c565b6135c983602061457c565b6040516020016135da9291906150c2565b60408051601f198184030181529082905262461bcd60e51b8252610e86916004016151d7565b613608614b0a565b600060405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020018460000151815250905083156137c35761010354600090610100900460ff166136d15760fb546136cc906136869060ff16600a6155d2565b6136c686606001516136c660fb60019054906101000a900460ff168960a001516136b0919061554a565b6136bb90600a6155d2565b60208a01519061475e565b9061476a565b61372a565b60fb5460a085015161372a916136ec9160ff9091169061554a565b6136f790600a6155d2565b60fb546136c69061371190610100900460ff16600a6155d2565b606088015160208901516137249161475e565b9061475e565b9050600061374f6127106136c6876080015161ffff168561475e90919063ffffffff16565b6040860151909150156137915761376f8286604001518760200151614776565b83604001818152505061378b8186604001518760200151614776565b60608401525b60408301516137a19083906133b9565b60c084015260608301516137b69082906133b9565b60e084015250611bee9050565b602083015160808401516000906137e790612710906136c690859061ffff1661475e565b604086015190915015613824576138078286604001518760200151614776565b83526040850151602086015161381e918391614776565b60208401525b82516138319083906133b9565b608084015260208301516138469082906133b9565b60a084015250509392505050565b610101546040830151602084015160009161386f91906133b9565b9050846139f4576000600160fe5461388791906156dd565b6020850151855191925060009161389d916134e9565b905060006138bc8660a0015187608001516134e990919063ffffffff16565b905060005b858110156139e957600061010182815481106138ed57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316808352610102909152604082209092509061391f82826134f5565b90508061393557506000600490910155506139d7565b600061394a8784600401548e60400151614776565b90508015613991576001600160a01b0384166000908152610108602052604090205461397690826134e9565b6001600160a01b038516600090815261010860205260409020555b60006139b4876139ae8660040154866133b990919063ffffffff16565b8c614776565b905080156139c7576139c785828b6140c2565b6000846004018190555050505050505b806139e18161578f565b9150506138c1565b505050505050505050565b6000613a11846060015185604001516134e990919063ffffffff16565b60e0850151909150600090613a2690806134e9565b905060005b84811015613bc35760006101018281548110613a5757634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168083526101029091526040822090925090613a8982826134f5565b905080613a9f5750600060049091015550613bb1565b6000613ab48784600401548d60400151614776565b90508015613afb576001600160a01b03841660009081526101096020526040902054613ae090826134e9565b6001600160a01b038516600090815261010960205260409020555b6000613b1e87613b188660040154866133b990919063ffffffff16565b8b614776565b90508015613ba15761010b805460018082019092557fc4a0eda7235d7f6fd09c1e1f9f82dc3264d0d2f064cb41576c42a996a7be28920182905561010a805491820181556000527fc588bd85af64879c0999911852d2549e38c750e7e4e194eb8891b0913e93b12c0180546001600160a01b0319166001600160a01b0387161790555b6000846004018190555050505050505b80613bbb8161578f565b915050613a2b565b5061010b5480613bd7575050505050505050565b60008167ffffffffffffffff811115613c0057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613c29578160200160208202803683370190505b50905060008267ffffffffffffffff811115613c5557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613c7e578160200160208202803683370190505b50905060005b83811015613d765761010a8181548110613cae57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316838281518110613cec57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505061010b8181548110613d2e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154828281518110613d5957634e487b7160e01b600052603260045260246000fd5b602090810291909101015280613d6e8161578f565b915050613c84565b50613d8461010a6000614b56565b613d9161010b6000614b56565b61010354604051632cb9ff9d60e11b8152620100009091046001600160a01b031690635973ff3a90613dc99085908590600401615161565b600060405180830381600087803b158015613de357600080fd5b505af1158015613df7573d6000803e3d6000fd5b5050505050505050505050505050565b6001600160a01b038316613e6b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610e86565b6001600160a01b038216613ecd5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610e86565b6001600160a01b03831660009081526033602052604090205481811015613f455760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610e86565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290613f7c908490615532565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051613fc891815260200190565b60405180910390a3611e92565b613fdf82826124f2565b611d335760008281526097602090815260408083206001600160a01b03851684529091529020805460ff191660011790556140173390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61406582826124f2565b15611d335760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526101006020526040902060fd5460018201546140e390856134e9565b11156141245760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682071756f746160801b6044820152606401610e86565b6001600160a01b0384166000908152610102602052604090206003810154600160f01b900460ff166141b45760038101805460ff60f01b1916600160f01b17905561010180546001810182556000919091527f109ea3cebb188b9c1b9fc5bb3920be60dfdc8699098dff92f3d80daaca7476890180546001600160a01b0387166001600160a01b03199091161790555b80546141c090856134e9565b815560018201546141d190856134e9565b60018301556040805185815230602082015284916001600160a01b0388169133917ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b910160405180910390a45050505050565b600054610100900460ff168061423d575060005460ff16155b6142595760405162461bcd60e51b8152600401610e869061525c565b600054610100900460ff1615801561427b576000805461ffff19166101011790555b6142836147be565b8015611f7e576000805461ff001916905550565b600054610100900460ff16806142b0575060005460ff16155b6142cc5760405162461bcd60e51b8152600401610e869061525c565b600054610100900460ff161580156142ee576000805461ffff19166101011790555b6142f661482e565b6143008383614898565b8015611c1b576000805461ff0019169055505050565b600054610100900460ff168061432f575060005460ff16155b61434b5760405162461bcd60e51b8152600401610e869061525c565b600054610100900460ff1615801561436d576000805461ffff19166101011790555b61437561482e565b61437d61482e565b61428361482e565b611d338282613fd5565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611e9290859061492d565b6001600160a01b03821661443f5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610e86565b80603560008282546144519190615532565b90915550506001600160a01b0382166000908152603360205260408120805483929061447e908490615532565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600382015460ff16816002840182600181106144f457634e487b7160e01b600052603260045260246000fd5b015560006145036001806156f4565b60ff16821461451c57614517826001615532565b61451f565b60005b60038501805460ff191660ff8316179081905590915061454e9061010090046001600160e81b03166001615507565b8460030160016101000a8154816001600160e81b0302191690836001600160e81b0316021790555050505050565b6060600061458b83600261567d565b614596906002615532565b67ffffffffffffffff8111156145bc57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156145e6576020820181803683370190505b509050600360fc1b8160008151811061460f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061464c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061467084600261567d565b61467b906001615532565b90505b600181111561470f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106146bd57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106146e157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361470881615743565b905061467e565b508315611bee5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610e86565b6000611bee828461567d565b6000611bee828461556f565b6000821580614783575081155b8061478c575083155b1561479957506000611bee565b818310156147b4576147af826136c6868661475e565b6147b6565b835b949350505050565b600054610100900460ff16806147d7575060005460ff16155b6147f35760405162461bcd60e51b8152600401610e869061525c565b600054610100900460ff16158015614815576000805461ffff19166101011790555b600160c9558015611f7e576000805461ff001916905550565b600054610100900460ff1680614847575060005460ff16155b6148635760405162461bcd60e51b8152600401610e869061525c565b600054610100900460ff16158015614283576000805461ffff19166101011790558015611f7e576000805461ff001916905550565b600054610100900460ff16806148b1575060005460ff16155b6148cd5760405162461bcd60e51b8152600401610e869061525c565b600054610100900460ff161580156148ef576000805461ffff19166101011790555b8251614902906036906020860190614b74565b508151614916906037906020850190614b74565b508015611c1b576000805461ff0019169055505050565b6000614982826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166149ff9092919063ffffffff16565b805190915015611c1b57808060200190518101906149a09190614ecd565b611c1b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610e86565b60606147b6848460008585843b614a585760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e86565b600080866001600160a01b03168587604051614a7491906150a6565b60006040518083038185875af1925050503d8060008114614ab1576040519150601f19603f3d011682016040523d82523d6000602084013e614ab6565b606091505b5091509150614ac6828286614ad1565b979650505050505050565b60608315614ae0575081611bee565b825115614af05782518084602001fd5b8160405162461bcd60e51b8152600401610e8691906151d7565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5080546000825590600052602060002090810190611f7e9190614bf8565b828054614b809061575a565b90600052602060002090601f016020900481019282614ba25760008555614be8565b82601f10614bbb57805160ff1916838001178555614be8565b82800160010185558215614be8579182015b82811115614be8578251825591602001919060010190614bcd565b50614bf4929150614bf8565b5090565b5b80821115614bf45760008155600101614bf9565b8035614c18816157d6565b919050565b600082601f830112614c2d578081fd5b81356020614c42614c3d836154a3565b615472565b80838252828201915082860187848660051b8901011115614c61578586fd5b855b85811015614c7f57813584529284019290840190600101614c63565b5090979650505050505050565b8035614c18816157eb565b600082601f830112614ca7578081fd5b813567ffffffffffffffff811115614cc157614cc16157c0565b614cd4601f8201601f1916602001615472565b818152846020838601011115614ce8578283fd5b816020850160208301379081016020019190915292915050565b803560ff81168114614c1857600080fd5b600060208284031215614d24578081fd5b8135611bee816157d6565b600060208284031215614d40578081fd5b8151611bee816157d6565b60008060408385031215614d5d578081fd5b8235614d68816157d6565b91506020830135614d78816157d6565b809150509250929050565b600080600060608486031215614d97578081fd5b8335614da2816157d6565b92506020840135614db2816157d6565b929592945050506040919091013590565b60008060408385031215614dd5578182fd5b8235614de0816157d6565b946020939093013593505050565b60008060408385031215614e00578182fd5b823567ffffffffffffffff80821115614e17578384fd5b818501915085601f830112614e2a578384fd5b81356020614e3a614c3d836154a3565b8083825282820191508286018a848660051b8901011115614e59578889fd5b8896505b84871015614e84578035614e70816157d6565b835260019690960195918301918301614e5d565b5096505086013592505080821115614e9a578283fd5b50614ea785828601614c1d565b9150509250929050565b600060208284031215614ec2578081fd5b8135611bee816157eb565b600060208284031215614ede578081fd5b8151611bee816157eb565b600060208284031215614efa578081fd5b5035919050565b60008060408385031215614f13578182fd5b823591506020830135614d78816157d6565b600060208284031215614f36578081fd5b81356001600160e01b031981168114611bee578182fd5b60008060008060008060008060006101208a8c031215614f6b578687fd5b893567ffffffffffffffff80821115614f82578889fd5b614f8e8d838e01614c97565b9a5060208c0135915080821115614fa3578889fd5b50614fb08c828d01614c97565b98505060408a0135614fc1816157d6565b965060608a0135614fd1816157d6565b9550614fdf60808b01614d02565b9450614fed60a08b01614d02565b9350614ffb60c08b01614c0d565b925061500960e08b01614c8c565b91506150186101008b01614c0d565b90509295985092959850929598565b600060808284031215615038578081fd5b6040516080810181811067ffffffffffffffff8211171561505b5761505b6157c0565b6040528235615069816157d6565b81526020838101359082015261508160408401614d02565b6040820152606083013561ffff8116811461509a578283fd5b60608201529392505050565b600082516150b8818460208701615717565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516150fa816017850160208801615717565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161512b816028840160208801615717565b01602801949350505050565b6001600160a01b039485168152602081019390935292166040820152901515606082015260800190565b604080825283519082018190526000906020906060840190828701845b828110156151a35781516001600160a01b03168452928401929084019060010161517e565b50505083810382850152845180825285830191830190845b81811015614c7f578351835292840192918401916001016151bb565b60208152600082518060208401526151f6816040850160208701615717565b601f01601f19169190910160400192915050565b6020808252601190820152704578636565647320617661696c61626c6560781b604082015260600190565b6020808252600d908201526c10995a5b99c81cd95d1d1b1959609a1b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600b908201526a08539bc813585d1d5c995960aa1b604082015260600190565b602080825260119082015270139bdd0818995a5b99c81cd95d1d1b1959607a1b604082015260600190565b60208082526007908201526608585b5bdd5b9d60ca1b604082015260600190565b60208082526010908201526f45786365656420617661696c61626c6560801b604082015260600190565b6020808252600b908201526a4e6f206f6e20676f696e6760a81b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60a08101611195828480518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b81516001600160a01b03168152610180810160208301516020830152604083015160408301526060830151615413606084018215159052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525061016080840151818401525092915050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561549b5761549b6157c0565b604052919050565b600067ffffffffffffffff8211156154bd576154bd6157c0565b5060051b60200190565b600081810b83820b82821282607f038213811516156154e8576154e86157aa565b82607f190382128116156154fe576154fe6157aa565b50019392505050565b60006001600160e81b03828116848216808303821115615529576155296157aa565b01949350505050565b60008219821115615545576155456157aa565b500190565b600060ff821660ff84168060ff03821115615567576155676157aa565b019392505050565b60008261558a57634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156155ca5781600019048211156155b0576155b06157aa565b808516156155bd57918102915b93841c9390800290615594565b509250929050565b6000611bee60ff8416836000826155eb57506001611195565b816155f857506000611195565b816001811461560e576002811461561857615634565b6001915050611195565b60ff841115615629576156296157aa565b50506001821b611195565b5060208310610133831016604e8410600b8410161715615657575081810a611195565b615661838361558f565b8060001904821115615675576156756157aa565b029392505050565b6000816000190483118215151615615697576156976157aa565b500290565b600081810b83820b8281128015607f198301841216156156be576156be6157aa565b81607f0183138116156156d3576156d36157aa565b5090039392505050565b6000828210156156ef576156ef6157aa565b500390565b600060ff821660ff84168082101561570e5761570e6157aa565b90039392505050565b60005b8381101561573257818101518382015260200161571a565b83811115611e925750506000910152565b600081615752576157526157aa565b506000190190565b600181811c9082168061576e57607f821691505b6020821081141561166157634e487b7160e01b600052602260045260246000fd5b60006000198214156157a3576157a36157aa565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611f7e57600080fd5b8015158114611f7e57600080fdfe6666bf5bfee463d10a7fc50448047f8a53b7762d7e28fbc5c643182785f3fd3fa26469706673582212209b64d302790f6471b8417bcfb703a2954fdc7d55e4f0b7c5ba57f0bffeb3900c64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106103ac5760003560e01c80636896fabf116101e7578063a217fddf1161010d578063c02337df116100a0578063db006a751161006f578063db006a7514610dce578063dd62ed3e14610dee578063eef9f5a514610e34578063f6326fb314610e5b57600080fd5b8063c02337df14610d53578063c515d7e714610d68578063ccc41f2414610d88578063d547741f14610dae57600080fd5b8063a9059cbb116100dc578063a9059cbb14610cd3578063aac5001d14610cf3578063b6b55f2514610d13578063bb9662c814610d3357600080fd5b8063a217fddf14610c51578063a2589ef914610c66578063a457c2d714610c86578063a5d3e5b114610ca657600080fd5b80638a19c8bc1161018557806392b4d26a1161015457806392b4d26a14610be757806395d89b4114610bfc5780639e4cbd7d14610c115780639f01f7ba14610c3157600080fd5b80638a19c8bc14610b715780638cd8935914610b875780639020253914610ba757806391d1485414610bc757600080fd5b806370a08231116101c157806370a0823114610ae35780637445e85c14610b1957806376e7a47814610b3b5780637ba0eabe14610b5157600080fd5b80636896fabf14610a8d5780636a2af82014610aaf57806370349bfb14610ace57600080fd5b806321c9445c116102d7578063395093511161026a578063511db11411610239578063511db114146109815780635973ff3a146109a257806364057572146109c257806365235474146109d757600080fd5b806339509351146108fe57806341b9f3291461091e578063430bf08a1461093857806347276abf1461094d57600080fd5b80632f2ff15d116102a65780632f2ff15d14610878578063313ce5671461089857806332cc6ae6146108be57806336568abe146108de57600080fd5b806321c9445c146107e757806323b872dd14610807578063248a9ca3146108275780632c453bdf1461085757600080fd5b80630e777b4b1161034f578063135ad9691161031e578063135ad969146106f857806318160ddd14610725578063186a4a171461073a5780631de245af146107c757600080fd5b80630e777b4b146105d95780630ecc535f146105f95780630fd49173146106a857806311c8556d146106bf57600080fd5b80630720da521161038b5780630720da521461042a5780630748248f14610579578063095ea7b3146105945780630b2737e4146105b457600080fd5b8062f714ce146103b157806301ffc9a7146103d357806306fdde0314610408575b600080fd5b3480156103bd57600080fd5b506103d16103cc366004614f01565b610e63565b005b3480156103df57600080fd5b506103f36103ee366004614f25565b611164565b60405190151581526020015b60405180910390f35b34801561041457600080fd5b5061041d61119b565b6040516103ff91906151d7565b34801561043657600080fd5b5061050d610445366004614ee9565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915250600090815260ff60208181526040808420548452610100808352938190208151948501825280548552600181015492850192909252600282015490840152600381015460608401526004015461ffff81166080840152620100008104821660a0840152630100000081048216151560c0840152640100000000900416151560e082015290565b6040516103ff91906000610100820190508251825260208301516020830152604083015160408301526060830151606083015261ffff608084015116608083015260ff60a08401511660a083015260c0830151151560c083015260e0830151151560e083015292915050565b34801561058557600080fd5b50610103546103f39060ff1681565b3480156105a057600080fd5b506103f36105af366004614dc3565b61122d565b3480156105c057600080fd5b506105cb6101065481565b6040519081526020016103ff565b3480156105e557600080fd5b506103d16105f4366004614ee9565b611243565b34801561060557600080fd5b50610661610614366004614d13565b61010260205260009081526040902080546001820154600383015460048401546005909401549293919260ff808316936001600160e81b0361010085041693600160f01b90049091169187565b60408051978852602088019690965260ff909416948601949094526001600160e81b0390911660608501521515608084015260a083019190915260c082015260e0016103ff565b3480156106b457600080fd5b506105cb6101075481565b3480156106cb57600080fd5b50610105546106e0906001600160a01b031681565b6040516001600160a01b0390911681526020016103ff565b34801561070457600080fd5b50610718610713366004614eb1565b61139b565b6040516103ff91906153da565b34801561073157600080fd5b506035546105cb565b34801561074657600080fd5b5061075a610755366004614eb1565b611667565b6040516103ff9190600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b3480156107d357600080fd5b506106e06107e2366004614ee9565b6118cd565b3480156107f357600080fd5b506103d1610802366004614f01565b6118f8565b34801561081357600080fd5b506103f3610822366004614d83565b611b49565b34801561083357600080fd5b506105cb610842366004614ee9565b60009081526097602052604090206001015490565b34801561086357600080fd5b50610104546106e0906001600160a01b031681565b34801561088457600080fd5b506103d1610893366004614f01565b611bf5565b3480156108a457600080fd5b5060fb5460ff165b60405160ff90911681526020016103ff565b3480156108ca57600080fd5b506105cb6108d9366004614d13565b611c20565b3480156108ea57600080fd5b506103d16108f9366004614f01565b611cb9565b34801561090a57600080fd5b506103f3610919366004614dc3565b611d37565b34801561092a57600080fd5b5060fb546108ac9060ff1681565b34801561094457600080fd5b506106e0611d73565b34801561095957600080fd5b506105cb7ffd0eee74c7609b4290ae42cfa22435eabf285017ea12017ed27c2e820eae6a7781565b34801561098d57600080fd5b5060fc546103f390600160a01b900460ff1681565b3480156109ae57600080fd5b506103d16109bd366004614dee565b611df6565b3480156109ce57600080fd5b506103d1611e98565b3480156109e357600080fd5b50610a476109f2366004614ee9565b61010060205260009081526040902080546001820154600283015460038401546004909401549293919290919061ffff81169060ff620100008204811691630100000081048216916401000000009091041688565b60408051988952602089019790975295870194909452606086019290925261ffff16608085015260ff1660a0840152151560c0830152151560e0820152610100016103ff565b348015610a9957600080fd5b50610aa2611f81565b6040516103ff91906153a1565b348015610abb57600080fd5b5060fb546108ac90610100900460ff1681565b348015610ada57600080fd5b506103d161201d565b348015610aef57600080fd5b506105cb610afe366004614d13565b6001600160a01b031660009081526033602052604090205490565b348015610b2557600080fd5b506105cb6000805160206157fa83398151915281565b348015610b4757600080fd5b506105cb61271081565b348015610b5d57600080fd5b506103d1610b6c366004615027565b6120fd565b348015610b7d57600080fd5b506105cb60fe5481565b348015610b9357600080fd5b506105cb610ba2366004614ee9565b612231565b348015610bb357600080fd5b50610103546103f390610100900460ff1681565b348015610bd357600080fd5b506103f3610be2366004614f01565b6124f2565b348015610bf357600080fd5b50610aa261251d565b348015610c0857600080fd5b5061041d612648565b348015610c1d57600080fd5b506103d1610c2c366004614ee9565b612657565b348015610c3d57600080fd5b506103d1610c4c366004614ee9565b61283f565b348015610c5d57600080fd5b506105cb600081565b348015610c7257600080fd5b506103d1610c81366004614ee9565b612975565b348015610c9257600080fd5b506103f3610ca1366004614dc3565b612a56565b348015610cb257600080fd5b506105cb610cc1366004614ee9565b60ff6020526000908152604090205481565b348015610cdf57600080fd5b506103f3610cee366004614dc3565b612aef565b348015610cff57600080fd5b506103d1610d0e366004614f4d565b612afc565b348015610d1f57600080fd5b506103d1610d2e366004614ee9565b612ce0565b348015610d3f57600080fd5b5060fc546106e0906001600160a01b031681565b348015610d5f57600080fd5b506103d1612de0565b348015610d7457600080fd5b506103d1610d83366004614d13565b613052565b348015610d9457600080fd5b5060fb546106e0906201000090046001600160a01b031681565b348015610dba57600080fd5b506103d1610dc9366004614f01565b6130f5565b348015610dda57600080fd5b506103d1610de9366004614ee9565b61311b565b348015610dfa57600080fd5b506105cb610e09366004614d4b565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b348015610e4057600080fd5b50610103546106e0906201000090046001600160a01b031681565b6103d161328f565b600260c9541415610e8f5760405162461bcd60e51b8152600401610e869061536a565b60405180910390fd5b600260c95581610eb15760405162461bcd60e51b8152600401610e86906152fa565b6101035460ff1615610ed55760405162461bcd60e51b8152600401610e8690615235565b60fb546001600160a01b0382811662010000909204161480610f04575060fc546001600160a01b038281169116145b610f485760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574206164647265737360581b6044820152606401610e86565b60fb546001600160a01b038281166201000090920416141561105157336000908152610108602052604090205482811161101d573360009081526101026020526040812090610f9785846133b9565b90508082600001541015610fbd5760405162461bcd60e51b8152600401610e869061520a565b336000908152610108602052604081205561010654610fdc90846133b9565b610106558154610fec90826133b9565b825560fe54600090815261010060205260409020600181015461100f90836133b9565b6001909101555061104b9050565b61102781846133b9565b33600090815261010860205260409020556101065461104690846133b9565b610106555b506110b1565b3360009081526101096020526040902054828110156110825760405162461bcd60e51b8152600401610e869061531b565b61108c81846133b9565b3360009081526101096020526040902055610107546110ab90846133b9565b61010755505b610105546040516309777fbf60e11b81526001600160a01b03909116906312eeff7e906110e990339086908690600090600401615137565b600060405180830381600087803b15801561110357600080fd5b505af1158015611117573d6000803e3d6000fd5b50506040518481526001600160a01b03841692503391507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a35050600160c955565b60006001600160e01b03198216637965db0b60e01b148061119557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060603680546111aa9061575a565b80601f01602080910402602001604051908101604052809291908181526020018280546111d69061575a565b80156112235780601f106111f857610100808354040283529160200191611223565b820191906000526020600020905b81548152906001019060200180831161120657829003601f168201915b5050505050905090565b600061123a3384846133c5565b50600192915050565b600081116112885760405162461bcd60e51b8152602060048201526012602482015271215f6173736574546f5465726d696e61746560701b6044820152606401610e86565b600160fe54116112aa5760405162461bcd60e51b8152600401610e8690615345565b336000908152610102602052604090206101035460ff161561130b5760058101546000906112d890846134e9565b6001830154909150808211156113005760405162461bcd60e51b8152600401610e869061520a565b506005820155611354565b600481015460009061131d90846134e9565b9050600061132b83826134f5565b90508082111561134d5760405162461bcd60e51b8152600401610e869061520a565b5060048201555b60006101006000600160fe5461136a91906156dd565b815260200190815260200160002090506113918382600201546134e990919063ffffffff16565b6002909101555050565b61140a60405180610180016040528060006001600160a01b03168152602001600081526020016000815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000805160206157fa833981519152611423813361359c565b6101035460ff166114465760405162461bcd60e51b8152600401610e86906152cf565b600160fe541161148c5760405162461bcd60e51b81526020600482015260116024820152704e6f7468696e6720746f20736574746c6560781b6044820152606401610e86565b60006101006000600160fe546114a291906156dd565b815260200190815260200160002090506000604051806101800160405280306001600160a01b03168152602001600160fe546114de91906156dd565b8152602001836001015481526020018615158152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815250905060018061153a919061554a565b60ff1660fe54111561165d576000610100600060018060ff1660fe5461156091906156dd565b61156a91906156dd565b815260208082019290925260409081016000908120825161010081018452815481526001820154948101949094526002810154928401929092526003820154606084015260049091015461ffff8116608084015260ff620100008204811660a0850152630100000082048116151560c085015264010000000090910416151560e08301529091506115fb8783613600565b905086156116345760c081015161010084015260e08101516101208401526040810151610140840152606081015161016084015261165a565b6080808201519084015260a08082015190840152805160c0840152602081015160e08401525b50505b9250505b50919050565b61166f614b0a565b6000805160206157fa833981519152611688813361359c565b6101035460ff166116ab5760405162461bcd60e51b8152600401610e86906152cf565b6116b660018061554a565b60ff1660fe54116116f65760405162461bcd60e51b815260206004820152600a6024820152691b9bc81b585d1d5c995960b21b6044820152606401610e86565b600060018060ff1660fe5461170b91906156dd565b61171591906156dd565b600081815261010060208181526040808420815193840182528054845260018101549284019290925260028201549083015260038101546060830152600481015461ffff8116608084015260ff620100008204811660a0850152630100000082048116151560c085015264010000000090910416151560e083015292935061179e908790613600565b6004830180548815801563010000000263ff00000019909216919091179091559091506117f6576117ed81606001516117e78360400151610107546134e990919063ffffffff16565b906134e9565b61010755611815565b602081015181516101065461181092916117e791906134e9565b610106555b600182015415611899576040805161010081018252835481526001840154602082015260028401549181019190915260038301546060820152600483015461ffff8116608083015260ff620100008204811660a0840152630100000082048116151560c084015264010000000090910416151560e082015261189990879083613854565b60405183907f5fd55b58a9ef8c29a9db39dd9a05dec64993eb227ad0177941238778e9ea896290600090a295945050505050565b61010181815481106118de57600080fd5b6000918252602090912001546001600160a01b0316905081565b600260c954141561191b5760405162461bcd60e51b8152600401610e869061536a565b600260c9558161193d5760405162461bcd60e51b8152600401610e86906152fa565b6101035460ff16156119615760405162461bcd60e51b8152600401610e8690615235565b600160fe54116119835760405162461bcd60e51b8152600401610e86906152aa565b60fb546001600160a01b03828116620100009092041614806119b2575060fc546001600160a01b038281169116145b6119f65760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574206164647265737360581b6044820152606401610e86565b60fb546001600160a01b0382811662010000909204161415611a7657336000908152610108602052604090205482811015611a435760405162461bcd60e51b8152600401610e869061531b565b611a4d81846133b9565b336000908152610108602052604090205561010654611a6c90846133b9565b6101065550611ad6565b336000908152610109602052604090205482811015611aa75760405162461bcd60e51b8152600401610e869061531b565b611ab181846133b9565b336000908152610109602052604090205561010754611ad090846133b9565b61010755505b610105546040516309777fbf60e11b81526001600160a01b03909116906312eeff7e90611b0e90339086908690600090600401615137565b600060405180830381600087803b158015611b2857600080fd5b505af1158015611b3c573d6000803e3d6000fd5b5050600160c95550505050565b6000611b56848484613e07565b6001600160a01b038416600090815260346020908152604080832033845290915290205482811015611bdb5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610e86565b611be885338584036133c5565b60019150505b9392505050565b600082815260976020526040902060010154611c11813361359c565b611c1b8383613fd5565b505050565b60fb546000906001600160a01b0383811662010000909204161415611c62576101065460fe5460009081526101006020526040902060010154611195916134e9565b60fc546001600160a01b0383811691161415611c815750506101075490565b60405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a5908185cdcd95d609a1b6044820152606401610e86565b6001600160a01b0381163314611d295760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610e86565b611d33828261405b565b5050565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909161123a918590611d6e908690615532565b6133c5565b61010554604080516338cc483160e01b815290516000926001600160a01b0316916338cc4831916004808301926020929190829003018186803b158015611db957600080fd5b505afa158015611dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df19190614d2f565b905090565b610104546001600160a01b03163314611e685760405162461bcd60e51b815260206004820152602e60248201527f4f6e6c7920636f756e746572207061727479206f7074696f6e2063616e20636160448201526d1b1b081d1a1a5cc81b595d1a1bd960921b6064820152608401610e86565b6101035460009060ff16611e7e5760fe54611e8d565b600160fe54611e8d91906156dd565b905060005b50505050565b600160fe5411611eba5760405162461bcd60e51b8152600401610e8690615345565b336000908152610102602052604090206101035460ff1615611f2a57600180820154600583015560fe54600091610100918391611ef6916156dd565b81526020019081526020016000209050611f21826001015482600201546134e990919063ffffffff16565b60029091015550565b611f358160006134f5565b816004018190555060006101006000600160fe54611f5391906156dd565b81526020019081526020016000209050611f21826004015482600201546134e990919063ffffffff16565b50565b611fb36040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b33600090815261010260209081526040808320815160a081018352815481526001820154938101939093529291908101611fed84846134f5565b81523360008181526101086020908152604080832054828601529282526101099052819020549101529392505050565b600160fe541161203f5760405162461bcd60e51b8152600401610e8690615345565b336000908152610102602052604090206101035460ff16156120ac5760006101006000600160fe5461207191906156dd565b8152602001908152602001600020905061209c826005015482600201546133b990919063ffffffff16565b6002909101556000600582015550565b60006101006000600160fe546120c291906156dd565b815260200190815260200160002090506120ed826004015482600201546133b990919063ffffffff16565b6002909101556000600482015550565b6000805160206157fa833981519152612116813361359c565b600160fe54116121565760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd185c9d195960aa1b6044820152606401610e86565b6101035460ff161561217a5760405162461bcd60e51b8152600401610e8690615235565b6000600160fe5461218b91906156dd565b600081815261010060205260409020600381015491925090156121f05760405162461bcd60e51b815260206004820152601860248201527f537472696b6520507269636520616c72656164792073657400000000000000006044820152606401610e86565b6020840151600382015560608401516004909101805460409095015160ff16620100000262ffffff1990951661ffff90921691909117939093179092555050565b60006000805160206157fa83398151915261224c813361359c565b6101035460ff16156122705760405162461bcd60e51b8152600401610e8690615235565b600160fe5411156122e75760006101006000600160fe5461229191906156dd565b815260200190815260200160002060030154116122e75760405162461bcd60e51b815260206004820152601460248201527314dd1c9a5ad948141c9a58d9481b9bdd081cd95d60621b6044820152606401610e86565b610103805460ff1916600190811790915560fd84905560fe5461230991615532565b60fe81815560408051610100808201835284825260006020808401828152848601838152606086018481526080870185815260a0880186815260c089018781526101035489900460ff908116151560e08c019081529d895298909652989095208751815592516001848101919091559151600284015551600383015592516004909101805496519251985115156401000000000264ff00000000199915156301000000029990991664ffff0000001993909516620100000262ffffff1990971661ffff929092169190911795909517169190911794909417909155905490911015612477576101015460005b81811015612470576000610101828154811061242157634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835261010290915260409091208054919250901561245957805460018201555b6000905550806124688161578f565b9150506123f5565b5050612483565b610103805460ff191690555b60fe546040517f10f419fb017d3101d854d4433e414ff27f232bb2f4aae83d987ad0219efa6c9b90600090a2600160fe5411156124e8576101006000600160fe546124ce91906156dd565b815260200190815260200160002060010154925050611661565b5060009392505050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61254f6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60fe5460009081526101006020819052604082206101035490929190829060ff1661257c5760fe5461258b565b600160fe5461258b91906156dd565b8152602081019190915260400160009081206101035490925061010090829060ff166125c557600160fe546125c091906156dd565b6125d4565b600260fe546125d491906156dd565b8152602001908152602001600020905060006040518060a001604052808560010154815260200161010360009054906101000a900460ff1661261757600061261d565b84600101545b8152602001836001015481526020016101065481526020016101075481525090508094505050505090565b6060603780546111aa9061575a565b6101035460ff161561267b5760405162461bcd60e51b8152600401610e8690615235565b600160fe541161269d5760405162461bcd60e51b8152600401610e86906152aa565b600081116126bd5760405162461bcd60e51b8152600401610e86906152fa565b3360009081526101096020526040902054818110156126ee5760405162461bcd60e51b8152600401610e869061531b565b6126f881836133b9565b33600090815261010960205260409020556101065461271790836133b9565b61010655604080516001808252818301909252600091602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337019050509050338260008151811061278257634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505083816000815181106127c457634e487b7160e01b600052603260045260246000fd5b602090810291909101015261010354604051632cb9ff9d60e11b8152620100009091046001600160a01b031690635973ff3a906128079085908590600401615161565b600060405180830381600087803b15801561282157600080fd5b505af1158015612835573d6000803e3d6000fd5b5050505050505050565b600081116128845760405162461bcd60e51b8152602060048201526012602482015271215f6173736574546f5465726d696e61746560701b6044820152606401610e86565b600160fe54116128a65760405162461bcd60e51b8152600401610e8690615345565b336000908152610102602052604090206101035460ff16156128ff5780600501548211156128e65760405162461bcd60e51b8152600401610e869061531b565b60058101546128f590836133b9565b6005820155612938565b80600401548211156129235760405162461bcd60e51b8152600401610e869061531b565b600481015461293290836133b9565b60048201555b60006101006000600160fe5461294e91906156dd565b815260200190815260200160002090506113918382600201546133b990919063ffffffff16565b600260c95414156129985760405162461bcd60e51b8152600401610e869061536a565b600260c95560fe546001106129bf5760405162461bcd60e51b8152600401610e86906152aa565b600081116129df5760405162461bcd60e51b8152600401610e86906152fa565b336000908152610108602052604090205481811015612a105760405162461bcd60e51b8152600401610e869061531b565b612a1a81836133b9565b336000908152610108602052604090205561010654612a3990836133b9565b61010681905550612a4d338360fe546140c2565b5050600160c955565b3360009081526034602090815260408083206001600160a01b038616845290915281205482811015612ad85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610e86565b612ae533858584036133c5565b5060019392505050565b600061123a338484613e07565b600054610100900460ff1680612b15575060005460ff16155b612b315760405162461bcd60e51b8152600401610e869061525c565b600054610100900460ff16158015612b53576000805461ffff19166101011790555b6001600160a01b038416612b9f5760405162461bcd60e51b8152602060048201526013602482015272456d707479207661756c74206164647265737360681b6044820152606401610e86565b612ba7614224565b612bb18a8a614297565b612bb9614316565b612bc4600033614385565b612bdc6000805160206157fa83398151915283614385565b612bf46000805160206157fa83398151915285614385565b60fb805460fc80546001600160a01b038b81166001600160a81b0319909216919091178c82168015600160a01b029190911790925560ff8a81166001600160b01b03199094166201000090930261ffff1916929092179290921761010091891682021790925561010580546001600160a01b031916918716919091179055610103805461ff00191685151590920291909117905560405130907f8f61f0def895309a310dec5facf78f589cf18d834f0ba4030a5e68e32180ec9790612cba908c906151d7565b60405180910390a28015612cd4576000805461ff00191690555b50505050505050505050565b600260c9541415612d035760405162461bcd60e51b8152600401610e869061536a565b600260c95560fe54612d425760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610e86565b60fc54600160a01b900460ff1615612d855760405162461bcd60e51b815260206004820152600660248201526502145524332360d41b6044820152606401610e86565b60008111612da55760405162461bcd60e51b8152600401610e86906152fa565b612db2338260fe546140c2565b612dd833612dbe611d73565b60fb546201000090046001600160a01b031691908461438f565b50600160c955565b6000805160206157fa833981519152612df9813361359c565b600260c9541415612e1c5760405162461bcd60e51b8152600401610e869061536a565b600260c95560fe54600110612e615760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd185c9d195960aa1b6044820152606401610e86565b600260fe5411158015612e7857506101035460ff16155b15612e8c57610103805460ff191660011790555b6101035460ff16612eaf5760405162461bcd60e51b8152600401610e86906152cf565b6000600160fe54612ec091906156dd565b600081815261010060205260409020600181015491925090612ee39030906143e9565b6101015460005b818110156130035760006101018281548110612f1657634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316808352610102909152604090912060018101549192509015612fb257612f5830838360010154613e07565b60048501548554604080513081526001600160a01b038616602082015261ffff9093169083015260608201527fe32540b403abb4ebf4396862a5996e4798b57d9312e048b14b0e0e5e3fb9eaeb9060800160405180910390a15b600581015415612fd057600581018054600483015560009055612fd8565b600060048201555b6001810154612fe89082906144c8565b60006001909101555080612ffb8161578f565b915050612eea565b50600083815260ff60205260408082204390555184917ffa513f17b83baf0c2da337ab931a96429f75c55f0ee2115b7acd007a1a35dd5191a25050610103805460ff191690555050600160c955565b600061305e813361359c565b6001600160a01b0382163014156130b75760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f74207365742073656c6620617320636f756e7465722070617274796044820152606401610e86565b50610103805462010000600160b01b031916620100006001600160a01b039390931692830217905561010480546001600160a01b0319169091179055565b600082815260976020526040902060010154613111813361359c565b611c1b838361405b565b600260c954141561313e5760405162461bcd60e51b8152600401610e869061536a565b600260c955806131605760405162461bcd60e51b8152600401610e86906152fa565b3360009081526101026020526040902080548211156131915760405162461bcd60e51b8152600401610e869061520a565b805461319d90836133b9565b815560fe5460009081526101006020526040902060018101546131c090846133b9565b6001808301919091556101055460fb546040516309777fbf60e11b81526001600160a01b03928316936312eeff7e9361320a9333938a936201000090920490921691600401615137565b600060405180830381600087803b15801561322457600080fd5b505af1158015613238573d6000803e3d6000fd5b505060fb54604051868152620100009091046001600160a01b031692503391507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a35050600160c95550565b600260c95414156132b25760405162461bcd60e51b8152600401610e869061536a565b600260c95560fe546132f15760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610e86565b60fc54600160a01b900460ff166133335760405162461bcd60e51b8152600401610e86906020808252600490820152630428aa8960e31b604082015260600190565b6000341161336c5760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b6044820152606401610e86565b613379333460fe546140c2565b613381611d73565b6001600160a01b03166108fc349081150290604051600060405180830381858888f19350505050158015612dd8573d6000803e3d6000fd5b6000611bee82846156dd565b6001600160a01b0383166134275760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610e86565b6001600160a01b0382166134885760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610e86565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000611bee8284615532565b600382015460009060ff83166101009091046001600160e81b03161161351d57506000611195565b600160ff83161061352d57600080fd5b600383015460009060019061354690859060ff1661569c565b613550919061569c565b905060008160000b121561356c576135696001826154c7565b90505b836002018160ff166001811061359257634e487b7160e01b600052603260045260246000fd5b0154949350505050565b6135a682826124f2565b611d33576135be816001600160a01b0316601461457c565b6135c983602061457c565b6040516020016135da9291906150c2565b60408051601f198184030181529082905262461bcd60e51b8252610e86916004016151d7565b613608614b0a565b600060405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020018460000151815250905083156137c35761010354600090610100900460ff166136d15760fb546136cc906136869060ff16600a6155d2565b6136c686606001516136c660fb60019054906101000a900460ff168960a001516136b0919061554a565b6136bb90600a6155d2565b60208a01519061475e565b9061476a565b61372a565b60fb5460a085015161372a916136ec9160ff9091169061554a565b6136f790600a6155d2565b60fb546136c69061371190610100900460ff16600a6155d2565b606088015160208901516137249161475e565b9061475e565b9050600061374f6127106136c6876080015161ffff168561475e90919063ffffffff16565b6040860151909150156137915761376f8286604001518760200151614776565b83604001818152505061378b8186604001518760200151614776565b60608401525b60408301516137a19083906133b9565b60c084015260608301516137b69082906133b9565b60e084015250611bee9050565b602083015160808401516000906137e790612710906136c690859061ffff1661475e565b604086015190915015613824576138078286604001518760200151614776565b83526040850151602086015161381e918391614776565b60208401525b82516138319083906133b9565b608084015260208301516138469082906133b9565b60a084015250509392505050565b610101546040830151602084015160009161386f91906133b9565b9050846139f4576000600160fe5461388791906156dd565b6020850151855191925060009161389d916134e9565b905060006138bc8660a0015187608001516134e990919063ffffffff16565b905060005b858110156139e957600061010182815481106138ed57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316808352610102909152604082209092509061391f82826134f5565b90508061393557506000600490910155506139d7565b600061394a8784600401548e60400151614776565b90508015613991576001600160a01b0384166000908152610108602052604090205461397690826134e9565b6001600160a01b038516600090815261010860205260409020555b60006139b4876139ae8660040154866133b990919063ffffffff16565b8c614776565b905080156139c7576139c785828b6140c2565b6000846004018190555050505050505b806139e18161578f565b9150506138c1565b505050505050505050565b6000613a11846060015185604001516134e990919063ffffffff16565b60e0850151909150600090613a2690806134e9565b905060005b84811015613bc35760006101018281548110613a5757634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168083526101029091526040822090925090613a8982826134f5565b905080613a9f5750600060049091015550613bb1565b6000613ab48784600401548d60400151614776565b90508015613afb576001600160a01b03841660009081526101096020526040902054613ae090826134e9565b6001600160a01b038516600090815261010960205260409020555b6000613b1e87613b188660040154866133b990919063ffffffff16565b8b614776565b90508015613ba15761010b805460018082019092557fc4a0eda7235d7f6fd09c1e1f9f82dc3264d0d2f064cb41576c42a996a7be28920182905561010a805491820181556000527fc588bd85af64879c0999911852d2549e38c750e7e4e194eb8891b0913e93b12c0180546001600160a01b0319166001600160a01b0387161790555b6000846004018190555050505050505b80613bbb8161578f565b915050613a2b565b5061010b5480613bd7575050505050505050565b60008167ffffffffffffffff811115613c0057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613c29578160200160208202803683370190505b50905060008267ffffffffffffffff811115613c5557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613c7e578160200160208202803683370190505b50905060005b83811015613d765761010a8181548110613cae57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316838281518110613cec57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505061010b8181548110613d2e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154828281518110613d5957634e487b7160e01b600052603260045260246000fd5b602090810291909101015280613d6e8161578f565b915050613c84565b50613d8461010a6000614b56565b613d9161010b6000614b56565b61010354604051632cb9ff9d60e11b8152620100009091046001600160a01b031690635973ff3a90613dc99085908590600401615161565b600060405180830381600087803b158015613de357600080fd5b505af1158015613df7573d6000803e3d6000fd5b5050505050505050505050505050565b6001600160a01b038316613e6b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610e86565b6001600160a01b038216613ecd5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610e86565b6001600160a01b03831660009081526033602052604090205481811015613f455760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610e86565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290613f7c908490615532565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051613fc891815260200190565b60405180910390a3611e92565b613fdf82826124f2565b611d335760008281526097602090815260408083206001600160a01b03851684529091529020805460ff191660011790556140173390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61406582826124f2565b15611d335760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526101006020526040902060fd5460018201546140e390856134e9565b11156141245760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682071756f746160801b6044820152606401610e86565b6001600160a01b0384166000908152610102602052604090206003810154600160f01b900460ff166141b45760038101805460ff60f01b1916600160f01b17905561010180546001810182556000919091527f109ea3cebb188b9c1b9fc5bb3920be60dfdc8699098dff92f3d80daaca7476890180546001600160a01b0387166001600160a01b03199091161790555b80546141c090856134e9565b815560018201546141d190856134e9565b60018301556040805185815230602082015284916001600160a01b0388169133917ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b910160405180910390a45050505050565b600054610100900460ff168061423d575060005460ff16155b6142595760405162461bcd60e51b8152600401610e869061525c565b600054610100900460ff1615801561427b576000805461ffff19166101011790555b6142836147be565b8015611f7e576000805461ff001916905550565b600054610100900460ff16806142b0575060005460ff16155b6142cc5760405162461bcd60e51b8152600401610e869061525c565b600054610100900460ff161580156142ee576000805461ffff19166101011790555b6142f661482e565b6143008383614898565b8015611c1b576000805461ff0019169055505050565b600054610100900460ff168061432f575060005460ff16155b61434b5760405162461bcd60e51b8152600401610e869061525c565b600054610100900460ff1615801561436d576000805461ffff19166101011790555b61437561482e565b61437d61482e565b61428361482e565b611d338282613fd5565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611e9290859061492d565b6001600160a01b03821661443f5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610e86565b80603560008282546144519190615532565b90915550506001600160a01b0382166000908152603360205260408120805483929061447e908490615532565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600382015460ff16816002840182600181106144f457634e487b7160e01b600052603260045260246000fd5b015560006145036001806156f4565b60ff16821461451c57614517826001615532565b61451f565b60005b60038501805460ff191660ff8316179081905590915061454e9061010090046001600160e81b03166001615507565b8460030160016101000a8154816001600160e81b0302191690836001600160e81b0316021790555050505050565b6060600061458b83600261567d565b614596906002615532565b67ffffffffffffffff8111156145bc57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156145e6576020820181803683370190505b509050600360fc1b8160008151811061460f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061464c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061467084600261567d565b61467b906001615532565b90505b600181111561470f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106146bd57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106146e157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361470881615743565b905061467e565b508315611bee5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610e86565b6000611bee828461567d565b6000611bee828461556f565b6000821580614783575081155b8061478c575083155b1561479957506000611bee565b818310156147b4576147af826136c6868661475e565b6147b6565b835b949350505050565b600054610100900460ff16806147d7575060005460ff16155b6147f35760405162461bcd60e51b8152600401610e869061525c565b600054610100900460ff16158015614815576000805461ffff19166101011790555b600160c9558015611f7e576000805461ff001916905550565b600054610100900460ff1680614847575060005460ff16155b6148635760405162461bcd60e51b8152600401610e869061525c565b600054610100900460ff16158015614283576000805461ffff19166101011790558015611f7e576000805461ff001916905550565b600054610100900460ff16806148b1575060005460ff16155b6148cd5760405162461bcd60e51b8152600401610e869061525c565b600054610100900460ff161580156148ef576000805461ffff19166101011790555b8251614902906036906020860190614b74565b508151614916906037906020850190614b74565b508015611c1b576000805461ff0019169055505050565b6000614982826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166149ff9092919063ffffffff16565b805190915015611c1b57808060200190518101906149a09190614ecd565b611c1b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610e86565b60606147b6848460008585843b614a585760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e86565b600080866001600160a01b03168587604051614a7491906150a6565b60006040518083038185875af1925050503d8060008114614ab1576040519150601f19603f3d011682016040523d82523d6000602084013e614ab6565b606091505b5091509150614ac6828286614ad1565b979650505050505050565b60608315614ae0575081611bee565b825115614af05782518084602001fd5b8160405162461bcd60e51b8152600401610e8691906151d7565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5080546000825590600052602060002090810190611f7e9190614bf8565b828054614b809061575a565b90600052602060002090601f016020900481019282614ba25760008555614be8565b82601f10614bbb57805160ff1916838001178555614be8565b82800160010185558215614be8579182015b82811115614be8578251825591602001919060010190614bcd565b50614bf4929150614bf8565b5090565b5b80821115614bf45760008155600101614bf9565b8035614c18816157d6565b919050565b600082601f830112614c2d578081fd5b81356020614c42614c3d836154a3565b615472565b80838252828201915082860187848660051b8901011115614c61578586fd5b855b85811015614c7f57813584529284019290840190600101614c63565b5090979650505050505050565b8035614c18816157eb565b600082601f830112614ca7578081fd5b813567ffffffffffffffff811115614cc157614cc16157c0565b614cd4601f8201601f1916602001615472565b818152846020838601011115614ce8578283fd5b816020850160208301379081016020019190915292915050565b803560ff81168114614c1857600080fd5b600060208284031215614d24578081fd5b8135611bee816157d6565b600060208284031215614d40578081fd5b8151611bee816157d6565b60008060408385031215614d5d578081fd5b8235614d68816157d6565b91506020830135614d78816157d6565b809150509250929050565b600080600060608486031215614d97578081fd5b8335614da2816157d6565b92506020840135614db2816157d6565b929592945050506040919091013590565b60008060408385031215614dd5578182fd5b8235614de0816157d6565b946020939093013593505050565b60008060408385031215614e00578182fd5b823567ffffffffffffffff80821115614e17578384fd5b818501915085601f830112614e2a578384fd5b81356020614e3a614c3d836154a3565b8083825282820191508286018a848660051b8901011115614e59578889fd5b8896505b84871015614e84578035614e70816157d6565b835260019690960195918301918301614e5d565b5096505086013592505080821115614e9a578283fd5b50614ea785828601614c1d565b9150509250929050565b600060208284031215614ec2578081fd5b8135611bee816157eb565b600060208284031215614ede578081fd5b8151611bee816157eb565b600060208284031215614efa578081fd5b5035919050565b60008060408385031215614f13578182fd5b823591506020830135614d78816157d6565b600060208284031215614f36578081fd5b81356001600160e01b031981168114611bee578182fd5b60008060008060008060008060006101208a8c031215614f6b578687fd5b893567ffffffffffffffff80821115614f82578889fd5b614f8e8d838e01614c97565b9a5060208c0135915080821115614fa3578889fd5b50614fb08c828d01614c97565b98505060408a0135614fc1816157d6565b965060608a0135614fd1816157d6565b9550614fdf60808b01614d02565b9450614fed60a08b01614d02565b9350614ffb60c08b01614c0d565b925061500960e08b01614c8c565b91506150186101008b01614c0d565b90509295985092959850929598565b600060808284031215615038578081fd5b6040516080810181811067ffffffffffffffff8211171561505b5761505b6157c0565b6040528235615069816157d6565b81526020838101359082015261508160408401614d02565b6040820152606083013561ffff8116811461509a578283fd5b60608201529392505050565b600082516150b8818460208701615717565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516150fa816017850160208801615717565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161512b816028840160208801615717565b01602801949350505050565b6001600160a01b039485168152602081019390935292166040820152901515606082015260800190565b604080825283519082018190526000906020906060840190828701845b828110156151a35781516001600160a01b03168452928401929084019060010161517e565b50505083810382850152845180825285830191830190845b81811015614c7f578351835292840192918401916001016151bb565b60208152600082518060208401526151f6816040850160208701615717565b601f01601f19169190910160400192915050565b6020808252601190820152704578636565647320617661696c61626c6560781b604082015260600190565b6020808252600d908201526c10995a5b99c81cd95d1d1b1959609a1b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600b908201526a08539bc813585d1d5c995960aa1b604082015260600190565b602080825260119082015270139bdd0818995a5b99c81cd95d1d1b1959607a1b604082015260600190565b60208082526007908201526608585b5bdd5b9d60ca1b604082015260600190565b60208082526010908201526f45786365656420617661696c61626c6560801b604082015260600190565b6020808252600b908201526a4e6f206f6e20676f696e6760a81b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60a08101611195828480518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b81516001600160a01b03168152610180810160208301516020830152604083015160408301526060830151615413606084018215159052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525061016080840151818401525092915050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561549b5761549b6157c0565b604052919050565b600067ffffffffffffffff8211156154bd576154bd6157c0565b5060051b60200190565b600081810b83820b82821282607f038213811516156154e8576154e86157aa565b82607f190382128116156154fe576154fe6157aa565b50019392505050565b60006001600160e81b03828116848216808303821115615529576155296157aa565b01949350505050565b60008219821115615545576155456157aa565b500190565b600060ff821660ff84168060ff03821115615567576155676157aa565b019392505050565b60008261558a57634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156155ca5781600019048211156155b0576155b06157aa565b808516156155bd57918102915b93841c9390800290615594565b509250929050565b6000611bee60ff8416836000826155eb57506001611195565b816155f857506000611195565b816001811461560e576002811461561857615634565b6001915050611195565b60ff841115615629576156296157aa565b50506001821b611195565b5060208310610133831016604e8410600b8410161715615657575081810a611195565b615661838361558f565b8060001904821115615675576156756157aa565b029392505050565b6000816000190483118215151615615697576156976157aa565b500290565b600081810b83820b8281128015607f198301841216156156be576156be6157aa565b81607f0183138116156156d3576156d36157aa565b5090039392505050565b6000828210156156ef576156ef6157aa565b500390565b600060ff821660ff84168082101561570e5761570e6157aa565b90039392505050565b60005b8381101561573257818101518382015260200161571a565b83811115611e925750506000910152565b600081615752576157526157aa565b506000190190565b600181811c9082168061576e57607f821691505b6020821081141561166157634e487b7160e01b600052602260045260246000fd5b60006000198214156157a3576157a36157aa565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611f7e57600080fd5b8015158114611f7e57600080fdfe6666bf5bfee463d10a7fc50448047f8a53b7762d7e28fbc5c643182785f3fd3fa26469706673582212209b64d302790f6471b8417bcfb703a2954fdc7d55e4f0b7c5ba57f0bffeb3900c64736f6c63430008040033",
  "libraries": {
    "StructureData": true
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 538,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 541,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1355,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 655,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 661,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 663,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 665,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 667,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1208,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 1604,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 333,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 592,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 635,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7392,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "depositAssetAmountDecimals",
        "offset": 0,
        "slot": "251",
        "type": "t_uint8"
      },
      {
        "astId": 7394,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "counterPartyAssetAmountDecimals",
        "offset": 1,
        "slot": "251",
        "type": "t_uint8"
      },
      {
        "astId": 7396,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "depositAsset",
        "offset": 2,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 7398,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "counterPartyAsset",
        "offset": 0,
        "slot": "252",
        "type": "t_address"
      },
      {
        "astId": 7400,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "isEth",
        "offset": 20,
        "slot": "252",
        "type": "t_bool"
      },
      {
        "astId": 7402,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "quota",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 7404,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "currentRound",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 7408,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "optionHeights",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7413,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "optionStates",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_uint256,t_struct(OptionState)13266_storage)"
      },
      {
        "astId": 7416,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "usersInvolved",
        "offset": 0,
        "slot": "257",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7421,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "userStates",
        "offset": 0,
        "slot": "258",
        "type": "t_mapping(t_address,t_struct(UserState)13307_storage)"
      },
      {
        "astId": 7423,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "underSettlement",
        "offset": 0,
        "slot": "259",
        "type": "t_bool"
      },
      {
        "astId": 7425,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "callOrPut",
        "offset": 1,
        "slot": "259",
        "type": "t_bool"
      },
      {
        "astId": 7428,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "counterPartyOption",
        "offset": 2,
        "slot": "259",
        "type": "t_contract(IPKKTStructureOption)13129"
      },
      {
        "astId": 7430,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "counterParty",
        "offset": 0,
        "slot": "260",
        "type": "t_address"
      },
      {
        "astId": 7433,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "optionVault",
        "offset": 0,
        "slot": "261",
        "type": "t_contract(IOptionVault)13025"
      },
      {
        "astId": 7435,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "totalReleasedDepositAssetAmount",
        "offset": 0,
        "slot": "262",
        "type": "t_uint256"
      },
      {
        "astId": 7437,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "totalReleasedCounterPartyAssetAmount",
        "offset": 0,
        "slot": "263",
        "type": "t_uint256"
      },
      {
        "astId": 7441,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "releasedDepositAssetAmount",
        "offset": 0,
        "slot": "264",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7445,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "releasedCounterPartyAssetAmount",
        "offset": 0,
        "slot": "265",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9796,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "autoRolledUsers",
        "offset": 0,
        "slot": "266",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9799,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "autoRolledAmounts",
        "offset": 0,
        "slot": "267",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)1_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[1]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IOptionVault)13025": {
        "encoding": "inplace",
        "label": "contract IOptionVault",
        "numberOfBytes": "20"
      },
      "t_contract(IPKKTStructureOption)13129": {
        "encoding": "inplace",
        "label": "contract IPKKTStructureOption",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserState)13307_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)13307_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_struct(OptionState)13266_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StructureData.OptionState)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionState)13266_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(OptionState)13266_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionState",
        "members": [
          {
            "astId": 13251,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13253,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "totalAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13255,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "totalTerminate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13257,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "strikePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13259,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "premiumRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 13261,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "pricePrecision",
            "offset": 2,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 13263,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "executed",
            "offset": 3,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 13265,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "callOrPut",
            "offset": 4,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserState)13307_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.UserState",
        "members": [
          {
            "astId": 13290,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "pendingAsset",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13292,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "lockedAsset",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13296,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "ongoingAsset",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)1_storage"
          },
          {
            "astId": 13298,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "nextCursor",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 13300,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "totalRound",
            "offset": 1,
            "slot": "3",
            "type": "t_uint232"
          },
          {
            "astId": 13302,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "hasState",
            "offset": 30,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 13304,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "assetToTerminate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13306,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "assetToTerminateForNextRound",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint232": {
        "encoding": "inplace",
        "label": "uint232",
        "numberOfBytes": "29"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}