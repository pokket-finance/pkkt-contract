{
  "address": "0xa667397a4641eCA18Db14dC3812D1b1DD58E5cDb",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CloseOption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CommitOption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "OpenOption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RATIOMULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allSettled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_underlyingPrice",
          "type": "uint256"
        }
      ],
      "name": "closePrevious",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_traderAddress",
          "type": "address"
        }
      ],
      "name": "commitCurrent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_backwardRound",
          "type": "uint8"
        }
      ],
      "name": "getOngoingAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "internalType": "struct StructureData.Request[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blockHeight",
          "type": "uint256"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "pricePrecision",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callOrPut",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_assetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_stableCoinAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        }
      ],
      "name": "initalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_underlyingDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_stableCoinDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isEth",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maturedAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maturedStableCoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "optionHeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quota",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "pricePrecision",
          "type": "uint8"
        },
        {
          "internalType": "int16",
          "name": "strikePriceRatio",
          "type": "int16"
        },
        {
          "internalType": "uint16",
          "name": "premiumRate",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "callOrPut",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "optionStates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "underlyingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "premiumRate",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "pricePrecision",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "callOrPut",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "quota",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "pricePrecision",
              "type": "uint8"
            },
            {
              "internalType": "int16",
              "name": "strikePriceRatio",
              "type": "int16"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "callOrPut",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionParameters",
          "name": "_optionParameters",
          "type": "tuple"
        }
      ],
      "name": "rollToNext",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableCoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underSettlement",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingAsset",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "nextCursor",
          "type": "uint8"
        },
        {
          "internalType": "uint232",
          "name": "totalRound",
          "type": "uint232"
        },
        {
          "internalType": "bool",
          "name": "hasState",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usersInvolved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_stableCoin",
          "type": "bool"
        }
      ],
      "name": "withraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3a2c4c911c5766deba6d0affa26eb68c2c987b24bde4a61bb8325b166f13ea41",
  "receipt": {
    "to": null,
    "from": "0x7FAa46FB04BB00de3F6D5E90d78b4a37f8E48cd4",
    "contractAddress": "0xa667397a4641eCA18Db14dC3812D1b1DD58E5cDb",
    "transactionIndex": 8,
    "gasUsed": "3193677",
    "logsBloom": "0x
    "blockHash": "0x02956109c822e57bcebcbba83b06d1e4ede54b061ee872abe26fa5b93c1236c2",
    "transactionHash": "0x3a2c4c911c5766deba6d0affa26eb68c2c987b24bde4a61bb8325b166f13ea41",
    "logs": [],
    "blockNumber": 11573461,
    "cumulativeGasUsed": "7324584",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8474e35b853e611c5d70139c0961d073",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CloseOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CommitOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"OpenOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATIOMULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allSettled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_underlyingPrice\",\"type\":\"uint256\"}],\"name\":\"closePrevious\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"}],\"name\":\"commitCurrent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_backwardRound\",\"type\":\"uint8\"}],\"name\":\"getOngoingAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct StructureData.Request[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockHeight\",\"type\":\"uint256\"}],\"name\":\"getRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"pricePrecision\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_assetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_stableCoinAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"initalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_stableCoinDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maturedAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maturedStableCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionHeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quota\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"pricePrecision\",\"type\":\"uint8\"},{\"internalType\":\"int16\",\"name\":\"strikePriceRatio\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"pricePrecision\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quota\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"pricePrecision\",\"type\":\"uint8\"},{\"internalType\":\"int16\",\"name\":\"strikePriceRatio\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionParameters\",\"name\":\"_optionParameters\",\"type\":\"tuple\"}],\"name\":\"rollToNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underSettlement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"nextCursor\",\"type\":\"uint8\"},{\"internalType\":\"uint232\",\"name\":\"totalRound\",\"type\":\"uint232\"},{\"internalType\":\"bool\",\"name\":\"hasState\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersInvolved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stableCoin\",\"type\":\"bool\"}],\"name\":\"withraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PKKTHodlBoosterOption.sol\":\"PKKTHodlBoosterOption\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/PKKTHodlBoosterOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\"; \\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\"; \\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";  \\nimport \\\"./PKKTStructureOption.sol\\\"; \\nimport \\\"hardhat/console.sol\\\";\\ncontract PKKTHodlBoosterOption is PKKTStructureOption {\\n    \\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;  \\n    using StructureData for StructureData.UserState;\\n\\n  // constructor(\\n  //       string memory name,\\n  //       string memory symbol,\\n  //       address _underlying,\\n  //       address _stableCoin,\\n  //       uint8 _underlyingDecimals,\\n  //       uint8 _stableCoinDecimals,\\n  //       address _vaultAddress\\n  //   ) PKKTStructureOption(name, symbol, _underlying, _stableCoin, _underlyingDecimals, _stableCoinDecimals, _vaultAddress) {  \\n          \\n  // }\\n\\n  function initialize(\\n    string memory name,\\n    string memory symbol,\\n    address _underlying,\\n    address _stableCoin,\\n    uint8 _underlyingDecimals,\\n    uint8 _stableCoinDecimals,\\n    address _vaultAddress\\n  ) public initializer {\\n    PKKTStructureOption.initalize(\\n      name,\\n      symbol,\\n      _underlying,\\n      _stableCoin,\\n      _underlyingDecimals,\\n      _stableCoinDecimals,\\n      _vaultAddress\\n    );\\n  }\\n\\n    function _calculateMaturity(uint256 _underlyingPrice, StructureData.OptionState memory _optionState) internal override\\n     returns(uint256 _maturedAssetAmount, uint256 _maturedStableCoinAmount, bool _executed) {\\n        _maturedAssetAmount = 0;\\n        _maturedStableCoinAmount = 0;\\n        uint256 multipler = uint256(RATIOMULTIPLIER).add(_optionState.premiumRate);\\n        //todo: check callOrPut\\n        bool shouldConvert = _optionState.strikePrice < _underlyingPrice; \\n      \\n        // console.log(\\\"%s %d %d\\\", name(), _optionState.strikePrice, _underlyingPrice);\\n        if (shouldConvert) {  \\n           _maturedStableCoinAmount = _optionState.totalAmount.mul(_optionState.strikePrice).mul(multipler).mul(10**stableCoinAmountDecimals).\\n           div(RATIOMULTIPLIER).div(10**(_optionState.pricePrecision + assetAmountDecimals));\\n           //console.log(\\\"%s %d %d\\\", name(), _optionState.totalAmount, multipler);\\n        }\\n        else {\\n          _maturedAssetAmount = _optionState.totalAmount.mul(multipler).div(RATIOMULTIPLIER);\\n          \\n          //console.log(\\\"%s %d\\\", name(),maturedAssetAmount);\\n        }\\n \\n        uint256 userCount = usersInvolved.length; \\n        for (uint i=0; i < userCount; i++) {\\n            address userAddress = usersInvolved[i];\\n            StructureData.UserState storage userState = userStates[userAddress]; \\n            //since the onGoingAsset for current round is not filled yet, we make 5 instead of 6 backward\\n            uint256 ongoingAsset = userState.GetOngoingAsset(StructureData.MATUREROUND - 2); \\n            if (ongoingAsset == 0) continue;\\n            if (!shouldConvert) { \\n                uint256 assetAmount = _maturedAssetAmount.mul(ongoingAsset).div(_optionState.totalAmount);\\n                maturedAsset[userAddress] = maturedAsset[userAddress].add(assetAmount);  \\n            }\\n            else {  \\n               uint256 stableCoinAmount = _maturedStableCoinAmount.mul(ongoingAsset).div(_optionState.totalAmount);\\n               maturedStableCoin[userAddress] = maturedStableCoin[userAddress].add(stableCoinAmount); \\n                \\n            } \\n         }\\n         return (_maturedAssetAmount, _maturedStableCoinAmount, shouldConvert);\\n     }\\n}\",\"keccak256\":\"0x74a7aab6f5d27b09c269bc6dd190233ae46c188ace24c25fc5e44fa1df92cb43\",\"license\":\"MIT\"},\"contracts/PKKTStructureOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n \\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\"; \\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\"; \\nimport \\\"hardhat/console.sol\\\";\\n \\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";     \\nimport \\\"./interfaces/IPKKTStructureOption.sol\\\";\\nimport \\\"./interfaces/IExecuteSettlement.sol\\\"; \\nimport \\\"./interfaces/IOptionVault.sol\\\"; \\nabstract contract PKKTStructureOption is ERC20Upgradeable, OwnableUpgradeable, IPKKTStructureOption, IExecuteSettlement {\\n    \\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using StructureData for StructureData.UserState;\\n\\n    event Deposit(address indexed account, uint256 indexed round,uint256 amount);\\n    event Redeem(address indexed account, uint256 indexed round,uint256 amount);\\n    event CloseOption(uint256 indexed round);\\n    event CommitOption(uint256 indexed round);\\n    event OpenOption(uint256 indexed round);\\n \\n    uint256 public constant RATIOMULTIPLIER = 10000;\\n    uint8 internal assetAmountDecimals;\\n    uint8 internal stableCoinAmountDecimals;\\n      \\n    address public asset;\\n    address public stableCoin;\\n \\n    bool public isEth;\\n    StructureData.OptionParameters public optionParameters;  \\n    uint256 public currentRound;\\n    uint256 public previousUnderlyingPrice;\\n    mapping(uint256=>uint256) public optionHeights;\\n    mapping(uint256=>StructureData.OptionState) public optionStates;\\n    address[] public usersInvolved;  \\n    mapping(address=>StructureData.UserState) public userStates; \\n    mapping(address=>uint256) public maturedAsset; \\n    mapping(address=>uint256) public maturedStableCoin;\\n    bool public underSettlement;\\n    address override public vaultAddress;\\n\\n    //take if for eth, we make price precision as 4, then underlying price can be 40000000 for 4000$\\n    //for shib, we make price precision as 8, then underlying price can be 4000 for 0.00004000$\\n    function initalize(\\n        string memory name,\\n        string memory symbol,\\n        address _asset,\\n        address _stableCoin,\\n        uint8 _assetAmountDecimals,\\n        uint8 _stableCoinAmountDecimals,\\n        address _vaultAddress\\n    ) public initializer {\\n        require(_vaultAddress != address(0), \\\"Empty vault address\\\");\\n        ERC20Upgradeable.__ERC20_init(name, symbol);\\n        OwnableUpgradeable.__Ownable_init();\\n        asset = _asset;\\n        stableCoin = _stableCoin;\\n        isEth = _asset == address(0);\\n        assetAmountDecimals = _assetAmountDecimals;\\n        stableCoinAmountDecimals = _stableCoinAmountDecimals;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    // constructor(\\n    //     string memory name,\\n    //     string memory symbol,\\n    //     address _asset,\\n    //     address _stableCoin,\\n    //     uint8 _assetAmountDecimals,  \\n    //     uint8 _stableCoinAmountDecimals,\\n    //     address _vaultAddress\\n    // ) ERC20(name, symbol) {  \\n    //     require(_vaultAddress != address(0), \\\"Empty vault address\\\");\\n    //     asset = _asset;\\n    //     stableCoin = _stableCoin;\\n    //     isEth = _asset == address(0);\\n    //     assetAmountDecimals = _assetAmountDecimals;\\n    //     stableCoinAmountDecimals = _stableCoinAmountDecimals; \\n    //     vaultAddress = _vaultAddress;\\n    // }\\n          \\n    function decimals() public view override returns (uint8) {\\n        return assetAmountDecimals;\\n    }\\n\\n    function withraw(uint256 _amount, bool _stableCoin) external override {\\n       require(_stableCoin || requestingAssetAmount == 0, \\\"Matured Asset not filled\\\");\\n       require(!_stableCoin || requestingStableCoinAmount == 0, \\\"Matured Stable Coin not filled\\\");\\n       require(!underSettlement, \\\"Being settled\\\");\\n       require(currentRound > 1, \\\"!No Matured\\\");\\n       require(_amount > 0, \\\"!amount\\\"); \\n       if (_stableCoin) {\\n            uint256 stableCoinAmount = maturedStableCoin[msg.sender];\\n            require(stableCoinAmount >= _amount, \\\"Exceed available\\\"); \\n            maturedStableCoin[msg.sender] = stableCoinAmount.sub(_amount);\\n            IERC20(stableCoin).safeTransfer(msg.sender, _amount); \\n       }\\n       else { \\n            uint256 assetAmount = maturedAsset[msg.sender];\\n            require(assetAmount >= _amount, \\\"Exceed available\\\"); \\n            maturedAsset[msg.sender] = assetAmount.sub(_amount);\\n            if (isEth) {\\n                payable(msg.sender).transfer(_amount);\\n            }\\n            else { \\n                IERC20(asset).safeTransfer(msg.sender, _amount); \\n            } \\n       }\\n    }\\n\\n    function redeposit(uint256 _amount) external override {\\n       require(!underSettlement, \\\"Being settled\\\");\\n       require(currentRound > 1, \\\"!No Matured\\\");\\n       require(_amount > 0, \\\"!amount\\\"); \\n       uint256 maturedAmount = maturedAsset[msg.sender];\\n       require(maturedAmount >= _amount, \\\"Exceed available\\\");\\n       maturedAsset[msg.sender] = maturedAmount.sub(_amount);\\n       _depositFor(_amount);\\n    }\\n\\n    //deposit eth\\n    function depositETH() external payable override {\\n       require(!underSettlement, \\\"Being settled\\\");\\n       require(currentRound > 0, \\\"!Started\\\");\\n       require(isEth, \\\"!ETH\\\");\\n       require(msg.value > 0, \\\"!value\\\"); \\n       \\n        //todo: convert to weth and  transfer to a centralized place\\n       _depositFor(msg.value);\\n    }\\n    //deposit other erc20 coin, take wbtc\\n    function deposit(uint256 _amount) external override {  \\n        require(!underSettlement, \\\"Being settled\\\");\\n        require(currentRound > 0, \\\"!Started\\\");\\n        require(!isEth, \\\"!ERC20\\\");\\n        require(_amount > 0, \\\"!amount\\\"); \\n        _depositFor(_amount); \\n        //todo: transfer to a centralized place\\n        IERC20(asset).safeTransferFrom(msg.sender, address(this), _amount);\\n    }\\n \\n  \\n    function _depositFor(uint256 _amount) private { \\n        StructureData.OptionState storage optionState = optionStates[currentRound];\\n        require(optionState.totalAmount.add(_amount) <= optionParameters.quota, \\\"Not enough quota\\\");\\n        StructureData.UserState storage userState =  userStates[msg.sender]; \\n        //first time added\\n        if (!userState.hasState) { \\n            userState.hasState = true;\\n            usersInvolved.push(msg.sender);\\n        }\\n        userState.pendingAsset = userState.pendingAsset.add(_amount); \\n        optionState.totalAmount = optionState.totalAmount.add(_amount);\\n        \\n        emit Deposit(msg.sender, currentRound, _amount);\\n    }\\n\\n\\n    //redeem unsettled amount\\n    function redeem(uint256 _amount) external override {\\n        \\n        require(!underSettlement, \\\"Being settled\\\");\\n         require(_amount > 0, \\\"!amount\\\"); \\n         StructureData.UserState storage userState =  userStates[msg.sender]; \\n         require(userState.pendingAsset >= _amount, \\\"Exceeds available\\\");\\n         userState.pendingAsset = userState.pendingAsset.sub(_amount); \\n         StructureData.OptionState storage optionState = optionStates[currentRound];\\n         optionState.totalAmount = optionState.totalAmount.sub(_amount);\\n         //todo: withdraw from centralized vault\\n        if (isEth) {\\n            payable(msg.sender).transfer(_amount);\\n        }\\n        else { \\n            IERC20(asset).safeTransfer(msg.sender, _amount); \\n        }\\n        emit Redeem(msg.sender, currentRound, _amount);\\n    }\\n\\n \\n    function getPendingAsset() external view override returns (uint256) {\\n         StructureData.UserState storage userState =  userStates[msg.sender]; \\n         return userState.pendingAsset;\\n    }\\n\\n    function getOngoingAsset(uint8 _backwardRound) external view override returns (uint256) { \\n         StructureData.UserState storage userState =  userStates[msg.sender]; \\n         return userState.GetOngoingAsset(_backwardRound);\\n    }\\n  \\n    //used to render the history at client side, reading the minting transactions of a specific address,\\n    //for each transaction, read the blockheight and call this method to get the result\\n    //the blockheight is the the height when the round is committed  \\n    function getRoundData(uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\\n        return optionStates[optionHeights[_blockHeight]];\\n    } \\n\\n   function closePrevious(uint256 _underlyingPrice) external override onlyOwner {\\n        require(requestingAssetAmount == 0, \\\"Matured Asset not filled\\\");\\n        require(requestingStableCoinAmount == 0, \\\"Matured Stable Coin not filled\\\");\\n        require(!underSettlement, \\\"Being settled\\\");\\n        underSettlement = true;\\n        previousUnderlyingPrice = _underlyingPrice;\\n        //return when there is no previous matured round\\n        if (currentRound < StructureData.MATUREROUND) return;\\n        uint maturedRound = currentRound - StructureData.MATUREROUND + 1;\\n        StructureData.OptionState storage previousOptionState = optionStates[maturedRound];\\n        (uint256 maturedAssetAmount_, uint256 maturedStableCoinAmount_, bool executed_) = \\n        _calculateMaturity(_underlyingPrice, previousOptionState);  \\n        previousOptionState.executed = executed_;\\n        maturedAssetAmount = requestingAssetAmount = maturedAssetAmount_;\\n        maturedStableCoinAmount = requestingStableCoinAmount = maturedStableCoinAmount_; \\n        emit CloseOption(maturedRound);\\n   }\\n \\n   uint256 private requestingAssetAmount;\\n   uint256 private requestingStableCoinAmount;\\n   uint256 private maturedAssetAmount;\\n   uint256 private maturedStableCoinAmount;\\n   function _calculateMaturity(uint256 _underlyingPrice, StructureData.OptionState memory _optionState) \\n   internal virtual returns(uint256 _maturedAssetAmount, uint256 _maturedStableCoinAmount, bool _executed); \\n \\n   //close pending option and autoroll if capacity is enough based on the maturity result\\n   function commitCurrent(address _traderAddress) external override onlyOwner {  \\n        require(underSettlement, \\\"Not being settled\\\");\\n        //return when there is no previous round\\n        //console.log(\\\"CommitCurrent: %s %d\\\", name(), currentRound);\\n        if (currentRound <= 0) return;\\n        StructureData.OptionState storage optionState = optionStates[currentRound];\\n        optionState.underlyingPrice = previousUnderlyingPrice; \\n        optionState.strikePrice =  optionState.underlyingPrice.mul(uint256(int256(RATIOMULTIPLIER) + int256(optionParameters.strikePriceRatio))).div(RATIOMULTIPLIER);  \\n        optionState.premiumRate = optionParameters.premiumRate;\\n        optionState.pricePrecision = optionParameters.pricePrecision;\\n        //mint for the current option\\n        _mint(address(this), optionState.totalAmount);\\n        uint256 userCount = usersInvolved.length;\\n        for (uint i=0; i < userCount; i++) {\\n            address userAddress = usersInvolved[i];\\n            StructureData.UserState storage userState = userStates[userAddress]; \\n            if(userState.pendingAsset != 0) {  \\n                //transfer each user a share of the option to trigger transfer event\\n                _transfer(address(this), userAddress, userState.pendingAsset);\\n            } \\n            userState.SetOngoingAsset(userState.pendingAsset); \\n            userState.pendingAsset = 0;\\n         }\\n\\n        //send trader the coins\\n        if (requestingAssetAmount <= optionState.totalAmount) {\\n            uint256 toSend = optionState.totalAmount.sub(requestingAssetAmount);\\n            if (toSend > 0) { \\n               //if balance is not correct, would result in error\\n                if (isEth) {\\n                    payable(_traderAddress).transfer(toSend);\\n                }\\n                else { \\n                    IERC20(asset).safeTransfer(_traderAddress, toSend); \\n                } \\n            }\\n            requestingAssetAmount = 0;\\n        } \\n        else { \\n           requestingAssetAmount = requestingAssetAmount.sub(optionState.totalAmount); \\n        } \\n        optionHeights[currentRound] = block.number; //commit current option at current block\\n        emit CommitOption(currentRound);\\n   }\\n      \\n   \\n   function rollToNext(StructureData.OptionParameters memory _optionParameters) external override onlyOwner { \\n        currentRound = currentRound + 1;\\n        optionParameters = _optionParameters;  \\n        StructureData.OptionState memory currentOption =  \\n        StructureData.OptionState({\\n                            round: currentRound,\\n                            totalAmount: 0,\\n                            premiumRate:  _optionParameters.premiumRate,\\n                            pricePrecision: _optionParameters.pricePrecision,\\n                            strikePrice: 0,\\n                            underlyingPrice: 0,\\n                            executed: false,\\n                            callOrPut: _optionParameters.callOrPut\\n                        });\\n        optionStates[currentRound] = currentOption;\\n        underSettlement = false;\\n        emit OpenOption(currentRound);\\n    }\\n \\n    function getRequest() external override view onlyOwner returns(StructureData.Request[] memory){\\n        if (requestingAssetAmount == 0 && requestingStableCoinAmount == 0) {\\n            return new StructureData.Request[](0);\\n        }\\n        if (requestingAssetAmount == 0) {\\n            StructureData.Request[] memory results = new StructureData.Request[](1);\\n            results[0] = StructureData.Request({amount:requestingStableCoinAmount, contractAddress: stableCoin});\\n            return results;\\n        } \\n        if (requestingStableCoinAmount == 0) {\\n            StructureData.Request[] memory results = new StructureData.Request[](1);\\n            results[0] = StructureData.Request({amount:requestingAssetAmount, contractAddress: asset});\\n            return results;\\n        }\\n        else {\\n           \\n           StructureData.Request[] memory results = new StructureData.Request[](2);\\n            results[0] = StructureData.Request({amount:requestingAssetAmount, contractAddress: asset});\\n            results[1] = StructureData.Request({amount:requestingStableCoinAmount, contractAddress: stableCoin});\\n            return results;\\n        }\\n    }\\n\\n    function getBalance(bool _asset) internal view returns(uint256) {\\n       if (_asset) {\\n          if (isEth) {\\n              return address(this).balance;\\n          }\\n          else{\\n             return IERC20(asset).balanceOf(address(this));\\n          }\\n       }\\n       else{\\n           return IERC20(stableCoin).balanceOf(address(this));\\n       }\\n    }\\n    function finishSettlement() external override onlyOwner {\\n        require(requestingAssetAmount == 0 || getBalance(true) >=  maturedAssetAmount, \\n           \\\"Matured Asset not filled\\\");       \\n        require(requestingStableCoinAmount == 0 || getBalance(false) >=  maturedStableCoinAmount, \\n           \\\"Matured Stable Coin not filled\\\"); \\n        requestingAssetAmount = 0;\\n        requestingStableCoinAmount = 0;\\n    }\\n    event Received(address, uint);\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value);\\n    }\\n    function allSettled() external override view returns(bool){\\n        return requestingAssetAmount == 0 && requestingStableCoinAmount == 0;\\n    }\\n}\",\"keccak256\":\"0xb63ae8d3616eed523fd52657fb723bfcee93a57266719426636e8e8167cce7fc\",\"license\":\"MIT\"},\"contracts/interfaces/IExecuteSettlement.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.4;\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";  \\ninterface IExecuteSettlement {\\n \\n   //calculate the result of on going option    \\n   function closePrevious(uint256 _underlyingPrice) external;\\n\\n   //close pending option and autoroll if capacity is enough based on the maturity result\\n   function commitCurrent(address _traderAddress) external; \\n\\n    //open a new option\\n   function rollToNext(StructureData.OptionParameters memory _optionParameters) external;\\n  \\n   function getRequest() external view returns(StructureData.Request[] memory);\\n   //finish the settlement once all requestedcoins are sent\\n   function finishSettlement() external;\\n\\n   function allSettled() external view returns(bool);\\n\\n}\\n\",\"keccak256\":\"0x958c7be43161dce5fecef3f1a6aa92aa462591a894257bddd7b9ea3d43d45cf1\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOptionVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.4;\\n\\ninterface IOptionVault { \\n    function getAddress() external returns(address);\\n    function withdraw(address _target, uint256 _amount, address _contractAddress) external;\\n    \\n}\\n\",\"keccak256\":\"0xfeed82ec00761bb199bcc0a1ad4f8b8cdb8cbb82ee76c4926890b29b7a908781\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPKKTStructureOption.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.4;\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";\\n \\ninterface IPKKTStructureOption {\\n\\n    \\n    function vaultAddress() external view returns(address);\\n\\n    //deposit eth\\n    function depositETH() external payable;\\n\\n    //deposit other erc20 coin, take wbtc or stable coin\\n    function deposit(uint256 _amount) external;\\n\\n    //redeem unsettled amount\\n    function redeem(uint256 _amount) external; \\n\\n    function getPendingAsset() external view returns (uint256);   \\n\\n    //0 for latest, 6 for 7 days ago\\n    function getOngoingAsset(uint8 _backwardRound) external view returns (uint256);\\n\\n    function withraw(uint256 _amount, bool _stableCoin) external;\\n\\n    function redeposit(uint256 _amount) external;\\n\\n    //used to render the history at client side, reading the minting transactions of a specific address,\\n    //for each transaction, read the blockheight and call this method to get the result\\n    //the blockheight is the the height when the round is committed \\n    function getRoundData(uint256 _blockHeight) external view returns(StructureData.OptionState memory);\\n\\n \\n}\",\"keccak256\":\"0x5b44154cc353a8f29f857541e36c267f8e43b2f742f539dfb2ed440c9ae832ef\",\"license\":\"UNLICENSED\"},\"contracts/libraries/StructureData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary StructureData {\\n     uint8 public constant MATUREROUND= 7;\\n//the strike price is calculated based on assetPrice * (1 +/- strikePriceRatio/100)\\n//for hodl, if the asset price is higher than the strike price, the option would be executed, it's a call option \\n//if the wbtc of the \\n    struct OptionParameters {\\n         uint256 quota;  \\n         uint8 pricePrecision;\\n         int16 strikePriceRatio;  // take, 10% is represented as 1000, precision is 4\\n         uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n         bool callOrPut;\\n     }\\n\\n    struct OptionState {\\n         uint256 round;\\n         uint256 totalAmount; \\n         uint256 strikePrice;\\n         uint256 underlyingPrice;\\n         uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n         uint8 pricePrecision; \\n         bool executed; \\n         bool callOrPut;\\n    }\\n \\n\\n    enum OptionType {\\n        HodlBooster,\\n        VolAlpha\\n    }\\n\\n    struct UserState {\\n        uint256 pendingAsset; //for current round\\n        uint256[MATUREROUND] ongoingAsset; //for previous 7 rounds\\n        uint8 nextCursor; //nextCursor\\n        uint232 totalRound; \\n        bool hasState;\\n    }\\n    function SetOngoingAsset(UserState storage userState, uint256 newValue) internal { \\n        uint cursor = userState.nextCursor;\\n        userState.ongoingAsset[cursor] = newValue;\\n        uint8 nextCursor = cursor == (MATUREROUND - 1) ? uint8(0) : uint8(cursor + 1);\\n        userState.nextCursor = nextCursor;\\n        userState.totalRound = userState.totalRound + 1; //won't overflow\\n    }\\n    \\n    function GetOngoingAsset(UserState storage userState, uint8 backwardRound) internal view returns(uint256) {\\n        if (userState.totalRound <= backwardRound) return 0;\\n        require(backwardRound < MATUREROUND);\\n        int8 previousCursor = int8(userState.nextCursor) - int8(backwardRound) - 1;\\n        if (previousCursor < 0) {\\n            previousCursor = previousCursor + int8(MATUREROUND);\\n        }\\n        return userState.ongoingAsset[uint8(previousCursor)];\\n    }\\n    struct Request {\\n        uint256 amount;\\n        address contractAddress; //0 for eth\\n    }\\n\\n}\",\"keccak256\":\"0x96dfe0e4844d162bf87b66b34b71e453615b535fb52c0233ed9b178039d2b9ae\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506138d3806100206000396000f3fe6080604052600436106102765760003560e01c806375218df71161014f578063a5d3e5b1116100c1578063db006a751161007a578063db006a7514610a5e578063dc8a234414610a7e578063dd62ed3e14610a93578063e5d455ce14610ad9578063f2fde38b14610af9578063f6326fb314610b1957600080fd5b8063a5d3e5b11461098d578063a9059cbb146109ba578063b08480d4146109da578063b6b55f25146109ef578063c2bb515f14610a0f578063c303957014610a3157600080fd5b806395d89b411161011357806395d89b4114610880578063992642e5146108955780639a1a28c2146108b5578063a2589ef9146108d5578063a457c2d7146108f5578063a49b41d41461091557600080fd5b806375218df7146107e957806376e7a478146108095780637d8999921461081f5780638a19c8bc1461084c5780638da5cb5b1461086257600080fd5b806338d52e0f116101e85780634d94f56d116101ac5780634d94f56d14610692578063511db114146106b25780635ce0d5a5146106d357806365235474146106e957806370a082311461079e578063715018a6146107d457600080fd5b806338d52e0f146105e7578063395093511461060d5780633ebeeab81461062d578063430bf08a1461064d5780634601c2a61461067257600080fd5b8063140e56091161023a578063140e56091461050a57806318160ddd146105365780631de245af1461054b57806323b872dd146105835780632bd4bbbf146105a3578063313ce567146105c557600080fd5b806306fdde03146102ba5780630720da52146102e55780630748248f1461043c578063095ea7b3146104665780630ecc535f1461048657600080fd5b366102b557604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b3480156102c657600080fd5b506102cf610b21565b6040516102dc91906133ba565b60405180910390f35b3480156102f157600080fd5b506103d06103003660046132cd565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152506000908152609d60209081526040808320548352609e825291829020825161010081018452815481526001820154928101929092526002810154928201929092526003820154606082015260049091015461ffff8116608083015260ff620100008204811660a0840152630100000082048116151560c084015264010000000090910416151560e082015290565b6040516102dc91906000610100820190508251825260208301516020830152604083015160408301526060830151606083015261ffff608084015116608083015260ff60a08401511660a083015260c0830151151560c083015260e0830151151560e083015292915050565b34801561044857600080fd5b5060a3546104569060ff1681565b60405190151581526020016102dc565b34801561047257600080fd5b5061045661048136600461313f565b610bb3565b34801561049257600080fd5b506104d86104a13660046130b8565b60a0602052600090815260409020805460089091015460ff808216916001600160e81b0361010082041691600160f01b9091041684565b6040805194855260ff90931660208501526001600160e81b0390911691830191909152151560608201526080016102dc565b34801561051657600080fd5b5033600090815260a060205260409020545b6040519081526020016102dc565b34801561054257600080fd5b50603554610528565b34801561055757600080fd5b5061056b6105663660046132cd565b610bca565b6040516001600160a01b0390911681526020016102dc565b34801561058f57600080fd5b5061045661059e366004613104565b610bf4565b3480156105af57600080fd5b506105c36105be3660046132fd565b610ca5565b005b3480156105d157600080fd5b5060975460405160ff90911681526020016102dc565b3480156105f357600080fd5b5060975461056b906201000090046001600160a01b031681565b34801561061957600080fd5b5061045661062836600461313f565b610e9a565b34801561063957600080fd5b506105c3610648366004613184565b610ed6565b34801561065957600080fd5b5060a35461056b9061010090046001600160a01b031681565b34801561067e57600080fd5b5061052861068d36600461332c565b611025565b34801561069e57600080fd5b506105c36106ad3660046132cd565b61103e565b3480156106be57600080fd5b5060985461045690600160a01b900460ff1681565b3480156106df57600080fd5b50610528609c5481565b3480156106f557600080fd5b506107586107043660046132cd565b609e60205260009081526040902080546001820154600283015460038401546004909401549293919290919061ffff81169060ff620100008204811691630100000081048216916401000000009091041688565b60408051988952602089019790975295870194909452606086019290925261ffff16608085015260ff1660a0840152151560c0830152151560e0820152610100016102dc565b3480156107aa57600080fd5b506105286107b93660046130b8565b6001600160a01b031660009081526033602052604090205490565b3480156107e057600080fd5b506105c3611202565b3480156107f557600080fd5b506105c36108043660046130b8565b611238565b34801561081557600080fd5b5061052861271081565b34801561082b57600080fd5b5061052861083a3660046130b8565b60a26020526000908152604090205481565b34801561085857600080fd5b50610528609b5481565b34801561086e57600080fd5b506065546001600160a01b031661056b565b34801561088c57600080fd5b506102cf6114e5565b3480156108a157600080fd5b5060985461056b906001600160a01b031681565b3480156108c157600080fd5b506105c36108d0366004613238565b6114f4565b3480156108e157600080fd5b506105c36108f03660046132cd565b61173a565b34801561090157600080fd5b5061045661091036600461313f565b611810565b34801561092157600080fd5b50609954609a54610955919060ff80821691610100810460010b9161ffff6301000000830416916501000000000090041685565b6040805195865260ff909416602086015260019290920b9284019290925261ffff90911660608301521515608082015260a0016102dc565b34801561099957600080fd5b506105286109a83660046132cd565b609d6020526000908152604090205481565b3480156109c657600080fd5b506104566109d536600461313f565b6118a9565b3480156109e657600080fd5b506105c36118b6565b3480156109fb57600080fd5b506105c3610a0a3660046132cd565b611958565b348015610a1b57600080fd5b50610a24611a42565b6040516102dc9190613362565b348015610a3d57600080fd5b50610528610a4c3660046130b8565b60a16020526000908152604090205481565b348015610a6a57600080fd5b506105c3610a793660046132cd565b611cdb565b348015610a8a57600080fd5b50610456611e45565b348015610a9f57600080fd5b50610528610aae3660046130d2565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b348015610ae557600080fd5b506105c3610af4366004613184565b611e5e565b348015610b0557600080fd5b506105c3610b143660046130b8565b611edf565b6105c3611f77565b606060368054610b309061380d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5c9061380d565b8015610ba95780601f10610b7e57610100808354040283529160200191610ba9565b820191906000526020600020905b815481529060010190602001808311610b8c57829003601f168201915b5050505050905090565b6000610bc033848461205b565b5060015b92915050565b609f8181548110610bda57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610c01848484612177565b6001600160a01b038416600090815260346020908152604080832033845290915290205482811015610c8b5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610c98853385840361205b565b60019150505b9392505050565b8080610cb1575060a454155b610ccd5760405162461bcd60e51b8152600401610c82906134ef565b801580610cda575060a554155b610cf65760405162461bcd60e51b8152600401610c8290613414565b60a35460ff1615610d195760405162461bcd60e51b8152600401610c82906133ed565b6001609b5411610d595760405162461bcd60e51b815260206004820152600b60248201526a08539bc813585d1d5c995960aa1b6044820152606401610c82565b60008211610d795760405162461bcd60e51b8152600401610c82906134ce565b8015610dea5733600090815260a2602052604090205482811015610daf5760405162461bcd60e51b8152600401610c8290613526565b610db98184612346565b33600081815260a26020526040902091909155609854610de5916001600160a01b039091169085612352565b505050565b33600090815260a1602052604090205482811015610e1a5760405162461bcd60e51b8152600401610c8290613526565b610e248184612346565b33600090815260a16020526040902055609854600160a01b900460ff1615610e7957604051339084156108fc029085906000818181858888f19350505050158015610e73573d6000803e3d6000fd5b50505050565b609754610de5906201000090046001600160a01b03163385612352565b5050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091610bc0918590610ed19086906135fc565b61205b565b600054610100900460ff1680610eef575060005460ff16155b610f0b5760405162461bcd60e51b8152600401610c829061344b565b600054610100900460ff16158015610f2d576000805461ffff19166101011790555b6001600160a01b038216610f795760405162461bcd60e51b8152602060048201526013602482015272456d707479207661756c74206164647265737360681b6044820152606401610c82565b610f8388886123b5565b610f8b612434565b60978054609880546001600160a01b038981166001600160a81b0319909216919091178a82168015600160a01b029190911790925560ff8881166001600160b01b03199094166201000090930261ffff1916929092179290921761010091871682021790925560a38054610100600160a81b031916918516909202179055801561101b576000805461ff00191690555b5050505050505050565b33600090815260a060205260408120610c9e81846124af565b6065546001600160a01b031633146110685760405162461bcd60e51b8152600401610c8290613499565b60a454156110885760405162461bcd60e51b8152600401610c82906134ef565b60a554156110a85760405162461bcd60e51b8152600401610c8290613414565b60a35460ff16156110cb5760405162461bcd60e51b8152600401610c82906133ed565b60a3805460ff19166001179055609c819055609b54600711156110eb5750565b609b546000906110fd906007906137a7565b6111089060016135fc565b6000818152609e602090815260408083208151610100810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015461ffff8116608084015260ff620100008204811660a0850152630100000082048116151560c085015264010000000090910416151560e083015292935081908190611199908790612556565b60048701805463ff000000191663010000008315150217905560a483905560a683905560a582905560a7829055604051929550909350915085907f5fd55b58a9ef8c29a9db39dd9a05dec64993eb227ad0177941238778e9ea896290600090a250505050505b50565b6065546001600160a01b0316331461122c5760405162461bcd60e51b8152600401610c8290613499565b611236600061276e565b565b6065546001600160a01b031633146112625760405162461bcd60e51b8152600401610c8290613499565b60a35460ff166112a85760405162461bcd60e51b8152602060048201526011602482015270139bdd0818995a5b99c81cd95d1d1b1959607a1b6044820152606401610c82565b6000609b54116112b55750565b609b546000908152609e60205260409020609c546003820155609a5461130490612710906112fe906112f3906101009004600190810b900b83613550565b6003850154906127c0565b906127cc565b6002820155609a8054600483018054630100000090920461ffff1661ffff19831681178255925462ffffff1990921690921760ff909116620100000217905560018101546113539030906127d8565b609f5460005b818110156113e6576000609f828154811061138457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260a09091526040909120805491925090156113c2576113c230838360000154612177565b80546113cf9082906128b7565b6000905550806113de81613848565b915050611359565b50816001015460a4541161148d57600061140f60a454846001015461234690919063ffffffff16565b9050801561148257609854600160a01b900460ff1615611465576040516001600160a01b0385169082156108fc029083906000818181858888f1935050505015801561145f573d6000803e3d6000fd5b50611482565b609754611482906201000090046001600160a01b03168583612352565b50600060a4556114a2565b600182015460a45461149e91612346565b60a4555b609b80546000908152609d6020526040808220439055915491517ffa513f17b83baf0c2da337ab931a96429f75c55f0ee2115b7acd007a1a35dd519190a2505050565b606060378054610b309061380d565b6065546001600160a01b0316331461151e5760405162461bcd60e51b8152600401610c8290613499565b609b5461152c9060016135fc565b609b819055508060996000820151816000015560208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548161ffff021916908360010b61ffff16021790555060608201518160010160036101000a81548161ffff021916908361ffff16021790555060808201518160010160056101000a81548160ff0219169083151502179055509050506000604051806101000160405280609b548152602001600081526020016000815260200160008152602001836060015161ffff168152602001836020015160ff16815260200160001515815260200183608001511515815250905080609e6000609b5481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548161ffff021916908361ffff16021790555060a08201518160040160026101000a81548160ff021916908360ff16021790555060c08201518160040160036101000a81548160ff02191690831515021790555060e08201518160040160046101000a81548160ff021916908315150217905550905050600060a360006101000a81548160ff021916908315150217905550609b547f10f419fb017d3101d854d4433e414ff27f232bb2f4aae83d987ad0219efa6c9b60405160405180910390a25050565b60a35460ff161561175d5760405162461bcd60e51b8152600401610c82906133ed565b6001609b541161179d5760405162461bcd60e51b815260206004820152600b60248201526a08539bc813585d1d5c995960aa1b6044820152606401610c82565b600081116117bd5760405162461bcd60e51b8152600401610c82906134ce565b33600090815260a16020526040902054818110156117ed5760405162461bcd60e51b8152600401610c8290613526565b6117f78183612346565b33600090815260a16020526040902055610e968261296c565b3360009081526034602090815260408083206001600160a01b0386168452909152812054828110156118925760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c82565b61189f338585840361205b565b5060019392505050565b6000610bc0338484612177565b6065546001600160a01b031633146118e05760405162461bcd60e51b8152600401610c8290613499565b60a45415806118fa575060a6546118f76001612aa1565b10155b6119165760405162461bcd60e51b8152600401610c82906134ef565b60a5541580611930575060a75461192d6000612aa1565b10155b61194c5760405162461bcd60e51b8152600401610c8290613414565b600060a481905560a555565b60a35460ff161561197b5760405162461bcd60e51b8152600401610c82906133ed565b6000609b54116119b85760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610c82565b609854600160a01b900460ff16156119fb5760405162461bcd60e51b815260206004820152600660248201526502145524332360d41b6044820152606401610c82565b60008111611a1b5760405162461bcd60e51b8152600401610c82906134ce565b611a248161296c565b6097546111ff906201000090046001600160a01b0316333084612b78565b6065546060906001600160a01b03163314611a6f5760405162461bcd60e51b8152600401610c8290613499565b60a454158015611a7f575060a554155b15611ac7576040805160008082526020820190925290611ac1565b6040805180820190915260008082526020820152815260200190600190039081611a9a5790505b50905090565b60a454611b6057604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081611ae55750506040805180820190915260a55481526098546001600160a01b031660208201528151919250908290600090611b5057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152905090565b60a554611bf057604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081611b7e579050506040805180820190915260a45481526097546201000090046001600160a01b031660208201528151919250908290600090611b5057634e487b7160e01b600052603260045260246000fd5b60408051600280825260608201909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081611c08579050506040805180820190915260a45481526097546201000090046001600160a01b031660208201528151919250908290600090611c7a57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806040016040528060a5548152602001609860009054906101000a90046001600160a01b03166001600160a01b031681525081600181518110611b5057634e487b7160e01b600052603260045260246000fd5b60a35460ff1615611cfe5760405162461bcd60e51b8152600401610c82906133ed565b60008111611d1e5760405162461bcd60e51b8152600401610c82906134ce565b33600090815260a0602052604090208054821115611d725760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b6044820152606401610c82565b8054611d7e9083612346565b8155609b546000908152609e602052604090206001810154611da09084612346565b6001820155609854600160a01b900460ff1615611dea57604051339084156108fc029085906000818181858888f19350505050158015611de4573d6000803e3d6000fd5b50611e07565b609754611e07906201000090046001600160a01b03163385612352565b609b5460405184815233907fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929906020015b60405180910390a3505050565b600060a4546000148015611e59575060a554155b905090565b600054610100900460ff1680611e77575060005460ff16155b611e935760405162461bcd60e51b8152600401610c829061344b565b600054610100900460ff16158015611eb5576000805461ffff19166101011790555b611ec488888888888888610ed6565b801561101b576000805461ff00191690555050505050505050565b6065546001600160a01b03163314611f095760405162461bcd60e51b8152600401610c8290613499565b6001600160a01b038116611f6e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c82565b6111ff8161276e565b60a35460ff1615611f9a5760405162461bcd60e51b8152600401610c82906133ed565b6000609b5411611fd75760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610c82565b609854600160a01b900460ff166120195760405162461bcd60e51b8152600401610c82906020808252600490820152630428aa8960e31b604082015260600190565b600034116120525760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b6044820152606401610c82565b6112363461296c565b6001600160a01b0383166120bd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c82565b6001600160a01b03821661211e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c82565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101611e38565b6001600160a01b0383166121db5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610c82565b6001600160a01b03821661223d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c82565b6001600160a01b038316600090815260336020526040902054818110156122b55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c82565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906122ec9084906135fc565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161233891815260200190565b60405180910390a350505050565b6000610c9e82846137a7565b6040516001600160a01b038316602482015260448101829052610de590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612bb0565b600054610100900460ff16806123ce575060005460ff16155b6123ea5760405162461bcd60e51b8152600401610c829061344b565b600054610100900460ff1615801561240c576000805461ffff19166101011790555b612414612c82565b61241e8383612cec565b8015610de5576000805461ff0019169055505050565b600054610100900460ff168061244d575060005460ff16155b6124695760405162461bcd60e51b8152600401610c829061344b565b600054610100900460ff1615801561248b576000805461ffff19166101011790555b612493612c82565b61249b612d81565b80156111ff576000805461ff001916905550565b600882015460009060ff83166101009091046001600160e81b0316116124d757506000610bc4565b600760ff8316106124e757600080fd5b600883015460009060019061250090859060ff16613766565b61250a9190613766565b905060008160000b121561252657612523600782613591565b90505b836001018160ff166007811061254c57634e487b7160e01b600052603260045260246000fd5b0154949350505050565b6080810151600090819081908190612575906127109061ffff16612de1565b6040860151909150861180156125f75760975460a08701516125f0916125a09160ff90911690613614565b6125ab90600a61369c565b6097546112fe906127109082906125cb90610100900460ff16600a61369c565b6125ea886125ea8e604001518f602001516127c090919063ffffffff16565b906127c0565b9350612617565b6126146127106112fe8489602001516127c090919063ffffffff16565b94505b609f5460005b81811015612761576000609f828154811061264857634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260a0909152604082209092509061268561267e600260076137be565b83906124af565b9050806126945750505061274f565b856126f45760208b01516000906126af906112fe8d856127c0565b6001600160a01b038516600090815260a160205260409020549091506126d59082612de1565b6001600160a01b038516600090815260a160205260409020555061274b565b60208b015160009061270a906112fe8c856127c0565b6001600160a01b038516600090815260a260205260409020549091506127309082612de1565b6001600160a01b038516600090815260a26020526040902055505b5050505b8061275981613848565b91505061261d565b5090925050509250925092565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610c9e8284613747565b6000610c9e8284613639565b6001600160a01b03821661282e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610c82565b806035600082825461284091906135fc565b90915550506001600160a01b0382166000908152603360205260408120805483929061286d9084906135fc565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600882015460ff16816001840182600781106128e357634e487b7160e01b600052603260045260246000fd5b015560006128f3600160076137be565b60ff16821461290c576129078260016135fc565b61290f565b60005b60088501805460ff191660ff8316179081905590915061293e9061010090046001600160e81b031660016135d1565b8460080160016101000a8154816001600160e81b0302191690836001600160e81b0316021790555050505050565b609b546000908152609e60205260409020609954600182015461298f9084612de1565b11156129d05760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682071756f746160801b6044820152606401610c82565b33600090815260a0602052604090206008810154600160f01b900460ff16612a4a5760088101805460ff60f01b1916600160f01b179055609f80546001810182556000919091527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de280180546001600160a01b031916331790555b8054612a569084612de1565b81556001820154612a679084612de1565b6001830155609b5460405184815233907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590602001611e38565b60008115612b4357609854600160a01b900460ff1615612ac2575047919050565b6097546040516370a0823160e01b8152306004820152620100009091046001600160a01b0316906370a08231906024015b60206040518083038186803b158015612b0b57600080fd5b505afa158015612b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc491906132e5565b6098546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401612af3565b919050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e739085906323b872dd60e01b9060840161237e565b6000612c05826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ded9092919063ffffffff16565b805190915015610de55780806020019051810190612c239190613168565b610de55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c82565b600054610100900460ff1680612c9b575060005460ff16155b612cb75760405162461bcd60e51b8152600401610c829061344b565b600054610100900460ff1615801561249b576000805461ffff191661010117905580156111ff576000805461ff001916905550565b600054610100900460ff1680612d05575060005460ff16155b612d215760405162461bcd60e51b8152600401610c829061344b565b600054610100900460ff16158015612d43576000805461ffff19166101011790555b8251612d56906036906020860190612f65565b508151612d6a906037906020850190612f65565b508015610de5576000805461ff0019169055505050565b600054610100900460ff1680612d9a575060005460ff16155b612db65760405162461bcd60e51b8152600401610c829061344b565b600054610100900460ff16158015612dd8576000805461ffff19166101011790555b61249b3361276e565b6000610c9e82846135fc565b6060612dfc8484600085612e04565b949350505050565b606082471015612e655760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c82565b843b612eb35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c82565b600080866001600160a01b03168587604051612ecf9190613346565b60006040518083038185875af1925050503d8060008114612f0c576040519150601f19603f3d011682016040523d82523d6000602084013e612f11565b606091505b5091509150612f21828286612f2c565b979650505050505050565b60608315612f3b575081610c9e565b825115612f4b5782518084602001fd5b8160405162461bcd60e51b8152600401610c8291906133ba565b828054612f719061380d565b90600052602060002090601f016020900481019282612f935760008555612fd9565b82601f10612fac57805160ff1916838001178555612fd9565b82800160010185558215612fd9579182015b82811115612fd9578251825591602001919060010190612fbe565b50612fe5929150612fe9565b5090565b5b80821115612fe55760008155600101612fea565b80356001600160a01b0381168114612b7357600080fd5b8035612b738161388f565b600082601f830112613030578081fd5b813567ffffffffffffffff8082111561304b5761304b613879565b604051601f8301601f19908116603f0116810190828211818310171561307357613073613879565b8160405283815286602085880101111561308b578485fd5b8360208701602083013792830160200193909352509392505050565b803560ff81168114612b7357600080fd5b6000602082840312156130c9578081fd5b610c9e82612ffe565b600080604083850312156130e4578081fd5b6130ed83612ffe565b91506130fb60208401612ffe565b90509250929050565b600080600060608486031215613118578081fd5b61312184612ffe565b925061312f60208501612ffe565b9150604084013590509250925092565b60008060408385031215613151578182fd5b61315a83612ffe565b946020939093013593505050565b600060208284031215613179578081fd5b8151610c9e8161388f565b600080600080600080600060e0888a03121561319e578283fd5b873567ffffffffffffffff808211156131b5578485fd5b6131c18b838c01613020565b985060208a01359150808211156131d6578485fd5b506131e38a828b01613020565b9650506131f260408901612ffe565b945061320060608901612ffe565b935061320e608089016130a7565b925061321c60a089016130a7565b915061322a60c08901612ffe565b905092959891949750929550565b600060a08284031215613249578081fd5b60405160a0810181811067ffffffffffffffff8211171561326c5761326c613879565b6040528235815261327f602084016130a7565b602082015260408301358060010b8114613297578283fd5b6040820152606083013561ffff811681146132b0578283fd5b60608201526132c160808401613015565b60808201529392505050565b6000602082840312156132de578081fd5b5035919050565b6000602082840312156132f6578081fd5b5051919050565b6000806040838503121561330f578182fd5b8235915060208301356133218161388f565b809150509250929050565b60006020828403121561333d578081fd5b610c9e826130a7565b600082516133588184602087016137e1565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b828110156133ad578151805185528601516001600160a01b031686850152928401929085019060010161337f565b5091979650505050505050565b60208152600082518060208401526133d98160408501602087016137e1565b601f01601f19169190910160400192915050565b6020808252600d908201526c10995a5b99c81cd95d1d1b1959609a1b604082015260600190565b6020808252601e908201527f4d61747572656420537461626c6520436f696e206e6f742066696c6c65640000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526007908201526608585b5bdd5b9d60ca1b604082015260600190565b60208082526018908201527f4d617475726564204173736574206e6f742066696c6c65640000000000000000604082015260600190565b60208082526010908201526f45786365656420617661696c61626c6560801b604082015260600190565b600080821280156001600160ff1b038490038513161561357257613572613863565b600160ff1b839003841281161561358b5761358b613863565b50500190565b600081810b83820b82821282607f038213811516156135b2576135b2613863565b82607f190382128116156135c8576135c8613863565b50019392505050565b60006001600160e81b038281168482168083038211156135f3576135f3613863565b01949350505050565b6000821982111561360f5761360f613863565b500190565b600060ff821660ff84168060ff0382111561363157613631613863565b019392505050565b60008261365457634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561369457816000190482111561367a5761367a613863565b8085161561368757918102915b93841c939080029061365e565b509250929050565b6000610c9e60ff8416836000826136b557506001610bc4565b816136c257506000610bc4565b81600181146136d857600281146136e2576136fe565b6001915050610bc4565b60ff8411156136f3576136f3613863565b50506001821b610bc4565b5060208310610133831016604e8410600b8410161715613721575081810a610bc4565b61372b8383613659565b806000190482111561373f5761373f613863565b029392505050565b600081600019048311821515161561376157613761613863565b500290565b600081810b83820b8281128015607f1983018412161561378857613788613863565b81607f01831381161561379d5761379d613863565b5090039392505050565b6000828210156137b9576137b9613863565b500390565b600060ff821660ff8416808210156137d8576137d8613863565b90039392505050565b60005b838110156137fc5781810151838201526020016137e4565b83811115610e735750506000910152565b600181811c9082168061382157607f821691505b6020821081141561384257634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561385c5761385c613863565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146111ff57600080fdfea2646970667358221220bd6dffdac70dbb87ef7db03f9ee15a9e33585dc61d4626feb4b0b9a214254f6c64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102765760003560e01c806375218df71161014f578063a5d3e5b1116100c1578063db006a751161007a578063db006a7514610a5e578063dc8a234414610a7e578063dd62ed3e14610a93578063e5d455ce14610ad9578063f2fde38b14610af9578063f6326fb314610b1957600080fd5b8063a5d3e5b11461098d578063a9059cbb146109ba578063b08480d4146109da578063b6b55f25146109ef578063c2bb515f14610a0f578063c303957014610a3157600080fd5b806395d89b411161011357806395d89b4114610880578063992642e5146108955780639a1a28c2146108b5578063a2589ef9146108d5578063a457c2d7146108f5578063a49b41d41461091557600080fd5b806375218df7146107e957806376e7a478146108095780637d8999921461081f5780638a19c8bc1461084c5780638da5cb5b1461086257600080fd5b806338d52e0f116101e85780634d94f56d116101ac5780634d94f56d14610692578063511db114146106b25780635ce0d5a5146106d357806365235474146106e957806370a082311461079e578063715018a6146107d457600080fd5b806338d52e0f146105e7578063395093511461060d5780633ebeeab81461062d578063430bf08a1461064d5780634601c2a61461067257600080fd5b8063140e56091161023a578063140e56091461050a57806318160ddd146105365780631de245af1461054b57806323b872dd146105835780632bd4bbbf146105a3578063313ce567146105c557600080fd5b806306fdde03146102ba5780630720da52146102e55780630748248f1461043c578063095ea7b3146104665780630ecc535f1461048657600080fd5b366102b557604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b3480156102c657600080fd5b506102cf610b21565b6040516102dc91906133ba565b60405180910390f35b3480156102f157600080fd5b506103d06103003660046132cd565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152506000908152609d60209081526040808320548352609e825291829020825161010081018452815481526001820154928101929092526002810154928201929092526003820154606082015260049091015461ffff8116608083015260ff620100008204811660a0840152630100000082048116151560c084015264010000000090910416151560e082015290565b6040516102dc91906000610100820190508251825260208301516020830152604083015160408301526060830151606083015261ffff608084015116608083015260ff60a08401511660a083015260c0830151151560c083015260e0830151151560e083015292915050565b34801561044857600080fd5b5060a3546104569060ff1681565b60405190151581526020016102dc565b34801561047257600080fd5b5061045661048136600461313f565b610bb3565b34801561049257600080fd5b506104d86104a13660046130b8565b60a0602052600090815260409020805460089091015460ff808216916001600160e81b0361010082041691600160f01b9091041684565b6040805194855260ff90931660208501526001600160e81b0390911691830191909152151560608201526080016102dc565b34801561051657600080fd5b5033600090815260a060205260409020545b6040519081526020016102dc565b34801561054257600080fd5b50603554610528565b34801561055757600080fd5b5061056b6105663660046132cd565b610bca565b6040516001600160a01b0390911681526020016102dc565b34801561058f57600080fd5b5061045661059e366004613104565b610bf4565b3480156105af57600080fd5b506105c36105be3660046132fd565b610ca5565b005b3480156105d157600080fd5b5060975460405160ff90911681526020016102dc565b3480156105f357600080fd5b5060975461056b906201000090046001600160a01b031681565b34801561061957600080fd5b5061045661062836600461313f565b610e9a565b34801561063957600080fd5b506105c3610648366004613184565b610ed6565b34801561065957600080fd5b5060a35461056b9061010090046001600160a01b031681565b34801561067e57600080fd5b5061052861068d36600461332c565b611025565b34801561069e57600080fd5b506105c36106ad3660046132cd565b61103e565b3480156106be57600080fd5b5060985461045690600160a01b900460ff1681565b3480156106df57600080fd5b50610528609c5481565b3480156106f557600080fd5b506107586107043660046132cd565b609e60205260009081526040902080546001820154600283015460038401546004909401549293919290919061ffff81169060ff620100008204811691630100000081048216916401000000009091041688565b60408051988952602089019790975295870194909452606086019290925261ffff16608085015260ff1660a0840152151560c0830152151560e0820152610100016102dc565b3480156107aa57600080fd5b506105286107b93660046130b8565b6001600160a01b031660009081526033602052604090205490565b3480156107e057600080fd5b506105c3611202565b3480156107f557600080fd5b506105c36108043660046130b8565b611238565b34801561081557600080fd5b5061052861271081565b34801561082b57600080fd5b5061052861083a3660046130b8565b60a26020526000908152604090205481565b34801561085857600080fd5b50610528609b5481565b34801561086e57600080fd5b506065546001600160a01b031661056b565b34801561088c57600080fd5b506102cf6114e5565b3480156108a157600080fd5b5060985461056b906001600160a01b031681565b3480156108c157600080fd5b506105c36108d0366004613238565b6114f4565b3480156108e157600080fd5b506105c36108f03660046132cd565b61173a565b34801561090157600080fd5b5061045661091036600461313f565b611810565b34801561092157600080fd5b50609954609a54610955919060ff80821691610100810460010b9161ffff6301000000830416916501000000000090041685565b6040805195865260ff909416602086015260019290920b9284019290925261ffff90911660608301521515608082015260a0016102dc565b34801561099957600080fd5b506105286109a83660046132cd565b609d6020526000908152604090205481565b3480156109c657600080fd5b506104566109d536600461313f565b6118a9565b3480156109e657600080fd5b506105c36118b6565b3480156109fb57600080fd5b506105c3610a0a3660046132cd565b611958565b348015610a1b57600080fd5b50610a24611a42565b6040516102dc9190613362565b348015610a3d57600080fd5b50610528610a4c3660046130b8565b60a16020526000908152604090205481565b348015610a6a57600080fd5b506105c3610a793660046132cd565b611cdb565b348015610a8a57600080fd5b50610456611e45565b348015610a9f57600080fd5b50610528610aae3660046130d2565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b348015610ae557600080fd5b506105c3610af4366004613184565b611e5e565b348015610b0557600080fd5b506105c3610b143660046130b8565b611edf565b6105c3611f77565b606060368054610b309061380d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5c9061380d565b8015610ba95780601f10610b7e57610100808354040283529160200191610ba9565b820191906000526020600020905b815481529060010190602001808311610b8c57829003601f168201915b5050505050905090565b6000610bc033848461205b565b5060015b92915050565b609f8181548110610bda57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610c01848484612177565b6001600160a01b038416600090815260346020908152604080832033845290915290205482811015610c8b5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610c98853385840361205b565b60019150505b9392505050565b8080610cb1575060a454155b610ccd5760405162461bcd60e51b8152600401610c82906134ef565b801580610cda575060a554155b610cf65760405162461bcd60e51b8152600401610c8290613414565b60a35460ff1615610d195760405162461bcd60e51b8152600401610c82906133ed565b6001609b5411610d595760405162461bcd60e51b815260206004820152600b60248201526a08539bc813585d1d5c995960aa1b6044820152606401610c82565b60008211610d795760405162461bcd60e51b8152600401610c82906134ce565b8015610dea5733600090815260a2602052604090205482811015610daf5760405162461bcd60e51b8152600401610c8290613526565b610db98184612346565b33600081815260a26020526040902091909155609854610de5916001600160a01b039091169085612352565b505050565b33600090815260a1602052604090205482811015610e1a5760405162461bcd60e51b8152600401610c8290613526565b610e248184612346565b33600090815260a16020526040902055609854600160a01b900460ff1615610e7957604051339084156108fc029085906000818181858888f19350505050158015610e73573d6000803e3d6000fd5b50505050565b609754610de5906201000090046001600160a01b03163385612352565b5050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091610bc0918590610ed19086906135fc565b61205b565b600054610100900460ff1680610eef575060005460ff16155b610f0b5760405162461bcd60e51b8152600401610c829061344b565b600054610100900460ff16158015610f2d576000805461ffff19166101011790555b6001600160a01b038216610f795760405162461bcd60e51b8152602060048201526013602482015272456d707479207661756c74206164647265737360681b6044820152606401610c82565b610f8388886123b5565b610f8b612434565b60978054609880546001600160a01b038981166001600160a81b0319909216919091178a82168015600160a01b029190911790925560ff8881166001600160b01b03199094166201000090930261ffff1916929092179290921761010091871682021790925560a38054610100600160a81b031916918516909202179055801561101b576000805461ff00191690555b5050505050505050565b33600090815260a060205260408120610c9e81846124af565b6065546001600160a01b031633146110685760405162461bcd60e51b8152600401610c8290613499565b60a454156110885760405162461bcd60e51b8152600401610c82906134ef565b60a554156110a85760405162461bcd60e51b8152600401610c8290613414565b60a35460ff16156110cb5760405162461bcd60e51b8152600401610c82906133ed565b60a3805460ff19166001179055609c819055609b54600711156110eb5750565b609b546000906110fd906007906137a7565b6111089060016135fc565b6000818152609e602090815260408083208151610100810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015461ffff8116608084015260ff620100008204811660a0850152630100000082048116151560c085015264010000000090910416151560e083015292935081908190611199908790612556565b60048701805463ff000000191663010000008315150217905560a483905560a683905560a582905560a7829055604051929550909350915085907f5fd55b58a9ef8c29a9db39dd9a05dec64993eb227ad0177941238778e9ea896290600090a250505050505b50565b6065546001600160a01b0316331461122c5760405162461bcd60e51b8152600401610c8290613499565b611236600061276e565b565b6065546001600160a01b031633146112625760405162461bcd60e51b8152600401610c8290613499565b60a35460ff166112a85760405162461bcd60e51b8152602060048201526011602482015270139bdd0818995a5b99c81cd95d1d1b1959607a1b6044820152606401610c82565b6000609b54116112b55750565b609b546000908152609e60205260409020609c546003820155609a5461130490612710906112fe906112f3906101009004600190810b900b83613550565b6003850154906127c0565b906127cc565b6002820155609a8054600483018054630100000090920461ffff1661ffff19831681178255925462ffffff1990921690921760ff909116620100000217905560018101546113539030906127d8565b609f5460005b818110156113e6576000609f828154811061138457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260a09091526040909120805491925090156113c2576113c230838360000154612177565b80546113cf9082906128b7565b6000905550806113de81613848565b915050611359565b50816001015460a4541161148d57600061140f60a454846001015461234690919063ffffffff16565b9050801561148257609854600160a01b900460ff1615611465576040516001600160a01b0385169082156108fc029083906000818181858888f1935050505015801561145f573d6000803e3d6000fd5b50611482565b609754611482906201000090046001600160a01b03168583612352565b50600060a4556114a2565b600182015460a45461149e91612346565b60a4555b609b80546000908152609d6020526040808220439055915491517ffa513f17b83baf0c2da337ab931a96429f75c55f0ee2115b7acd007a1a35dd519190a2505050565b606060378054610b309061380d565b6065546001600160a01b0316331461151e5760405162461bcd60e51b8152600401610c8290613499565b609b5461152c9060016135fc565b609b819055508060996000820151816000015560208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548161ffff021916908360010b61ffff16021790555060608201518160010160036101000a81548161ffff021916908361ffff16021790555060808201518160010160056101000a81548160ff0219169083151502179055509050506000604051806101000160405280609b548152602001600081526020016000815260200160008152602001836060015161ffff168152602001836020015160ff16815260200160001515815260200183608001511515815250905080609e6000609b5481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548161ffff021916908361ffff16021790555060a08201518160040160026101000a81548160ff021916908360ff16021790555060c08201518160040160036101000a81548160ff02191690831515021790555060e08201518160040160046101000a81548160ff021916908315150217905550905050600060a360006101000a81548160ff021916908315150217905550609b547f10f419fb017d3101d854d4433e414ff27f232bb2f4aae83d987ad0219efa6c9b60405160405180910390a25050565b60a35460ff161561175d5760405162461bcd60e51b8152600401610c82906133ed565b6001609b541161179d5760405162461bcd60e51b815260206004820152600b60248201526a08539bc813585d1d5c995960aa1b6044820152606401610c82565b600081116117bd5760405162461bcd60e51b8152600401610c82906134ce565b33600090815260a16020526040902054818110156117ed5760405162461bcd60e51b8152600401610c8290613526565b6117f78183612346565b33600090815260a16020526040902055610e968261296c565b3360009081526034602090815260408083206001600160a01b0386168452909152812054828110156118925760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c82565b61189f338585840361205b565b5060019392505050565b6000610bc0338484612177565b6065546001600160a01b031633146118e05760405162461bcd60e51b8152600401610c8290613499565b60a45415806118fa575060a6546118f76001612aa1565b10155b6119165760405162461bcd60e51b8152600401610c82906134ef565b60a5541580611930575060a75461192d6000612aa1565b10155b61194c5760405162461bcd60e51b8152600401610c8290613414565b600060a481905560a555565b60a35460ff161561197b5760405162461bcd60e51b8152600401610c82906133ed565b6000609b54116119b85760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610c82565b609854600160a01b900460ff16156119fb5760405162461bcd60e51b815260206004820152600660248201526502145524332360d41b6044820152606401610c82565b60008111611a1b5760405162461bcd60e51b8152600401610c82906134ce565b611a248161296c565b6097546111ff906201000090046001600160a01b0316333084612b78565b6065546060906001600160a01b03163314611a6f5760405162461bcd60e51b8152600401610c8290613499565b60a454158015611a7f575060a554155b15611ac7576040805160008082526020820190925290611ac1565b6040805180820190915260008082526020820152815260200190600190039081611a9a5790505b50905090565b60a454611b6057604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081611ae55750506040805180820190915260a55481526098546001600160a01b031660208201528151919250908290600090611b5057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152905090565b60a554611bf057604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081611b7e579050506040805180820190915260a45481526097546201000090046001600160a01b031660208201528151919250908290600090611b5057634e487b7160e01b600052603260045260246000fd5b60408051600280825260608201909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081611c08579050506040805180820190915260a45481526097546201000090046001600160a01b031660208201528151919250908290600090611c7a57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806040016040528060a5548152602001609860009054906101000a90046001600160a01b03166001600160a01b031681525081600181518110611b5057634e487b7160e01b600052603260045260246000fd5b60a35460ff1615611cfe5760405162461bcd60e51b8152600401610c82906133ed565b60008111611d1e5760405162461bcd60e51b8152600401610c82906134ce565b33600090815260a0602052604090208054821115611d725760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b6044820152606401610c82565b8054611d7e9083612346565b8155609b546000908152609e602052604090206001810154611da09084612346565b6001820155609854600160a01b900460ff1615611dea57604051339084156108fc029085906000818181858888f19350505050158015611de4573d6000803e3d6000fd5b50611e07565b609754611e07906201000090046001600160a01b03163385612352565b609b5460405184815233907fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929906020015b60405180910390a3505050565b600060a4546000148015611e59575060a554155b905090565b600054610100900460ff1680611e77575060005460ff16155b611e935760405162461bcd60e51b8152600401610c829061344b565b600054610100900460ff16158015611eb5576000805461ffff19166101011790555b611ec488888888888888610ed6565b801561101b576000805461ff00191690555050505050505050565b6065546001600160a01b03163314611f095760405162461bcd60e51b8152600401610c8290613499565b6001600160a01b038116611f6e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c82565b6111ff8161276e565b60a35460ff1615611f9a5760405162461bcd60e51b8152600401610c82906133ed565b6000609b5411611fd75760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610c82565b609854600160a01b900460ff166120195760405162461bcd60e51b8152600401610c82906020808252600490820152630428aa8960e31b604082015260600190565b600034116120525760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b6044820152606401610c82565b6112363461296c565b6001600160a01b0383166120bd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c82565b6001600160a01b03821661211e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c82565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101611e38565b6001600160a01b0383166121db5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610c82565b6001600160a01b03821661223d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c82565b6001600160a01b038316600090815260336020526040902054818110156122b55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c82565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906122ec9084906135fc565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161233891815260200190565b60405180910390a350505050565b6000610c9e82846137a7565b6040516001600160a01b038316602482015260448101829052610de590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612bb0565b600054610100900460ff16806123ce575060005460ff16155b6123ea5760405162461bcd60e51b8152600401610c829061344b565b600054610100900460ff1615801561240c576000805461ffff19166101011790555b612414612c82565b61241e8383612cec565b8015610de5576000805461ff0019169055505050565b600054610100900460ff168061244d575060005460ff16155b6124695760405162461bcd60e51b8152600401610c829061344b565b600054610100900460ff1615801561248b576000805461ffff19166101011790555b612493612c82565b61249b612d81565b80156111ff576000805461ff001916905550565b600882015460009060ff83166101009091046001600160e81b0316116124d757506000610bc4565b600760ff8316106124e757600080fd5b600883015460009060019061250090859060ff16613766565b61250a9190613766565b905060008160000b121561252657612523600782613591565b90505b836001018160ff166007811061254c57634e487b7160e01b600052603260045260246000fd5b0154949350505050565b6080810151600090819081908190612575906127109061ffff16612de1565b6040860151909150861180156125f75760975460a08701516125f0916125a09160ff90911690613614565b6125ab90600a61369c565b6097546112fe906127109082906125cb90610100900460ff16600a61369c565b6125ea886125ea8e604001518f602001516127c090919063ffffffff16565b906127c0565b9350612617565b6126146127106112fe8489602001516127c090919063ffffffff16565b94505b609f5460005b81811015612761576000609f828154811061264857634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260a0909152604082209092509061268561267e600260076137be565b83906124af565b9050806126945750505061274f565b856126f45760208b01516000906126af906112fe8d856127c0565b6001600160a01b038516600090815260a160205260409020549091506126d59082612de1565b6001600160a01b038516600090815260a160205260409020555061274b565b60208b015160009061270a906112fe8c856127c0565b6001600160a01b038516600090815260a260205260409020549091506127309082612de1565b6001600160a01b038516600090815260a26020526040902055505b5050505b8061275981613848565b91505061261d565b5090925050509250925092565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610c9e8284613747565b6000610c9e8284613639565b6001600160a01b03821661282e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610c82565b806035600082825461284091906135fc565b90915550506001600160a01b0382166000908152603360205260408120805483929061286d9084906135fc565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600882015460ff16816001840182600781106128e357634e487b7160e01b600052603260045260246000fd5b015560006128f3600160076137be565b60ff16821461290c576129078260016135fc565b61290f565b60005b60088501805460ff191660ff8316179081905590915061293e9061010090046001600160e81b031660016135d1565b8460080160016101000a8154816001600160e81b0302191690836001600160e81b0316021790555050505050565b609b546000908152609e60205260409020609954600182015461298f9084612de1565b11156129d05760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682071756f746160801b6044820152606401610c82565b33600090815260a0602052604090206008810154600160f01b900460ff16612a4a5760088101805460ff60f01b1916600160f01b179055609f80546001810182556000919091527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de280180546001600160a01b031916331790555b8054612a569084612de1565b81556001820154612a679084612de1565b6001830155609b5460405184815233907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590602001611e38565b60008115612b4357609854600160a01b900460ff1615612ac2575047919050565b6097546040516370a0823160e01b8152306004820152620100009091046001600160a01b0316906370a08231906024015b60206040518083038186803b158015612b0b57600080fd5b505afa158015612b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc491906132e5565b6098546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401612af3565b919050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e739085906323b872dd60e01b9060840161237e565b6000612c05826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ded9092919063ffffffff16565b805190915015610de55780806020019051810190612c239190613168565b610de55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c82565b600054610100900460ff1680612c9b575060005460ff16155b612cb75760405162461bcd60e51b8152600401610c829061344b565b600054610100900460ff1615801561249b576000805461ffff191661010117905580156111ff576000805461ff001916905550565b600054610100900460ff1680612d05575060005460ff16155b612d215760405162461bcd60e51b8152600401610c829061344b565b600054610100900460ff16158015612d43576000805461ffff19166101011790555b8251612d56906036906020860190612f65565b508151612d6a906037906020850190612f65565b508015610de5576000805461ff0019169055505050565b600054610100900460ff1680612d9a575060005460ff16155b612db65760405162461bcd60e51b8152600401610c829061344b565b600054610100900460ff16158015612dd8576000805461ffff19166101011790555b61249b3361276e565b6000610c9e82846135fc565b6060612dfc8484600085612e04565b949350505050565b606082471015612e655760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c82565b843b612eb35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c82565b600080866001600160a01b03168587604051612ecf9190613346565b60006040518083038185875af1925050503d8060008114612f0c576040519150601f19603f3d011682016040523d82523d6000602084013e612f11565b606091505b5091509150612f21828286612f2c565b979650505050505050565b60608315612f3b575081610c9e565b825115612f4b5782518084602001fd5b8160405162461bcd60e51b8152600401610c8291906133ba565b828054612f719061380d565b90600052602060002090601f016020900481019282612f935760008555612fd9565b82601f10612fac57805160ff1916838001178555612fd9565b82800160010185558215612fd9579182015b82811115612fd9578251825591602001919060010190612fbe565b50612fe5929150612fe9565b5090565b5b80821115612fe55760008155600101612fea565b80356001600160a01b0381168114612b7357600080fd5b8035612b738161388f565b600082601f830112613030578081fd5b813567ffffffffffffffff8082111561304b5761304b613879565b604051601f8301601f19908116603f0116810190828211818310171561307357613073613879565b8160405283815286602085880101111561308b578485fd5b8360208701602083013792830160200193909352509392505050565b803560ff81168114612b7357600080fd5b6000602082840312156130c9578081fd5b610c9e82612ffe565b600080604083850312156130e4578081fd5b6130ed83612ffe565b91506130fb60208401612ffe565b90509250929050565b600080600060608486031215613118578081fd5b61312184612ffe565b925061312f60208501612ffe565b9150604084013590509250925092565b60008060408385031215613151578182fd5b61315a83612ffe565b946020939093013593505050565b600060208284031215613179578081fd5b8151610c9e8161388f565b600080600080600080600060e0888a03121561319e578283fd5b873567ffffffffffffffff808211156131b5578485fd5b6131c18b838c01613020565b985060208a01359150808211156131d6578485fd5b506131e38a828b01613020565b9650506131f260408901612ffe565b945061320060608901612ffe565b935061320e608089016130a7565b925061321c60a089016130a7565b915061322a60c08901612ffe565b905092959891949750929550565b600060a08284031215613249578081fd5b60405160a0810181811067ffffffffffffffff8211171561326c5761326c613879565b6040528235815261327f602084016130a7565b602082015260408301358060010b8114613297578283fd5b6040820152606083013561ffff811681146132b0578283fd5b60608201526132c160808401613015565b60808201529392505050565b6000602082840312156132de578081fd5b5035919050565b6000602082840312156132f6578081fd5b5051919050565b6000806040838503121561330f578182fd5b8235915060208301356133218161388f565b809150509250929050565b60006020828403121561333d578081fd5b610c9e826130a7565b600082516133588184602087016137e1565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b828110156133ad578151805185528601516001600160a01b031686850152928401929085019060010161337f565b5091979650505050505050565b60208152600082518060208401526133d98160408501602087016137e1565b601f01601f19169190910160400192915050565b6020808252600d908201526c10995a5b99c81cd95d1d1b1959609a1b604082015260600190565b6020808252601e908201527f4d61747572656420537461626c6520436f696e206e6f742066696c6c65640000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526007908201526608585b5bdd5b9d60ca1b604082015260600190565b60208082526018908201527f4d617475726564204173736574206e6f742066696c6c65640000000000000000604082015260600190565b60208082526010908201526f45786365656420617661696c61626c6560801b604082015260600190565b600080821280156001600160ff1b038490038513161561357257613572613863565b600160ff1b839003841281161561358b5761358b613863565b50500190565b600081810b83820b82821282607f038213811516156135b2576135b2613863565b82607f190382128116156135c8576135c8613863565b50019392505050565b60006001600160e81b038281168482168083038211156135f3576135f3613863565b01949350505050565b6000821982111561360f5761360f613863565b500190565b600060ff821660ff84168060ff0382111561363157613631613863565b019392505050565b60008261365457634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561369457816000190482111561367a5761367a613863565b8085161561368757918102915b93841c939080029061365e565b509250929050565b6000610c9e60ff8416836000826136b557506001610bc4565b816136c257506000610bc4565b81600181146136d857600281146136e2576136fe565b6001915050610bc4565b60ff8411156136f3576136f3613863565b50506001821b610bc4565b5060208310610133831016604e8410600b8410161715613721575081810a610bc4565b61372b8383613659565b806000190482111561373f5761373f613863565b029392505050565b600081600019048311821515161561376157613761613863565b500290565b600081810b83820b8281128015607f1983018412161561378857613788613863565b81607f01831381161561379d5761379d613863565b5090039392505050565b6000828210156137b9576137b9613863565b500390565b600060ff821660ff8416808210156137d8576137d8613863565b90039392505050565b60005b838110156137fc5781810151838201526020016137e4565b83811115610e735750506000910152565b600181811c9082168061382157607f821691505b6020821081141561384257634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561385c5761385c613863565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146111ff57600080fdfea2646970667358221220bd6dffdac70dbb87ef7db03f9ee15a9e33585dc61d4626feb4b0b9a214254f6c64736f6c63430008040033",
  "libraries": {
    "StructureData": "0x96D9788139D663bfcb01d7965EAa93D5ED3623E4"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 538,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 541,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1297,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 597,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 603,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 605,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 607,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 609,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1150,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 418,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 531,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6138,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "assetAmountDecimals",
        "offset": 0,
        "slot": "151",
        "type": "t_uint8"
      },
      {
        "astId": 6140,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "stableCoinAmountDecimals",
        "offset": 1,
        "slot": "151",
        "type": "t_uint8"
      },
      {
        "astId": 6142,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "asset",
        "offset": 2,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 6144,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "stableCoin",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 6146,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "isEth",
        "offset": 20,
        "slot": "152",
        "type": "t_bool"
      },
      {
        "astId": 6149,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "optionParameters",
        "offset": 0,
        "slot": "153",
        "type": "t_struct(OptionParameters)9701_storage"
      },
      {
        "astId": 6151,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "currentRound",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 6153,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "previousUnderlyingPrice",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 6157,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "optionHeights",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6162,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "optionStates",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_uint256,t_struct(OptionState)9718_storage)"
      },
      {
        "astId": 6165,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "usersInvolved",
        "offset": 0,
        "slot": "159",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6170,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "userStates",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_address,t_struct(UserState)9734_storage)"
      },
      {
        "astId": 6174,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "maturedAsset",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6178,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "maturedStableCoin",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6180,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "underSettlement",
        "offset": 0,
        "slot": "163",
        "type": "t_bool"
      },
      {
        "astId": 6183,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "vaultAddress",
        "offset": 1,
        "slot": "163",
        "type": "t_address"
      },
      {
        "astId": 6869,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "requestingAssetAmount",
        "offset": 0,
        "slot": "164",
        "type": "t_uint256"
      },
      {
        "astId": 6871,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "requestingStableCoinAmount",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 6873,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "maturedAssetAmount",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      },
      {
        "astId": 6875,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "maturedStableCoinAmount",
        "offset": 0,
        "slot": "167",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)7_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[7]",
        "numberOfBytes": "224"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int16": {
        "encoding": "inplace",
        "label": "int16",
        "numberOfBytes": "2"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserState)9734_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)9734_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(OptionState)9718_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StructureData.OptionState)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionState)9718_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(OptionParameters)9701_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionParameters",
        "members": [
          {
            "astId": 9692,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "quota",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9694,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "pricePrecision",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 9696,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "strikePriceRatio",
            "offset": 1,
            "slot": "1",
            "type": "t_int16"
          },
          {
            "astId": 9698,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "premiumRate",
            "offset": 3,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 9700,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "callOrPut",
            "offset": 5,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OptionState)9718_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionState",
        "members": [
          {
            "astId": 9703,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9705,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "totalAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9707,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "strikePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9709,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "underlyingPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9711,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "premiumRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 9713,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "pricePrecision",
            "offset": 2,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 9715,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "executed",
            "offset": 3,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 9717,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "callOrPut",
            "offset": 4,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserState)9734_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.UserState",
        "members": [
          {
            "astId": 9723,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "pendingAsset",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9727,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "ongoingAsset",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)7_storage"
          },
          {
            "astId": 9729,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "nextCursor",
            "offset": 0,
            "slot": "8",
            "type": "t_uint8"
          },
          {
            "astId": 9731,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "totalRound",
            "offset": 1,
            "slot": "8",
            "type": "t_uint232"
          },
          {
            "astId": 9733,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "hasState",
            "offset": 30,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint232": {
        "encoding": "inplace",
        "label": "uint232",
        "numberOfBytes": "29"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}