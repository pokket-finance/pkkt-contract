{
  "address": "0x416dfA8D1A02b8Da0E48713Cd1Afa05049718813",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CancelWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CompleteWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "fromWallet",
          "type": "bool"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InitiateWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsHarvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct Vault.VaultSettings",
          "name": "_vault",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct Vault.VaultSettings[]",
          "name": "_vaults",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "addMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "cancelWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "completeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        }
      ],
      "name": "harvestAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAllPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PKKTToken",
          "name": "_pkkt",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pkktPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pkktPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "initiateSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "initiateWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAdded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSettelled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        }
      ],
      "name": "maxCancelWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        }
      ],
      "name": "maxCompleteWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        }
      ],
      "name": "maxInitiateWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        }
      ],
      "name": "maxRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        }
      ],
      "name": "maxRedeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "normalizer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingPKKT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pkkt",
      "outputs": [
        {
          "internalType": "contract PKKTToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pkktPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pkktPerBlock",
          "type": "uint256"
        }
      ],
      "name": "setPKKTPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "settlementResult",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ongoingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingPKKTReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingReward",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasDeposit",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accPKKTPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPending",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalOngoing",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRequesting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMatured",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8e0a701227f8321b06902534a2bcaf34dcf3c9a4ac17c626c7ce944a93ae936f",
  "receipt": {
    "to": null,
    "from": "0x7FAa46FB04BB00de3F6D5E90d78b4a37f8E48cd4",
    "contractAddress": "0x416dfA8D1A02b8Da0E48713Cd1Afa05049718813",
    "transactionIndex": 7,
    "gasUsed": "3440655",
    "logsBloom": "0x
    "blockHash": "0x2a2930e92484470ed3eefaf8a9be144b8247dd2f8b51eb33dcfe26efc069e829",
    "transactionHash": "0x8e0a701227f8321b06902534a2bcaf34dcf3c9a4ac17c626c7ce944a93ae936f",
    "logs": [],
    "blockNumber": 11573452,
    "cumulativeGasUsed": "4433639",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8474e35b853e611c5d70139c0961d073",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CancelWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompleteWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromWallet\",\"type\":\"bool\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InitiateWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Vault.VaultSettings\",\"name\":\"_vault\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Vault.VaultSettings[]\",\"name\":\"_vaults\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"addMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cancelWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"completeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAllPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PKKTToken\",\"name\":\"_pkkt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pkktPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pkktPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"initiateSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"initiateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSettelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"}],\"name\":\"maxCancelWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"}],\"name\":\"maxCompleteWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"}],\"name\":\"maxInitiateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"}],\"name\":\"maxRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"}],\"name\":\"maxRedeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalizer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingPKKT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pkkt\",\"outputs\":[{\"internalType\":\"contract PKKTToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pkktPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pkktPerBlock\",\"type\":\"uint256\"}],\"name\":\"setPKKTPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settlementResult\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ongoingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingPKKTReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasDeposit\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accPKKTPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOngoing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRequesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMatured\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,uint256,uint256,address)\":{\"params\":{\"_pkktPerBlock\":\"total number of PKKT rewarded to users\",\"trader\":\"address of trader who manages settlements\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,uint256,uint256,address)\":{\"notice\":\"Initializes the contract with storage variables\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PKKTVault.sol\":\"PKKTVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/PKKTRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n//import {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\"; \\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./PKKTToken.sol\\\";  \\nimport {PoolData, UserData} from \\\"./libraries/SharedData.sol\\\";  \\nimport \\\"./libraries/Utils.sol\\\";  \\nimport \\\"./interfaces/IClaimable.sol\\\"; \\nimport \\\"hardhat/console.sol\\\";\\n\\n\\nabstract contract PKKTRewardManager is IClaimable, OwnableUpgradeable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**********************************************\\n    *  NON UPGRADABLE STORAGE\\n    ***********************************************/\\n\\n    uint256 public pkktPerBlock;\\n    // A record status of LP pool.\\n    mapping(address => bool) public isAdded; \\n    string itemName;\\n    // The PKKT TOKEN!\\n    PKKTToken public pkkt;\\n    // The block number when PKKT mining starts.\\n    uint256 public startBlock;\\n\\n    // TODO: Research whether or not we need a uint256[30] private __gap here for safety\\n\\n    /**********************************************\\n    *  IMMUTABLES AND CONSTANTS\\n    ***********************************************/\\n\\n    uint256 public constant normalizer = 1e18;\\n\\n\\n    event RewardsHarvested(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    /// @notice Initializes the contract with storage variables\\n    /// @param _itemName name of underlying storage ex: \\\"Vault\\\" or \\\"Pool\\\"\\n    /// @param _pkktPerBlock total number of PKKT rewarded to users per block\\n    function initialize(\\n        PKKTToken _pkkt,\\n        string memory _itemName,\\n        uint256 _pkktPerBlock,\\n        uint256 _startBlock) internal initializer {\\n        require(address(_pkkt) != address(0), \\\"Zero address\\\");\\n        OwnableUpgradeable.__Ownable_init();\\n        pkkt = _pkkt;\\n        pkktPerBlock = _pkktPerBlock;\\n        itemName = _itemName;\\n        startBlock = _startBlock;\\n    }\\n\\n \\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolLength();\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n \\n    modifier validatePoolById(uint256 _pid) {\\n        require(_pid < poolLength() , Utils.StringConcat(bytes(itemName), bytes(\\\" doesn't exist\\\")));\\n        _;\\n    }\\n\\n    //Update number of pkkt per block \\n    function setPKKTPerBlock(uint256 _pkktPerBlock) public virtual onlyOwner {\\n        massUpdatePools();\\n        pkktPerBlock = _pkktPerBlock;\\n    }\\n \\n\\n    // View function to see pending PKKTs on frontend.\\n    function pendingPKKT(uint256 _pid, address _user)\\n        external\\n        view\\n        validatePoolById(_pid)\\n        returns (uint256)\\n    {\\n        PoolData.Data memory poolData = _getPoolData(_pid, true);\\n        UserData.Data memory userData = _getUserData(_pid, _user); \\n       \\n        uint256 accPKKTPerShare = poolData.accPKKTPerShare;  \\n        if (block.number > poolData.lastRewardBlock && poolData.shareAmount > 0) {   \\n            accPKKTPerShare = _getAccPKKTPerShare(poolData); \\n        }  \\n        return userData.pendingReward.add(userData.shareAmount.mul(accPKKTPerShare).div(normalizer).sub(userData.rewardDebt)); \\n    }\\n    \\n       // Update reward variables of the given pool to be up-to-date. \\n    function updatePool(uint256 _pid) public validatePoolById(_pid) {\\n        PoolData.Data memory poolData = _getPoolData(_pid, true);\\n        if (block.number <= poolData.lastRewardBlock) {\\n            return;\\n        } \\n        if (poolData.shareAmount == 0) { \\n             _updatePool(_pid, 0); \\n            return;\\n        }  \\n         _updatePool(_pid, _getAccPKKTPerShare(poolData)); \\n    }\\n\\n\\n    //Harvest proceeds of all pools for msg.sender\\n    function harvestAll(uint256[] memory _pids) external {\\n       uint256 length = _pids.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            harvest(_pids[i]);\\n        }\\n    }\\n\\n    function harvestAllPools() override external  {\\n        uint256 length = poolLength();\\n        for (uint256 i = 0; i < length; ++i) {\\n            harvest(i);\\n        }\\n    }\\n    //Harvest proceeds msg.sender\\n    function harvest(uint256 _pid) public validatePoolById(_pid) returns(uint256) {\\n        updatePool(_pid); \\n        PoolData.Data memory poolData = _getPoolData(_pid, false);\\n        UserData.Data memory userData = _getUserData(_pid, msg.sender); \\n \\n        uint256 pendingReward = userData.pendingReward;\\n        uint256 totalPending = userData.shareAmount.mul(poolData.accPKKTPerShare)\\n                                        .div(normalizer)\\n                                        .sub(userData.rewardDebt)\\n                                        .add(pendingReward); \\n        _updateUserPendingReward(_pid, msg.sender, 0);\\n        if (totalPending > 0) {\\n            pkkt.mint(address(this), totalPending);\\n            pkkt.transfer(msg.sender, totalPending);\\n        }\\n        _updateUserRewardDebt(_pid, msg.sender, userData.shareAmount.mul(poolData.accPKKTPerShare).div(normalizer)); \\n        emit RewardsHarvested(msg.sender, _pid, totalPending);\\n        return totalPending;\\n    }\\n\\n    function updateUserReward(uint256 _pid, address _userAddress, uint256 _oldShareAmount, uint256 _newShareAmount, bool _updatePending) internal validatePoolById(_pid) {\\n        PoolData.Data memory poolData = _getPoolData(_pid, false);\\n        UserData.Data memory userData = _getUserData(_pid,_userAddress);  \\n\\n        if (_updatePending){\\n            uint256 pending =\\n                    _oldShareAmount.mul(poolData.accPKKTPerShare).div(normalizer).sub(\\n                        userData.rewardDebt\\n                    );\\n            _updateUserPendingReward(_pid, _userAddress, userData.pendingReward.add(pending)); \\n        }\\n        _updateUserRewardDebt(_pid,_userAddress, _newShareAmount.mul(poolData.accPKKTPerShare).div(normalizer));  \\n    }\\n\\n  \\n\\n    function _getAccPKKTPerShare(PoolData.Data memory _poolData) private view returns(uint256) {  \\n        uint256 pkktReward = block.number.sub(_poolData.lastRewardBlock).mul(pkktPerBlock).mul(_getPoolPercentage(_poolData)); \\n        return _poolData.accPKKTPerShare.add(\\n                pkktReward.div(_poolData.shareAmount)\\n            );\\n    }\\n\\n    function _updatePool(uint256 _pid, uint256 _accPKKTPerShare) internal virtual;\\n    function poolLength() public virtual view returns (uint256);\\n    function _updateUserPendingReward(uint256 _poolId, address _userAddress, uint256 _newValue) internal virtual;\\n    function _updateUserRewardDebt(uint256 _poolId, address _userAddress, uint256 _newValue) internal virtual;\\n    function _getPoolPercentage(PoolData.Data memory _poolData) internal virtual view returns(uint256);\\n    function _getPoolData(uint256 _poolId, bool _getShare) internal virtual view returns(PoolData.Data memory);\\n    function _getUserData(uint256 _poolId, address _userAddress) internal virtual view returns(UserData.Data memory);\\n}\\n\",\"keccak256\":\"0xf123f70aa0e6e7e23e531cea3fea0e0903d2658c2efb33bc5d5d901e9e091230\",\"license\":\"MIT\"},\"contracts/PKKTToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract PKKTToken is ERC20, Ownable {\\n\\n    using SafeMath for uint256; \\n    /**\\n     * @dev A record status of minter.\\n     */\\n    mapping (address => bool) public minters;\\n    mapping (address => uint256) public mintingAllowance;\\n    \\n     /**\\n     * @dev maximum amount can be minted.\\n     */\\n    uint256 private immutable _cap;\\n\\n    event MinterAdded(address indexed account);\\n    event MinterRemoved(address indexed account);\\n    event MintingAllowanceUpdated(address indexed account, uint256 oldAllowance, uint256 newAllowance);\\n\\n    constructor(string memory tokenName, string memory symbol, uint256 cap_) ERC20(tokenName, symbol) {\\n        minters[msg.sender] = true;\\n        _cap = cap_;\\n    }\\n     \\n    function cap() public view returns(uint256) {\\n        return _cap;\\n    }\\n\\n    function isMinter(address _account) public view returns(bool) {\\n        return minters[_account];\\n    }\\n\\n      /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint _amount) public onlyOwner {\\n        _burn(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address _account, uint256 _amount) public virtual onlyOwner {\\n        uint256 decreasedAllowance = \\n        allowance(_account, msg.sender).sub(_amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        _approve(_account, msg.sender, decreasedAllowance);\\n        _burn(_account, _amount);\\n    }\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the minter .\\n    function mint(address _to, uint256 _amount) public virtual {\\n        require(minters[msg.sender], \\\"must have minter role to mint\\\");\\n        require(mintingAllowance[msg.sender] >= _amount, \\\"mint amount exceeds allowance\\\");\\n        require(totalSupply().add(_amount) <= _cap, \\\"mint amount exceeds cap\\\");\\n        mintingAllowance[msg.sender] = mintingAllowance[msg.sender].sub(_amount);\\n        _mint(_to, _amount);\\n    }\\n    /// @notice Add `_minter` . Must only be called by the owner .\\n    function addMinter(address _minter,uint256 _amount) public virtual onlyOwner {\\n        minters[_minter] = true;\\n        mintingAllowance[_minter] = _amount;\\n        emit MinterAdded(_minter);\\n    }\\n\\n    /// @notice Remove `_minter` . Must only be called by the owner .\\n    function removeMinter(address _minter) public virtual onlyOwner {\\n        minters[_minter] = false;\\n        mintingAllowance[_minter] = 0;\\n        emit MinterRemoved(_minter);\\n    }\\n\\n    /// @notice Increase minting allowance for minter` . Must only be called by the owner .\\n    function increaseMintingAllowance(address _minter, uint256 _addedValue) public virtual onlyOwner {\\n        uint256 currentMintingAllowance = mintingAllowance[_minter];\\n        mintingAllowance[_minter] = currentMintingAllowance.add(_addedValue);\\n        emit MintingAllowanceUpdated(_minter, currentMintingAllowance, currentMintingAllowance.add(_addedValue));\\n    }\\n\\n    /// @notice Decrease minting allowance for minter` . Must only be called by the owner .\\n    function decreaseMintingAllowance(address _minter, uint256 _subtractedValue) public virtual onlyOwner {\\n        uint256 currentMintingAllowance = mintingAllowance[_minter];\\n        mintingAllowance[_minter] = currentMintingAllowance.sub(_subtractedValue,\\\"decreased allowance below zero\\\");\\n        emit MintingAllowanceUpdated(_minter, currentMintingAllowance, currentMintingAllowance.sub(_subtractedValue));\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0x92ffcfeff2be3c98d74511b3d0bdaf4c34ba88c444b1df24568dfa67b92b9808\",\"license\":\"MIT\"},\"contracts/PKKTVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\"; \\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {Vault} from \\\"./libraries/Vault.sol\\\";  \\nimport {PoolData, UserData} from \\\"./libraries/SharedData.sol\\\";  \\nimport \\\"./PKKTToken.sol\\\";\\nimport \\\"./PKKTRewardManager.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\ncontract PKKTVault is PKKTRewardManager, AccessControlUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256; \\n    using Vault for Vault.VaultInfo;\\n    \\n    Vault.VaultInfo[] public vaultInfo;\\n\\n    bool public isSettelled; \\n \\n    mapping(uint256 => mapping(address => Vault.UserInfo)) public userInfo; \\n    \\n    mapping(uint256 => address[]) userAddresses;\\n\\n    mapping(uint256 => int256 ) public settlementResult;\\n    uint8 maxDecimals;\\n\\n    bytes32 public constant TRADER_ROLE = keccak256(\\\"TRADER_ROLE\\\");\\n\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n \\n    event Deposit(address indexed account, uint256 indexed vid, uint256 amount, bool fromWallet); \\n\\n    event InitiateWithdraw(address indexed account, uint256 indexed vid,uint256 amount);\\n    \\n    event CancelWithdraw(address indexed account, uint256 indexed vid, uint256 amount);\\n\\n    event Redeem(address indexed account, uint256 indexed vid, uint256 amount);\\n\\n    event CompleteWithdraw(address indexed account, uint256 indexed vid, uint256 amount);\\n \\n \\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /// @notice Initializes the contract with storage variables\\n    /// @param _pkktPerBlock total number of PKKT rewarded to users\\n    /// @param trader address of trader who manages settlements\\n    function initialize(PKKTToken _pkkt, uint256 _pkktPerBlock, uint256 _startBlock, address trader) public initializer {\\n        PKKTRewardManager.initialize(_pkkt, \\\"Vault\\\", _pkktPerBlock, _startBlock);\\n        AccessControlUpgradeable.__AccessControl_init();\\n        // Contract deployer will be able to grant and revoke trading role\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        // Address capable of initiating and finizalizing settlement\\n        _setupRole(TRADER_ROLE, trader);\\n        isSettelled = true;\\n    }\\n\\n    // Add a range of new underlyings to the vault. Can only be called by the owner.\\n    function addMany(Vault.VaultSettings[] memory _vaults, bool _withUpdate) external onlyOwner {\\n         for(uint256 i = 0; i < _vaults.length; i++) {\\n            IERC20  underlying = _vaults[i].underlying;\\n            require(!isAdded[address(underlying)], \\\"Vault already is added\\\"); \\n            //here to ensure it's a valid address\\n            uint256 underlyingSupply = underlying.balanceOf(address(this));\\n            require(underlyingSupply == 0, \\\"Vault should not be staked\\\");\\n        }  \\n        if (_withUpdate) {\\n            massUpdatePools();\\n        } \\n        for(uint256 i = 0; i <  _vaults.length; i++) {\\n            Vault.VaultSettings memory setting = _vaults[i];\\n            uint256 lastRewardBlock =\\n                block.number > startBlock ? block.number : startBlock; \\n            vaultInfo.push(\\n                        Vault.VaultInfo({\\n                            underlying: setting.underlying, \\n                            lastRewardBlock: lastRewardBlock,\\n                            decimals: setting.decimals,\\n                            accPKKTPerShare: 0, \\n                            totalPending: 0,\\n                            totalOngoing: 0,\\n                            totalRequesting: 0,\\n                            totalMatured: 0\\n                        })\\n                    );\\n            if (maxDecimals < setting.decimals) {\\n                maxDecimals = setting.decimals;\\n            }\\n            isAdded[address(setting.underlying)] = true;\\n        }         \\n    }\\n    // Add a new underlying  to the vault. Can only be called by the owner.\\n    // XXX DO NOT add the same underlying token more than once. Rewards will be messed up if you do.\\n    function add(Vault.VaultSettings memory _vault,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        require(!isAdded[address(_vault.underlying)], \\\"Vault already is added\\\");\\n        //here to ensure it's a valid address\\n        uint256 underlyingSupply = _vault.underlying.balanceOf(address(this));\\n        require(underlyingSupply == 0, \\\"Vault should not been stake\\\");\\n        \\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n  \\n\\n        uint256 lastRewardBlock =\\n            block.number > startBlock ? block.number : startBlock; \\n        vaultInfo.push(\\n                    Vault.VaultInfo({\\n                        underlying: _vault.underlying, \\n                        lastRewardBlock: lastRewardBlock,\\n                        decimals: _vault.decimals,\\n                        accPKKTPerShare: 0,\\n                        totalPending: 0,\\n                        totalOngoing: 0,\\n                        totalRequesting: 0,\\n                        totalMatured: 0\\n                    })\\n                );\\n        if (maxDecimals < _vault.decimals) {\\n            maxDecimals = _vault.decimals;\\n        }               \\n        isAdded[address(_vault.underlying)] = true;\\n    }\\n\\n\\n    /************************************************\\n     *  DEPOSIT & WITHDRAWALS\\n     ***********************************************/\\n\\n \\n    function deposit(uint256 _vid, uint256 _amount) external validatePoolById(_vid) {\\n        require(_amount > 0, \\\"!amount\\\");\\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vault.underlying).safeTransferFrom(msg.sender, address(this), _amount);\\n        if (!user.hasDeposit) {\\n            user.hasDeposit = true;\\n            userAddresses[_vid].push(msg.sender);\\n        }\\n        user.pendingAmount = user.pendingAmount.add(_amount); \\n        vault.totalPending = vault.totalPending.add(_amount);\\n        emit Deposit(msg.sender, _vid, _amount, true);\\n    }\\n  \\n \\n    function redeem(uint256 _vid, uint256 _amount) external validatePoolById(_vid) {\\n        require(_amount > 0, \\\"!amount\\\");\\n        _redeem(_vid, _amount, false);\\n    }\\n \\n    function maxRedeem(uint256 _vid) external validatePoolById(_vid) {\\n        _redeem(_vid, 0, true);\\n    }\\n\\n \\n    function _redeem(uint256 _vid, uint256 _amount, bool _isMax) internal {\\n        \\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \\n \\n        _amount = _isMax ? user.pendingAmount : _amount;\\n        if (_amount == 0) {\\n            return;\\n        }\\n        require(_amount <= user.pendingAmount, \\\"Exceeds available\\\");\\n\\n        user.pendingAmount = user.pendingAmount.sub(_amount);  \\n        vault.totalPending = vault.totalPending.sub(_amount);\\n        IERC20(vault.underlying).safeTransfer(msg.sender, _amount); \\n        \\n\\n        emit Redeem(msg.sender, _vid, _amount); \\n    }\\n  \\n    function initiateWithdraw(uint256 _vid, uint256 _amount) external validatePoolById(_vid)  {\\n        _initiateWithdraw(_vid, _amount, false);\\n   \\n    }\\n \\n    function maxInitiateWithdraw(uint256 _vid) external validatePoolById(_vid) {\\n        _initiateWithdraw(_vid, 0, true);\\n    }\\n\\n \\n    function _initiateWithdraw(uint256 _vid, uint256 _amount, bool _isMax) internal {\\n        require(_amount > 0, \\\"!amount\\\");\\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \\n\\n        uint256 maxAmountForRequest = user.ongoingAmount.sub(user.requestingAmount);\\n       \\n        _amount = _isMax ? maxAmountForRequest : _amount;\\n        if (_amount == 0) {\\n            return;\\n        }\\n        \\n        require(_amount <= maxAmountForRequest,\\\"Exceeds available\\\"); \\n        user.requestingAmount = user.requestingAmount.add(_amount);  \\n        vault.totalRequesting = vault.totalRequesting.add(_amount);\\n        emit InitiateWithdraw(msg.sender, _vid, _amount);\\n\\n    }\\n \\n    function cancelWithdraw(uint256 _vid, uint256 _amount) external validatePoolById(_vid) {\\n        _cancelWithdraw(_vid, _amount, false); \\n    }\\n \\n    function maxCancelWithdraw(uint256 _vid) external validatePoolById(_vid) {\\n        _cancelWithdraw(_vid, 0, true); \\n    }\\n \\n    function _cancelWithdraw(uint256 _vid, uint256 _amount, bool _isMax) internal {\\n        require(_amount > 0, \\\"!amount\\\");\\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \\n \\n       _amount = _isMax ? user.requestingAmount : _amount;\\n        if (_amount == 0) {\\n            return;\\n        }\\n        \\n        require(_amount <= user.requestingAmount,  \\\"Exceeds available\\\"); \\n        user.requestingAmount = user.requestingAmount.sub(_amount); \\n        vault.totalRequesting = vault.totalRequesting.sub(_amount);\\n        emit CancelWithdraw(msg.sender, _vid, _amount); \\n    }\\n\\n \\n    function completeWithdraw(uint256 _vid, uint256 _amount) external validatePoolById(_vid) {\\n        _completeWithdraw(_vid, _amount, false); \\n  \\n    }\\n \\n    function maxCompleteWithdraw(uint256 _vid) external validatePoolById(_vid) {\\n        _completeWithdraw(_vid, 0, true);\\n    }\\n \\n    function _completeWithdraw(uint256 _vid, uint256 _amount, bool _isMax) internal {\\n        require(isSettelled, \\\"Settlment not finished yet\\\");\\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \\n \\n        _amount = _isMax ? user.maturedAmount : _amount;\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        require(_amount <= user.maturedAmount, \\\"Exceeds available\\\");\\n    \\n        IERC20(vault.underlying).safeTransfer(msg.sender, _amount); \\n        \\n        user.maturedAmount = user.maturedAmount.sub(_amount); \\n        vault.totalMatured = vault.totalMatured.sub(_amount);\\n        emit CompleteWithdraw(msg.sender, _vid, _amount);\\n\\n    }\\n    \\n \\n    function redeposit(uint256 _vid, uint256 _amount) external validatePoolById(_vid) {\\n       \\n         _redeposit(_vid, _amount, false); \\n    }\\n\\n        \\n \\n    function maxRedeposit(uint256 _vid) external validatePoolById(_vid) {\\n         _redeposit(_vid, 0, true); \\n    } \\n \\n \\n    function _redeposit(uint256 _vid, uint256 _amount, bool _isMax) internal {\\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \\n \\n        _amount = _isMax ? user.maturedAmount : _amount;\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        require(_amount <= user.maturedAmount, \\\"Exceeds available\\\");\\n   \\n        user.pendingAmount = user.pendingAmount.add(_amount);\\n        user.maturedAmount = user.maturedAmount.sub(_amount); \\n        //todo:do we need totalPending?\\n        vault.totalPending = vault.totalPending.add(_amount);\\n        vault.totalMatured = vault.totalMatured.sub(_amount); \\n        emit Deposit(msg.sender, _vid, _amount, false); \\n    }\\n \\n\\n    /************************************************\\n     *  SETTLEMENT\\n     ***********************************************/\\n    function initiateSettlement(uint256 _pkktPerBlock, address target) external onlyRole(TRADER_ROLE) {\\n        massUpdatePools();\\n        isSettelled = false;\\n        uint256 vaultCount = vaultInfo.length; \\n        for(uint256 vid = 0; vid < vaultCount; vid++){\\n            Vault.VaultInfo storage vault = vaultInfo[vid];\\n            address[] storage addresses = userAddresses[vid];  \\n            mapping(address=>Vault.UserInfo) storage users = userInfo[vid];\\n            uint256 userCount = addresses.length;\\n            int256 diff = 0;\\n            uint256 totalOngoing = 0;\\n            uint256 totalMatured = 0;\\n            for (uint i=0; i < userCount; i++) {\\n                Vault.UserInfo storage user = users[addresses[i]]; \\n                diff = diff + int256(user.pendingAmount) - int256(user.requestingAmount); \\n                uint256 newUserOngoing = user.ongoingAmount.add(user.pendingAmount).sub(user.requestingAmount); //it must be possitive \\n                totalOngoing = totalOngoing.add(newUserOngoing);\\n                updateUserReward(vid, addresses[i],  \\n                    user.ongoingAmount, newUserOngoing, true); \\n                user.ongoingAmount = newUserOngoing;\\n                user.pendingAmount = 0;\\n                user.maturedAmount =  user.maturedAmount.add(user.requestingAmount);\\n                totalMatured = totalMatured.add(user.maturedAmount);\\n                user.requestingAmount = 0; \\n            }\\n            vault.totalOngoing = totalOngoing; \\n            vault.totalPending = 0;\\n            vault.totalRequesting = 0;\\n            vault.totalMatured  = totalMatured;\\n            settlementResult[vid] = diff; \\n        }\\n        if (_pkktPerBlock != pkktPerBlock) {\\n            setPKKTPerBlock(_pkktPerBlock);\\n        }\\n        bool allDone = true;\\n        for(uint256 vid = 0; vid < vaultCount; vid++){ \\n           int256 diff2 = settlementResult[vid];\\n           if (diff2 < 0) {\\n               allDone = false;\\n           }\\n           else if (diff2 > 0) {\\n               Vault.VaultInfo storage vault = vaultInfo[vid];\\n               IERC20(vault.underlying).safeTransfer(address(target), uint256(diff2)); \\n           }\\n        }\\n        if (allDone) {\\n            for(uint256 vid = 0; vid < vaultCount; vid++){  \\n                settlementResult[vid] = 0;\\n            }\\n            isSettelled = true;\\n        }\\n    }\\n\\n     \\n    function finishSettlement() external onlyRole(TRADER_ROLE) {\\n        require(!isSettelled, \\\"Settlement already finished\\\");\\n        uint256 length = vaultInfo.length;\\n        for (uint256 vid = 0; vid < length; vid++) {\\n           Vault.VaultInfo memory vault = vaultInfo[vid];\\n           //check if the totalMatured is fullfilled or not\\n           require(IERC20(vault.underlying).balanceOf(address(this)) >=  vault.totalMatured, \\\"Matured amount not fullfilled\\\");\\n        }\\n        for (uint256 vid = 0; vid < length; vid++) {\\n            settlementResult[vid] = 0;\\n        }\\n        isSettelled = true;\\n    }\\n\\n    //Update number of pkkt per block \\n    function setPKKTPerBlock(uint256 _pkktPerBlock) public override {\\n        require(hasRole(TRADER_ROLE, msg.sender) || owner() == msg.sender, \\\"Only the owner or trader can set PKKT per block.\\\");\\n        massUpdatePools();\\n        pkktPerBlock = _pkktPerBlock;\\n    }\\n\\n    function poolLength() public override view returns (uint256) {\\n        return vaultInfo.length;\\n    }\\n    \\n \\n\\n    function _updatePool(uint256 _pid, uint256 _accPKKTPerShare) internal override {\\n\\n        Vault.VaultInfo storage vault = vaultInfo[_pid];\\n        vault.lastRewardBlock = block.number;\\n         \\n        if (_accPKKTPerShare > 0) { \\n           vault.accPKKTPerShare = _accPKKTPerShare;\\n        }\\n    }\\n\\n\\n    function _getPoolData(uint256 _poolId, bool _getShare) internal override view returns(PoolData.Data memory){\\n        Vault.VaultInfo storage vault = vaultInfo[_poolId];  \\n        return PoolData.Data({\\n            lastRewardBlock: vault.lastRewardBlock,\\n            accPKKTPerShare: vault.accPKKTPerShare, \\n            shareAmount: _getShare ? vault.totalOngoing : 0,\\n            id: _poolId\\n        });\\n    }\\n\\n    function _getUserData(uint256 _poolId, address _userAddress) internal override view returns (UserData.Data memory) { \\n        Vault.UserInfo storage user = userInfo[_poolId][_userAddress]; \\n        return UserData.Data({\\n            shareAmount: user.ongoingAmount,\\n            rewardDebt: user.rewardDebt,\\n            pendingReward: user.pendingReward\\n        });\\n    }\\n\\n    function _getPoolPercentage(PoolData.Data memory _poolData) internal override view returns(uint256) {\\n         Vault.VaultInfo storage vault = vaultInfo[_poolData.id];    \\n         return vault.getShare(maxDecimals).mul(normalizer).div(getTotalShare());\\n    }\\n\\n    \\n    function _updateUserRewardDebt(uint256 _poolId, address _userAddress, uint256 _newValue) internal override {\\n         Vault.UserInfo storage user = userInfo[_poolId][_userAddress];\\n         user.rewardDebt = _newValue;\\n    }\\n    function  _updateUserPendingReward(uint256 _poolId, address _userAddress, uint256 _newValue) internal override{\\n         Vault.UserInfo storage user = userInfo[_poolId][_userAddress];\\n         user.pendingReward = _newValue;\\n    }\\n \\n\\n    function getTotalShare() private view returns(uint256) {\\n       uint256 totalShares = 0;\\n       uint256 vaultCount = vaultInfo.length;\\n       for(uint256 vid = 0; vid < vaultCount; vid++){\\n           Vault.VaultInfo storage vault = vaultInfo[vid]; \\n           totalShares = totalShares.add(vault.getShare(maxDecimals));\\n       }\\n       //console.log(\\\"TotalShare: %d\\\", totalShares);\\n       return totalShares;\\n    }\\n}\\n\",\"keccak256\":\"0xbba41b6a50312f0cb6e3487d1d9c00e0f8221aa63938c0bdced7411893c5a440\",\"license\":\"MIT\"},\"contracts/interfaces/IClaimable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.4;\\n\\ninterface IClaimable {\\n    function harvestAllPools() external;\\n}\\n\",\"keccak256\":\"0x00fee5b22f7783c4f81faa3c37c5b9963d564fb3d2fa285a7e9d24182239f571\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SharedData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n \\nlibrary PoolData { \\n    // Info of each user.\\n    struct Data { \\n        uint256 lastRewardBlock;\\n        uint256 accPKKTPerShare;\\n        uint256 shareAmount; \\n        uint256 id;\\n    }\\n \\n}\\n\\nlibrary UserData {\\n    struct Data {\\n      uint256 shareAmount;\\n      uint256 pendingReward;\\n      uint256 rewardDebt;\\n    }\\n}\\n\",\"keccak256\":\"0xd78e1a01e0b0f5143074901143130661cefd87e7b0586177d839e2298817277c\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Utils { \\n     \\n      function StringConcat(bytes memory _base, bytes memory _value) internal pure returns (string memory) {\\n        string memory _tmpValue = new string(_base.length + _value.length);\\n        bytes memory _newValue = bytes(_tmpValue);\\n\\n        uint i;\\n        uint j;\\n\\n        for(i=0; i<_base.length; i++) {\\n            _newValue[j++] = _base[i];\\n        }\\n\\n        for(i=0; i<_value.length; i++) {\\n            _newValue[j++] = _value[i++];\\n        }\\n\\n        return string(_newValue);\\n    }\\n\\n    function Uint8Sub(uint8 a, uint8 b) internal pure returns (uint8) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n \\n\\n}\",\"keccak256\":\"0xbf6fa1647a1adccfe3d98608754aa1c15f5910299b6d48798f6931874d451ee9\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n \\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; \\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport './Utils.sol';\\n\\nlibrary Vault { \\n    \\n    using SafeMath for uint256;\\n\\n    struct UserInfo {\\n        uint256 pendingAmount;  \\n        uint256 ongoingAmount;   \\n        uint256 requestingAmount;\\n        uint256 maturedAmount; \\n        uint256 pendingPKKTReward;  \\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 pendingReward;// Reward but not harvest\\n        //\\n        //   pending reward = (user.amount * pool.accPKKTPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accPKKTPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n        bool hasDeposit;\\n    } \\n \\n    struct VaultInfo {   \\n        uint256 lastRewardBlock; // Last block number that PKKTs distribution occurs.\\n        uint256 accPKKTPerShare; // Accumulated PKKTs per share, times 1e12. See below.\\n        uint256 totalPending;\\n        uint256 totalOngoing;\\n        uint256 totalRequesting;\\n        uint256 totalMatured;\\n      \\n        // the underlying token: usdt/usdc/dai/etc.\\n        IERC20 underlying;\\n        uint8 decimals;\\n    }\\n    \\n    function getShare(VaultInfo storage _vault, uint8 _maxDecimals) external view returns(uint256) {\\n        uint8 extraDecimals = Utils.Uint8Sub(_maxDecimals, _vault.decimals);\\n        if (extraDecimals > 0) {\\n            return _vault.totalOngoing.mul(10 ** uint256(extraDecimals));\\n        }\\n        else {\\n            return _vault.totalOngoing;\\n        }\\n    }\\n\\n \\n    struct VaultSettings {\\n        \\n        IERC20 underlying; \\n        uint8 decimals;\\n    }\\n\\n     \\n}\\n\",\"keccak256\":\"0x5c7daf44bcd47d981042aa5854db4f92b502c0886d08f80bbf4a41e0cb55292c\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613d48806100206000396000f3fe608060405234801561001057600080fd5b50600436106102735760003560e01c80638da5cb5b11610151578063c8914edb116100c3578063e2bbb15811610087578063e2bbb15814610637578063f09819081461064a578063f0a56fc81461065d578063f2fde38b14610672578063f77c49a614610685578063fa1f87d51461068e57600080fd5b8063c8914edb146105bb578063ce234106146105de578063d3e8b4a3146105fe578063d547741f14610611578063ddc632621461062457600080fd5b80639e3d87cd116101155780639e3d87cd14610563578063a10de6d614610576578063a217fddf14610589578063a28c525b14610591578063a919987b146105a4578063b08480d4146105b357600080fd5b80638da5cb5b1461043c578063905538e61461044d57806391d148541461045a578063929060d81461046d57806393f1a40b146104c757600080fd5b806336568abe116101ea578063630b5ba1116101ae578063630b5ba1146103e057806370980a5b146103e8578063715018a6146103fb57806373be9aec1461040357806379f1d067146104165780637cbc23731461042957600080fd5b806336568abe1461038b578063456afc481461039e57806348cd4cb1146103b15780634e6e9fdd146103ba57806351eb05a6146103cd57600080fd5b80631232a1691161023c5780631232a16914610309578063195a9dbd1461031c578063248a9ca31461032f5780632aabff15146103525780632f2ff15d1461036557806335ba2ba81461037857600080fd5b80625919c71461027857806301ffc9a71461028d57806305a62b5b146102b55780630778674e146102d6578063081e3eda14610301575b600080fd5b61028b610286366004613919565b610696565b005b6102a061029b366004613864565b610795565b60405190151581526020015b60405180910390f35b6102c86102c3366004613835565b6107cc565b6040519081526020016102ac565b6068546102e9906001600160a01b031681565b6040516001600160a01b0390911681526020016102ac565b60ce546102c8565b61028b610317366004613919565b6108a2565b61028b61032a36600461381d565b6108e9565b6102c861033d36600461381d565b6000908152609c602052604090206001015490565b61028b61036036600461376e565b610935565b61028b610373366004613835565b610983565b61028b6103863660046138d5565b6109a9565b61028b610399366004613835565b610d13565b61028b6103ac36600461381d565b610d8d565b6102c860695481565b61028b6103c8366004613919565b610dd5565b61028b6103db36600461381d565b610e1c565b61028b610e9a565b61028b6103f6366004613835565b610ecb565b61028b6111da565b61028b61041136600461381d565b611210565b61028b61042436600461381d565b611258565b61028b610437366004613919565b611306565b6033546001600160a01b03166102e9565b60cf546102a09060ff1681565b6102a0610468366004613835565b61136d565b61048061047b36600461381d565b611398565b604080519889526020890197909752958701949094526060860192909252608085015260a08401526001600160a01b031660c083015260ff1660e0820152610100016102ac565b6105266104d5366004613835565b60d06020908152600092835260408084209091529082529020805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909160ff1688565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e0820152610100016102ac565b61028b61057136600461388c565b6113fc565b61028b61058436600461381d565b6114cc565b6102c8600081565b61028b61059f366004613919565b611514565b6102c8670de0b6b3a764000081565b61028b61155b565b6102a06105c936600461369e565b60666020526000908152604090205460ff1681565b6102c86105ec36600461381d565b60d26020526000908152604090205481565b61028b61060c36600461381d565b611789565b61028b61061f366004613835565b6117d1565b6102c861063236600461381d565b6117f7565b61028b610645366004613919565b611a45565b61028b6106583660046136ba565b611bba565b6102c8600080516020613cf383398151915281565b61028b61068036600461369e565b611fbc565b6102c860655481565b61028b612057565b816106a060ce5490565b811061075c606780546106b290613c53565b80601f01602080910402602001604051908101604052809291908181526020018280546106de90613c53565b801561072b5780601f106107005761010080835404028352916020019161072b565b820191906000526020600020905b81548152906001019060200180831161070e57829003601f168201915b50505050506040518060400160405280600e81526020016d08191bd95cdb89dd08195e1a5cdd60921b815250612089565b906107835760405162461bcd60e51b815260040161077a91906139cb565b60405180910390fd5b5061079083836000612226565b505050565b60006001600160e01b03198216637965db0b60e01b14806107c657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000826107d860ce5490565b81106107ea606780546106b290613c53565b906108085760405162461bcd60e51b815260040161077a91906139cb565b506000610816856001612330565b9050600061082486866123d0565b602083015183519192509043118015610841575060008360400151115b156108525761084f83612441565b90505b61089761088c8360400151610886670de0b6b3a764000061088086886000015161249790919063ffffffff16565b906124a3565b906124af565b6020840151906124bb565b979650505050505050565b816108ac60ce5490565b81106108be606780546106b290613c53565b906108dc5760405162461bcd60e51b815260040161077a91906139cb565b50610790838360006124c7565b806108f360ce5490565b8110610905606780546106b290613c53565b906109235760405162461bcd60e51b815260040161077a91906139cb565b5061093182600060016125d9565b5050565b805160005b818110156107905761097283828151811061096557634e487b7160e01b600052603260045260246000fd5b60200260200101516117f7565b5061097c81613c88565b905061093a565b6000828152609c602052604090206001015461099f813361272e565b6107908383612792565b6033546001600160a01b031633146109d35760405162461bcd60e51b815260040161077a90613a77565b81516001600160a01b031660009081526066602052604090205460ff1615610a365760405162461bcd60e51b815260206004820152601660248201527515985d5b1d08185b1c9958591e481a5cc8185919195960521b604482015260640161077a565b81516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610a7957600080fd5b505afa158015610a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab19190613901565b90508015610b015760405162461bcd60e51b815260206004820152601b60248201527f5661756c742073686f756c64206e6f74206265656e207374616b650000000000604482015260640161077a565b8115610b0f57610b0f610e9a565b60006069544311610b2257606954610b24565b435b604080516101008101825282815260006020808301828152938301828152606084018381526080850184815260a086018581528c516001600160a01b0390811660c08901908152958e01805160ff90811660e08b0190815260ce80546001810182559a52995160079099027fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12a81019990995599517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12b89015594517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12c88015592517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12d87015590517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12e860155517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12f85015591517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d130909301805494518616600160a01b026001600160a81b03199095169390921692909217929092179091555160d354929350811691161015610cea57602084015160d3805460ff191660ff9092169190911790555b505090516001600160a01b03166000908152606660205260409020805460ff1916600117905550565b6001600160a01b0381163314610d835760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161077a565b6109318282612818565b80610d9760ce5490565b8110610da9606780546106b290613c53565b90610dc75760405162461bcd60e51b815260040161077a91906139cb565b50610931826000600161287f565b81610ddf60ce5490565b8110610df1606780546106b290613c53565b90610e0f5760405162461bcd60e51b815260040161077a91906139cb565b50610790838360006125d9565b80610e2660ce5490565b8110610e38606780546106b290613c53565b90610e565760405162461bcd60e51b815260040161077a91906139cb565b506000610e64836001612330565b80519091504311610e7457505050565b6040810151610e88576107908360006129a5565b61079083610e9583612441565b6129a5565b6000610ea560ce5490565b905060005b8181101561093157610ebb81610e1c565b610ec481613c88565b9050610eaa565b600080516020613cf3833981519152610ee4813361272e565b610eec610e9a565b60cf805460ff1916905560ce5460005b818110156110e457600060ce8281548110610f2757634e487b7160e01b600052603260045260246000fd5b6000918252602080832085845260d18252604080852060d0909352842082546007909402909101945090929091908080805b8481101561109d576000866000898481548110610f8657634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190206002810154815491925090610fbf9087613b22565b610fc99190613bba565b94506000610ff08260020154610886846000015485600101546124bb90919063ffffffff16565b9050610ffc85826124bb565b945061104d8b8a858154811061102257634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b031684600101548460016129eb565b60018201819055600082556002820154600383015461106b916124bb565b6003830181905561107d9085906124bb565b60006002909301929092555091508061109581613c88565b915050610f59565b5060038701919091556000600287018190556004870181905560059096015585855260d2602052604090942093909355508291506110dc905081613c88565b915050610efc565b5060655484146110f7576110f784611258565b600160005b8281101561119157600081815260d2602052604081205490811215611124576000925061117e565b600081131561117e57600060ce838154811061115057634e487b7160e01b600052603260045260246000fd5b60009182526020909120600790910201600681015490915061117c906001600160a01b03168884612af1565b505b508061118981613c88565b9150506110fc565b5080156111d35760005b828110156111c457600081815260d26020526040812055806111bc81613c88565b91505061119b565b5060cf805460ff191660011790555b5050505050565b6033546001600160a01b031633146112045760405162461bcd60e51b815260040161077a90613a77565b61120e6000612b54565b565b8061121a60ce5490565b811061122c606780546106b290613c53565b9061124a5760405162461bcd60e51b815260040161077a91906139cb565b506109318260006001612226565b611270600080516020613cf38339815191523361136d565b806112945750336112896033546001600160a01b031690565b6001600160a01b0316145b6112f95760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7920746865206f776e6572206f72207472616465722063616e2073657460448201526f102825a5aa103832b910313637b1b59760811b606482015260840161077a565b611301610e9a565b606555565b8161131060ce5490565b8110611322606780546106b290613c53565b906113405760405162461bcd60e51b815260040161077a91906139cb565b50600082116113615760405162461bcd60e51b815260040161077a90613aac565b61079083836000612ba6565b6000918252609c602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60ce81815481106113a857600080fd5b6000918252602090912060079091020180546001820154600283015460038401546004850154600586015460069096015494965092949193909291906001600160a01b03811690600160a01b900460ff1688565b600054610100900460ff1680611415575060005460ff16155b6114315760405162461bcd60e51b815260040161077a90613a29565b600054610100900460ff16158015611453576000805461ffff19166101011790555b61147c856040518060400160405280600581526020016415985d5b1d60da1b8152508686612c9d565b611484612d92565b61148f600033612e15565b6114a7600080516020613cf383398151915283612e15565b60cf805460ff1916600117905580156111d3576000805461ff00191690555050505050565b806114d660ce5490565b81106114e8606780546106b290613c53565b906115065760405162461bcd60e51b815260040161077a91906139cb565b506109318260006001612ba6565b8161151e60ce5490565b8110611530606780546106b290613c53565b9061154e5760405162461bcd60e51b815260040161077a91906139cb565b506107908383600061287f565b600080516020613cf3833981519152611574813361272e565b60cf5460ff16156115c75760405162461bcd60e51b815260206004820152601b60248201527f536574746c656d656e7420616c72656164792066696e69736865640000000000604482015260640161077a565b60ce5460005b8181101561174a57600060ce82815481106115f857634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101008101825260079390930290910180548352600181015493830193909352600283015482820152600383015460608301526004808401546080840152600584015460a084018190526006909401546001600160a01b03811660c08501819052600160a01b90910460ff1660e085015291516370a0823160e01b81523091810191909152919350906370a082319060240160206040518083038186803b1580156116b157600080fd5b505afa1580156116c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e99190613901565b10156117375760405162461bcd60e51b815260206004820152601d60248201527f4d61747572656420616d6f756e74206e6f742066756c6c66696c6c6564000000604482015260640161077a565b508061174281613c88565b9150506115cd565b5060005b8181101561177757600081815260d260205260408120558061176f81613c88565b91505061174e565b505060cf805460ff1916600117905550565b8061179360ce5490565b81106117a5606780546106b290613c53565b906117c35760405162461bcd60e51b815260040161077a91906139cb565b5061093182600060016124c7565b6000828152609c60205260409020600101546117ed813361272e565b6107908383612818565b60008161180360ce5490565b8110611815606780546106b290613c53565b906118335760405162461bcd60e51b815260040161077a91906139cb565b5061183d83610e1c565b600061184a846000612330565b9050600061185885336123d0565b9050600081602001519050600061189e826118988560400151610886670de0b6b3a76400006108808a602001518a6000015161249790919063ffffffff16565b906124bb565b600088815260d060209081526040808320338452909152812060060155905080156119ad576068546040516340c10f1960e01b8152306004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561190f57600080fd5b505af1158015611923573d6000803e3d6000fd5b505060685460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b03909116925063a9059cbb9150604401602060405180830381600087803b15801561197357600080fd5b505af1158015611987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ab9190613801565b505b611a0287336119d9670de0b6b3a76400006108808960200151896000015161249790919063ffffffff16565b600092835260d0602090815260408085206001600160a01b039094168552929052912060050155565b604051818152879033907f16c3bcc96c5457e635fa03516bd0d9e0ac0dc9f66a71076c97f865793e44fe449060200160405180910390a394505050505b50919050565b81611a4f60ce5490565b8110611a61606780546106b290613c53565b90611a7f5760405162461bcd60e51b815260040161077a91906139cb565b5060008211611aa05760405162461bcd60e51b815260040161077a90613aac565b600060ce8481548110611ac357634e487b7160e01b600052603260045260246000fd5b6000918252602080832087845260d0825260408085203380875293529093206006600790930290930191820154919350611b08916001600160a01b0316903087612e1f565b600781015460ff16611b535760078101805460ff19166001908117909155600086815260d160209081526040822080549384018155825290200180546001600160a01b031916331790555b8054611b5f90856124bb565b81556002820154611b7090856124bb565b60028301556040805185815260016020820152869133917f6dbb6056a2fff319358e6dd7d0d72cb3baa992cdcc7e120fb0a32cd1601840e591015b60405180910390a35050505050565b6033546001600160a01b03163314611be45760405162461bcd60e51b815260040161077a90613a77565b60005b8251811015611d64576000838281518110611c1257634e487b7160e01b600052603260045260246000fd5b602090810291909101810151516001600160a01b0381166000908152606690925260409091205490915060ff1615611c855760405162461bcd60e51b815260206004820152601660248201527515985d5b1d08185b1c9958591e481a5cc8185919195960521b604482015260640161077a565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611cc757600080fd5b505afa158015611cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cff9190613901565b90508015611d4f5760405162461bcd60e51b815260206004820152601a60248201527f5661756c742073686f756c64206e6f74206265207374616b6564000000000000604482015260640161077a565b50508080611d5c90613c88565b915050611be7565b508015611d7357611d73610e9a565b60005b8251811015610790576000838281518110611da157634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006069544311611dbe57606954611dc0565b435b604080516101008101825282815260006020808301828152938301828152606084018381526080850184815260a086018581528a516001600160a01b0390811660c08901908152958c01805160ff90811660e08b0190815260ce80546001810182559a52995160079099027fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12a81019990995599517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12b89015594517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12c88015592517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12d87015590517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12e860155517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12f85015591517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d130909301805494518616600160a01b026001600160a81b03199095169390921692909217929092179091555160d354929350811691161015611f8657602082015160d3805460ff191660ff9092169190911790555b50516001600160a01b03166000908152606660205260409020805460ff1916600117905580611fb481613c88565b915050611d76565b6033546001600160a01b03163314611fe65760405162461bcd60e51b815260040161077a90613a77565b6001600160a01b03811661204b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161077a565b61205481612b54565b50565b600061206260ce5490565b905060005b8181101561093157612078816117f7565b5061208281613c88565b9050612067565b606060008251845161209b9190613b63565b67ffffffffffffffff8111156120c157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120eb576020820181803683370190505b509050806000805b865182101561217f5786828151811061211c57634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916838261213681613c88565b93508151811061215657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508161217781613c88565b9250506120f3565b600091505b855182101561221b57858261219881613c88565b9350815181106121b857634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191683826121d281613c88565b9350815181106121f257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508161221381613c88565b925050612184565b509095945050505050565b600082116122465760405162461bcd60e51b815260040161077a90613aac565b600060ce848154811061226957634e487b7160e01b600052603260045260246000fd5b6000918252602080832087845260d0825260408085203386529092529220600790910290910191508261229c57836122a2565b80600201545b9350836122b0575050505050565b80600201548411156122d45760405162461bcd60e51b815260040161077a906139fe565b60028101546122e390856124af565b600282015560048201546122f790856124af565b6004830155604051848152859033907f39e2e01794006bc1f63835af5c05db790beca4bfb40de3f02cc3ddf22dccc0fb90602001611bab565b61235b6040518060800160405280600081526020016000815260200160008152602001600081525090565b600060ce848154811061237e57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201905060405180608001604052808260000154815260200182600101548152602001846123b95760006123bf565b82600301545b815260200185905291505092915050565b6123f460405180606001604052806000815260200160008152602001600081525090565b50600091825260d0602090815260408084206001600160a01b0393909316845291815291819020815160608101835260018201548152600682015493810193909352600501549082015290565b60008061246961245084612e5d565b60655485516124639190829043906124af565b90612497565b90506124906124858460400151836124a390919063ffffffff16565b6020850151906124bb565b9392505050565b60006124908284613b9b565b60006124908284613b7b565b60006124908284613bf9565b60006124908284613b63565b600060ce84815481106124ea57634e487b7160e01b600052603260045260246000fd5b6000918252602080832087845260d0825260408085203386529092529220600790910290910191508261251d5783612523565b80600301545b935083612531575050505050565b80600301548411156125555760405162461bcd60e51b815260040161077a906139fe565b805461256190856124bb565b8155600381015461257290856124af565b6003820155600282015461258690856124bb565b6002830155600582015461259a90856124af565b60058301556040805185815260006020820152869133917f6dbb6056a2fff319358e6dd7d0d72cb3baa992cdcc7e120fb0a32cd1601840e59101611bab565b60cf5460ff1661262b5760405162461bcd60e51b815260206004820152601a60248201527f536574746c6d656e74206e6f742066696e697368656420796574000000000000604482015260640161077a565b600060ce848154811061264e57634e487b7160e01b600052603260045260246000fd5b6000918252602080832087845260d082526040808520338652909252922060079091029091019150826126815783612687565b80600301545b935083612695575050505050565b80600301548411156126b95760405162461bcd60e51b815260040161077a906139fe565b60068201546126d2906001600160a01b03163386612af1565b60038101546126e190856124af565b600382015560058201546126f590856124af565b6005830155604051848152859033907fa7952fcf1aa05ca494ca81b36018d749ac933a4f76e87ccdcd31cc6a202a785e90602001611bab565b612738828261136d565b61093157612750816001600160a01b03166014612f3e565b61275b836020612f3e565b60405160200161276c929190613956565b60408051601f198184030181529082905262461bcd60e51b825261077a916004016139cb565b61279c828261136d565b610931576000828152609c602090815260408083206001600160a01b03851684529091529020805460ff191660011790556127d43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612822828261136d565b15610931576000828152609c602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000821161289f5760405162461bcd60e51b815260040161077a90613aac565b600060ce84815481106128c257634e487b7160e01b600052603260045260246000fd5b6000918252602080832087845260d08252604080852033865290925290832060028101546001820154600790940290920194509291612900916124af565b90508361290d578461290f565b805b94508461291e57505050505050565b8085111561293e5760405162461bcd60e51b815260040161077a906139fe565b600282015461294d90866124bb565b6002830155600483015461296190866124bb565b6004840155604051858152869033907f0c53c82ad07e2d592d88ece3b066777dd60f1118e2a081b380efc4358f0d9e2a9060200160405180910390a3505050505050565b600060ce83815481106129c857634e487b7160e01b600052603260045260246000fd5b600091825260209091204360079092020190815590508115610790576001015550565b846129f560ce5490565b8110612a07606780546106b290613c53565b90612a255760405162461bcd60e51b815260040161077a91906139cb565b506000612a33876000612330565b90506000612a4188886123d0565b90508315612abf576000612a768260400151610886670de0b6b3a764000061088087602001518c61249790919063ffffffff16565b9050612abd8989612a948486602001516124bb90919063ffffffff16565b600092835260d0602090815260408085206001600160a01b039094168552929052912060060155565b505b612ae788886119d9670de0b6b3a764000061088087602001518b61249790919063ffffffff16565b5050505050505050565b6040516001600160a01b03831660248201526044810182905261079090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613120565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060ce8481548110612bc957634e487b7160e01b600052603260045260246000fd5b6000918252602080832087845260d08252604080852033865290925292206007909102909101915082612bfc5783612bff565b80545b935083612c0d575050505050565b8054841115612c2e5760405162461bcd60e51b815260040161077a906139fe565b8054612c3a90856124af565b81556002820154612c4b90856124af565b60028301556006820154612c69906001600160a01b03163386612af1565b604051848152859033907fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92990602001611bab565b600054610100900460ff1680612cb6575060005460ff16155b612cd25760405162461bcd60e51b815260040161077a90613a29565b600054610100900460ff16158015612cf4576000805461ffff19166101011790555b6001600160a01b038516612d395760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b604482015260640161077a565b612d416131f2565b606880546001600160a01b0319166001600160a01b03871617905560658390558351612d7490606790602087019061358d565b50606982905580156111d3576000805461ff00191690555050505050565b600054610100900460ff1680612dab575060005460ff16155b612dc75760405162461bcd60e51b815260040161077a90613a29565b600054610100900460ff16158015612de9576000805461ffff19166101011790555b612df1613259565b612df9613259565b612e01613259565b8015612054576000805461ff001916905550565b6109318282612792565b6040516001600160a01b0380851660248301528316604482015260648101829052612e579085906323b872dd60e01b90608401612b1d565b50505050565b60008060ce836060015181548110612e8557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702019050612490612ea06132c3565b60d35460405163623d91e360e11b81526004810185905260ff909116602482015261088090670de0b6b3a76400009073C4064A7394AB5fbe6D66c162ec9F43F13f1fdFfa9063c47b23c69060440160206040518083038186803b158015612f0657600080fd5b505af4158015612f1a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124639190613901565b60606000612f4d836002613b9b565b612f58906002613b63565b67ffffffffffffffff811115612f7e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612fa8576020820181803683370190505b509050600360fc1b81600081518110612fd157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061300e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000613032846002613b9b565b61303d906001613b63565b90505b60018111156130d1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061307f57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106130a357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936130ca81613c3c565b9050613040565b5083156124905760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161077a565b6000613175826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166133c59092919063ffffffff16565b80519091501561079057808060200190518101906131939190613801565b6107905760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161077a565b600054610100900460ff168061320b575060005460ff16155b6132275760405162461bcd60e51b815260040161077a90613a29565b600054610100900460ff16158015613249576000805461ffff19166101011790555b613251613259565b612e016133dc565b600054610100900460ff1680613272575060005460ff16155b61328e5760405162461bcd60e51b815260040161077a90613a29565b600054610100900460ff16158015612e01576000805461ffff19166101011790558015612054576000805461ff001916905550565b60ce546000908190815b818110156133bd57600060ce82815481106132f857634e487b7160e01b600052603260045260246000fd5b6000918252602090912060d35460405163623d91e360e11b815260079093029091016004830181905260ff909116602483015291506133a79073C4064A7394AB5fbe6D66c162ec9F43F13f1fdFfa9063c47b23c69060440160206040518083038186803b15801561336857600080fd5b505af415801561337c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a09190613901565b85906124bb565b93505080806133b590613c88565b9150506132cd565b509092915050565b60606133d4848460008561343c565b949350505050565b600054610100900460ff16806133f5575060005460ff16155b6134115760405162461bcd60e51b815260040161077a90613a29565b600054610100900460ff16158015613433576000805461ffff19166101011790555b612e0133612b54565b60608247101561349d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161077a565b843b6134eb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161077a565b600080866001600160a01b03168587604051613507919061393a565b60006040518083038185875af1925050503d8060008114613544576040519150601f19603f3d011682016040523d82523d6000602084013e613549565b606091505b509150915061089782828660608315613563575081612490565b8251156135735782518084602001fd5b8160405162461bcd60e51b815260040161077a91906139cb565b82805461359990613c53565b90600052602060002090601f0160209004810192826135bb5760008555613601565b82601f106135d457805160ff1916838001178555613601565b82800160010185558215613601579182015b828111156136015782518255916020019190600101906135e6565b5061360d929150613611565b5090565b5b8082111561360d5760008155600101613612565b803561363181613ce4565b919050565b600060408284031215613647578081fd5b6040516040810181811067ffffffffffffffff8211171561366a5761366a613cb9565b604052905080823561367b81613ccf565b8152602083013560ff8116811461369157600080fd5b6020919091015292915050565b6000602082840312156136af578081fd5b813561249081613ccf565b60008060408084860312156136cd578182fd5b833567ffffffffffffffff8111156136e3578283fd5b8401601f810186136136f3578283fd5b8035602061370861370383613afe565b613acd565b8083825282820191508285018a848660061b8801011115613727578788fd5b8795505b848610156137515761373d8b82613636565b83526001959095019491830191860161372b565b5096506137619050878201613626565b9450505050509250929050565b60006020808385031215613780578182fd5b823567ffffffffffffffff811115613796578283fd5b8301601f810185136137a6578283fd5b80356137b461370382613afe565b80828252848201915084840188868560051b87010111156137d3578687fd5b8694505b838510156137f55780358352600194909401939185019185016137d7565b50979650505050505050565b600060208284031215613812578081fd5b815161249081613ce4565b60006020828403121561382e578081fd5b5035919050565b60008060408385031215613847578182fd5b82359150602083013561385981613ccf565b809150509250929050565b600060208284031215613875578081fd5b81356001600160e01b031981168114612490578182fd5b600080600080608085870312156138a1578182fd5b84356138ac81613ccf565b9350602085013592506040850135915060608501356138ca81613ccf565b939692955090935050565b600080606083850312156138e7578182fd5b6138f18484613636565b9150604083013561385981613ce4565b600060208284031215613912578081fd5b5051919050565b6000806040838503121561392b578182fd5b50508035926020909101359150565b6000825161394c818460208701613c10565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161398e816017850160208801613c10565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516139bf816028840160208801613c10565b01602801949350505050565b60208152600082518060208401526139ea816040850160208701613c10565b601f01601f19169190910160400192915050565b6020808252601190820152704578636565647320617661696c61626c6560781b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526007908201526608585b5bdd5b9d60ca1b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613af657613af6613cb9565b604052919050565b600067ffffffffffffffff821115613b1857613b18613cb9565b5060051b60200190565b600080821280156001600160ff1b0384900385131615613b4457613b44613ca3565b600160ff1b8390038412811615613b5d57613b5d613ca3565b50500190565b60008219821115613b7657613b76613ca3565b500190565b600082613b9657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613bb557613bb5613ca3565b500290565b60008083128015600160ff1b850184121615613bd857613bd8613ca3565b6001600160ff1b0384018313811615613bf357613bf3613ca3565b50500390565b600082821015613c0b57613c0b613ca3565b500390565b60005b83811015613c2b578181015183820152602001613c13565b83811115612e575750506000910152565b600081613c4b57613c4b613ca3565b506000190190565b600181811c90821680613c6757607f821691505b60208210811415611a3f57634e487b7160e01b600052602260045260246000fd5b6000600019821415613c9c57613c9c613ca3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461205457600080fd5b801515811461205457600080fdfefacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b0731941a264697066735822122095eb9bd007691706dce1c1c5c6f49b89af79dcafb61d490b582c237523bf5b7c64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102735760003560e01c80638da5cb5b11610151578063c8914edb116100c3578063e2bbb15811610087578063e2bbb15814610637578063f09819081461064a578063f0a56fc81461065d578063f2fde38b14610672578063f77c49a614610685578063fa1f87d51461068e57600080fd5b8063c8914edb146105bb578063ce234106146105de578063d3e8b4a3146105fe578063d547741f14610611578063ddc632621461062457600080fd5b80639e3d87cd116101155780639e3d87cd14610563578063a10de6d614610576578063a217fddf14610589578063a28c525b14610591578063a919987b146105a4578063b08480d4146105b357600080fd5b80638da5cb5b1461043c578063905538e61461044d57806391d148541461045a578063929060d81461046d57806393f1a40b146104c757600080fd5b806336568abe116101ea578063630b5ba1116101ae578063630b5ba1146103e057806370980a5b146103e8578063715018a6146103fb57806373be9aec1461040357806379f1d067146104165780637cbc23731461042957600080fd5b806336568abe1461038b578063456afc481461039e57806348cd4cb1146103b15780634e6e9fdd146103ba57806351eb05a6146103cd57600080fd5b80631232a1691161023c5780631232a16914610309578063195a9dbd1461031c578063248a9ca31461032f5780632aabff15146103525780632f2ff15d1461036557806335ba2ba81461037857600080fd5b80625919c71461027857806301ffc9a71461028d57806305a62b5b146102b55780630778674e146102d6578063081e3eda14610301575b600080fd5b61028b610286366004613919565b610696565b005b6102a061029b366004613864565b610795565b60405190151581526020015b60405180910390f35b6102c86102c3366004613835565b6107cc565b6040519081526020016102ac565b6068546102e9906001600160a01b031681565b6040516001600160a01b0390911681526020016102ac565b60ce546102c8565b61028b610317366004613919565b6108a2565b61028b61032a36600461381d565b6108e9565b6102c861033d36600461381d565b6000908152609c602052604090206001015490565b61028b61036036600461376e565b610935565b61028b610373366004613835565b610983565b61028b6103863660046138d5565b6109a9565b61028b610399366004613835565b610d13565b61028b6103ac36600461381d565b610d8d565b6102c860695481565b61028b6103c8366004613919565b610dd5565b61028b6103db36600461381d565b610e1c565b61028b610e9a565b61028b6103f6366004613835565b610ecb565b61028b6111da565b61028b61041136600461381d565b611210565b61028b61042436600461381d565b611258565b61028b610437366004613919565b611306565b6033546001600160a01b03166102e9565b60cf546102a09060ff1681565b6102a0610468366004613835565b61136d565b61048061047b36600461381d565b611398565b604080519889526020890197909752958701949094526060860192909252608085015260a08401526001600160a01b031660c083015260ff1660e0820152610100016102ac565b6105266104d5366004613835565b60d06020908152600092835260408084209091529082529020805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909160ff1688565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e0820152610100016102ac565b61028b61057136600461388c565b6113fc565b61028b61058436600461381d565b6114cc565b6102c8600081565b61028b61059f366004613919565b611514565b6102c8670de0b6b3a764000081565b61028b61155b565b6102a06105c936600461369e565b60666020526000908152604090205460ff1681565b6102c86105ec36600461381d565b60d26020526000908152604090205481565b61028b61060c36600461381d565b611789565b61028b61061f366004613835565b6117d1565b6102c861063236600461381d565b6117f7565b61028b610645366004613919565b611a45565b61028b6106583660046136ba565b611bba565b6102c8600080516020613cf383398151915281565b61028b61068036600461369e565b611fbc565b6102c860655481565b61028b612057565b816106a060ce5490565b811061075c606780546106b290613c53565b80601f01602080910402602001604051908101604052809291908181526020018280546106de90613c53565b801561072b5780601f106107005761010080835404028352916020019161072b565b820191906000526020600020905b81548152906001019060200180831161070e57829003601f168201915b50505050506040518060400160405280600e81526020016d08191bd95cdb89dd08195e1a5cdd60921b815250612089565b906107835760405162461bcd60e51b815260040161077a91906139cb565b60405180910390fd5b5061079083836000612226565b505050565b60006001600160e01b03198216637965db0b60e01b14806107c657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000826107d860ce5490565b81106107ea606780546106b290613c53565b906108085760405162461bcd60e51b815260040161077a91906139cb565b506000610816856001612330565b9050600061082486866123d0565b602083015183519192509043118015610841575060008360400151115b156108525761084f83612441565b90505b61089761088c8360400151610886670de0b6b3a764000061088086886000015161249790919063ffffffff16565b906124a3565b906124af565b6020840151906124bb565b979650505050505050565b816108ac60ce5490565b81106108be606780546106b290613c53565b906108dc5760405162461bcd60e51b815260040161077a91906139cb565b50610790838360006124c7565b806108f360ce5490565b8110610905606780546106b290613c53565b906109235760405162461bcd60e51b815260040161077a91906139cb565b5061093182600060016125d9565b5050565b805160005b818110156107905761097283828151811061096557634e487b7160e01b600052603260045260246000fd5b60200260200101516117f7565b5061097c81613c88565b905061093a565b6000828152609c602052604090206001015461099f813361272e565b6107908383612792565b6033546001600160a01b031633146109d35760405162461bcd60e51b815260040161077a90613a77565b81516001600160a01b031660009081526066602052604090205460ff1615610a365760405162461bcd60e51b815260206004820152601660248201527515985d5b1d08185b1c9958591e481a5cc8185919195960521b604482015260640161077a565b81516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610a7957600080fd5b505afa158015610a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab19190613901565b90508015610b015760405162461bcd60e51b815260206004820152601b60248201527f5661756c742073686f756c64206e6f74206265656e207374616b650000000000604482015260640161077a565b8115610b0f57610b0f610e9a565b60006069544311610b2257606954610b24565b435b604080516101008101825282815260006020808301828152938301828152606084018381526080850184815260a086018581528c516001600160a01b0390811660c08901908152958e01805160ff90811660e08b0190815260ce80546001810182559a52995160079099027fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12a81019990995599517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12b89015594517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12c88015592517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12d87015590517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12e860155517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12f85015591517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d130909301805494518616600160a01b026001600160a81b03199095169390921692909217929092179091555160d354929350811691161015610cea57602084015160d3805460ff191660ff9092169190911790555b505090516001600160a01b03166000908152606660205260409020805460ff1916600117905550565b6001600160a01b0381163314610d835760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161077a565b6109318282612818565b80610d9760ce5490565b8110610da9606780546106b290613c53565b90610dc75760405162461bcd60e51b815260040161077a91906139cb565b50610931826000600161287f565b81610ddf60ce5490565b8110610df1606780546106b290613c53565b90610e0f5760405162461bcd60e51b815260040161077a91906139cb565b50610790838360006125d9565b80610e2660ce5490565b8110610e38606780546106b290613c53565b90610e565760405162461bcd60e51b815260040161077a91906139cb565b506000610e64836001612330565b80519091504311610e7457505050565b6040810151610e88576107908360006129a5565b61079083610e9583612441565b6129a5565b6000610ea560ce5490565b905060005b8181101561093157610ebb81610e1c565b610ec481613c88565b9050610eaa565b600080516020613cf3833981519152610ee4813361272e565b610eec610e9a565b60cf805460ff1916905560ce5460005b818110156110e457600060ce8281548110610f2757634e487b7160e01b600052603260045260246000fd5b6000918252602080832085845260d18252604080852060d0909352842082546007909402909101945090929091908080805b8481101561109d576000866000898481548110610f8657634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190206002810154815491925090610fbf9087613b22565b610fc99190613bba565b94506000610ff08260020154610886846000015485600101546124bb90919063ffffffff16565b9050610ffc85826124bb565b945061104d8b8a858154811061102257634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b031684600101548460016129eb565b60018201819055600082556002820154600383015461106b916124bb565b6003830181905561107d9085906124bb565b60006002909301929092555091508061109581613c88565b915050610f59565b5060038701919091556000600287018190556004870181905560059096015585855260d2602052604090942093909355508291506110dc905081613c88565b915050610efc565b5060655484146110f7576110f784611258565b600160005b8281101561119157600081815260d2602052604081205490811215611124576000925061117e565b600081131561117e57600060ce838154811061115057634e487b7160e01b600052603260045260246000fd5b60009182526020909120600790910201600681015490915061117c906001600160a01b03168884612af1565b505b508061118981613c88565b9150506110fc565b5080156111d35760005b828110156111c457600081815260d26020526040812055806111bc81613c88565b91505061119b565b5060cf805460ff191660011790555b5050505050565b6033546001600160a01b031633146112045760405162461bcd60e51b815260040161077a90613a77565b61120e6000612b54565b565b8061121a60ce5490565b811061122c606780546106b290613c53565b9061124a5760405162461bcd60e51b815260040161077a91906139cb565b506109318260006001612226565b611270600080516020613cf38339815191523361136d565b806112945750336112896033546001600160a01b031690565b6001600160a01b0316145b6112f95760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7920746865206f776e6572206f72207472616465722063616e2073657460448201526f102825a5aa103832b910313637b1b59760811b606482015260840161077a565b611301610e9a565b606555565b8161131060ce5490565b8110611322606780546106b290613c53565b906113405760405162461bcd60e51b815260040161077a91906139cb565b50600082116113615760405162461bcd60e51b815260040161077a90613aac565b61079083836000612ba6565b6000918252609c602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60ce81815481106113a857600080fd5b6000918252602090912060079091020180546001820154600283015460038401546004850154600586015460069096015494965092949193909291906001600160a01b03811690600160a01b900460ff1688565b600054610100900460ff1680611415575060005460ff16155b6114315760405162461bcd60e51b815260040161077a90613a29565b600054610100900460ff16158015611453576000805461ffff19166101011790555b61147c856040518060400160405280600581526020016415985d5b1d60da1b8152508686612c9d565b611484612d92565b61148f600033612e15565b6114a7600080516020613cf383398151915283612e15565b60cf805460ff1916600117905580156111d3576000805461ff00191690555050505050565b806114d660ce5490565b81106114e8606780546106b290613c53565b906115065760405162461bcd60e51b815260040161077a91906139cb565b506109318260006001612ba6565b8161151e60ce5490565b8110611530606780546106b290613c53565b9061154e5760405162461bcd60e51b815260040161077a91906139cb565b506107908383600061287f565b600080516020613cf3833981519152611574813361272e565b60cf5460ff16156115c75760405162461bcd60e51b815260206004820152601b60248201527f536574746c656d656e7420616c72656164792066696e69736865640000000000604482015260640161077a565b60ce5460005b8181101561174a57600060ce82815481106115f857634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101008101825260079390930290910180548352600181015493830193909352600283015482820152600383015460608301526004808401546080840152600584015460a084018190526006909401546001600160a01b03811660c08501819052600160a01b90910460ff1660e085015291516370a0823160e01b81523091810191909152919350906370a082319060240160206040518083038186803b1580156116b157600080fd5b505afa1580156116c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e99190613901565b10156117375760405162461bcd60e51b815260206004820152601d60248201527f4d61747572656420616d6f756e74206e6f742066756c6c66696c6c6564000000604482015260640161077a565b508061174281613c88565b9150506115cd565b5060005b8181101561177757600081815260d260205260408120558061176f81613c88565b91505061174e565b505060cf805460ff1916600117905550565b8061179360ce5490565b81106117a5606780546106b290613c53565b906117c35760405162461bcd60e51b815260040161077a91906139cb565b5061093182600060016124c7565b6000828152609c60205260409020600101546117ed813361272e565b6107908383612818565b60008161180360ce5490565b8110611815606780546106b290613c53565b906118335760405162461bcd60e51b815260040161077a91906139cb565b5061183d83610e1c565b600061184a846000612330565b9050600061185885336123d0565b9050600081602001519050600061189e826118988560400151610886670de0b6b3a76400006108808a602001518a6000015161249790919063ffffffff16565b906124bb565b600088815260d060209081526040808320338452909152812060060155905080156119ad576068546040516340c10f1960e01b8152306004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561190f57600080fd5b505af1158015611923573d6000803e3d6000fd5b505060685460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b03909116925063a9059cbb9150604401602060405180830381600087803b15801561197357600080fd5b505af1158015611987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ab9190613801565b505b611a0287336119d9670de0b6b3a76400006108808960200151896000015161249790919063ffffffff16565b600092835260d0602090815260408085206001600160a01b039094168552929052912060050155565b604051818152879033907f16c3bcc96c5457e635fa03516bd0d9e0ac0dc9f66a71076c97f865793e44fe449060200160405180910390a394505050505b50919050565b81611a4f60ce5490565b8110611a61606780546106b290613c53565b90611a7f5760405162461bcd60e51b815260040161077a91906139cb565b5060008211611aa05760405162461bcd60e51b815260040161077a90613aac565b600060ce8481548110611ac357634e487b7160e01b600052603260045260246000fd5b6000918252602080832087845260d0825260408085203380875293529093206006600790930290930191820154919350611b08916001600160a01b0316903087612e1f565b600781015460ff16611b535760078101805460ff19166001908117909155600086815260d160209081526040822080549384018155825290200180546001600160a01b031916331790555b8054611b5f90856124bb565b81556002820154611b7090856124bb565b60028301556040805185815260016020820152869133917f6dbb6056a2fff319358e6dd7d0d72cb3baa992cdcc7e120fb0a32cd1601840e591015b60405180910390a35050505050565b6033546001600160a01b03163314611be45760405162461bcd60e51b815260040161077a90613a77565b60005b8251811015611d64576000838281518110611c1257634e487b7160e01b600052603260045260246000fd5b602090810291909101810151516001600160a01b0381166000908152606690925260409091205490915060ff1615611c855760405162461bcd60e51b815260206004820152601660248201527515985d5b1d08185b1c9958591e481a5cc8185919195960521b604482015260640161077a565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611cc757600080fd5b505afa158015611cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cff9190613901565b90508015611d4f5760405162461bcd60e51b815260206004820152601a60248201527f5661756c742073686f756c64206e6f74206265207374616b6564000000000000604482015260640161077a565b50508080611d5c90613c88565b915050611be7565b508015611d7357611d73610e9a565b60005b8251811015610790576000838281518110611da157634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006069544311611dbe57606954611dc0565b435b604080516101008101825282815260006020808301828152938301828152606084018381526080850184815260a086018581528a516001600160a01b0390811660c08901908152958c01805160ff90811660e08b0190815260ce80546001810182559a52995160079099027fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12a81019990995599517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12b89015594517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12c88015592517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12d87015590517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12e860155517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12f85015591517fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d130909301805494518616600160a01b026001600160a81b03199095169390921692909217929092179091555160d354929350811691161015611f8657602082015160d3805460ff191660ff9092169190911790555b50516001600160a01b03166000908152606660205260409020805460ff1916600117905580611fb481613c88565b915050611d76565b6033546001600160a01b03163314611fe65760405162461bcd60e51b815260040161077a90613a77565b6001600160a01b03811661204b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161077a565b61205481612b54565b50565b600061206260ce5490565b905060005b8181101561093157612078816117f7565b5061208281613c88565b9050612067565b606060008251845161209b9190613b63565b67ffffffffffffffff8111156120c157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120eb576020820181803683370190505b509050806000805b865182101561217f5786828151811061211c57634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916838261213681613c88565b93508151811061215657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508161217781613c88565b9250506120f3565b600091505b855182101561221b57858261219881613c88565b9350815181106121b857634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191683826121d281613c88565b9350815181106121f257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508161221381613c88565b925050612184565b509095945050505050565b600082116122465760405162461bcd60e51b815260040161077a90613aac565b600060ce848154811061226957634e487b7160e01b600052603260045260246000fd5b6000918252602080832087845260d0825260408085203386529092529220600790910290910191508261229c57836122a2565b80600201545b9350836122b0575050505050565b80600201548411156122d45760405162461bcd60e51b815260040161077a906139fe565b60028101546122e390856124af565b600282015560048201546122f790856124af565b6004830155604051848152859033907f39e2e01794006bc1f63835af5c05db790beca4bfb40de3f02cc3ddf22dccc0fb90602001611bab565b61235b6040518060800160405280600081526020016000815260200160008152602001600081525090565b600060ce848154811061237e57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201905060405180608001604052808260000154815260200182600101548152602001846123b95760006123bf565b82600301545b815260200185905291505092915050565b6123f460405180606001604052806000815260200160008152602001600081525090565b50600091825260d0602090815260408084206001600160a01b0393909316845291815291819020815160608101835260018201548152600682015493810193909352600501549082015290565b60008061246961245084612e5d565b60655485516124639190829043906124af565b90612497565b90506124906124858460400151836124a390919063ffffffff16565b6020850151906124bb565b9392505050565b60006124908284613b9b565b60006124908284613b7b565b60006124908284613bf9565b60006124908284613b63565b600060ce84815481106124ea57634e487b7160e01b600052603260045260246000fd5b6000918252602080832087845260d0825260408085203386529092529220600790910290910191508261251d5783612523565b80600301545b935083612531575050505050565b80600301548411156125555760405162461bcd60e51b815260040161077a906139fe565b805461256190856124bb565b8155600381015461257290856124af565b6003820155600282015461258690856124bb565b6002830155600582015461259a90856124af565b60058301556040805185815260006020820152869133917f6dbb6056a2fff319358e6dd7d0d72cb3baa992cdcc7e120fb0a32cd1601840e59101611bab565b60cf5460ff1661262b5760405162461bcd60e51b815260206004820152601a60248201527f536574746c6d656e74206e6f742066696e697368656420796574000000000000604482015260640161077a565b600060ce848154811061264e57634e487b7160e01b600052603260045260246000fd5b6000918252602080832087845260d082526040808520338652909252922060079091029091019150826126815783612687565b80600301545b935083612695575050505050565b80600301548411156126b95760405162461bcd60e51b815260040161077a906139fe565b60068201546126d2906001600160a01b03163386612af1565b60038101546126e190856124af565b600382015560058201546126f590856124af565b6005830155604051848152859033907fa7952fcf1aa05ca494ca81b36018d749ac933a4f76e87ccdcd31cc6a202a785e90602001611bab565b612738828261136d565b61093157612750816001600160a01b03166014612f3e565b61275b836020612f3e565b60405160200161276c929190613956565b60408051601f198184030181529082905262461bcd60e51b825261077a916004016139cb565b61279c828261136d565b610931576000828152609c602090815260408083206001600160a01b03851684529091529020805460ff191660011790556127d43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612822828261136d565b15610931576000828152609c602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000821161289f5760405162461bcd60e51b815260040161077a90613aac565b600060ce84815481106128c257634e487b7160e01b600052603260045260246000fd5b6000918252602080832087845260d08252604080852033865290925290832060028101546001820154600790940290920194509291612900916124af565b90508361290d578461290f565b805b94508461291e57505050505050565b8085111561293e5760405162461bcd60e51b815260040161077a906139fe565b600282015461294d90866124bb565b6002830155600483015461296190866124bb565b6004840155604051858152869033907f0c53c82ad07e2d592d88ece3b066777dd60f1118e2a081b380efc4358f0d9e2a9060200160405180910390a3505050505050565b600060ce83815481106129c857634e487b7160e01b600052603260045260246000fd5b600091825260209091204360079092020190815590508115610790576001015550565b846129f560ce5490565b8110612a07606780546106b290613c53565b90612a255760405162461bcd60e51b815260040161077a91906139cb565b506000612a33876000612330565b90506000612a4188886123d0565b90508315612abf576000612a768260400151610886670de0b6b3a764000061088087602001518c61249790919063ffffffff16565b9050612abd8989612a948486602001516124bb90919063ffffffff16565b600092835260d0602090815260408085206001600160a01b039094168552929052912060060155565b505b612ae788886119d9670de0b6b3a764000061088087602001518b61249790919063ffffffff16565b5050505050505050565b6040516001600160a01b03831660248201526044810182905261079090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613120565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060ce8481548110612bc957634e487b7160e01b600052603260045260246000fd5b6000918252602080832087845260d08252604080852033865290925292206007909102909101915082612bfc5783612bff565b80545b935083612c0d575050505050565b8054841115612c2e5760405162461bcd60e51b815260040161077a906139fe565b8054612c3a90856124af565b81556002820154612c4b90856124af565b60028301556006820154612c69906001600160a01b03163386612af1565b604051848152859033907fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92990602001611bab565b600054610100900460ff1680612cb6575060005460ff16155b612cd25760405162461bcd60e51b815260040161077a90613a29565b600054610100900460ff16158015612cf4576000805461ffff19166101011790555b6001600160a01b038516612d395760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b604482015260640161077a565b612d416131f2565b606880546001600160a01b0319166001600160a01b03871617905560658390558351612d7490606790602087019061358d565b50606982905580156111d3576000805461ff00191690555050505050565b600054610100900460ff1680612dab575060005460ff16155b612dc75760405162461bcd60e51b815260040161077a90613a29565b600054610100900460ff16158015612de9576000805461ffff19166101011790555b612df1613259565b612df9613259565b612e01613259565b8015612054576000805461ff001916905550565b6109318282612792565b6040516001600160a01b0380851660248301528316604482015260648101829052612e579085906323b872dd60e01b90608401612b1d565b50505050565b60008060ce836060015181548110612e8557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702019050612490612ea06132c3565b60d35460405163623d91e360e11b81526004810185905260ff909116602482015261088090670de0b6b3a76400009073__$06121d56a712ac8bdb9003c1a418388a36$__9063c47b23c69060440160206040518083038186803b158015612f0657600080fd5b505af4158015612f1a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124639190613901565b60606000612f4d836002613b9b565b612f58906002613b63565b67ffffffffffffffff811115612f7e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612fa8576020820181803683370190505b509050600360fc1b81600081518110612fd157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061300e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000613032846002613b9b565b61303d906001613b63565b90505b60018111156130d1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061307f57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106130a357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936130ca81613c3c565b9050613040565b5083156124905760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161077a565b6000613175826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166133c59092919063ffffffff16565b80519091501561079057808060200190518101906131939190613801565b6107905760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161077a565b600054610100900460ff168061320b575060005460ff16155b6132275760405162461bcd60e51b815260040161077a90613a29565b600054610100900460ff16158015613249576000805461ffff19166101011790555b613251613259565b612e016133dc565b600054610100900460ff1680613272575060005460ff16155b61328e5760405162461bcd60e51b815260040161077a90613a29565b600054610100900460ff16158015612e01576000805461ffff19166101011790558015612054576000805461ff001916905550565b60ce546000908190815b818110156133bd57600060ce82815481106132f857634e487b7160e01b600052603260045260246000fd5b6000918252602090912060d35460405163623d91e360e11b815260079093029091016004830181905260ff909116602483015291506133a79073__$06121d56a712ac8bdb9003c1a418388a36$__9063c47b23c69060440160206040518083038186803b15801561336857600080fd5b505af415801561337c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a09190613901565b85906124bb565b93505080806133b590613c88565b9150506132cd565b509092915050565b60606133d4848460008561343c565b949350505050565b600054610100900460ff16806133f5575060005460ff16155b6134115760405162461bcd60e51b815260040161077a90613a29565b600054610100900460ff16158015613433576000805461ffff19166101011790555b612e0133612b54565b60608247101561349d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161077a565b843b6134eb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161077a565b600080866001600160a01b03168587604051613507919061393a565b60006040518083038185875af1925050503d8060008114613544576040519150601f19603f3d011682016040523d82523d6000602084013e613549565b606091505b509150915061089782828660608315613563575081612490565b8251156135735782518084602001fd5b8160405162461bcd60e51b815260040161077a91906139cb565b82805461359990613c53565b90600052602060002090601f0160209004810192826135bb5760008555613601565b82601f106135d457805160ff1916838001178555613601565b82800160010185558215613601579182015b828111156136015782518255916020019190600101906135e6565b5061360d929150613611565b5090565b5b8082111561360d5760008155600101613612565b803561363181613ce4565b919050565b600060408284031215613647578081fd5b6040516040810181811067ffffffffffffffff8211171561366a5761366a613cb9565b604052905080823561367b81613ccf565b8152602083013560ff8116811461369157600080fd5b6020919091015292915050565b6000602082840312156136af578081fd5b813561249081613ccf565b60008060408084860312156136cd578182fd5b833567ffffffffffffffff8111156136e3578283fd5b8401601f810186136136f3578283fd5b8035602061370861370383613afe565b613acd565b8083825282820191508285018a848660061b8801011115613727578788fd5b8795505b848610156137515761373d8b82613636565b83526001959095019491830191860161372b565b5096506137619050878201613626565b9450505050509250929050565b60006020808385031215613780578182fd5b823567ffffffffffffffff811115613796578283fd5b8301601f810185136137a6578283fd5b80356137b461370382613afe565b80828252848201915084840188868560051b87010111156137d3578687fd5b8694505b838510156137f55780358352600194909401939185019185016137d7565b50979650505050505050565b600060208284031215613812578081fd5b815161249081613ce4565b60006020828403121561382e578081fd5b5035919050565b60008060408385031215613847578182fd5b82359150602083013561385981613ccf565b809150509250929050565b600060208284031215613875578081fd5b81356001600160e01b031981168114612490578182fd5b600080600080608085870312156138a1578182fd5b84356138ac81613ccf565b9350602085013592506040850135915060608501356138ca81613ccf565b939692955090935050565b600080606083850312156138e7578182fd5b6138f18484613636565b9150604083013561385981613ce4565b600060208284031215613912578081fd5b5051919050565b6000806040838503121561392b578182fd5b50508035926020909101359150565b6000825161394c818460208701613c10565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161398e816017850160208801613c10565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516139bf816028840160208801613c10565b01602801949350505050565b60208152600082518060208401526139ea816040850160208701613c10565b601f01601f19169190910160400192915050565b6020808252601190820152704578636565647320617661696c61626c6560781b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526007908201526608585b5bdd5b9d60ca1b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613af657613af6613cb9565b604052919050565b600067ffffffffffffffff821115613b1857613b18613cb9565b5060051b60200190565b600080821280156001600160ff1b0384900385131615613b4457613b44613ca3565b600160ff1b8390038412811615613b5d57613b5d613ca3565b50500190565b60008219821115613b7657613b76613ca3565b500190565b600082613b9657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613bb557613bb5613ca3565b500290565b60008083128015600160ff1b850184121615613bd857613bd8613ca3565b6001600160ff1b0384018313811615613bf357613bf3613ca3565b50500390565b600082821015613c0b57613c0b613ca3565b500390565b60005b83811015613c2b578181015183820152602001613c13565b83811115612e575750506000910152565b600081613c4b57613c4b613ca3565b506000190190565b600181811c90821680613c6757607f821691505b60208210811415611a3f57634e487b7160e01b600052602260045260246000fd5b6000600019821415613c9c57613c9c613ca3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461205457600080fd5b801515811461205457600080fdfefacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b0731941a264697066735822122095eb9bd007691706dce1c1c5c6f49b89af79dcafb61d490b582c237523bf5b7c64736f6c63430008040033",
  "libraries": {
    "Vault": "0xC4064A7394AB5fbe6D66c162ec9F43F13f1fdFfa"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,uint256,uint256,address)": {
        "params": {
          "_pkktPerBlock": "total number of PKKT rewarded to users",
          "trader": "address of trader who manages settlements"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,uint256,uint256,address)": {
        "notice": "Initializes the contract with storage variables"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 538,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 541,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1297,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 418,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 531,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5473,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "pkktPerBlock",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 5477,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "isAdded",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5479,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "itemName",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 5482,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "pkkt",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(PKKTToken)7704"
      },
      {
        "astId": 5484,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "startBlock",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 1546,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "_roles",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 333,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7740,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "vaultInfo",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_struct(VaultInfo)10010_storage)dyn_storage"
      },
      {
        "astId": 7742,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "isSettelled",
        "offset": 0,
        "slot": "207",
        "type": "t_bool"
      },
      {
        "astId": 7749,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "userInfo",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)9992_storage))"
      },
      {
        "astId": 7754,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "userAddresses",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 7758,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "settlementResult",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 7760,
        "contract": "contracts/PKKTVault.sol:PKKTVault",
        "label": "maxDecimals",
        "offset": 0,
        "slot": "211",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(VaultInfo)10010_storage)dyn_storage": {
        "base": "t_struct(VaultInfo)10010_storage",
        "encoding": "dynamic_array",
        "label": "struct Vault.VaultInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2287": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(PKKTToken)7704": {
        "encoding": "inplace",
        "label": "contract PKKTToken",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)9992_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)9992_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)9992_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct Vault.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)9992_storage)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)9992_storage": {
        "encoding": "inplace",
        "label": "struct Vault.UserInfo",
        "members": [
          {
            "astId": 9977,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "pendingAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9979,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "ongoingAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9981,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "requestingAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9983,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "maturedAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9985,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "pendingPKKTReward",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9987,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9989,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "pendingReward",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9991,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "hasDeposit",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(VaultInfo)10010_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultInfo",
        "members": [
          {
            "astId": 9994,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9996,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "accPKKTPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9998,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "totalPending",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10000,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "totalOngoing",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10002,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "totalRequesting",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10004,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "totalMatured",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10007,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "underlying",
            "offset": 0,
            "slot": "6",
            "type": "t_contract(IERC20)2287"
          },
          {
            "astId": 10009,
            "contract": "contracts/PKKTVault.sol:PKKTVault",
            "label": "decimals",
            "offset": 20,
            "slot": "6",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}