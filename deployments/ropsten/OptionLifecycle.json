{
  "address": "0x12A78E459429fff2570E97D78Ff87F98a36B85Ab",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "totalAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalTerminate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "strikePrice",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "round",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callOrPut",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionState",
          "name": "_optionState",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_callOrPut",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "_depositAssetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_counterPartyAssetAmountDecimals",
          "type": "uint8"
        }
      ],
      "name": "calculateMaturity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "releasedDepositAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedDepositAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedDepositAssetAmountWithPremium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyAssetAmountWithPremium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollDepositAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollDepositAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollDepositAssetAmountWithPremium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollCounterPartyAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollCounterPartyAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollCounterPartyAssetAmountWithPremium",
              "type": "uint256"
            }
          ],
          "internalType": "struct StructureData.MaturedState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_source",
          "type": "address"
        }
      ],
      "name": "getAvailableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x54875dc252760f6423be28ae26d7ec8c43f5985e5b526bd8c000da4aad22ebd7",
  "receipt": {
    "to": null,
    "from": "0x4EF10084EB9541EbE1d0Ed060Cdc87C37a850E8B",
    "contractAddress": "0x12A78E459429fff2570E97D78Ff87F98a36B85Ab",
    "transactionIndex": 10,
    "gasUsed": "2377707",
    "logsBloom": "0x
    "blockHash": "0xcb995cd052afb814457b1edac67278fc718e308391f46339d8682e31ce98c029",
    "transactionHash": "0x54875dc252760f6423be28ae26d7ec8c43f5985e5b526bd8c000da4aad22ebd7",
    "logs": [],
    "blockNumber": 11931736,
    "cumulativeGasUsed": "2827910",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "29974b1415da715a6e2d54a60fb18ea4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"totalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalTerminate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"strikePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionState\",\"name\":\"_optionState\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_callOrPut\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_counterPartyAssetAmountDecimals\",\"type\":\"uint8\"}],\"name\":\"calculateMaturity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"releasedDepositAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedDepositAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedDepositAssetAmountWithPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyAssetAmountWithPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollDepositAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollDepositAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollDepositAssetAmountWithPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollCounterPartyAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollCounterPartyAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollCounterPartyAssetAmountWithPremium\",\"type\":\"uint256\"}],\"internalType\":\"struct StructureData.MaturedState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_source\",\"type\":\"address\"}],\"name\":\"getAvailableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/OptionLifecycle.sol\":\"OptionLifecycle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/libraries/OptionLifecycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./Utils.sol\\\";\\r\\nimport \\\"./StructureData.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\n\\r\\nlibrary OptionLifecycle {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Utils for uint128;\\r\\n    using Utils for uint256;\\r\\n    using SafeMath for uint256;\\r\\n    using SafeCast for uint256;\\r\\n    using StructureData for StructureData.UserState;\\r\\n\\r\\n    function deriveVirtualLocked(\\r\\n        StructureData.UserState memory userState,\\r\\n        uint16 premiumRate\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 onGoing = uint256(userState.ongoingAsset);\\r\\n        if (onGoing == 0) {\\r\\n            return uint256(userState.tempLocked);\\r\\n        }\\r\\n        onGoing = (onGoing.sub(userState.assetToTerminate)).withPremium(\\r\\n            premiumRate\\r\\n        );\\r\\n        if (userState.tempLocked == 0) {\\r\\n            return onGoing;\\r\\n        }\\r\\n        return uint256(userState.tempLocked).add(onGoing);\\r\\n    }\\r\\n\\r\\n    function getAvailableBalance(address _asset, address _source)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (_asset != address(0)) {\\r\\n            return IERC20(_asset).balanceOf(_source);\\r\\n        } else {\\r\\n            return _source.balance;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        address _target,\\r\\n        uint256 _amount,\\r\\n        address _contractAddress\\r\\n    ) external {\\r\\n        require(_amount > 0);\\r\\n        if (_contractAddress == address(0)) {\\r\\n            payable(_target).transfer(_amount);\\r\\n        } else {\\r\\n            IERC20(_contractAddress).safeTransfer(_target, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateMaturity(\\r\\n        bool _execute,\\r\\n        StructureData.OptionState memory _optionState,\\r\\n        bool _callOrPut,\\r\\n        uint8 _depositAssetAmountDecimals,\\r\\n        uint8 _counterPartyAssetAmountDecimals\\r\\n    ) public pure returns (StructureData.MaturedState memory) {\\r\\n        StructureData.MaturedState memory state = StructureData.MaturedState({\\r\\n            releasedDepositAssetAmount: 0,\\r\\n            releasedDepositAssetPremiumAmount: 0,\\r\\n            releasedDepositAssetAmountWithPremium: 0,\\r\\n            autoRollDepositAssetAmount: 0,\\r\\n            autoRollDepositAssetPremiumAmount: 0,\\r\\n            autoRollDepositAssetAmountWithPremium: 0,\\r\\n            releasedCounterPartyAssetAmount: 0,\\r\\n            releasedCounterPartyAssetPremiumAmount: 0,\\r\\n            releasedCounterPartyAssetAmountWithPremium: 0,\\r\\n            autoRollCounterPartyAssetAmount: 0,\\r\\n            autoRollCounterPartyAssetPremiumAmount: 0,\\r\\n            autoRollCounterPartyAssetAmountWithPremium: 0\\r\\n        });\\r\\n        if (_execute) {\\r\\n            uint256 maturedCounterPartyAssetAmount = \\r\\n                _callOrPut\\r\\n                    ? uint256(_optionState.totalAmount)\\r\\n                        .mul(_optionState.strikePrice)\\r\\n                        .mul(10**_counterPartyAssetAmountDecimals)\\r\\n                        .div(\\r\\n                            10 **\\r\\n                                (StructureData.PRICE_PRECISION +\\r\\n                                    _depositAssetAmountDecimals)\\r\\n                        )\\r\\n                    : uint256(_optionState.totalAmount)\\r\\n                        .mul(\\r\\n                            10 **\\r\\n                                (StructureData.PRICE_PRECISION +\\r\\n                                    _counterPartyAssetAmountDecimals)\\r\\n                        )\\r\\n                        .div(_optionState.strikePrice)\\r\\n                        .div(10**_depositAssetAmountDecimals);\\r\\n\\r\\n            uint256 maturedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetAmount\\r\\n                    .premium(_optionState.premiumRate);\\r\\n            if (_optionState.totalTerminate > 0) {\\r\\n                state\\r\\n                    .releasedCounterPartyAssetAmount = maturedCounterPartyAssetAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state\\r\\n                    .releasedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetPremiumAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state.releasedCounterPartyAssetAmountWithPremium =\\r\\n                    state.releasedCounterPartyAssetAmount.add(\\r\\n                    state.releasedCounterPartyAssetPremiumAmount);\\r\\n            }\\r\\n            state.autoRollCounterPartyAssetAmount =\\r\\n                maturedCounterPartyAssetAmount.sub(\\r\\n                state.releasedCounterPartyAssetAmount);\\r\\n            state.autoRollCounterPartyAssetPremiumAmount =\\r\\n                maturedCounterPartyAssetPremiumAmount.sub(\\r\\n                state.releasedCounterPartyAssetPremiumAmount);\\r\\n            state.autoRollCounterPartyAssetAmountWithPremium =\\r\\n                state.autoRollCounterPartyAssetAmount.add(\\r\\n                state.autoRollCounterPartyAssetPremiumAmount);\\r\\n        } else {\\r\\n            uint256 maturedDepositAssetAmount = uint256(_optionState.totalAmount);\\r\\n            uint256 maturedDepositAssetPremiumAmount = maturedDepositAssetAmount\\r\\n                .premium(_optionState.premiumRate);\\r\\n            if (_optionState.totalTerminate > 0) {\\r\\n                state.releasedDepositAssetAmount = maturedDepositAssetAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state\\r\\n                    .releasedDepositAssetPremiumAmount = maturedDepositAssetPremiumAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state.releasedDepositAssetAmountWithPremium =\\r\\n                    state.releasedDepositAssetAmount.add(\\r\\n                    state.releasedDepositAssetPremiumAmount);\\r\\n            }\\r\\n            state.autoRollDepositAssetAmount =\\r\\n                maturedDepositAssetAmount.sub(\\r\\n                state.releasedDepositAssetAmount);\\r\\n            state.autoRollDepositAssetPremiumAmount =\\r\\n                maturedDepositAssetPremiumAmount.sub(\\r\\n                state.releasedDepositAssetPremiumAmount);\\r\\n            state.autoRollDepositAssetAmountWithPremium =\\r\\n                state.autoRollDepositAssetAmount.add(\\r\\n                state.autoRollDepositAssetPremiumAmount);\\r\\n        }\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function commitByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        uint16 _roundToCommit\\r\\n    ) external {\\r\\n        uint256 userCount = _option.usersInvolved.length;\\r\\n        for (uint256 i = 0; i < userCount; i++) {\\r\\n            StructureData.UserState storage userState = _option.userStates[\\r\\n                _option.usersInvolved[i]\\r\\n            ];\\r\\n            if (userState.assetToTerminateForNextRound != 0) {\\r\\n                userState.assetToTerminate = userState\\r\\n                    .assetToTerminateForNextRound;\\r\\n                userState.assetToTerminateForNextRound = 0;\\r\\n            } else if (userState.assetToTerminate != 0) {\\r\\n                userState.assetToTerminate = 0;\\r\\n            }\\r\\n            if (userState.tempLocked == 0) {\\r\\n                userState.ongoingAsset = 0;\\r\\n                continue;\\r\\n            }\\r\\n            userState.ongoingAsset = userState.tempLocked;\\r\\n            userState.tempLocked = 0;\\r\\n        } \\r\\n        _option.optionStates[_roundToCommit].totalTerminate = uint256(_option\\r\\n            .optionStates[_roundToCommit]\\r\\n            .totalTerminate)\\r\\n            .add(_option.assetToTerminateForNextRound).toUint128();\\r\\n        _option.assetToTerminateForNextRound = 0;\\r\\n    }\\r\\n\\r\\n    function rollToNextByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        uint16 _currentRound,\\r\\n        bool _callOrPut\\r\\n    ) external returns (uint128 _pendingAmount) { \\r\\n        StructureData.OptionState memory currentOption = StructureData\\r\\n            .OptionState({\\r\\n                round: _currentRound,\\r\\n                totalAmount: 0,\\r\\n                totalTerminate: 0,\\r\\n                premiumRate: 0,\\r\\n                strikePrice: 0,\\r\\n                executed: false,\\r\\n                callOrPut: _callOrPut\\r\\n            });\\r\\n        _option.optionStates[_currentRound] = currentOption;\\r\\n        if (_currentRound > 1) {\\r\\n            uint256 userCount = _option.usersInvolved.length;\\r\\n            for (uint256 i = 0; i < userCount; i++) {\\r\\n                StructureData.UserState storage userState = _option.userStates[\\r\\n                    _option.usersInvolved[i]\\r\\n                ];\\r\\n                if (userState.pendingAsset != 0) {\\r\\n                    userState.tempLocked = userState.pendingAsset;\\r\\n                }\\r\\n                userState.pendingAsset = 0;\\r\\n            }\\r\\n        } \\r\\n        return\\r\\n            _currentRound > 1\\r\\n                ? _option.optionStates[_currentRound - 1].totalAmount\\r\\n                : 0;\\r\\n    }\\r\\n\\r\\n    function dryRunSettlementByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        bool _isCall,\\r\\n        uint8 _depositAssetAmountDecimals,\\r\\n        uint8 _counterPartyAssetAmountDecimals,\\r\\n        uint16 _currentRound,\\r\\n        bool _execute\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (StructureData.SettlementAccountingResult memory _result)\\r\\n    {\\r\\n        StructureData.SettlementAccountingResult memory result = StructureData\\r\\n            .SettlementAccountingResult({ \\r\\n                depositAmount: _option\\r\\n                    .optionStates[_currentRound - 1]\\r\\n                    .totalAmount,\\r\\n                executed: _execute,\\r\\n                autoRollAmount: 0,\\r\\n                autoRollPremium: 0,\\r\\n                releasedAmount: 0,\\r\\n                releasedPremium: 0,\\r\\n                autoRollCounterPartyAmount: 0,\\r\\n                autoRollCounterPartyPremium: 0,\\r\\n                releasedCounterPartyAmount: 0,\\r\\n                releasedCounterPartyPremium: 0\\r\\n            });\\r\\n        if (_currentRound > 2) {\\r\\n            StructureData.OptionState storage previousOptionState = _option\\r\\n                .optionStates[_currentRound - 2];\\r\\n            if (previousOptionState.totalAmount == 0) {\\r\\n                return result;\\r\\n            }\\r\\n            StructureData.MaturedState memory maturedState = calculateMaturity(\\r\\n                _execute,\\r\\n                previousOptionState,\\r\\n                _isCall,\\r\\n                _depositAssetAmountDecimals,\\r\\n                _counterPartyAssetAmountDecimals\\r\\n            );\\r\\n            if (_execute) {\\r\\n                result.autoRollCounterPartyAmount = maturedState\\r\\n                    .autoRollCounterPartyAssetAmount.toUint128();\\r\\n                result.autoRollCounterPartyPremium = maturedState\\r\\n                    .autoRollCounterPartyAssetPremiumAmount.toUint128();\\r\\n                result.releasedCounterPartyAmount = maturedState\\r\\n                    .releasedCounterPartyAssetAmount.toUint128();\\r\\n                result.releasedCounterPartyPremium = maturedState\\r\\n                    .releasedCounterPartyAssetPremiumAmount.toUint128();\\r\\n            } else {\\r\\n                result.autoRollAmount = maturedState.autoRollDepositAssetAmount.toUint128();\\r\\n                result.autoRollPremium = maturedState\\r\\n                    .autoRollDepositAssetPremiumAmount.toUint128();\\r\\n                result.releasedAmount = maturedState.releasedDepositAssetAmount.toUint128();\\r\\n                result.releasedPremium = maturedState\\r\\n                    .releasedDepositAssetPremiumAmount.toUint128();\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function closePreviousByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        StructureData.OptionState storage previousOptionState,\\r\\n        bool _isCall,\\r\\n        uint8 _depositAssetAmountDecimals,\\r\\n        uint8 _counterPartyAssetAmountDecimals,\\r\\n        bool _execute\\r\\n    ) external returns (StructureData.MaturedState memory _maturedState) {\\r\\n        //uint16 maturedRound = currentRound - 2;\\r\\n        StructureData.MaturedState memory maturedState = calculateMaturity(\\r\\n            _execute,\\r\\n            previousOptionState,\\r\\n            _isCall,\\r\\n            _depositAssetAmountDecimals,\\r\\n            _counterPartyAssetAmountDecimals\\r\\n        );\\r\\n        previousOptionState.executed = _execute;\\r\\n\\r\\n        if (_execute) {\\r\\n            _option.totalReleasedCounterPartyAssetAmount =uint256(_option\\r\\n                .totalReleasedCounterPartyAssetAmount)\\r\\n                .add(maturedState.releasedCounterPartyAssetAmountWithPremium).toUint128();\\r\\n        } else {\\r\\n            _option.totalReleasedDepositAssetAmount = uint256(_option\\r\\n                .totalReleasedDepositAssetAmount)\\r\\n                .add(maturedState.releasedDepositAssetAmountWithPremium).toUint128();\\r\\n        }\\r\\n        return maturedState;\\r\\n    }\\r\\n    /*\\r\\n        struct OptionParameters { \\r\\n        uint128 strikePrice; // strike price if executed\\r\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\r\\n    }\\r\\n*/\\r\\n    function setOptionParameters(uint256 _parameters, StructureData.OptionState storage _optionState) external {\\r\\n \\r\\n        require(_optionState.strikePrice == 0); \\r\\n        _optionState.strikePrice = uint128(_parameters >> 16);\\r\\n        _optionState.premiumRate = uint16(_parameters & 0xffff);     \\r\\n    }\\r\\n    function getAccountBalance(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external view returns (StructureData.UserBalance memory) {\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n\\r\\n        StructureData.UserBalance memory result = StructureData.UserBalance({\\r\\n            pendingDepositAssetAmount: userState.pendingAsset,\\r\\n            releasedDepositAssetAmount: userState.releasedDepositAssetAmount,\\r\\n            releasedCounterPartyAssetAmount: userState\\r\\n                .releasedCounterPartyAssetAmount,\\r\\n            lockedDepositAssetAmount: 0,\\r\\n            terminatingDepositAssetAmount: 0,\\r\\n            toTerminateDepositAssetAmount: 0\\r\\n        });\\r\\n        if (_underSettlement) {\\r\\n            if (_currentRound > 2) {\\r\\n                //when there are maturing round waiting for settlement, it becomes complex\\r\\n                uint16 premiumRate = _option\\r\\n                    .optionStates[_currentRound - 2]\\r\\n                    .premiumRate;\\r\\n                result.lockedDepositAssetAmount = deriveVirtualLocked(\\r\\n                    userState,\\r\\n                    premiumRate\\r\\n                ).toUint128();\\r\\n                result.terminatingDepositAssetAmount = uint256(userState\\r\\n                    .assetToTerminate)\\r\\n                    .withPremium(premiumRate).toUint128();\\r\\n            } else {\\r\\n                result.lockedDepositAssetAmount = userState.tempLocked;\\r\\n            }\\r\\n            result.toTerminateDepositAssetAmount = userState\\r\\n                    .assetToTerminateForNextRound;\\r\\n        } else {\\r\\n            result.lockedDepositAssetAmount = userState.ongoingAsset;\\r\\n            result.toTerminateDepositAssetAmount = userState.assetToTerminate;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function getOptionSnapShot(\\r\\n        StructureData.OptionData storage _option,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external view returns (StructureData.OptionSnapshot memory) {\\r\\n        StructureData.OptionState memory lockedOption;\\r\\n        StructureData.OptionState memory onGoingOption;\\r\\n        StructureData.OptionSnapshot memory result = StructureData\\r\\n            .OptionSnapshot({\\r\\n                totalPending: _option.optionStates[_currentRound].totalAmount,\\r\\n                totalReleasedDeposit: _option.totalReleasedDepositAssetAmount,\\r\\n                totalReleasedCounterParty: _option\\r\\n                    .totalReleasedCounterPartyAssetAmount,\\r\\n                totalLocked: 0,\\r\\n                totalTerminating: 0,\\r\\n                totalToTerminate: 0\\r\\n            });\\r\\n        if (_underSettlement) {\\r\\n            lockedOption = _option.optionStates[_currentRound - 1];\\r\\n            result.totalToTerminate = _option.assetToTerminateForNextRound;\\r\\n            if (_currentRound > 2) {\\r\\n                //when there are maturing round waiting for settlement, it becomes complex\\r\\n                onGoingOption = _option.optionStates[_currentRound - 2];\\r\\n                result.totalTerminating = uint256(onGoingOption\\r\\n                    .totalTerminate)\\r\\n                    .withPremium(onGoingOption.premiumRate).toUint128();\\r\\n                result.totalLocked = uint256(lockedOption\\r\\n                    .totalAmount)\\r\\n                    .add(\\r\\n                        onGoingOption.totalAmount.withPremium(\\r\\n                            onGoingOption.premiumRate\\r\\n                        )\\r\\n                    )\\r\\n                    .sub(result.totalTerminating).toUint128();\\r\\n            } else {\\r\\n                result.totalLocked = lockedOption.totalAmount;\\r\\n            }\\r\\n        } else if (_currentRound > 1) {\\r\\n            onGoingOption = _option.optionStates[_currentRound - 1];\\r\\n            result.totalLocked = onGoingOption.totalAmount;\\r\\n            result.totalToTerminate = onGoingOption.totalTerminate;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function initiateWithrawStorage(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        uint256 _assetToTerminate,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external {\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n        if (_underSettlement) {\\r\\n            uint256 newAssetToTerminate = uint256(userState\\r\\n                .assetToTerminateForNextRound)\\r\\n                .add(_assetToTerminate);\\r\\n            if (_currentRound == 2) {\\r\\n                require(newAssetToTerminate <= userState.tempLocked);\\r\\n                StructureData.OptionState storage previousOption = _option\\r\\n                    .optionStates[_currentRound - 1];\\r\\n                previousOption.totalTerminate = uint256(previousOption\\r\\n                    .totalTerminate)\\r\\n                    .add(_assetToTerminate).toUint128();\\r\\n            } else {\\r\\n                StructureData.OptionState storage onGoingOption = _option\\r\\n                    .optionStates[_currentRound - 2];\\r\\n                uint256 totalLocked = deriveVirtualLocked(\\r\\n                    userState,\\r\\n                    onGoingOption.premiumRate\\r\\n                );\\r\\n                require(newAssetToTerminate <= totalLocked);\\r\\n                //store temporarily\\r\\n                _option.assetToTerminateForNextRound = uint256(_option\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .add(_assetToTerminate).toUint128();\\r\\n            }\\r\\n            userState.assetToTerminateForNextRound = newAssetToTerminate.toUint128();\\r\\n        } else {\\r\\n            uint256 newAssetToTerminate = uint256(userState.assetToTerminate).add(\\r\\n                _assetToTerminate\\r\\n            );\\r\\n            require(newAssetToTerminate <= userState.ongoingAsset);\\r\\n            userState.assetToTerminate = newAssetToTerminate.toUint128();\\r\\n            StructureData.OptionState storage previousOption = _option\\r\\n                .optionStates[_currentRound - 1];\\r\\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).add(\\r\\n                _assetToTerminate\\r\\n            ).toUint128();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function cancelWithdrawStorage(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        uint256 _assetToTerminate,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external {\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n        if (_underSettlement) {\\r\\n            userState.assetToTerminateForNextRound = uint256(userState\\r\\n                .assetToTerminateForNextRound)\\r\\n                .sub(_assetToTerminate).toUint128();\\r\\n            if (_currentRound == 2) {\\r\\n                StructureData.OptionState storage previousOption = _option\\r\\n                    .optionStates[_currentRound - 1];\\r\\n                previousOption.totalTerminate = uint256(previousOption\\r\\n                    .totalTerminate)\\r\\n                    .sub(_assetToTerminate).toUint128();\\r\\n            } else {\\r\\n                //store temporarily\\r\\n                _option.assetToTerminateForNextRound = uint256(_option\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .sub(_assetToTerminate).toUint128();\\r\\n            }\\r\\n        } else {\\r\\n            userState.assetToTerminate = uint256(userState.assetToTerminate).sub(\\r\\n                _assetToTerminate\\r\\n            ).toUint128();\\r\\n            StructureData.OptionState storage previousOption = _option\\r\\n                .optionStates[_currentRound - 1];\\r\\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).sub(\\r\\n                _assetToTerminate\\r\\n            ).toUint128();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawStorage(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        uint256 _amount,\\r\\n        uint16 _currentRound,\\r\\n        bool _isDeposit\\r\\n    ) external {\\r\\n        //require(_amount > 0, \\\"!amount\\\");\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n        if (_isDeposit) {\\r\\n            //todo: 0 out released amount if missing balance from trader\\r\\n            uint256 releasedAmount = uint256(userState.releasedDepositAssetAmount);\\r\\n            if (releasedAmount <= _amount) {\\r\\n                uint256 redeemAmount = _amount.sub(releasedAmount);\\r\\n                userState.pendingAsset = uint256(userState.pendingAsset).sub(\\r\\n                    redeemAmount\\r\\n                ).toUint128();\\r\\n                userState.releasedDepositAssetAmount = 0;\\r\\n                _option.totalReleasedDepositAssetAmount = uint256(_option\\r\\n                    .totalReleasedDepositAssetAmount)\\r\\n                    .sub(releasedAmount).toUint128();\\r\\n                StructureData.OptionState storage optionState = _option\\r\\n                    .optionStates[_currentRound];\\r\\n                optionState.totalAmount = uint256(optionState.totalAmount).sub(\\r\\n                    redeemAmount\\r\\n                ).toUint128();\\r\\n            } else {\\r\\n                userState.releasedDepositAssetAmount = releasedAmount.sub(\\r\\n                    _amount\\r\\n                ).toUint128();\\r\\n                _option.totalReleasedDepositAssetAmount = uint256(_option\\r\\n                    .totalReleasedDepositAssetAmount)\\r\\n                    .sub(_amount).toUint128();\\r\\n            }\\r\\n        } else {\\r\\n            //same result as completeWithdraw\\r\\n            userState.releasedCounterPartyAssetAmount = uint256(userState\\r\\n                .releasedCounterPartyAssetAmount)\\r\\n                .sub(_amount).toUint128();\\r\\n            _option.totalReleasedCounterPartyAssetAmount = uint256(_option\\r\\n                .totalReleasedCounterPartyAssetAmount)\\r\\n                .sub(_amount).toUint128();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function depositFor(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _userAddress,\\r\\n        uint256 _amount,\\r\\n        uint256 _toTerminate,\\r\\n        uint16 _round,\\r\\n        bool _isOpenRound\\r\\n    ) external {\\r\\n        //require(optionState.totalAmount + (_amount) <= quota[_optionId], \\\"Not enough quota\\\");\\r\\n\\r\\n        StructureData.OptionState storage optionState = _option.optionStates[\\r\\n            _round\\r\\n        ];\\r\\n        StructureData.UserState storage userState = _option.userStates[\\r\\n            _userAddress\\r\\n        ];\\r\\n        //first time added\\r\\n        if (!userState.hasState) {\\r\\n            userState.hasState = true;\\r\\n            _option.usersInvolved.push(_userAddress);\\r\\n        }\\r\\n        if (!_isOpenRound) {\\r\\n            userState.tempLocked = uint256(userState.tempLocked).add(_amount).toUint128();\\r\\n            if (_toTerminate > 0) {\\r\\n                userState.assetToTerminateForNextRound = uint256(userState\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .add(_toTerminate).toUint128();\\r\\n                _option.assetToTerminateForNextRound = uint256(_option\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .add(_toTerminate).toUint128();\\r\\n            }\\r\\n        } else {\\r\\n            userState.pendingAsset = uint256(userState.pendingAsset).add(_amount).toUint128();\\r\\n        }\\r\\n        optionState.totalAmount = uint256(optionState.totalAmount).add(_amount).toUint128();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1c6b499d9ea5fb9302b14f7a0ff8aeb43e3ce53dec01763f76acf9aa8d02ddaa\",\"license\":\"MIT\"},\"contracts/libraries/StructureData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary StructureData {\\r\\n    bytes32 public constant OPTION_ROLE = keccak256(\\\"OPTION_ROLE\\\");\\r\\n    bytes32 public constant SETTLER_ROLE = keccak256(\\\"SETTLER_ROLE\\\");\\r\\n    uint8 public constant MATUREROUND = 1; //7 for daily settlement, 1 for daily settlement\\r\\n    uint8 public constant PRICE_PRECISION = 4;\\r\\n    struct OptionParameters { \\r\\n        uint128 strikePrice; // strike price if executed\\r\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\r\\n    }\\r\\n\\r\\n    struct OptionState {\\r\\n        uint128 totalAmount;\\r\\n        uint128 totalTerminate;\\r\\n        uint128 strikePrice;\\r\\n        uint16 round;\\r\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\r\\n        bool executed;\\r\\n        bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral;\\r\\n    }\\r\\n\\r\\n    struct MaturedState {\\r\\n        uint256 releasedDepositAssetAmount;\\r\\n        uint256 releasedDepositAssetPremiumAmount;\\r\\n        uint256 releasedDepositAssetAmountWithPremium;\\r\\n        uint256 releasedCounterPartyAssetAmount;\\r\\n        uint256 releasedCounterPartyAssetPremiumAmount;\\r\\n        uint256 releasedCounterPartyAssetAmountWithPremium;\\r\\n        uint256 autoRollDepositAssetAmount;\\r\\n        uint256 autoRollDepositAssetPremiumAmount;\\r\\n        uint256 autoRollDepositAssetAmountWithPremium;\\r\\n        uint256 autoRollCounterPartyAssetAmount;\\r\\n        uint256 autoRollCounterPartyAssetPremiumAmount;\\r\\n        uint256 autoRollCounterPartyAssetAmountWithPremium;\\r\\n    }\\r\\n\\r\\n    struct AssetData {\\r\\n        uint128 releasedAmount; //debit\\r\\n        uint128 depositAmount; //credit\\r\\n        int128 leftOverAmount; //history balance\\r\\n        /*\\r\\n         *  actual balance perspective\\r\\n         *  withdrawable = redeemable + released\\r\\n         *  balance = withdrawable + leftOver\\r\\n         */\\r\\n        uint128 balanceAfterSettle;\\r\\n        uint128 withdrawableAfterSettle;\\r\\n        uint128 traderWithdrawn;\\r\\n    }\\r\\n\\r\\n    struct OptionData {\\r\\n        uint128 totalReleasedDepositAssetAmount;\\r\\n        uint128 totalReleasedCounterPartyAssetAmount;\\r\\n        uint128 assetToTerminateForNextRound;\\r\\n        mapping(uint16 => StructureData.OptionState) optionStates;\\r\\n        address[] usersInvolved;\\r\\n        mapping(address => StructureData.UserState) userStates;\\r\\n    }\\r\\n\\r\\n    struct UserState {\\r\\n        uint128 pendingAsset; //for current round\\r\\n        uint128 tempLocked; //asset not sent to trader yet, but closed for deposit\\r\\n        uint128 ongoingAsset;\\r\\n        uint128 assetToTerminate;\\r\\n        uint128 assetToTerminateForNextRound;\\r\\n        uint128 releasedDepositAssetAmount;\\r\\n        uint128 releasedCounterPartyAssetAmount;\\r\\n        bool hasState;\\r\\n    }\\r\\n\\r\\n    struct OptionSnapshot {\\r\\n        uint128 totalPending;\\r\\n        //total tvl = totalLocked + totalTerminating\\r\\n        uint128 totalLocked;\\r\\n        //only set during settlement\\r\\n        uint128 totalTerminating;\\r\\n        //amount to terminate in next round,  totalToTerminate <= totalLocked\\r\\n        uint128 totalToTerminate;\\r\\n        uint128 totalReleasedDeposit;\\r\\n        uint128 totalReleasedCounterParty;\\r\\n    }\\r\\n\\r\\n    struct UserBalance {\\r\\n        uint128 pendingDepositAssetAmount;\\r\\n        //tvl = lockedDepositAssetAmount + terminatingDepositAssetAmount\\r\\n        uint128 lockedDepositAssetAmount;\\r\\n        //only set during settlement\\r\\n        uint128 terminatingDepositAssetAmount;\\r\\n        //amount to terminate in next round, toTerminateDepositAssetAmount <= lockedDepositAssetAmount\\r\\n        uint128 toTerminateDepositAssetAmount;\\r\\n        uint128 releasedDepositAssetAmount;\\r\\n        uint128 releasedCounterPartyAssetAmount;\\r\\n    }\\r\\n    struct OptionPairDefinition {\\r\\n        uint8 callOptionId;\\r\\n        uint8 putOptionId;\\r\\n        uint8 depositAssetAmountDecimals;\\r\\n        uint8 counterPartyAssetAmountDecimals;\\r\\n        address depositAsset;\\r\\n        address counterPartyAsset;\\r\\n    }\\r\\n    struct SettlementAccountingResult {\\r\\n        uint128 depositAmount;\\r\\n        uint128 autoRollAmount; //T-1 Carried (filled only when not executed)\\r\\n        uint128 autoRollPremium; //Premium (filled only when not executed)\\r\\n        //maturedAmount+maturedPremium = requested withdrawal for deposit asset(filled only when not executed and with withdraw request)\\r\\n        uint128 releasedAmount;\\r\\n        uint128 releasedPremium;\\r\\n        //autoRollCounterPartyAmount + autoRollCounterPartyPremium = Execution rolled-out for deposit asset (Execution roll-in for counter party option)\\r\\n        //filled only when executed\\r\\n        uint128 autoRollCounterPartyAmount;\\r\\n        uint128 autoRollCounterPartyPremium;\\r\\n        //maturedCounterPartyAmount+maturedCounterPartyPremium= requested withdrawal for couter party asset(filled only when executed and with withdraw request)\\r\\n        uint128 releasedCounterPartyAmount;\\r\\n        uint128 releasedCounterPartyPremium;  \\r\\n        bool executed;\\r\\n    }\\r\\n\\r\\n    enum OptionExecution {\\r\\n        NoExecution,\\r\\n        ExecuteCall,\\r\\n        ExecutePut\\r\\n    }\\r\\n\\r\\n    struct OptionPairExecutionAccountingResult {\\r\\n        SettlementAccountingResult callOptionResult;\\r\\n        SettlementAccountingResult putOptionResult;\\r\\n        OptionExecution execute;\\r\\n    }\\r\\n\\r\\n    struct SettlementCashflowResult {\\r\\n        uint128 newDepositAmount;\\r\\n        uint128 newReleasedAmount;\\r\\n        int128 leftOverAmount; //positive, if trader didn't withdraw last time; negative, if trader failed to send back last time;\\r\\n        address contractAddress; //0 for eth\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe96d5e97fc2c3782183247a9d2c81ce884365f3eb058ab70efae3a66ba99a597\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nlibrary Utils { \\r\\n     \\r\\n    uint256 public constant RATIOMULTIPLIER = 10000;\\r\\n \\r\\n     using SafeMath for uint256;\\r\\n      function StringConcat(bytes memory _base, bytes memory _value) internal pure returns (string memory) {\\r\\n        string memory _tmpValue = new string(_base.length + _value.length);\\r\\n        bytes memory _newValue = bytes(_tmpValue);\\r\\n\\r\\n        uint i;\\r\\n        uint j;\\r\\n\\r\\n        for(i=0; i<_base.length; i++) {\\r\\n            _newValue[j++] = _base[i];\\r\\n        }\\r\\n\\r\\n        for(i=0; i<_value.length; i++) {\\r\\n            _newValue[j++] = _value[i++];\\r\\n        }\\r\\n\\r\\n        return string(_newValue);\\r\\n    }\\r\\n\\r\\n    function Uint8Sub(uint8 a, uint8 b) internal pure returns (uint8) {\\r\\n        require(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n    \\r\\n \\r\\n    function getAmountToTerminate(uint256 _maturedAmount, uint256 _assetToTerminate, uint256 _assetAmount) \\r\\n    internal pure returns(uint256) {\\r\\n       if (_assetToTerminate == 0 || _assetAmount == 0 || _maturedAmount == 0) return 0;\\r\\n       return _assetToTerminate >= _assetAmount ?  _maturedAmount  : _maturedAmount.mul(_assetToTerminate).div(_assetAmount);\\r\\n   }\\r\\n\\r\\n   function withPremium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\r\\n       return  _baseAmount.mul(RATIOMULTIPLIER + _premimumRate).div(RATIOMULTIPLIER);\\r\\n   }\\r\\n   \\r\\n   function premium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\r\\n       return   _baseAmount.mul(_premimumRate).div(RATIOMULTIPLIER);\\r\\n   }\\r\\n   \\r\\n   function subOrZero(uint256 _base, uint256 _substractor) internal pure returns (uint256) {\\r\\n       return _base >= _substractor ? _base - _substractor : 0;\\r\\n   }\\r\\n  \\r\\n    /*function assertUint104(uint256 num) internal pure {\\r\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\r\\n    }\\r\\n\\r\\n    function assertUint128(uint256 num) internal pure {\\r\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\r\\n    }*/\\r\\n\\r\\n}\",\"keccak256\":\"0x9afd557d360e741555f7ed355c95ffb0ab1e49452c8ca249f21af3a371444409\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x612a0961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c80638a229a5711610096578063b2838a7311610070578063b2838a73146102d7578063c502f991146102f8578063c975707314610318578063ce37f8bc1461032b57600080fd5b80638a229a571461025f578063aab696331461027f578063b0eecba81461029f57600080fd5b806369328dec116100d257806369328dec146101645780637441e8bb146101845780637b40fc98146101a4578063862f70b8146101c457600080fd5b80631bb98a33146100f95780634ed14a7f1461012257806366aef26314610142575b600080fd5b61010c6101073660046124e8565b61034b565b60405161011991906126ca565b60405180910390f35b61013561013036600461235e565b6105fd565b6040516101199190612672565b81801561014e57600080fd5b5061016261015d366004612589565b610811565b005b81801561017057600080fd5b5061016261017f3660046121f0565b6109d5565b81801561019057600080fd5b5061016261019f3660046123f8565b610a45565b8180156101b057600080fd5b506101626101bf3660046123ac565b610c11565b6101d76101d2366004612247565b610eff565b6040516101199190815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e0808301519082015261010080830151908201526101208083015190820152610140808301519082015261016091820151918101919091526101800190565b81801561026b57600080fd5b5061016261027a3660046123ac565b6111cd565b81801561028b57600080fd5b506101d761029a36600461253c565b611398565b8180156102ab57600080fd5b506102bf6102ba3660046125ab565b6114d5565b6040516001600160801b039091168152602001610119565b6102ea6102e53660046121be565b6116c2565b604051908152602001610119565b81801561030457600080fd5b50610162610313366004612452565b611766565b6101356103263660046124b4565b61191a565b81801561033757600080fd5b50610162610346366004612602565b611cc5565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915260006040518061014001604052808960020160006001886103bd919061292b565b61ffff908116825260208083019390935260409182016000908120546001600160801b03168552928401839052908301829052606083018290526080830182905260a0830182905260c0830182905260e0830182905261010083019190915285151561012090920191909152909150600290851611156105f057600088600201600060028761044c919061292b565b61ffff168152602081019190915260400160002080549091506001600160801b031661047a575090506105f3565b6040805160e08101825282546001600160801b038082168352600160801b918290048116602084015260018501549081169383019390935261ffff90830481166060830152600160901b830416608082015260ff600160a01b83048116151560a0830152600160a81b909204909116151560c08201526000906105019086908b8b8b610eff565b9050841561058057610517816101200151611d1f565b6001600160801b031660a084015261014081015161053490611d1f565b6001600160801b031660c0840152606081015161055090611d1f565b6001600160801b031660e0840152608081015161056c90611d1f565b6001600160801b03166101008401526105ed565b61058d8160c00151611d1f565b6001600160801b0316602084015260e08101516105a990611d1f565b6001600160801b0316604084015280516105c290611d1f565b6001600160801b0316606084015260208101516105de90611d1f565b6001600160801b031660808401525b50505b90505b9695505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526001600160a01b03841660009081526004860160209081526040808320815160c08101835281546001600160801b03908116825293810185905291820184905260608201939093526002830154600160801b900482166080820152600383015490911660a082015284156107e45760028461ffff1611156107b45760008760020160006002876106bf919061292b565b61ffff9081168252602080830193909352604091820160002060019081015483516101008101855288546001600160801b038082168352600160801b918290048116978301979097529289015480871695820195909552938290048516606085015260028801548086166080860152829004851660a0850152600388015494851660c0850152930460ff16151560e0830152600160901b90920490911691506107719061076c9083611d91565b611d1f565b6001600160801b03908116602084015260018401546107a09161076c91600160801b90041661ffff8416611e29565b6001600160801b03166040830152506107cc565b8154600160801b90046001600160801b031660208201525b60028201546001600160801b031660608201526105f3565b60018201546001600160801b038082166020840152600160801b9091041660608201529695505050505050565b600382015460005b8181101561095257600084600401600086600301848154811061084c57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902060028101549091506001600160801b0316156108ba576002810180546001830180546001600160801b03908116908316600160801b021790556001600160801b03191690556108e6565b6001810154600160801b90046001600160801b0316156108e6576001810180546001600160801b031690555b8054600160801b90046001600160801b03166109125760010180546001600160801b0319169055610940565b80546001820180546001600160801b0319166001600160801b03600160801b84048116919091179091551690555b8061094a81612991565b915050610819565b50600183015461ffff8316600090815260028501602052604090205461098f9161076c91600160801b90046001600160801b039081169116611e45565b61ffff9092166000908152600284016020526040902080546001600160801b03938416600160801b029316929092179091555060010180546001600160801b0319169055565b600082116109e257600080fd5b6001600160a01b038116610a2c576040516001600160a01b0384169083156108fc029084906000818181858888f19350505050158015610a26573d6000803e3d6000fd5b50505050565b610a406001600160a01b0382168484611e51565b505050565b6001600160a01b038416600090815260048601602052604090208115610b9e576002810154600160801b90046001600160801b0316848111610b41576000610a8d8683611ea3565b8354909150610aa99061076c906001600160801b031683611ea3565b83546001600160801b0319166001600160801b03918216178455600284018054821690558854610ade9161076c911684611ea3565b88546001600160801b0319166001600160801b0391821617895561ffff8616600090815260028a016020526040902080549091610b209161076c911684611ea3565b81546001600160801b0319166001600160801b039190911617905550610b98565b610b4e61076c8287611ea3565b6002830180546001600160801b03928316600160801b029083161790558754610b7c9161076c911687611ea3565b87546001600160801b0319166001600160801b03919091161787555b50610c09565b6003810154610bba9061076c906001600160801b031686611ea3565b6003820180546001600160801b0319166001600160801b039283161790558654610bf09161076c91600160801b90041686611ea3565b86546001600160801b03918216600160801b0291161786555b505050505050565b6001600160a01b038416600090815260048601602052604090208215610e22576002810154600090610c4c906001600160801b031686611e45565b90508261ffff1660021415610cdf578154600160801b90046001600160801b0316811115610c7957600080fd5b60006002880181610c8b60018761292b565b61ffff16815260208101919091526040016000208054909150610cc29061076c90600160801b90046001600160801b031688611e45565b81546001600160801b03918216600160801b029116179055610df1565b6000876002016000600286610cf4919061292b565b61ffff90811682526020808301939093526040918201600090812083516101008101855288546001600160801b038082168352600160801b918290048116978301979097526001808b015480891697840197909752958190048716606083015260028a01548088166080840152819004871660a083015260038a015496871660c083015290950460ff16151560e08601529283015492945092610da1929091600160901b90910416611d91565b905080831115610db057600080fd5b6001890154610dcc9061076c906001600160801b031689611e45565b60018a0180546001600160801b0319166001600160801b039290921691909117905550505b610dfa81611d1f565b6002830180546001600160801b0319166001600160801b039290921691909117905550610c09565b6001810154600090610e4490600160801b90046001600160801b031686611e45565b60018301549091506001600160801b0316811115610e6157600080fd5b610e6a81611d1f565b8260010160106101000a8154816001600160801b0302191690836001600160801b031602179055506000876002016000600186610ea7919061292b565b61ffff16815260208101919091526040016000208054909150610ede9061076c90600160801b90046001600160801b031688611e45565b81546001600160801b03918216600160801b02911617905550505050505050565b610f076120fc565b600060405180610180016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815250905086156110f157600085610fc957610fc4610f8486600a612861565b6040890151610fbe906001600160801b031681610fa28960046127d9565b610fad90600a612861565b8c516001600160801b031690611eaf565b90611ebb565b611013565b611013610fd78660046127d9565b610fe290600a612861565b610fbe610ff087600a612861565b60408b01518b5161100d916001600160801b039182169116611eaf565b90611eaf565b90506000611032886080015161ffff1683611ec790919063ffffffff16565b60208901519091506001600160801b0316156110a657602088015188516110679184916001600160801b039182169116611ed9565b60608401526020880151885161108b9183916001600160801b039182169116611ed9565b6080840181905260608401516110a091611e45565b60a08401525b60608301516110b6908390611ea3565b61012084015260808301516110cc908290611ea3565b61014084018190526101208401516110e391611e45565b610160840152506105f39050565b855160808701516001600160801b039091169060009061111690839061ffff16611ec7565b60208901519091506001600160801b031615611184576020880151885161114b9184916001600160801b039182169116611ed9565b83526020880151885161116c9183916001600160801b039182169116611ed9565b60208401819052835161117e91611e45565b60408401525b8251611191908390611ea3565b60c084015260208301516111a6908290611ea3565b60e0840181905260c08401516111bb91611e45565b61010084015250509695505050505050565b6001600160a01b0384166000908152600486016020526040902082156112e15760028101546112099061076c906001600160801b031686611ea3565b600282810180546001600160801b0319166001600160801b03939093169290921790915561ffff8316141561129e576000600287018161124a60018661292b565b61ffff168152602081019190915260400160002080549091506112819061076c90600160801b90046001600160801b031687611ea3565b81546001600160801b03918216600160801b029116179055610c09565b60018601546112ba9061076c906001600160801b031686611ea3565b6001870180546001600160801b0319166001600160801b0392909216919091179055610c09565b60018101546113049061076c90600160801b90046001600160801b031686611ea3565b8160010160106101000a8154816001600160801b0302191690836001600160801b031602179055506000866002016000600185611341919061292b565b61ffff168152602081019190915260400160002080549091506113789061076c90600160801b90046001600160801b031687611ea3565b81546001600160801b03918216600160801b029116179055505050505050565b6113a06120fc565b6040805160e08101825287546001600160801b038082168352600160801b918290048116602084015260018a01549081169383019390935261ffff90830481166060830152600160901b830416608082015260ff600160a01b83048116151560a0830152600160a81b909204909116151560c0820152600090611427908490888888610eff565b60018801805485158015600160a01b0260ff60a01b19909216919091179091559091506114905760a081015188546114739161076c91600160801b90046001600160801b031690611e45565b88546001600160801b03918216600160801b0291161788556105f0565b604081015188546114ae9161076c916001600160801b031690611e45565b88546001600160801b0319166001600160801b039190911617909755509495945050505050565b6040805160e0810182526000808252602080830182815283850183815261ffff808916606087018181526080880187815260a089018881528b151560c08b01908152848a5260028f01909852998820895196516001600160801b03908116600160801b908102988216989098178255955160019182018054945193519c5199511515600160a81b0260ff60a81b199a1515600160a01b0260ff60a01b199e8916600160901b029e909e1662ffffff60901b199590981690990271ffffffffffffffffffffffffffffffffffff19909516919097161792909217169290921797909717939093169190911790559092111561167457600385015460005b8181101561167157600087600401600089600301848154811061160457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902080549091506001600160801b0316156116515780546001600160801b0316600160801b81021781555b80546001600160801b03191690558061166981612991565b9150506115d1565b50505b60018461ffff16116116875760006116b7565b60028501600061169860018761292b565b61ffff1681526020810191909152604001600020546001600160801b03165b9150505b9392505050565b60006001600160a01b03831615611753576040516370a0823160e01b81526001600160a01b0383811660048301528416906370a082319060240160206040518083038186803b15801561171457600080fd5b505afa158015611728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174c91906125ea565b9050611760565b506001600160a01b038116315b92915050565b61ffff8216600090815260028701602090815260408083206001600160a01b038916845260048a019092529091206003810154600160801b900460ff166117ee576003808201805460ff60801b1916600160801b17905588018054600181018255600091825260209091200180546001600160a01b0389166001600160a01b03199091161790555b826118a75780546118139061076c90600160801b90046001600160801b031688611e45565b81546001600160801b03918216600160801b02911617815584156118a257600281015461184d9061076c906001600160801b031687611e45565b6002820180546001600160801b0319166001600160801b03928316179055600189015461187f9161076c911687611e45565b6001890180546001600160801b0319166001600160801b03929092169190911790555b6118dc565b80546118c09061076c906001600160801b031688611e45565b81546001600160801b0319166001600160801b03919091161781555b81546118f59061076c906001600160801b031688611e45565b82546001600160801b0319166001600160801b03919091161790915550505050505050565b6040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a0808701859052875160e081018952858152938401859052968301849052908201839052810182905293840181905290830152906040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091526040805160c08101825261ffff86166000908152600289016020908152838220546001600160801b039081168452908301829052928201819052606082015287548083166080830152600160801b900490911660a08201528515611bf957600287016000611a2560018861292b565b61ffff90811682526020808301939093526040918201600020825160e08101845281546001600160801b038082168352600160801b918290048116968301969096526001928301548087169583019590955284048316606080830191909152600160901b85048416608083015260ff600160a01b86048116151560a0840152600160a81b909504909416151560c0820152908b01549093169184019190915290935060029086161115611be457866002016000600287611ae5919061292b565b61ffff90811682526020808301939093526040918201600020825160e08101845281546001600160801b038082168352600160801b9182900481169683018790526001909301549283169482019490945292810482166060840152600160901b81049091166080830181905260ff600160a01b83048116151560a0850152600160a81b909204909116151560c0830152909350611b859161076c91611e29565b6001600160801b039081166040830181905260808401518451611bd19361076c9392611bcb92611bba92169061ffff16611e29565b87516001600160801b031690611e45565b90611ea3565b6001600160801b031660208201526105f3565b82516001600160801b031660208201526105f3565b60018561ffff1611156105f357600287016000611c1760018861292b565b61ffff90811682526020808301939093526040918201600020825160e08101845281546001600160801b03808216808452600160801b928390048216848901908152600190950154808316978501979097529186048516606080850191909152600160901b8704909516608084015260ff600160a01b87048116151560a0850152600160a81b909604909516151560c083015294860194909452519091169083015291509695505050505050565b60018101546001600160801b031615611cdd57600080fd5b6001018054601083901c6001600160801b031673ffff0000ffffffffffffffffffffffffffffffff199091161761ffff92909216600160901b02919091179055565b60006001600160801b03821115611d8d5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b60648201526084015b60405180910390fd5b5090565b60408201516000906001600160801b031680611dbc57505060208201516001600160801b0316611760565b611dea8361ffff16611de486606001516001600160801b031684611ea390919063ffffffff16565b90611e29565b905083602001516001600160801b031660001415611e09579050611760565b6020840151611e21906001600160801b031682611e45565b949350505050565b60006116bb612710610fbe611e3e85836127c1565b8690611eaf565b60006116bb82846127c1565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a40908490611f1f565b60006116bb828461294e565b60006116bb828461290c565b60006116bb82846127fe565b60006116bb612710610fbe8585611eaf565b6000821580611ee6575081155b80611eef575083155b15611efc575060006116bb565b81831015611f1757611f1282610fbe8686611eaf565b611e21565b509192915050565b6000611f74826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ff19092919063ffffffff16565b805190915015610a405780806020019051810190611f92919061222b565b610a405760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611d84565b6060611e21848460008585843b61204a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611d84565b600080866001600160a01b031685876040516120669190612623565b60006040518083038185875af1925050503d80600081146120a3576040519150601f19603f3d011682016040523d82523d6000602084013e6120a8565b606091505b50915091506120b88282866120c3565b979650505050505050565b606083156120d25750816116bb565b8251156120e25782518084602001fd5b8160405162461bcd60e51b8152600401611d84919061263f565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461217457600080fd5b919050565b8035612174816129c2565b80356001600160801b038116811461217457600080fd5b803561ffff8116811461217457600080fd5b803560ff8116811461217457600080fd5b600080604083850312156121d0578182fd5b6121d98361215d565b91506121e76020840161215d565b90509250929050565b600080600060608486031215612204578081fd5b61220d8461215d565b9250602084013591506122226040850161215d565b90509250925092565b60006020828403121561223c578081fd5b81516116bb816129c2565b6000806000806000858703610160811215612260578182fd5b863561226b816129c2565b955060e0601f198201121561227e578182fd5b5060405160e0810181811067ffffffffffffffff821117156122ae57634e487b7160e01b83526041600452602483fd5b6040526122bd60208801612184565b81526122cb60408801612184565b60208201526122dc60608801612184565b60408201526122ed6080880161219b565b60608201526122fe60a0880161219b565b608082015261230f60c08801612179565b60a082015261232060e08801612179565b60c082015293506123346101008701612179565b925061234361012087016121ad565b915061235261014087016121ad565b90509295509295909350565b60008060008060808587031215612373578384fd5b843593506123836020860161215d565b92506040850135612393816129c2565b91506123a16060860161219b565b905092959194509250565b600080600080600060a086880312156123c3578081fd5b853594506123d36020870161215d565b93506040860135925060608601356123ea816129c2565b91506123526080870161219b565b600080600080600060a0868803121561240f578081fd5b8535945061241f6020870161215d565b9350604086013592506124346060870161219b565b91506080860135612444816129c2565b809150509295509295909350565b60008060008060008060c0878903121561246a578081fd5b8635955061247a6020880161215d565b945060408701359350606087013592506124966080880161219b565b915060a08701356124a6816129c2565b809150509295509295509295565b6000806000606084860312156124c8578081fd5b8335925060208401356124da816129c2565b91506122226040850161219b565b60008060008060008060c08789031215612500578384fd5b863595506020870135612512816129c2565b9450612520604088016121ad565b935061252e606088016121ad565b92506124966080880161219b565b60008060008060008060c08789031215612554578384fd5b8635955060208701359450604087013561256d816129c2565b935061257b606088016121ad565b9250612496608088016121ad565b6000806040838503121561259b578182fd5b823591506121e76020840161219b565b6000806000606084860312156125bf578081fd5b833592506125cf6020850161219b565b915060408401356125df816129c2565b809150509250925092565b6000602082840312156125fb578081fd5b5051919050565b60008060408385031215612614578182fd5b50508035926020909101359150565b60008251612635818460208701612965565b9190910192915050565b602081526000825180602084015261265e816040850160208701612965565b601f01601f19169190910160400192915050565b60c0810161176082846001600160801b038082511683528060208301511660208401528060408301511660408401528060608301511660608401528060808301511660808401528060a08301511660a0840152505050565b81516001600160801b03168152610140810160208301516126f660208401826001600160801b03169052565b50604083015161271160408401826001600160801b03169052565b50606083015161272c60608401826001600160801b03169052565b50608083015161274760808401826001600160801b03169052565b5060a083015161276260a08401826001600160801b03169052565b5060c083015161277d60c08401826001600160801b03169052565b5060e083015161279860e08401826001600160801b03169052565b50610100838101516001600160801b031690830152610120928301511515929091019190915290565b600082198211156127d4576127d46129ac565b500190565b600060ff821660ff84168060ff038211156127f6576127f66129ac565b019392505050565b60008261281957634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561285957816000190482111561283f5761283f6129ac565b8085161561284c57918102915b93841c9390800290612823565b509250929050565b60006116bb60ff84168360008261287a57506001611760565b8161288757506000611760565b816001811461289d57600281146128a7576128c3565b6001915050611760565b60ff8411156128b8576128b86129ac565b50506001821b611760565b5060208310610133831016604e8410600b84101617156128e6575081810a611760565b6128f0838361281e565b8060001904821115612904576129046129ac565b029392505050565b6000816000190483118215151615612926576129266129ac565b500290565b600061ffff83811690831681811015612946576129466129ac565b039392505050565b600082821015612960576129606129ac565b500390565b60005b83811015612980578181015183820152602001612968565b83811115610a265750506000910152565b60006000198214156129a5576129a56129ac565b5060010190565b634e487b7160e01b600052601160045260246000fd5b80151581146129d057600080fd5b5056fea26469706673582212200965537d922b82181f842c9c07414d705cfe72b963155169671d284f737de11a64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}