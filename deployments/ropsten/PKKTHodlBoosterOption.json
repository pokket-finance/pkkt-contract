{
  "address": "0x13aA43920492c78a437B88C5DD3E3133a3B179b8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_settler",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "callOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "putOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "depositAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "counterPartyAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterPartyAsset",
              "type": "address"
            }
          ],
          "internalType": "struct StructureData.OptionPairDefinition[]",
          "name": "_optionPairDefinitions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "optionId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "optionId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "callOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "putOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "depositAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "counterPartyAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterPartyAsset",
              "type": "address"
            }
          ],
          "internalType": "struct StructureData.OptionPairDefinition[]",
          "name": "_optionPairDefinitions",
          "type": "tuple[]"
        }
      ],
      "name": "addOptionPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "balanceEnough",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        }
      ],
      "name": "batchWithdrawAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canDepositEthAndUsdc",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canDepositWbtcAndUsdc",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_assetToTerminate",
          "type": "uint256"
        }
      ],
      "name": "cancelWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        }
      ],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "executionAccountingResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "depositAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.SettlementAccountingResult",
          "name": "callOptionResult",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "depositAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.SettlementAccountingResult",
          "name": "putOptionResult",
          "type": "tuple"
        },
        {
          "internalType": "enum StructureData.OptionExecution",
          "name": "execute",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        }
      ],
      "name": "getAccountBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "pendingDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lockedDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "terminatingDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "toTerminateDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyAssetAmount",
              "type": "uint128"
            }
          ],
          "internalType": "struct StructureData.UserBalance",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        }
      ],
      "name": "getOptionSnapShot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "totalPending",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalLocked",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalTerminating",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalToTerminate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalReleasedDeposit",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalReleasedCounterParty",
              "type": "uint128"
            }
          ],
          "internalType": "struct StructureData.OptionSnapshot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "_round",
          "type": "uint16"
        }
      ],
      "name": "getOptionStateByRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "totalAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalTerminate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "strikePrice",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "round",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callOrPut",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initiateSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_assetToTerminate",
          "type": "uint256"
        }
      ],
      "name": "initiateWithraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionPairCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "optionPairs",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "callOptionId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "putOptionId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "depositAssetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "counterPartyAssetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "depositAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "counterPartyAsset",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_parameters",
          "type": "uint256[]"
        }
      ],
      "name": "setOptionParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StructureData.OptionExecution[]",
          "name": "_execution",
          "type": "uint8[]"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "settlementCashflowResult",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "newDepositAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "newReleasedAmount",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "leftOverAmount",
          "type": "int128"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "pairId",
          "type": "uint8"
        }
      ],
      "name": "switchOptionPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underSettlement",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdrawAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x667b35c8e97dd2a151e22efd9ac01774139e4b9c843522ecf359333250563d25",
  "receipt": {
    "to": null,
    "from": "0x4EF10084EB9541EbE1d0Ed060Cdc87C37a850E8B",
    "contractAddress": "0x13aA43920492c78a437B88C5DD3E3133a3B179b8",
    "transactionIndex": 1,
    "gasUsed": "5015705",
    "logsBloom": "0x
    "blockHash": "0x55d45b0042e9b9869029f42615d691a0509ec3a79e5c4c6f5a4c7c7edbb446f4",
    "transactionHash": "0x667b35c8e97dd2a151e22efd9ac01774139e4b9c843522ecf359333250563d25",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 11906259,
        "transactionHash": "0x667b35c8e97dd2a151e22efd9ac01774139e4b9c843522ecf359333250563d25",
        "address": "0x13aA43920492c78a437B88C5DD3E3133a3B179b8",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ef10084eb9541ebe1d0ed060cdc87c37a850e8b",
          "0x0000000000000000000000004ef10084eb9541ebe1d0ed060cdc87c37a850e8b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x55d45b0042e9b9869029f42615d691a0509ec3a79e5c4c6f5a4c7c7edbb446f4"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 11906259,
        "transactionHash": "0x667b35c8e97dd2a151e22efd9ac01774139e4b9c843522ecf359333250563d25",
        "address": "0x13aA43920492c78a437B88C5DD3E3133a3B179b8",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6666bf5bfee463d10a7fc50448047f8a53b7762d7e28fbc5c643182785f3fd3f",
          "0x0000000000000000000000007faa46fb04bb00de3f6d5e90d78b4a37f8e48cd4",
          "0x0000000000000000000000004ef10084eb9541ebe1d0ed060cdc87c37a850e8b"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x55d45b0042e9b9869029f42615d691a0509ec3a79e5c4c6f5a4c7c7edbb446f4"
      }
    ],
    "blockNumber": 11906259,
    "cumulativeGasUsed": "5257953",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7FAa46FB04BB00de3F6D5E90d78b4a37f8E48cd4",
    [
      {
        "depositAssetAmountDecimals": 18,
        "counterPartyAssetAmountDecimals": 6,
        "depositAsset": "0x0000000000000000000000000000000000000000",
        "counterPartyAsset": "0x0f3210636461Ae2C7ADAEF4d1A8124EB0F3b63fA",
        "callOptionId": 0,
        "putOptionId": 0
      },
      {
        "depositAssetAmountDecimals": 8,
        "counterPartyAssetAmountDecimals": 6,
        "depositAsset": "0xE75e6098CE2d7F289b07ABB055321d690ed2912d",
        "counterPartyAsset": "0x0f3210636461Ae2C7ADAEF4d1A8124EB0F3b63fA",
        "callOptionId": 0,
        "putOptionId": 0
      }
    ]
  ],
  "solcInputHash": "f4f67ba8e19e0af1536913f27bfe5729",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_settler\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"callOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"putOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"counterPartyAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterPartyAsset\",\"type\":\"address\"}],\"internalType\":\"struct StructureData.OptionPairDefinition[]\",\"name\":\"_optionPairDefinitions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"optionId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"optionId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"callOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"putOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"counterPartyAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterPartyAsset\",\"type\":\"address\"}],\"internalType\":\"struct StructureData.OptionPairDefinition[]\",\"name\":\"_optionPairDefinitions\",\"type\":\"tuple[]\"}],\"name\":\"addOptionPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"balanceEnough\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"batchWithdrawAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canDepositEthAndUsdc\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canDepositWbtcAndUsdc\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_assetToTerminate\",\"type\":\"uint256\"}],\"name\":\"cancelWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"executionAccountingResult\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"depositAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.SettlementAccountingResult\",\"name\":\"callOptionResult\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"depositAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.SettlementAccountingResult\",\"name\":\"putOptionResult\",\"type\":\"tuple\"},{\"internalType\":\"enum StructureData.OptionExecution\",\"name\":\"execute\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"}],\"name\":\"getAccountBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"pendingDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockedDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"terminatingDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"toTerminateDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyAssetAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct StructureData.UserBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"}],\"name\":\"getOptionSnapShot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"totalPending\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalLocked\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalTerminating\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalToTerminate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalReleasedDeposit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalReleasedCounterParty\",\"type\":\"uint128\"}],\"internalType\":\"struct StructureData.OptionSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_round\",\"type\":\"uint16\"}],\"name\":\"getOptionStateByRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"totalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalTerminate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"strikePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_assetToTerminate\",\"type\":\"uint256\"}],\"name\":\"initiateWithraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionPairCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"optionPairs\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"callOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"putOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"counterPartyAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterPartyAsset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_parameters\",\"type\":\"uint256[]\"}],\"name\":\"setOptionParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StructureData.OptionExecution[]\",\"name\":\"_execution\",\"type\":\"uint8[]\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"settlementCashflowResult\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"newDepositAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"newReleasedAmount\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"leftOverAmount\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"pairId\",\"type\":\"uint8\"}],\"name\":\"switchOptionPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underSettlement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PKKTHodlBoosterOption.sol\":\"PKKTHodlBoosterOption\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/OptionVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";\\r\\nimport {Utils} from \\\"./libraries/Utils.sol\\\";\\r\\nimport {OptionLifecycle} from \\\"./libraries/OptionLifecycle.sol\\\";\\r\\nimport \\\"./interfaces/ISettlementAggregator.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\n\\r\\nabstract contract OptionVault is\\r\\n    AccessControl,\\r\\n    ReentrancyGuard,\\r\\n    ISettlementAggregator\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n    using Utils for uint256;\\r\\n    using SafeCast for uint256;\\r\\n    using SafeCast for int256;\\r\\n\\r\\n    uint16 public override currentRound;\\r\\n    bool public underSettlement;\\r\\n    uint8 public optionPairCount;\\r\\n\\r\\n    mapping(address => StructureData.SettlementCashflowResult)\\r\\n        public settlementCashflowResult;\\r\\n\\r\\n    mapping(uint8 => StructureData.OptionPairDefinition) public optionPairs;\\r\\n\\r\\n    mapping(uint8 => StructureData.OptionPairExecutionAccountingResult)\\r\\n        public executionAccountingResult;\\r\\n\\r\\n    mapping(uint8 => StructureData.OptionData) internal optionData;\\r\\n    uint8 private assetCount;\\r\\n    mapping(uint8 => address) private asset;\\r\\n    mapping(address => StructureData.AssetData) private assetData;\\r\\n\\r\\n    constructor(address _settler) {\\r\\n        require(_settler != address(0));\\r\\n\\r\\n        // Contract deployer will be able to grant and revoke trading role\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        // Address capable of initiating and finizalizing settlement\\r\\n        _setupRole(StructureData.SETTLER_ROLE, _settler);\\r\\n    }\\r\\n\\r\\n    function clientWithdraw(\\r\\n        address _target,\\r\\n        uint256 _amount,\\r\\n        address _contractAddress,\\r\\n        bool _redeem\\r\\n    ) internal nonReentrant {\\r\\n        if (!_redeem) {\\r\\n            require(balanceEnough(_contractAddress));\\r\\n        }\\r\\n        OptionLifecycle.withdraw(_target, _amount, _contractAddress);\\r\\n    }\\r\\n\\r\\n    function addOptionPairs(\\r\\n        StructureData.OptionPairDefinition[] memory _optionPairDefinitions\\r\\n    ) public override {\\r\\n        _checkRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        uint256 length = _optionPairDefinitions.length;\\r\\n        uint8 optionPairCount_ = optionPairCount;\\r\\n        uint8 assetCount_ = assetCount;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            StructureData.OptionPairDefinition\\r\\n                memory pair = _optionPairDefinitions[i];\\r\\n            pair.callOptionId = optionPairCount_ * 2 + 1;\\r\\n            pair.putOptionId = pair.callOptionId + 1;\\r\\n            optionPairs[optionPairCount_++] = pair;\\r\\n            if (assetCount_ == 0) {\\r\\n                asset[assetCount_++] = pair.depositAsset;\\r\\n                asset[assetCount_++] = pair.counterPartyAsset;\\r\\n            } else {\\r\\n                bool callAdded = false;\\r\\n                bool putAdded = false;\\r\\n                for (uint8 j = 0; j < assetCount_; j++) {\\r\\n                    if (asset[j] == pair.depositAsset) {\\r\\n                        callAdded = true;\\r\\n                    }\\r\\n                    if (asset[j] == pair.counterPartyAsset) {\\r\\n                        putAdded = true;\\r\\n                    }\\r\\n                }\\r\\n                if (!callAdded) {\\r\\n                    asset[assetCount_++] = pair.depositAsset;\\r\\n                }\\r\\n                if (!putAdded) {\\r\\n                    asset[assetCount_++] = pair.counterPartyAsset;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        optionPairCount = optionPairCount_;\\r\\n        assetCount = assetCount_;\\r\\n    }\\r\\n\\r\\n    function initiateSettlement() external override {\\r\\n        _checkRole(StructureData.SETTLER_ROLE, msg.sender);\\r\\n        require(!underSettlement);\\r\\n        currentRound = currentRound + 1;\\r\\n        underSettlement = true;\\r\\n        for (uint8 i = 0; i < optionPairCount; i++) {\\r\\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\\r\\n            StructureData.OptionData storage callOption = optionData[\\r\\n                pair.callOptionId\\r\\n            ];\\r\\n            uint128 pending1 = OptionLifecycle.rollToNextByOption(\\r\\n                callOption,\\r\\n                currentRound,\\r\\n                true\\r\\n            );\\r\\n            StructureData.OptionData storage putOption = optionData[\\r\\n                pair.putOptionId\\r\\n            ];\\r\\n            uint128 pending2 = OptionLifecycle.rollToNextByOption(\\r\\n                putOption,\\r\\n                currentRound,\\r\\n                false\\r\\n            );\\r\\n            if (pending1 > 0) {\\r\\n                assetData[pair.depositAsset].depositAmount = uint256(assetData[\\r\\n                    pair.depositAsset\\r\\n                ].depositAmount).add(pending1).toUint128();\\r\\n            }\\r\\n            if (pending2 > 0) {\\r\\n                assetData[pair.counterPartyAsset].depositAmount = uint256(assetData[\\r\\n                    pair.counterPartyAsset\\r\\n                ].depositAmount).add(pending2).toUint128();\\r\\n            }\\r\\n            if (currentRound <= 2) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            StructureData.SettlementAccountingResult\\r\\n                memory noneExecuteCallOption = OptionLifecycle\\r\\n                    .dryRunSettlementByOption(\\r\\n                        callOption, \\r\\n                        true,\\r\\n                        pair.depositAssetAmountDecimals,\\r\\n                        pair.counterPartyAssetAmountDecimals,\\r\\n                        currentRound,\\r\\n                        false\\r\\n                    );\\r\\n            StructureData.SettlementAccountingResult\\r\\n                memory noneExecutePutOption = OptionLifecycle\\r\\n                    .dryRunSettlementByOption(\\r\\n                        putOption, \\r\\n                        false,\\r\\n                        pair.counterPartyAssetAmountDecimals,\\r\\n                        pair.depositAssetAmountDecimals,\\r\\n                        currentRound,\\r\\n                        false\\r\\n                    );\\r\\n\\r\\n            StructureData.OptionPairExecutionAccountingResult\\r\\n                memory pairResult = StructureData\\r\\n                    .OptionPairExecutionAccountingResult({\\r\\n                        execute: StructureData.OptionExecution.NoExecution,\\r\\n                        callOptionResult: noneExecuteCallOption,\\r\\n                        putOptionResult: noneExecutePutOption\\r\\n                    });\\r\\n            executionAccountingResult[i * 3] = pairResult;\\r\\n            StructureData.SettlementAccountingResult\\r\\n                memory executeCallOption = OptionLifecycle\\r\\n                    .dryRunSettlementByOption(\\r\\n                        callOption, \\r\\n                        true,\\r\\n                        pair.depositAssetAmountDecimals,\\r\\n                        pair.counterPartyAssetAmountDecimals,\\r\\n                        currentRound,\\r\\n                        true\\r\\n                    );\\r\\n            pairResult = StructureData.OptionPairExecutionAccountingResult({\\r\\n                execute: StructureData.OptionExecution.ExecuteCall,\\r\\n                callOptionResult: executeCallOption,\\r\\n                putOptionResult: noneExecutePutOption\\r\\n            });\\r\\n            executionAccountingResult[i * 3 + 1] = pairResult;\\r\\n\\r\\n            StructureData.SettlementAccountingResult\\r\\n                memory executePutOption = OptionLifecycle\\r\\n                    .dryRunSettlementByOption(\\r\\n                        putOption, \\r\\n                        false,\\r\\n                        pair.counterPartyAssetAmountDecimals,\\r\\n                        pair.depositAssetAmountDecimals,\\r\\n                        currentRound,\\r\\n                        true\\r\\n                    );\\r\\n            pairResult = StructureData.OptionPairExecutionAccountingResult({\\r\\n                execute: StructureData.OptionExecution.ExecutePut,\\r\\n                callOptionResult: noneExecuteCallOption,\\r\\n                putOptionResult: executePutOption\\r\\n            });\\r\\n            executionAccountingResult[i * 3 + 2] = pairResult;\\r\\n        }\\r\\n\\r\\n        if (currentRound == 1) {\\r\\n            underSettlement = false;\\r\\n            return;\\r\\n        }\\r\\n        if (currentRound == 2) {\\r\\n            for(uint8 i = 1; i <= optionPairCount * 2; i++) { \\r\\n                OptionLifecycle.commitByOption(optionData[i], 1); \\r\\n            }            \\r\\n            updateAsset();\\r\\n            underSettlement = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function settle(StructureData.OptionExecution[] memory _execution)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        _checkRole(StructureData.SETTLER_ROLE, msg.sender);\\r\\n        require(underSettlement);\\r\\n        uint256 count = _execution.length;\\r\\n        require(count == optionPairCount);\\r\\n        uint16 previousRound = currentRound - 1;\\r\\n        for (uint8 i = 0; i < count; i++) {\\r\\n            StructureData.OptionExecution execution = _execution[i];\\r\\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\\r\\n\\r\\n            StructureData.OptionData storage callOption = optionData[\\r\\n                pair.callOptionId\\r\\n            ];\\r\\n            StructureData.OptionData storage putOption = optionData[\\r\\n                pair.putOptionId\\r\\n            ];\\r\\n            StructureData.MaturedState memory maturedState;\\r\\n            StructureData.OptionState\\r\\n                storage previousCallOptionState = callOption.optionStates[\\r\\n                    previousRound - 1\\r\\n                ];\\r\\n            if (previousCallOptionState.totalAmount > 0) { \\r\\n                maturedState = OptionLifecycle.closePreviousByOption(\\r\\n                    callOption,\\r\\n                    previousCallOptionState,\\r\\n                    true,\\r\\n                    pair.depositAssetAmountDecimals,\\r\\n                    pair.counterPartyAssetAmountDecimals,\\r\\n                    execution == StructureData.OptionExecution.ExecuteCall\\r\\n                );\\r\\n                if (maturedState.releasedDepositAssetAmount > 0) {\\r\\n                    assetData[pair.depositAsset].releasedAmount = uint256(assetData[\\r\\n                        pair.depositAsset\\r\\n                    ].releasedAmount).add(\\r\\n                            maturedState.releasedDepositAssetAmountWithPremium\\r\\n                        ).toUint128();\\r\\n                } else if (maturedState.releasedCounterPartyAssetAmount > 0) {\\r\\n                    assetData[pair.counterPartyAsset]\\r\\n                        .releasedAmount = uint256(assetData[pair.counterPartyAsset]\\r\\n                        .releasedAmount)\\r\\n                        .add(\\r\\n                            maturedState\\r\\n                                .releasedCounterPartyAssetAmountWithPremium\\r\\n                        ).toUint128();\\r\\n                }\\r\\n                if (execution == StructureData.OptionExecution.ExecuteCall) {\\r\\n                    autoRollToCounterPartyByOption(\\r\\n                        callOption,\\r\\n                        previousCallOptionState,\\r\\n                        putOption,\\r\\n                        pair.putOptionId,\\r\\n                        maturedState.releasedCounterPartyAssetAmountWithPremium,\\r\\n                        maturedState.autoRollCounterPartyAssetAmountWithPremium\\r\\n                    );\\r\\n                } else {\\r\\n                    autoRollByOption(\\r\\n                        callOption,\\r\\n                        pair.callOptionId,\\r\\n                        previousCallOptionState,\\r\\n                        maturedState.releasedDepositAssetAmountWithPremium,\\r\\n                        maturedState.autoRollDepositAssetAmountWithPremium\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n\\r\\n            StructureData.OptionState storage previousPutOptionState = putOption\\r\\n                .optionStates[previousRound - 1];\\r\\n\\r\\n            if (previousPutOptionState.totalAmount > 0) { \\r\\n                maturedState = OptionLifecycle.closePreviousByOption(\\r\\n                    putOption,\\r\\n                    previousPutOptionState,\\r\\n                    false,\\r\\n                    pair.counterPartyAssetAmountDecimals,\\r\\n                    pair.depositAssetAmountDecimals,\\r\\n                    execution == StructureData.OptionExecution.ExecutePut\\r\\n                );\\r\\n                if (maturedState.releasedDepositAssetAmount > 0) {\\r\\n                    assetData[pair.counterPartyAsset]\\r\\n                        .releasedAmount = uint256(assetData[pair.counterPartyAsset]\\r\\n                        .releasedAmount)\\r\\n                        .add(\\r\\n                            maturedState.releasedDepositAssetAmountWithPremium\\r\\n                        ).toUint128();\\r\\n                } else if (maturedState.releasedCounterPartyAssetAmount > 0) {\\r\\n                    assetData[pair.depositAsset].releasedAmount = uint256(assetData[\\r\\n                        pair.depositAsset\\r\\n                    ].releasedAmount).add(\\r\\n                            maturedState\\r\\n                                .releasedCounterPartyAssetAmountWithPremium\\r\\n                        ).toUint128();\\r\\n                }\\r\\n                if (execution == StructureData.OptionExecution.ExecutePut) {\\r\\n                    autoRollToCounterPartyByOption(\\r\\n                        putOption,\\r\\n                        previousPutOptionState,\\r\\n                        callOption,\\r\\n                        pair.callOptionId,\\r\\n                        maturedState.releasedCounterPartyAssetAmountWithPremium,\\r\\n                        maturedState.autoRollCounterPartyAssetAmountWithPremium\\r\\n                    );\\r\\n                } else {\\r\\n                    autoRollByOption(\\r\\n                        putOption,\\r\\n                        pair.putOptionId,\\r\\n                        previousPutOptionState,\\r\\n                        maturedState.releasedDepositAssetAmountWithPremium,\\r\\n                        maturedState.autoRollDepositAssetAmountWithPremium\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n            OptionLifecycle.commitByOption(callOption, previousRound);\\r\\n            OptionLifecycle.commitByOption(putOption, previousRound);\\r\\n        }\\r\\n\\r\\n        updateAsset();\\r\\n        underSettlement = false;\\r\\n    }\\r\\n\\r\\n    function updateAsset() private {\\r\\n        for (uint8 i = 0; i < assetCount; i++) {\\r\\n            address assetAddress = asset[i];\\r\\n            StructureData.AssetData storage assetSubData = assetData[\\r\\n                assetAddress\\r\\n            ];\\r\\n            //no snaphot previously, so, no balance change\\r\\n            //todo: room for gas improvement\\r\\n            int128 leftOver = assetSubData.leftOverAmount +\\r\\n                (\\r\\n                    currentRound == 2\\r\\n                        ? int128(0)\\r\\n                        : (int128(getBalanceChange(assetAddress)) -\\r\\n                            int128(assetSubData.depositAmount) +\\r\\n                            int128(assetSubData.releasedAmount))\\r\\n                );\\r\\n\\r\\n            assetSubData.traderWithdrawn = 0;\\r\\n            assetSubData.balanceAfterSettle = OptionLifecycle.getAvailableBalance(assetAddress, address(this)).toUint128();\\r\\n            assetSubData.withdrawableAfterSettle = collectWithdrawable(\\r\\n                assetAddress\\r\\n            ).toUint128();\\r\\n            StructureData.SettlementCashflowResult\\r\\n                memory instruction = StructureData.SettlementCashflowResult({\\r\\n                    newReleasedAmount: assetSubData.releasedAmount,\\r\\n                    newDepositAmount: assetSubData.depositAmount,\\r\\n                    leftOverAmount: leftOver,\\r\\n                    contractAddress: assetAddress\\r\\n                });\\r\\n            settlementCashflowResult[assetAddress] = instruction;\\r\\n            //todo: check overflow\\r\\n            assetSubData.leftOverAmount =\\r\\n                int128(leftOver +\\r\\n                int128(assetSubData.depositAmount) -\\r\\n                int128(assetSubData.releasedAmount));\\r\\n            assetSubData.depositAmount = 0;\\r\\n            assetSubData.releasedAmount = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setOptionParameters(\\r\\n        uint256[] memory _parameters\\r\\n    ) external override {\\r\\n        _checkRole(StructureData.SETTLER_ROLE, msg.sender);\\r\\n        uint256 count = _parameters.length; \\r\\n        require(!underSettlement);\\r\\n        require(currentRound > 1);\\r\\n        require(count == optionPairCount*2);\\r\\n        for (uint8 i = 0; i < count; i++) {\\r\\n            uint256 parameter = _parameters[i];\\r\\n            StructureData.OptionState storage optionState = optionData[i+1].optionStates[currentRound - 1];\\r\\n            OptionLifecycle.setOptionParameters(parameter, optionState); \\r\\n        }\\r\\n    }\\r\\n\\r\\n    //todo: whitelist / nonReentrancy check\\r\\n    function withdrawAsset(address _trader, address _asset) external override {\\r\\n        _checkRole(StructureData.SETTLER_ROLE, msg.sender);\\r\\n        StructureData.AssetData storage assetSubData = assetData[_asset];\\r\\n        require(assetSubData.leftOverAmount > 0); \\r\\n        uint128 balance = uint128(assetSubData.leftOverAmount);\\r\\n        OptionLifecycle.withdraw(_trader, uint256(balance), _asset);\\r\\n        assetSubData.traderWithdrawn = balance;\\r\\n        assetSubData.leftOverAmount = 0;\\r\\n    }\\r\\n\\r\\n    function batchWithdrawAssets(address _trader, address[] memory _assets) external override {\\r\\n        _checkRole(StructureData.SETTLER_ROLE, msg.sender);\\r\\n        uint256 count = _assets.length;\\r\\n        for(uint256 i = 0; i < count; i++) {\\r\\n            StructureData.AssetData storage assetSubData = assetData[_assets[i]];\\r\\n            require(assetSubData.leftOverAmount > 0); \\r\\n            uint128 balance = uint128(assetSubData.leftOverAmount);\\r\\n            OptionLifecycle.withdraw(_trader, uint256(balance), _assets[i]);\\r\\n            assetSubData.traderWithdrawn = balance;\\r\\n            assetSubData.leftOverAmount = 0;\\r\\n        }  \\r\\n    }\\r\\n    function balanceEnough(address _asset) public view override returns (bool) {\\r\\n        StructureData.AssetData storage assetSubData = assetData[_asset];\\r\\n        int128 balance = assetSubData.leftOverAmount;\\r\\n        if (balance >= 0) {\\r\\n            return true;\\r\\n        }\\r\\n        if (OptionLifecycle.getAvailableBalance(_asset, address(this)) == 0) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        return balance >= -getBalanceChange(_asset);\\r\\n    }\\r\\n\\r\\n    function getBalanceChange(address _asset) private view returns (int256) {\\r\\n        StructureData.AssetData storage assetSubData = assetData[_asset];\\r\\n        // int128 leastBalance = int128(assetSubData.balanceAfterSettle + collectWithdrawable(_asset) - assetSubData.withdrawableAfterSettle);\\r\\n        //return  int128(uint128(getAvailableBalance(_asset))) - leastBalance + int128(assetSubData.traderWithdrawn);\\r\\n        return\\r\\n            int256(\\r\\n                OptionLifecycle.getAvailableBalance(_asset, address(this))\\r\\n                .add(assetSubData.traderWithdrawn).add(assetSubData.withdrawableAfterSettle)\\r\\n            ) -\\r\\n            int256(\\r\\n                uint256(assetSubData.balanceAfterSettle).add(collectWithdrawable(_asset))\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function collectWithdrawable(address _asset)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 total = 0;\\r\\n        for (uint8 i = 0; i < optionPairCount; i++) {\\r\\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\\r\\n            if (\\r\\n                pair.depositAsset == _asset || pair.counterPartyAsset == _asset\\r\\n            ) {\\r\\n                StructureData.OptionData storage callOption = optionData[\\r\\n                    pair.callOptionId\\r\\n                ];\\r\\n                total = total.add(\\r\\n                    pair.depositAsset == _asset\\r\\n                        ? uint256(callOption.optionStates[currentRound].totalAmount).add(\\r\\n                            callOption.totalReleasedDepositAssetAmount\\r\\n                        )\\r\\n                        : callOption.totalReleasedCounterPartyAssetAmount\\r\\n                );\\r\\n\\r\\n                StructureData.OptionData storage putOption = optionData[\\r\\n                    pair.putOptionId\\r\\n                ];\\r\\n                total = total.add(\\r\\n                    pair.counterPartyAsset == _asset\\r\\n                        ? uint256(putOption.optionStates[currentRound].totalAmount).add(\\r\\n                            putOption.totalReleasedDepositAssetAmount\\r\\n                        )\\r\\n                        : putOption.totalReleasedCounterPartyAssetAmount\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function autoRollToCounterPartyByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        StructureData.OptionState storage _optionState,\\r\\n        StructureData.OptionData storage _counterPartyOption,\\r\\n        uint8 _counterPartyOptionId,\\r\\n        uint256 _totalReleased,\\r\\n        uint256 _totalAutoRoll\\r\\n    ) internal virtual;\\r\\n\\r\\n    function autoRollByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        uint8 _optionId,\\r\\n        StructureData.OptionState storage _optionState,\\r\\n        uint256 _totalReleased,\\r\\n        uint256 _totalAutoRoll\\r\\n    ) internal virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0xa502921d50476db267c2cb2d1163208f36669b1f73c464faf58e1fe3ae6bbe33\",\"license\":\"MIT\"},\"contracts/PKKTHodlBoosterOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";\\r\\nimport {Utils} from \\\"./libraries/Utils.sol\\\";\\r\\nimport {OptionLifecycle} from \\\"./libraries/OptionLifecycle.sol\\\";\\r\\nimport \\\"./interfaces/IPKKTStructureOption.sol\\\";\\r\\nimport \\\"./OptionVault.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract PKKTHodlBoosterOption is OptionVault, IPKKTStructureOption {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeCast for uint256;\\r\\n    using SafeMath for uint256;\\r\\n    using Utils for uint256;\\r\\n    using OptionLifecycle for StructureData.UserState;\\r\\n\\r\\n    bool public canDepositEthAndUsdc;\\r\\n    bool public canDepositWbtcAndUsdc;\\r\\n\\r\\n    modifier canDeposit(uint8 _optionId) {\\r\\n        if (_optionId == 1 || _optionId == 2) {\\r\\n            require(canDepositEthAndUsdc, \\\"cannot deposit eth or usdc\\\");\\r\\n        }\\r\\n        if (_optionId == 3 || _optionId == 4) {\\r\\n            require(canDepositWbtcAndUsdc, \\\"cannot deposit wbtc or usdc\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //private data for complete withdrawal and redeposit\\r\\n\\r\\n    //take if for eth, we make price precision as 4, then underlying price can be 40000000 for 4000$\\r\\n    //for shib, we make price precision as 8, then underlying price can be 4000 for 0.00004000$\\r\\n    constructor(\\r\\n        address _settler,\\r\\n        StructureData.OptionPairDefinition[] memory _optionPairDefinitions\\r\\n    ) OptionVault(_settler) {\\r\\n        addOptionPairs(_optionPairDefinitions);\\r\\n        canDepositEthAndUsdc = true;\\r\\n        canDepositWbtcAndUsdc = true;\\r\\n    }\\r\\n\\r\\n    function validateOptionById(uint8 _optionId) private view {\\r\\n        require(_optionId != 0 && _optionId <= optionPairCount * 2);\\r\\n    }\\r\\n\\r\\n    function getAccountBalance(uint8 _optionId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (StructureData.UserBalance memory)\\r\\n    {\\r\\n        return\\r\\n            OptionLifecycle.getAccountBalance(\\r\\n                optionData[_optionId],\\r\\n                msg.sender,\\r\\n                underSettlement,\\r\\n                currentRound\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getOptionSnapShot(uint8 _optionId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (StructureData.OptionSnapshot memory)\\r\\n    {\\r\\n        return\\r\\n            OptionLifecycle.getOptionSnapShot(\\r\\n                optionData[_optionId],\\r\\n                underSettlement,\\r\\n                currentRound\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function initiateWithraw(uint8 _optionId, uint256 _assetToTerminate)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        //require(_assetToTerminate > 0 , \\\"!_assetToTerminate\\\");\\r\\n        //require(currentRound > 1, \\\"No on going\\\");\\r\\n        validateOptionById(_optionId);\\r\\n        OptionLifecycle.initiateWithrawStorage(\\r\\n            optionData[_optionId],\\r\\n            msg.sender,\\r\\n            _assetToTerminate,\\r\\n            underSettlement,\\r\\n            currentRound\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function cancelWithdraw(uint8 _optionId, uint256 _assetToTerminate)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        //require(_assetToTerminate > 0 , \\\"!_assetToTerminate\\\");\\r\\n        //require(currentRound > 1, \\\"No on going\\\");\\r\\n        validateOptionById(_optionId);\\r\\n\\r\\n        OptionLifecycle.cancelWithdrawStorage(\\r\\n            optionData[_optionId],\\r\\n            msg.sender,\\r\\n            _assetToTerminate,\\r\\n            underSettlement,\\r\\n            currentRound\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        uint8 _optionId,\\r\\n        uint256 _amount,\\r\\n        address _asset\\r\\n    ) external override {\\r\\n        //require(_amount > 0, \\\"!amount\\\");\\r\\n\\r\\n        validateOptionById(_optionId);\\r\\n        StructureData.OptionPairDefinition storage pair = optionPairs[\\r\\n            (_optionId - 1) / 2\\r\\n        ];\\r\\n        //require(_asset == pair.depositAsset || _asset == pair.counterPartyAsset, \\\"!asset\\\");\\r\\n        OptionLifecycle.withdrawStorage(\\r\\n            optionData[_optionId],\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            currentRound,\\r\\n            (_optionId == pair.callOptionId && _asset == pair.depositAsset) ||\\r\\n            (_optionId == pair.putOptionId && _asset == pair.counterPartyAsset)\\r\\n        );\\r\\n        clientWithdraw(msg.sender, _amount, _asset, false);\\r\\n        emit Withdraw(_optionId, msg.sender, _asset, _amount);\\r\\n    }\\r\\n\\r\\n    //deposit eth\\r\\n    function depositETH(uint8 _optionId) external payable override canDeposit(_optionId) {\\r\\n        require(currentRound > 0, \\\"!Started\\\");\\r\\n        require(msg.value > 0);\\r\\n\\r\\n        validateOptionById(_optionId);\\r\\n        StructureData.OptionPairDefinition storage pair = optionPairs[\\r\\n            (_optionId - 1) / 2\\r\\n        ];\\r\\n        address depositAsset = pair.callOptionId == _optionId\\r\\n            ? pair.depositAsset\\r\\n            : pair.counterPartyAsset;\\r\\n        require(depositAsset == address(0));\\r\\n\\r\\n        //todo: convert to weth\\r\\n        OptionLifecycle.depositFor(\\r\\n            optionData[_optionId],\\r\\n            msg.sender,\\r\\n            msg.value,\\r\\n            0,\\r\\n            currentRound,\\r\\n            true\\r\\n        );\\r\\n\\r\\n        emit Deposit(_optionId, msg.sender, currentRound, msg.value);\\r\\n        //payable(vaultAddress()).transfer(msg.value);\\r\\n    }\\r\\n\\r\\n    //deposit other erc20 coin, take wbtc\\r\\n    function deposit(uint8 _optionId, uint256 _amount) external override canDeposit(_optionId) {\\r\\n        require(currentRound > 0, \\\"!Started\\\");\\r\\n        require(_amount > 0, \\\"!amount\\\");\\r\\n        validateOptionById(_optionId);\\r\\n        StructureData.OptionPairDefinition storage pair = optionPairs[\\r\\n            (_optionId - 1) / 2\\r\\n        ];\\r\\n        address depositAsset = pair.callOptionId == _optionId\\r\\n            ? pair.depositAsset\\r\\n            : pair.counterPartyAsset;\\r\\n        require(depositAsset != address(0));\\r\\n\\r\\n        OptionLifecycle.depositFor(\\r\\n            optionData[_optionId],\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            0,\\r\\n            currentRound,\\r\\n            true\\r\\n        );\\r\\n        emit Deposit(_optionId, msg.sender, currentRound, _amount);\\r\\n        IERC20(depositAsset).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Switches allowing deposits for the given option pait on/off\\r\\n    function switchOptionPair(uint8 pairId) external {\\r\\n        _checkRole(StructureData.SETTLER_ROLE, msg.sender);\\r\\n        // ETH-USDC pair\\r\\n        if(pairId == 0) {\\r\\n            canDepositEthAndUsdc = !canDepositEthAndUsdc;\\r\\n        }\\r\\n        // WBTC-USDC pair\\r\\n        else if (pairId == 1) {\\r\\n            canDepositWbtcAndUsdc = !canDepositWbtcAndUsdc;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //used to render the history at client side, reading the minting transactions of a specific address,\\r\\n    //for each transaction, read the blockheight and call this method to get the result\\r\\n    //the blockheight is the the height when the round is committed\\r\\n    //function getRoundData(uint8 _optionId, uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\\r\\n    //    return optionStates[_optionId][optionHeights[_blockHeight]];\\r\\n    //}\\r\\n\\r\\n    /*function getRoundDataByBlock(uint8 _optionId, uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\\r\\n        return optionData[_optionId].optionStates[optionHeights[_blockHeight]];\\r\\n    }*/\\r\\n\\r\\n    function getOptionStateByRound(uint8 _optionId, uint16 _round)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (StructureData.OptionState memory)\\r\\n    {\\r\\n        return optionData[_optionId].optionStates[_round];\\r\\n    }\\r\\n\\r\\n    function autoRollToCounterPartyByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        StructureData.OptionState storage _optionState,\\r\\n        StructureData.OptionData storage _counterPartyOption,\\r\\n        uint8 _counterPartyOptionId,\\r\\n        uint256 _totalReleased,\\r\\n        uint256 _totalAutoRoll\\r\\n    ) internal override {\\r\\n        uint256 totalAutoRollBase = uint256(_optionState.totalAmount).sub(\\r\\n            _optionState.totalTerminate\\r\\n        );\\r\\n        if (_option.assetToTerminateForNextRound > 0 && _totalAutoRoll > 0) {\\r\\n            _option.assetToTerminateForNextRound = uint256(_option\\r\\n                .assetToTerminateForNextRound)\\r\\n                .subOrZero(\\r\\n                    totalAutoRollBase.withPremium(_optionState.premiumRate)\\r\\n                ).toUint128();\\r\\n        }\\r\\n        uint256 userCount = _option.usersInvolved.length;\\r\\n        for (uint256 i = 0; i < userCount; i++) {\\r\\n            address userAddress = _option.usersInvolved[i];\\r\\n            StructureData.UserState storage userState = _option.userStates[\\r\\n                userAddress\\r\\n            ];\\r\\n\\r\\n            if (userState.ongoingAsset == 0) {\\r\\n                continue;\\r\\n            }\\r\\n            uint256 amountToTerminate = Utils.getAmountToTerminate(\\r\\n                _totalReleased,\\r\\n                userState.assetToTerminate,\\r\\n                _optionState.totalTerminate\\r\\n            );\\r\\n            if (amountToTerminate > 0) {\\r\\n                userState.releasedCounterPartyAssetAmount = uint256(userState\\r\\n                    .releasedCounterPartyAssetAmount)\\r\\n                    .add(amountToTerminate).toUint128();\\r\\n            }\\r\\n            uint256 onGoing = uint256(userState.ongoingAsset).sub(\\r\\n                userState.assetToTerminate\\r\\n            );\\r\\n            uint256 remainingAmount = Utils.getAmountToTerminate(\\r\\n                _totalAutoRoll,\\r\\n                onGoing,\\r\\n                totalAutoRollBase\\r\\n            );\\r\\n            if (remainingAmount > 0) {\\r\\n                uint256 onGoingTerminate = 0;\\r\\n                uint256 virtualOnGoing = onGoing.withPremium(\\r\\n                    _optionState.premiumRate\\r\\n                );\\r\\n                if (userState.assetToTerminateForNextRound <= virtualOnGoing) {\\r\\n                    onGoingTerminate = Utils.getAmountToTerminate(\\r\\n                        remainingAmount,\\r\\n                        userState.assetToTerminateForNextRound,\\r\\n                        virtualOnGoing\\r\\n                    );\\r\\n                } else {\\r\\n                    onGoingTerminate = remainingAmount;\\r\\n                }\\r\\n                OptionLifecycle.depositFor(\\r\\n                    _counterPartyOption,\\r\\n                    userAddress,\\r\\n                    remainingAmount,\\r\\n                    onGoingTerminate,\\r\\n                    currentRound - 1,\\r\\n                    false\\r\\n                );\\r\\n                emit Deposit(\\r\\n                    _counterPartyOptionId,\\r\\n                    userAddress,\\r\\n                    currentRound - 1,\\r\\n                    remainingAmount\\r\\n                );\\r\\n            }\\r\\n            userState.assetToTerminate = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function autoRollByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        uint8 _optionId,\\r\\n        StructureData.OptionState storage _optionState,\\r\\n        uint256 _totalReleased,\\r\\n        uint256 _totalAutoRoll\\r\\n    ) internal override {\\r\\n        //uint256 lockedRound = currentRound - 1;\\r\\n\\r\\n        uint256 totalAutoRollBase = uint256(_optionState.totalAmount).sub(\\r\\n            _optionState.totalTerminate\\r\\n        );\\r\\n        uint256 userCount = _option.usersInvolved.length;\\r\\n        for (uint256 i = 0; i < userCount; i++) {\\r\\n            address userAddress = _option.usersInvolved[i];\\r\\n            StructureData.UserState storage userState = _option.userStates[\\r\\n                userAddress\\r\\n            ];\\r\\n            if (userState.ongoingAsset == 0) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 amountToTerminate = Utils.getAmountToTerminate(\\r\\n                _totalReleased,\\r\\n                userState.assetToTerminate,\\r\\n                _optionState.totalTerminate\\r\\n            );\\r\\n            if (amountToTerminate > 0) {\\r\\n                userState.releasedDepositAssetAmount = uint256(userState\\r\\n                    .releasedDepositAssetAmount)\\r\\n                    .add(amountToTerminate).toUint128();\\r\\n            }\\r\\n            uint256 remainingAmount = Utils.getAmountToTerminate(\\r\\n                _totalAutoRoll,\\r\\n                uint256(userState.ongoingAsset).sub(userState.assetToTerminate),\\r\\n                totalAutoRollBase\\r\\n            );\\r\\n            if (remainingAmount > 0) {\\r\\n                OptionLifecycle.depositFor(\\r\\n                    _option,\\r\\n                    userAddress,\\r\\n                    remainingAmount,\\r\\n                    0,\\r\\n                    currentRound - 1,\\r\\n                    false\\r\\n                );\\r\\n                emit Deposit(\\r\\n                    _optionId,\\r\\n                    userAddress,\\r\\n                    currentRound - 1,\\r\\n                    remainingAmount\\r\\n                );\\r\\n            }\\r\\n\\r\\n            userState.assetToTerminate = 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7963495f01105504693582042d4d1bc4b43d1716eafe40b8e6384d9713e4e7d2\",\"license\":\"MIT\"},\"contracts/interfaces/IPKKTStructureOption.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity =0.8.4;\\r\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";\\r\\n \\r\\ninterface IPKKTStructureOption {\\r\\n \\r\\n     event Deposit(uint8 indexed optionId, address indexed account, uint16 indexed round, uint256 amount);\\r\\n     event Withdraw(uint8 indexed optionId, address indexed account, address indexed asset, uint256 amount);\\r\\n     //event CloseOption(uint8 indexed optionId, uint16 indexed round);\\r\\n     //event CommitOption(uint8 indexed optionId, uint16 indexed round);\\r\\n     //event OpenOption(uint8 indexed optionId, uint16 indexed round);\\r\\n     //event OptionCreated(uint8 indexed optionId, string name);\\r\\n     //event OptionTransfer(uint8 indexed optionId, address indexed account, uint16 premium, uint16 round);\\r\\n\\r\\n    function getAccountBalance(uint8 _optionId) external view returns (StructureData.UserBalance memory); \\r\\n\\r\\n    //ISettlementAggregator.balanceEnough needs to be called if there is any release amount\\r\\n    function getOptionSnapShot(uint8 _optionId) external view returns(StructureData.OptionSnapshot memory); \\r\\n\\r\\n    //deposit eth\\r\\n    function depositETH(uint8 _optionId) external payable;\\r\\n\\r\\n    //deposit other erc20 coin, take wbtc or stable coin\\r\\n    function deposit(uint8 _optionId, uint256 _amount) external;\\r\\n\\r\\n    //complete withdraw happens on the option vault\\r\\n    function initiateWithraw(uint8 _optionId, uint256 _assetToTerminate) external; \\r\\n\\r\\n    function cancelWithdraw(uint8 _optionId, uint256 _assetToTerminate) external;\\r\\n \\r\\n    \\r\\n    function withdraw(uint8 _optionId, uint256 _amount, address _asset) external; \\r\\n \\r\\n \\r\\n\\r\\n    //used to render the history at client side, reading the minting transactions of a specific address,\\r\\n    //for each transaction, read the blockheight and call this method to get the result\\r\\n    //the blockheight is the the height when the round is committed \\r\\n    //function getRoundDataByBlock(uint8 _optionId, uint256 _blockHeight) external view returns(StructureData.OptionState memory);\\r\\n\\r\\n    function getOptionStateByRound(uint8 _optionId, uint16 _round) external view returns(StructureData.OptionState memory);\\r\\n \\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x5a6076a3a5952903c066f1c9405095937952e83c251c4b165455b7c226982ed8\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISettlementAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity =0.8.4;\\r\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";  \\r\\n\\r\\ninterface ISettlementAggregator {\\r\\n         \\r\\n    function addOptionPairs(StructureData.OptionPairDefinition[] memory _optionPairDefinitions) external; \\r\\n    function currentRound() external view returns(uint16);\\r\\n    //rollToNext + dryRunSettlement\\r\\n    //todo: specifying quota\\r\\n    function initiateSettlement() external; \\r\\n\\r\\n    //closePrevious + calculate cash flow \\r\\n    function settle(StructureData.OptionExecution[] memory _execution) external;\\r\\n\\r\\n    function setOptionParameters(uint256[] memory _paramters) external;\\r\\n\\r\\n    function withdrawAsset(address _trader, address _asset) external;\\r\\n\\r\\n    function batchWithdrawAssets(address _trader, address[] memory _assets) external;\\r\\n\\r\\n    function balanceEnough(address _asset) external view returns(bool); \\r\\n}\",\"keccak256\":\"0x4d869441723f092483c379cc7ee9e5936c37b5eb79f35f53cab39e5bfe9b3a75\",\"license\":\"UNLICENSED\"},\"contracts/libraries/OptionLifecycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./Utils.sol\\\";\\r\\nimport \\\"./StructureData.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\n\\r\\nlibrary OptionLifecycle {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Utils for uint128;\\r\\n    using Utils for uint256;\\r\\n    using SafeMath for uint256;\\r\\n    using SafeCast for uint256;\\r\\n    using StructureData for StructureData.UserState;\\r\\n\\r\\n    function deriveVirtualLocked(\\r\\n        StructureData.UserState memory userState,\\r\\n        uint16 premiumRate\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 onGoing = uint256(userState.ongoingAsset);\\r\\n        if (onGoing == 0) {\\r\\n            return uint256(userState.tempLocked);\\r\\n        }\\r\\n        onGoing = (onGoing.sub(userState.assetToTerminate)).withPremium(\\r\\n            premiumRate\\r\\n        );\\r\\n        if (userState.tempLocked == 0) {\\r\\n            return onGoing;\\r\\n        }\\r\\n        return uint256(userState.tempLocked).add(onGoing);\\r\\n    }\\r\\n\\r\\n    function getAvailableBalance(address _asset, address _source)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (_asset != address(0)) {\\r\\n            return IERC20(_asset).balanceOf(_source);\\r\\n        } else {\\r\\n            return _source.balance;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        address _target,\\r\\n        uint256 _amount,\\r\\n        address _contractAddress\\r\\n    ) external {\\r\\n        require(_amount > 0);\\r\\n        if (_contractAddress == address(0)) {\\r\\n            payable(_target).transfer(_amount);\\r\\n        } else {\\r\\n            IERC20(_contractAddress).safeTransfer(_target, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateMaturity(\\r\\n        bool _execute,\\r\\n        StructureData.OptionState memory _optionState,\\r\\n        bool _callOrPut,\\r\\n        uint8 _depositAssetAmountDecimals,\\r\\n        uint8 _counterPartyAssetAmountDecimals\\r\\n    ) public pure returns (StructureData.MaturedState memory) {\\r\\n        StructureData.MaturedState memory state = StructureData.MaturedState({\\r\\n            releasedDepositAssetAmount: 0,\\r\\n            releasedDepositAssetPremiumAmount: 0,\\r\\n            releasedDepositAssetAmountWithPremium: 0,\\r\\n            autoRollDepositAssetAmount: 0,\\r\\n            autoRollDepositAssetPremiumAmount: 0,\\r\\n            autoRollDepositAssetAmountWithPremium: 0,\\r\\n            releasedCounterPartyAssetAmount: 0,\\r\\n            releasedCounterPartyAssetPremiumAmount: 0,\\r\\n            releasedCounterPartyAssetAmountWithPremium: 0,\\r\\n            autoRollCounterPartyAssetAmount: 0,\\r\\n            autoRollCounterPartyAssetPremiumAmount: 0,\\r\\n            autoRollCounterPartyAssetAmountWithPremium: 0\\r\\n        });\\r\\n        if (_execute) {\\r\\n            uint256 maturedCounterPartyAssetAmount = \\r\\n                _callOrPut\\r\\n                    ? uint256(_optionState.totalAmount)\\r\\n                        .mul(_optionState.strikePrice)\\r\\n                        .mul(10**_counterPartyAssetAmountDecimals)\\r\\n                        .div(\\r\\n                            10 **\\r\\n                                (StructureData.PRICE_PRECISION +\\r\\n                                    _depositAssetAmountDecimals)\\r\\n                        )\\r\\n                    : uint256(_optionState.totalAmount)\\r\\n                        .mul(\\r\\n                            10 **\\r\\n                                (StructureData.PRICE_PRECISION +\\r\\n                                    _counterPartyAssetAmountDecimals)\\r\\n                        )\\r\\n                        .div(_optionState.strikePrice)\\r\\n                        .div(10**_depositAssetAmountDecimals);\\r\\n\\r\\n            uint256 maturedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetAmount\\r\\n                    .premium(_optionState.premiumRate);\\r\\n            if (_optionState.totalTerminate > 0) {\\r\\n                state\\r\\n                    .releasedCounterPartyAssetAmount = maturedCounterPartyAssetAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state\\r\\n                    .releasedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetPremiumAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state.releasedCounterPartyAssetAmountWithPremium =\\r\\n                    state.releasedCounterPartyAssetAmount.add(\\r\\n                    state.releasedCounterPartyAssetPremiumAmount);\\r\\n            }\\r\\n            state.autoRollCounterPartyAssetAmount =\\r\\n                maturedCounterPartyAssetAmount.sub(\\r\\n                state.releasedCounterPartyAssetAmount);\\r\\n            state.autoRollCounterPartyAssetPremiumAmount =\\r\\n                maturedCounterPartyAssetPremiumAmount.sub(\\r\\n                state.releasedCounterPartyAssetPremiumAmount);\\r\\n            state.autoRollCounterPartyAssetAmountWithPremium =\\r\\n                state.autoRollCounterPartyAssetAmount.add(\\r\\n                state.autoRollCounterPartyAssetPremiumAmount);\\r\\n        } else {\\r\\n            uint256 maturedDepositAssetAmount = uint256(_optionState.totalAmount);\\r\\n            uint256 maturedDepositAssetPremiumAmount = maturedDepositAssetAmount\\r\\n                .premium(_optionState.premiumRate);\\r\\n            if (_optionState.totalTerminate > 0) {\\r\\n                state.releasedDepositAssetAmount = maturedDepositAssetAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state\\r\\n                    .releasedDepositAssetPremiumAmount = maturedDepositAssetPremiumAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state.releasedDepositAssetAmountWithPremium =\\r\\n                    state.releasedDepositAssetAmount.add(\\r\\n                    state.releasedDepositAssetPremiumAmount);\\r\\n            }\\r\\n            state.autoRollDepositAssetAmount =\\r\\n                maturedDepositAssetAmount.sub(\\r\\n                state.releasedDepositAssetAmount);\\r\\n            state.autoRollDepositAssetPremiumAmount =\\r\\n                maturedDepositAssetPremiumAmount.sub(\\r\\n                state.releasedDepositAssetPremiumAmount);\\r\\n            state.autoRollDepositAssetAmountWithPremium =\\r\\n                state.autoRollDepositAssetAmount.add(\\r\\n                state.autoRollDepositAssetPremiumAmount);\\r\\n        }\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function commitByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        uint16 _roundToCommit\\r\\n    ) external {\\r\\n        uint256 userCount = _option.usersInvolved.length;\\r\\n        for (uint256 i = 0; i < userCount; i++) {\\r\\n            StructureData.UserState storage userState = _option.userStates[\\r\\n                _option.usersInvolved[i]\\r\\n            ];\\r\\n            if (userState.assetToTerminateForNextRound != 0) {\\r\\n                userState.assetToTerminate = userState\\r\\n                    .assetToTerminateForNextRound;\\r\\n                userState.assetToTerminateForNextRound = 0;\\r\\n            } else if (userState.assetToTerminate != 0) {\\r\\n                userState.assetToTerminate = 0;\\r\\n            }\\r\\n            if (userState.tempLocked == 0) {\\r\\n                userState.ongoingAsset = 0;\\r\\n                continue;\\r\\n            }\\r\\n            userState.ongoingAsset = userState.tempLocked;\\r\\n            userState.tempLocked = 0;\\r\\n        } \\r\\n        _option.optionStates[_roundToCommit].totalTerminate = uint256(_option\\r\\n            .optionStates[_roundToCommit]\\r\\n            .totalTerminate)\\r\\n            .add(_option.assetToTerminateForNextRound).toUint128();\\r\\n        _option.assetToTerminateForNextRound = 0;\\r\\n    }\\r\\n\\r\\n    function rollToNextByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        uint16 _currentRound,\\r\\n        bool _callOrPut\\r\\n    ) external returns (uint128 _pendingAmount) { \\r\\n        StructureData.OptionState memory currentOption = StructureData\\r\\n            .OptionState({\\r\\n                round: _currentRound,\\r\\n                totalAmount: 0,\\r\\n                totalTerminate: 0,\\r\\n                premiumRate: 0,\\r\\n                strikePrice: 0,\\r\\n                executed: false,\\r\\n                callOrPut: _callOrPut\\r\\n            });\\r\\n        _option.optionStates[_currentRound] = currentOption;\\r\\n        if (_currentRound > 1) {\\r\\n            uint256 userCount = _option.usersInvolved.length;\\r\\n            for (uint256 i = 0; i < userCount; i++) {\\r\\n                StructureData.UserState storage userState = _option.userStates[\\r\\n                    _option.usersInvolved[i]\\r\\n                ];\\r\\n                if (userState.pendingAsset != 0) {\\r\\n                    userState.tempLocked = userState.pendingAsset;\\r\\n                }\\r\\n                userState.pendingAsset = 0;\\r\\n            }\\r\\n        } \\r\\n        return\\r\\n            _currentRound > 1\\r\\n                ? _option.optionStates[_currentRound - 1].totalAmount\\r\\n                : 0;\\r\\n    }\\r\\n\\r\\n    function dryRunSettlementByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        bool _isCall,\\r\\n        uint8 _depositAssetAmountDecimals,\\r\\n        uint8 _counterPartyAssetAmountDecimals,\\r\\n        uint16 _currentRound,\\r\\n        bool _execute\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (StructureData.SettlementAccountingResult memory _result)\\r\\n    {\\r\\n        StructureData.SettlementAccountingResult memory result = StructureData\\r\\n            .SettlementAccountingResult({ \\r\\n                depositAmount: _option\\r\\n                    .optionStates[_currentRound - 1]\\r\\n                    .totalAmount,\\r\\n                executed: _execute,\\r\\n                autoRollAmount: 0,\\r\\n                autoRollPremium: 0,\\r\\n                releasedAmount: 0,\\r\\n                releasedPremium: 0,\\r\\n                autoRollCounterPartyAmount: 0,\\r\\n                autoRollCounterPartyPremium: 0,\\r\\n                releasedCounterPartyAmount: 0,\\r\\n                releasedCounterPartyPremium: 0\\r\\n            });\\r\\n        if (_currentRound > 2) {\\r\\n            StructureData.OptionState storage previousOptionState = _option\\r\\n                .optionStates[_currentRound - 2];\\r\\n            if (previousOptionState.totalAmount == 0) {\\r\\n                return result;\\r\\n            }\\r\\n            StructureData.MaturedState memory maturedState = calculateMaturity(\\r\\n                _execute,\\r\\n                previousOptionState,\\r\\n                _isCall,\\r\\n                _depositAssetAmountDecimals,\\r\\n                _counterPartyAssetAmountDecimals\\r\\n            );\\r\\n            if (_execute) {\\r\\n                result.autoRollCounterPartyAmount = maturedState\\r\\n                    .autoRollCounterPartyAssetAmount.toUint128();\\r\\n                result.autoRollCounterPartyPremium = maturedState\\r\\n                    .autoRollCounterPartyAssetPremiumAmount.toUint128();\\r\\n                result.releasedCounterPartyAmount = maturedState\\r\\n                    .releasedCounterPartyAssetAmount.toUint128();\\r\\n                result.releasedCounterPartyPremium = maturedState\\r\\n                    .releasedCounterPartyAssetPremiumAmount.toUint128();\\r\\n            } else {\\r\\n                result.autoRollAmount = maturedState.autoRollDepositAssetAmount.toUint128();\\r\\n                result.autoRollPremium = maturedState\\r\\n                    .autoRollDepositAssetPremiumAmount.toUint128();\\r\\n                result.releasedAmount = maturedState.releasedDepositAssetAmount.toUint128();\\r\\n                result.releasedPremium = maturedState\\r\\n                    .releasedDepositAssetPremiumAmount.toUint128();\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function closePreviousByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        StructureData.OptionState storage previousOptionState,\\r\\n        bool _isCall,\\r\\n        uint8 _depositAssetAmountDecimals,\\r\\n        uint8 _counterPartyAssetAmountDecimals,\\r\\n        bool _execute\\r\\n    ) external returns (StructureData.MaturedState memory _maturedState) {\\r\\n        //uint16 maturedRound = currentRound - 2;\\r\\n        StructureData.MaturedState memory maturedState = calculateMaturity(\\r\\n            _execute,\\r\\n            previousOptionState,\\r\\n            _isCall,\\r\\n            _depositAssetAmountDecimals,\\r\\n            _counterPartyAssetAmountDecimals\\r\\n        );\\r\\n        previousOptionState.executed = _execute;\\r\\n\\r\\n        if (_execute) {\\r\\n            _option.totalReleasedCounterPartyAssetAmount =uint256(_option\\r\\n                .totalReleasedCounterPartyAssetAmount)\\r\\n                .add(maturedState.releasedCounterPartyAssetAmountWithPremium).toUint128();\\r\\n        } else {\\r\\n            _option.totalReleasedDepositAssetAmount = uint256(_option\\r\\n                .totalReleasedDepositAssetAmount)\\r\\n                .add(maturedState.releasedDepositAssetAmountWithPremium).toUint128();\\r\\n        }\\r\\n        return maturedState;\\r\\n    }\\r\\n    /*\\r\\n        struct OptionParameters { \\r\\n        uint128 strikePrice; // strike price if executed\\r\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\r\\n    }\\r\\n*/\\r\\n    function setOptionParameters(uint256 _parameters, StructureData.OptionState storage _optionState) external {\\r\\n \\r\\n        require(_optionState.strikePrice == 0); \\r\\n        _optionState.strikePrice = uint128(_parameters >> 16);\\r\\n        _optionState.premiumRate = uint16(_parameters & 0xffff);     \\r\\n    }\\r\\n    function getAccountBalance(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external view returns (StructureData.UserBalance memory) {\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n\\r\\n        StructureData.UserBalance memory result = StructureData.UserBalance({\\r\\n            pendingDepositAssetAmount: userState.pendingAsset,\\r\\n            releasedDepositAssetAmount: userState.releasedDepositAssetAmount,\\r\\n            releasedCounterPartyAssetAmount: userState\\r\\n                .releasedCounterPartyAssetAmount,\\r\\n            lockedDepositAssetAmount: 0,\\r\\n            terminatingDepositAssetAmount: 0,\\r\\n            toTerminateDepositAssetAmount: 0\\r\\n        });\\r\\n        if (_underSettlement) {\\r\\n            if (_currentRound > 2) {\\r\\n                //when there are maturing round waiting for settlement, it becomes complex\\r\\n                uint16 premiumRate = _option\\r\\n                    .optionStates[_currentRound - 2]\\r\\n                    .premiumRate;\\r\\n                result.lockedDepositAssetAmount = deriveVirtualLocked(\\r\\n                    userState,\\r\\n                    premiumRate\\r\\n                ).toUint128();\\r\\n                result.terminatingDepositAssetAmount = uint256(userState\\r\\n                    .assetToTerminate)\\r\\n                    .withPremium(premiumRate).toUint128();\\r\\n            } else {\\r\\n                result.lockedDepositAssetAmount = userState.tempLocked;\\r\\n            }\\r\\n            result.toTerminateDepositAssetAmount = userState\\r\\n                    .assetToTerminateForNextRound;\\r\\n        } else {\\r\\n            result.lockedDepositAssetAmount = userState.ongoingAsset;\\r\\n            result.toTerminateDepositAssetAmount = userState.assetToTerminate;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function getOptionSnapShot(\\r\\n        StructureData.OptionData storage _option,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external view returns (StructureData.OptionSnapshot memory) {\\r\\n        StructureData.OptionState memory lockedOption;\\r\\n        StructureData.OptionState memory onGoingOption;\\r\\n        StructureData.OptionSnapshot memory result = StructureData\\r\\n            .OptionSnapshot({\\r\\n                totalPending: _option.optionStates[_currentRound].totalAmount,\\r\\n                totalReleasedDeposit: _option.totalReleasedDepositAssetAmount,\\r\\n                totalReleasedCounterParty: _option\\r\\n                    .totalReleasedCounterPartyAssetAmount,\\r\\n                totalLocked: 0,\\r\\n                totalTerminating: 0,\\r\\n                totalToTerminate: 0\\r\\n            });\\r\\n        if (_underSettlement) {\\r\\n            lockedOption = _option.optionStates[_currentRound - 1];\\r\\n            result.totalToTerminate = _option.assetToTerminateForNextRound;\\r\\n            if (_currentRound > 2) {\\r\\n                //when there are maturing round waiting for settlement, it becomes complex\\r\\n                onGoingOption = _option.optionStates[_currentRound - 2];\\r\\n                result.totalTerminating = uint256(onGoingOption\\r\\n                    .totalTerminate)\\r\\n                    .withPremium(onGoingOption.premiumRate).toUint128();\\r\\n                result.totalLocked = uint256(lockedOption\\r\\n                    .totalAmount)\\r\\n                    .add(\\r\\n                        onGoingOption.totalAmount.withPremium(\\r\\n                            onGoingOption.premiumRate\\r\\n                        )\\r\\n                    )\\r\\n                    .sub(result.totalTerminating).toUint128();\\r\\n            } else {\\r\\n                result.totalLocked = lockedOption.totalAmount;\\r\\n            }\\r\\n        } else if (_currentRound > 1) {\\r\\n            onGoingOption = _option.optionStates[_currentRound - 1];\\r\\n            result.totalLocked = onGoingOption.totalAmount;\\r\\n            result.totalToTerminate = onGoingOption.totalTerminate;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function initiateWithrawStorage(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        uint256 _assetToTerminate,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external {\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n        if (_underSettlement) {\\r\\n            uint256 newAssetToTerminate = uint256(userState\\r\\n                .assetToTerminateForNextRound)\\r\\n                .add(_assetToTerminate);\\r\\n            if (_currentRound == 2) {\\r\\n                require(newAssetToTerminate <= userState.tempLocked);\\r\\n                StructureData.OptionState storage previousOption = _option\\r\\n                    .optionStates[_currentRound - 1];\\r\\n                previousOption.totalTerminate = uint256(previousOption\\r\\n                    .totalTerminate)\\r\\n                    .add(_assetToTerminate).toUint128();\\r\\n            } else {\\r\\n                StructureData.OptionState storage onGoingOption = _option\\r\\n                    .optionStates[_currentRound - 2];\\r\\n                uint256 totalLocked = deriveVirtualLocked(\\r\\n                    userState,\\r\\n                    onGoingOption.premiumRate\\r\\n                );\\r\\n                require(newAssetToTerminate <= totalLocked);\\r\\n                //store temporarily\\r\\n                _option.assetToTerminateForNextRound = uint256(_option\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .add(_assetToTerminate).toUint128();\\r\\n            }\\r\\n            userState.assetToTerminateForNextRound = newAssetToTerminate.toUint128();\\r\\n        } else {\\r\\n            uint256 newAssetToTerminate = uint256(userState.assetToTerminate).add(\\r\\n                _assetToTerminate\\r\\n            );\\r\\n            require(newAssetToTerminate <= userState.ongoingAsset);\\r\\n            userState.assetToTerminate = newAssetToTerminate.toUint128();\\r\\n            StructureData.OptionState storage previousOption = _option\\r\\n                .optionStates[_currentRound - 1];\\r\\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).add(\\r\\n                _assetToTerminate\\r\\n            ).toUint128();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function cancelWithdrawStorage(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        uint256 _assetToTerminate,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external {\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n        if (_underSettlement) {\\r\\n            userState.assetToTerminateForNextRound = uint256(userState\\r\\n                .assetToTerminateForNextRound)\\r\\n                .sub(_assetToTerminate).toUint128();\\r\\n            if (_currentRound == 2) {\\r\\n                StructureData.OptionState storage previousOption = _option\\r\\n                    .optionStates[_currentRound - 1];\\r\\n                previousOption.totalTerminate = uint256(previousOption\\r\\n                    .totalTerminate)\\r\\n                    .sub(_assetToTerminate).toUint128();\\r\\n            } else {\\r\\n                //store temporarily\\r\\n                _option.assetToTerminateForNextRound = uint256(_option\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .sub(_assetToTerminate).toUint128();\\r\\n            }\\r\\n        } else {\\r\\n            userState.assetToTerminate = uint256(userState.assetToTerminate).sub(\\r\\n                _assetToTerminate\\r\\n            ).toUint128();\\r\\n            StructureData.OptionState storage previousOption = _option\\r\\n                .optionStates[_currentRound - 1];\\r\\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).sub(\\r\\n                _assetToTerminate\\r\\n            ).toUint128();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawStorage(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        uint256 _amount,\\r\\n        uint16 _currentRound,\\r\\n        bool _isDeposit\\r\\n    ) external {\\r\\n        //require(_amount > 0, \\\"!amount\\\");\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n        if (_isDeposit) {\\r\\n            //todo: 0 out released amount if missing balance from trader\\r\\n            uint256 releasedAmount = uint256(userState.releasedDepositAssetAmount);\\r\\n            if (releasedAmount <= _amount) {\\r\\n                uint256 redeemAmount = _amount.sub(releasedAmount);\\r\\n                userState.pendingAsset = uint256(userState.pendingAsset).sub(\\r\\n                    redeemAmount\\r\\n                ).toUint128();\\r\\n                userState.releasedDepositAssetAmount = 0;\\r\\n                _option.totalReleasedDepositAssetAmount = uint256(_option\\r\\n                    .totalReleasedDepositAssetAmount)\\r\\n                    .sub(releasedAmount).toUint128();\\r\\n                StructureData.OptionState storage optionState = _option\\r\\n                    .optionStates[_currentRound];\\r\\n                optionState.totalAmount = uint256(optionState.totalAmount).sub(\\r\\n                    redeemAmount\\r\\n                ).toUint128();\\r\\n            } else {\\r\\n                userState.releasedDepositAssetAmount = releasedAmount.sub(\\r\\n                    _amount\\r\\n                ).toUint128();\\r\\n                _option.totalReleasedDepositAssetAmount = uint256(_option\\r\\n                    .totalReleasedDepositAssetAmount)\\r\\n                    .sub(_amount).toUint128();\\r\\n            }\\r\\n        } else {\\r\\n            //same result as completeWithdraw\\r\\n            userState.releasedCounterPartyAssetAmount = uint256(userState\\r\\n                .releasedCounterPartyAssetAmount)\\r\\n                .sub(_amount).toUint128();\\r\\n            _option.totalReleasedCounterPartyAssetAmount = uint256(_option\\r\\n                .totalReleasedCounterPartyAssetAmount)\\r\\n                .sub(_amount).toUint128();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function depositFor(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _userAddress,\\r\\n        uint256 _amount,\\r\\n        uint256 _toTerminate,\\r\\n        uint16 _round,\\r\\n        bool _isOpenRound\\r\\n    ) external {\\r\\n        //require(optionState.totalAmount + (_amount) <= quota[_optionId], \\\"Not enough quota\\\");\\r\\n\\r\\n        StructureData.OptionState storage optionState = _option.optionStates[\\r\\n            _round\\r\\n        ];\\r\\n        StructureData.UserState storage userState = _option.userStates[\\r\\n            _userAddress\\r\\n        ];\\r\\n        //first time added\\r\\n        if (!userState.hasState) {\\r\\n            userState.hasState = true;\\r\\n            _option.usersInvolved.push(_userAddress);\\r\\n        }\\r\\n        if (!_isOpenRound) {\\r\\n            userState.tempLocked = uint256(userState.tempLocked).add(_amount).toUint128();\\r\\n            if (_toTerminate > 0) {\\r\\n                userState.assetToTerminateForNextRound = uint256(userState\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .add(_toTerminate).toUint128();\\r\\n                _option.assetToTerminateForNextRound = uint256(_option\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .add(_toTerminate).toUint128();\\r\\n            }\\r\\n        } else {\\r\\n            userState.pendingAsset = uint256(userState.pendingAsset).add(_amount).toUint128();\\r\\n        }\\r\\n        optionState.totalAmount = uint256(optionState.totalAmount).add(_amount).toUint128();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2cade59e31d3d3e3738db7236e8f5773298a785ee2b97ce59a9c990449d04f31\",\"license\":\"MIT\"},\"contracts/libraries/StructureData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary StructureData {\\r\\n    bytes32 public constant OPTION_ROLE = keccak256(\\\"OPTION_ROLE\\\");\\r\\n    bytes32 public constant SETTLER_ROLE = keccak256(\\\"SETTLER_ROLE\\\");\\r\\n    uint8 public constant MATUREROUND = 1; //7 for daily settlement, 1 for daily settlement\\r\\n    uint8 public constant PRICE_PRECISION = 4;\\r\\n    struct OptionParameters { \\r\\n        uint128 strikePrice; // strike price if executed\\r\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\r\\n    }\\r\\n\\r\\n    struct OptionState {\\r\\n        uint128 totalAmount;\\r\\n        uint128 totalTerminate;\\r\\n        uint128 strikePrice;\\r\\n        uint16 round;\\r\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\r\\n        bool executed;\\r\\n        bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral;\\r\\n    }\\r\\n\\r\\n    struct MaturedState {\\r\\n        uint256 releasedDepositAssetAmount;\\r\\n        uint256 releasedDepositAssetPremiumAmount;\\r\\n        uint256 releasedDepositAssetAmountWithPremium;\\r\\n        uint256 releasedCounterPartyAssetAmount;\\r\\n        uint256 releasedCounterPartyAssetPremiumAmount;\\r\\n        uint256 releasedCounterPartyAssetAmountWithPremium;\\r\\n        uint256 autoRollDepositAssetAmount;\\r\\n        uint256 autoRollDepositAssetPremiumAmount;\\r\\n        uint256 autoRollDepositAssetAmountWithPremium;\\r\\n        uint256 autoRollCounterPartyAssetAmount;\\r\\n        uint256 autoRollCounterPartyAssetPremiumAmount;\\r\\n        uint256 autoRollCounterPartyAssetAmountWithPremium;\\r\\n    }\\r\\n\\r\\n    struct AssetData {\\r\\n        uint128 releasedAmount; //debit\\r\\n        uint128 depositAmount; //credit\\r\\n        int128 leftOverAmount; //history balance\\r\\n        /*\\r\\n         *  actual balance perspective\\r\\n         *  withdrawable = redeemable + released\\r\\n         *  balance = withdrawable + leftOver\\r\\n         */\\r\\n        uint128 balanceAfterSettle;\\r\\n        uint128 withdrawableAfterSettle;\\r\\n        uint128 traderWithdrawn;\\r\\n    }\\r\\n\\r\\n    struct OptionData {\\r\\n        uint128 totalReleasedDepositAssetAmount;\\r\\n        uint128 totalReleasedCounterPartyAssetAmount;\\r\\n        uint128 assetToTerminateForNextRound;\\r\\n        mapping(uint16 => StructureData.OptionState) optionStates;\\r\\n        address[] usersInvolved;\\r\\n        mapping(address => StructureData.UserState) userStates;\\r\\n    }\\r\\n\\r\\n    struct UserState {\\r\\n        uint128 pendingAsset; //for current round\\r\\n        uint128 tempLocked; //asset not sent to trader yet, but closed for deposit\\r\\n        uint128 ongoingAsset;\\r\\n        uint128 assetToTerminate;\\r\\n        uint128 assetToTerminateForNextRound;\\r\\n        uint128 releasedDepositAssetAmount;\\r\\n        uint128 releasedCounterPartyAssetAmount;\\r\\n        bool hasState;\\r\\n    }\\r\\n\\r\\n    struct OptionSnapshot {\\r\\n        uint128 totalPending;\\r\\n        //total tvl = totalLocked + totalTerminating\\r\\n        uint128 totalLocked;\\r\\n        //only set during settlement\\r\\n        uint128 totalTerminating;\\r\\n        //amount to terminate in next round,  totalToTerminate <= totalLocked\\r\\n        uint128 totalToTerminate;\\r\\n        uint128 totalReleasedDeposit;\\r\\n        uint128 totalReleasedCounterParty;\\r\\n    }\\r\\n\\r\\n    struct UserBalance {\\r\\n        uint128 pendingDepositAssetAmount;\\r\\n        //tvl = lockedDepositAssetAmount + terminatingDepositAssetAmount\\r\\n        uint128 lockedDepositAssetAmount;\\r\\n        //only set during settlement\\r\\n        uint128 terminatingDepositAssetAmount;\\r\\n        //amount to terminate in next round, toTerminateDepositAssetAmount <= lockedDepositAssetAmount\\r\\n        uint128 toTerminateDepositAssetAmount;\\r\\n        uint128 releasedDepositAssetAmount;\\r\\n        uint128 releasedCounterPartyAssetAmount;\\r\\n    }\\r\\n    struct OptionPairDefinition {\\r\\n        uint8 callOptionId;\\r\\n        uint8 putOptionId;\\r\\n        uint8 depositAssetAmountDecimals;\\r\\n        uint8 counterPartyAssetAmountDecimals;\\r\\n        address depositAsset;\\r\\n        address counterPartyAsset;\\r\\n    }\\r\\n    struct SettlementAccountingResult {\\r\\n        uint128 depositAmount;\\r\\n        uint128 autoRollAmount; //T-1 Carried (filled only when not executed)\\r\\n        uint128 autoRollPremium; //Premium (filled only when not executed)\\r\\n        //maturedAmount+maturedPremium = requested withdrawal for deposit asset(filled only when not executed and with withdraw request)\\r\\n        uint128 releasedAmount;\\r\\n        uint128 releasedPremium;\\r\\n        //autoRollCounterPartyAmount + autoRollCounterPartyPremium = Execution rolled-out for deposit asset (Execution roll-in for counter party option)\\r\\n        //filled only when executed\\r\\n        uint128 autoRollCounterPartyAmount;\\r\\n        uint128 autoRollCounterPartyPremium;\\r\\n        //maturedCounterPartyAmount+maturedCounterPartyPremium= requested withdrawal for couter party asset(filled only when executed and with withdraw request)\\r\\n        uint128 releasedCounterPartyAmount;\\r\\n        uint128 releasedCounterPartyPremium;  \\r\\n        bool executed;\\r\\n    }\\r\\n\\r\\n    enum OptionExecution {\\r\\n        NoExecution,\\r\\n        ExecuteCall,\\r\\n        ExecutePut\\r\\n    }\\r\\n\\r\\n    struct OptionPairExecutionAccountingResult {\\r\\n        SettlementAccountingResult callOptionResult;\\r\\n        SettlementAccountingResult putOptionResult;\\r\\n        OptionExecution execute;\\r\\n    }\\r\\n\\r\\n    struct SettlementCashflowResult {\\r\\n        uint128 newDepositAmount;\\r\\n        uint128 newReleasedAmount;\\r\\n        int128 leftOverAmount; //positive, if trader didn't withdraw last time; negative, if trader failed to send back last time;\\r\\n        address contractAddress; //0 for eth\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe96d5e97fc2c3782183247a9d2c81ce884365f3eb058ab70efae3a66ba99a597\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nlibrary Utils { \\r\\n     \\r\\n    uint256 public constant RATIOMULTIPLIER = 10000;\\r\\n \\r\\n     using SafeMath for uint256;\\r\\n      function StringConcat(bytes memory _base, bytes memory _value) internal pure returns (string memory) {\\r\\n        string memory _tmpValue = new string(_base.length + _value.length);\\r\\n        bytes memory _newValue = bytes(_tmpValue);\\r\\n\\r\\n        uint i;\\r\\n        uint j;\\r\\n\\r\\n        for(i=0; i<_base.length; i++) {\\r\\n            _newValue[j++] = _base[i];\\r\\n        }\\r\\n\\r\\n        for(i=0; i<_value.length; i++) {\\r\\n            _newValue[j++] = _value[i++];\\r\\n        }\\r\\n\\r\\n        return string(_newValue);\\r\\n    }\\r\\n\\r\\n    function Uint8Sub(uint8 a, uint8 b) internal pure returns (uint8) {\\r\\n        require(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n    \\r\\n \\r\\n    function getAmountToTerminate(uint256 _maturedAmount, uint256 _assetToTerminate, uint256 _assetAmount) \\r\\n    internal pure returns(uint256) {\\r\\n       if (_assetToTerminate == 0 || _assetAmount == 0 || _maturedAmount == 0) return 0;\\r\\n       return _assetToTerminate >= _assetAmount ?  _maturedAmount  : _maturedAmount.mul(_assetToTerminate).div(_assetAmount);\\r\\n   }\\r\\n\\r\\n   function withPremium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\r\\n       return  _baseAmount.mul(RATIOMULTIPLIER + _premimumRate).div(RATIOMULTIPLIER);\\r\\n   }\\r\\n   \\r\\n   function premium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\r\\n       return   _baseAmount.mul(_premimumRate).div(RATIOMULTIPLIER);\\r\\n   }\\r\\n   \\r\\n   function subOrZero(uint256 _base, uint256 _substractor) internal pure returns (uint256) {\\r\\n       return _base >= _substractor ? _base - _substractor : 0;\\r\\n   }\\r\\n  \\r\\n    /*function assertUint104(uint256 num) internal pure {\\r\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\r\\n    }\\r\\n\\r\\n    function assertUint128(uint256 num) internal pure {\\r\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\r\\n    }*/\\r\\n\\r\\n}\",\"keccak256\":\"0x9afd557d360e741555f7ed355c95ffb0ab1e49452c8ca249f21af3a371444409\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005f4c38038062005f4c8339810160408190526200003491620007b3565b60018055816001600160a01b0381166200004d57600080fd5b6200005a600033620000a9565b620000867f6666bf5bfee463d10a7fc50448047f8a53b7762d7e28fbc5c643182785f3fd3f82620000a9565b506200009281620000b9565b5050600a805461ffff191661010117905562000b57565b620000b5828262000444565b5050565b620000c6600033620004e4565b805160025460075460ff63010000009092048216911660005b83811015620004175760008582815181106200010b57634e487b7160e01b600052603260045260246000fd5b6020026020010151905083600262000124919062000a71565b6200013190600162000a27565b60ff168082526200014490600162000a27565b60ff1660208201528060046000866200015d8162000b08565b60ff91821683526020808401949094526040928301600020855181549587015194870151606088015160808901516001600160a01b0390811664010000000002600160201b600160c01b031992881663010000000263ff0000001994891662010000029490941663ffff0000199989166101000261ffff19909b1695891695909517999099179790971692909217171694909417845560a09094015160019093018054939092166001600160a01b03199093169290921790559094508316620002c55760808101516008600085620002358162000b08565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060a00151600860008580620002859062000b08565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555062000401565b60008060005b8560ff168160ff1610156200035157608084015160ff82166000908152600860205260409020546001600160a01b03908116911614156200030b57600192505b60a084015160ff82166000908152600860205260409020546001600160a01b03908116911614156200033c57600191505b80620003488162000b08565b915050620002cb565b5081620003a857608083015160086000876200036d8162000b08565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80620003fe5760a08301516008600087620003c38162000b08565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b50505b50806200040e8162000aea565b915050620000df565b506002805463ff0000001916630100000060ff948516021790556007805460ff1916919092161790555050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000b5576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620004a03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000b5576200052e816001600160a01b031660146200058860201b620033b91760201c565b62000544836020620033b962000588821b17811c565b6040516020016200055792919062000900565b60408051601f198184030181529082905262461bcd60e51b82526200057f9160040162000979565b60405180910390fd5b606060006200059983600262000a4f565b620005a690600262000a0c565b6001600160401b03811115620005cc57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015620005f7576020820181803683370190505b509050600360fc1b816000815181106200062157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200065f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006200068584600262000a4f565b6200069290600162000a0c565b90505b60018111156200072c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620006d657634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110620006fb57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93620007248162000ad0565b905062000695565b5083156200077d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016200057f565b9392505050565b80516001600160a01b03811681146200079c57600080fd5b919050565b805160ff811681146200079c57600080fd5b6000806040808486031215620007c7578283fd5b620007d28462000784565b602085810151919450906001600160401b0380821115620007f1578485fd5b818701915087601f83011262000805578485fd5b8151818111156200081a576200081a62000b41565b6200082a848260051b01620009d9565b818152848101925083850160c0808402860187018c10156200084a578889fd5b8895505b83861015620008ef5780828d03121562000866578889fd5b62000870620009ae565b6200087b83620007a1565b81526200088a888401620007a1565b888201526200089b898401620007a1565b898201526060620008ae818501620007a1565b908201526080620008c184820162000784565b9082015260a0620008d484820162000784565b9082015285526001959095019493860193908101906200084e565b50979a909950975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516200093a81601785016020880162000a9d565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516200096d81602884016020880162000a9d565b01602801949350505050565b60208152600082518060208401526200099a81604085016020870162000a9d565b601f01601f19169190910160400192915050565b60405160c081016001600160401b0381118282101715620009d357620009d362000b41565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000a045762000a0462000b41565b604052919050565b6000821982111562000a225762000a2262000b2b565b500190565b600060ff821660ff84168060ff0382111562000a475762000a4762000b2b565b019392505050565b600081600019048311821515161562000a6c5762000a6c62000b2b565b500290565b600060ff821660ff84168160ff048111821515161562000a955762000a9562000b2b565b029392505050565b60005b8381101562000aba57818101518382015260200162000aa0565b8381111562000aca576000848401525b50505050565b60008162000ae25762000ae262000b2b565b506000190190565b600060001982141562000b015762000b0162000b2b565b5060010190565b600060ff821660ff81141562000b225762000b2262000b2b565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6153e58062000b676000396000f3fe6080604052600436106101dc5760003560e01c8063644d41ed1161010257806391d1485411610095578063c78b432e11610064578063c78b432e14610b9f578063d547741f14610bb4578063ddd0247514610bd4578063f4d4c9d714610c0757600080fd5b806391d14854146109e5578063a217fddf14610a05578063ac95045214610a1a578063c5cfc5be14610a3a57600080fd5b80637332655b116100d15780637332655b146108e457806377d841f71461090457806383eb772e1461091e5780638a19c8bc146109b757600080fd5b8063644d41ed14610858578063685207e4146108785780636b37e4e31461089757806371018682146108c457600080fd5b806326b516991161017a5780634dd96f86116101495780634dd96f861461037057806351fe669e1461039057806355bf621f1461078b5780636386bcc4146107ab57600080fd5b806326b51699146102f05780632f2ff15d1461031057806332b76e861461033057806336568abe1461035057600080fd5b806319162852116101b6578063191628521461025f578063222f6b831461027f578063248a9ca31461029f578063256d43d7146102dd57600080fd5b806301ffc9a7146101e857806302c178d71461021d5780630748248f1461023f57600080fd5b366101e357005b600080fd5b3480156101f457600080fd5b50610208610203366004614a61565b610c27565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b5061023d6102383660046146fb565b610c5e565b005b34801561024b57600080fd5b506002546102089062010000900460ff1681565b34801561026b57600080fd5b5061023d61027a36600461487e565b610d6a565b34801561028b57600080fd5b5061023d61029a366004614c91565b6110d4565b3480156102ab57600080fd5b506102cf6102ba366004614a27565b60009081526020819052604090206001015490565b604051908152602001610214565b61023d6102eb366004614c3b565b611183565b3480156102fc57600080fd5b5061023d61030b36600461472d565b6113fe565b34801561031c57600080fd5b5061023d61032b366004614a3f565b6115ac565b34801561033c57600080fd5b5061023d61034b3660046147df565b6115d7565b34801561035c57600080fd5b5061023d61036b366004614a3f565b611d66565b34801561037c57600080fd5b5061023d61038b366004614986565b611de4565b34801561039c57600080fd5b5061077c6103ab366004614c3b565b600560205280600052604060002060009150905080600001604051806101400160405290816000820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016000820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016002820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016002820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016003820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016003820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016004820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016004820160109054906101000a900460ff1615151515815250509080600501604051806101400160405290816000820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016000820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016002820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016002820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016003820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016003820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016004820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016004820160109054906101000a900460ff1615151515815250509080600a0160009054906101000a900460ff16905083565b60405161021493929190614f6b565b34801561079757600080fd5b5061023d6107a6366004614cba565b611f67565b3480156107b757600080fd5b506108136107c6366004614c3b565b6004602052600090815260409020805460019091015460ff8083169261010081048216926201000082048316926301000000830416916001600160a01b03600160201b9091048116911686565b6040805160ff9788168152958716602087015293861693850193909352931660608301526001600160a01b0392831660808301529190911660a082015260c001610214565b34801561086457600080fd5b506102086108733660046146e1565b612102565b34801561088457600080fd5b50600a5461020890610100900460ff1681565b3480156108a357600080fd5b506108b76108b2366004614c3b565b6121f8565b6040516102149190614f13565b3480156108d057600080fd5b506108b76108df366004614c3b565b6122df565b3480156108f057600080fd5b5061023d6108ff366004614c91565b612380565b34801561091057600080fd5b50600a546102089060ff1681565b34801561092a57600080fd5b5061097a6109393660046146e1565b6003602052600090815260409020805460018201546002909201546001600160801b0380831693600160801b9093041691600f0b906001600160a01b031684565b604080516001600160801b039586168152949093166020850152600f9190910b918301919091526001600160a01b03166060820152608001610214565b3480156109c357600080fd5b506002546109d29061ffff1681565b60405161ffff9091168152602001610214565b3480156109f157600080fd5b50610208610a00366004614a3f565b6123ff565b348015610a1157600080fd5b506102cf600081565b348015610a2657600080fd5b5061023d610a35366004614c3b565b612428565b348015610a4657600080fd5b50610b2c610a55366004614c55565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060ff918216600090815260066020908152604080832061ffff9485168452600201825291829020825160e08101845281546001600160801b038082168352600160801b9182900481169483019490945260019092015492831693810193909352810483166060830152600160901b81049092166080820152600160a01b82048316151560a0820152600160a81b909104909116151560c082015290565b6040516102149190600060e0820190506001600160801b0380845116835280602085015116602084015280604085015116604084015250606083015161ffff8082166060850152806080860151166080850152505060a0830151151560a083015260c0830151151560c083015292915050565b348015610bab57600080fd5b5061023d612488565b348015610bc057600080fd5b5061023d610bcf366004614a3f565b6130dc565b348015610be057600080fd5b50600254610bf5906301000000900460ff1681565b60405160ff9091168152602001610214565b348015610c1357600080fd5b5061023d610c22366004614c91565b613102565b60006001600160e01b03198216637965db0b60e01b1480610c5857506301ffc9a760e01b6001600160e01b03198316145b92915050565b610c76600080516020615390833981519152336135a2565b6001600160a01b038116600090815260096020526040812060018101549091600f91820b90910b13610ca757600080fd5b6001810154604051631a4ca37b60e21b81526001600160a01b0380861660048301526001600160801b03600f9390930b9283166024830152841660448201527328D1E0e4460FB7e65DE364e613b3C29C0C0A0933906369328dec9060640160006040518083038186803b158015610d1d57600080fd5b505af4158015610d31573d6000803e3d6000fd5b5050506002830180546001600160801b03938416600160801b029316929092179091555060010180546001600160801b03191690555050565b610d756000336135a2565b805160025460075460ff63010000009092048216911660005b838110156110a7576000858281518110610db857634e487b7160e01b600052603260045260246000fd5b60200260200101519050836002610dcf9190615181565b610dda906001615107565b60ff16808252610deb906001615107565b60ff166020820152806004600086610e02816152f3565b60ff91821683526020808401949094526040928301600020855181549587015194870151606088015160808901516001600160a01b03908116600160201b02640100000000600160c01b031992881663010000000263ff0000001994891662010000029490941663ffff0000199989166101000261ffff19909b1695891695909517999099179790971692909217171694909417845560a09094015160019093018054939092166001600160a01b03199093169290921790559094508316610f645760808101516008600085610ed7816152f3565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060a00151600860008580610f25906152f3565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550611094565b60008060005b8560ff168160ff161015610fea57608084015160ff82166000908152600860205260409020546001600160a01b0390811691161415610fa857600192505b60a084015160ff82166000908152600860205260409020546001600160a01b0390811691161415610fd857600191505b80610fe2816152f3565b915050610f6a565b508161103e5760808301516008600087611003816152f3565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b806110915760a08301516008600087611056816152f3565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b50505b508061109f816152d8565b915050610d8e565b506002805463ff0000001916630100000060ff948516021790556007805460ff1916919092161790555050565b6110dd82613606565b60ff828116600090815260066020526040908190206002549151638a229a5760e01b81526004810191909152336024820152604481018490526201000082049092161515606483015261ffff1660848201527328D1E0e4460FB7e65DE364e613b3C29C0C0A093390638a229a579060a4015b60006040518083038186803b15801561116757600080fd5b505af415801561117b573d6000803e3d6000fd5b505050505050565b808060ff166001148061119957508060ff166002145b156111f557600a5460ff166111f55760405162461bcd60e51b815260206004820152601a60248201527f63616e6e6f74206465706f73697420657468206f72207573646300000000000060448201526064015b60405180910390fd5b8060ff166003148061120a57508060ff166004145b1561126657600a54610100900460ff166112665760405162461bcd60e51b815260206004820152601b60248201527f63616e6e6f74206465706f7369742077627463206f722075736463000000000060448201526064016111ec565b60025461ffff166112a45760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b60448201526064016111ec565b600034116112b157600080fd5b6112ba82613606565b600060048160026112cc600187615272565b6112d69190615140565b60ff908116825260208201929092526040016000908120805490935090918581169116146113115760018201546001600160a01b0316611324565b8154600160201b90046001600160a01b03165b90506001600160a01b0381161561133a57600080fd5b60ff8416600090815260066020526040808220600254915163c502f99160e01b81527328D1E0e4460FB7e65DE364e613b3C29C0C0A09339363c502f99193611395939233923492909161ffff90911690600190600401614eaa565b60006040518083038186803b1580156113ad57600080fd5b505af41580156113c1573d6000803e3d6000fd5b505060025460405134815261ffff909116925033915060ff871690600080516020615370833981519152906020015b60405180910390a450505050565b611416600080516020615390833981519152336135a2565b805160005b818110156115a65760006009600085848151811061144957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905060008160010160009054906101000a9004600f0b600f0b1361149457600080fd5b60008160010160009054906101000a9004600f0b90507328D1E0e4460FB7e65DE364e613b3C29C0C0A09336369328dec87836001600160801b03168887815181106114ef57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401611533939291906001600160a01b0393841681526020810192909252909116604082015260600190565b60006040518083038186803b15801561154b57600080fd5b505af415801561155f573d6000803e3d6000fd5b5050506002830180546001600160801b03938416600160801b029316929092179091555060010180546001600160801b03191690558061159e816152d8565b91505061141b565b50505050565b6000828152602081905260409020600101546115c881336135a2565b6115d28383613642565b505050565b6115ef600080516020615390833981519152336135a2565b60025462010000900460ff1661160457600080fd5b80516002546301000000900460ff16811461161e57600080fd5b6002546000906116349060019061ffff16615238565b905060005b828160ff161015611d4c576000848260ff168151811061166957634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160ff80851660009081526004845260408082208054808516845260068752828420610100918290049095168452828420835161018081018552858152978801859052928701849052606087018490526080870184905260a0870184905260c0870184905260e08701849052860183905261012086018390526101408601839052610160860192909252929450929091906000600284018161171760018b615238565b61ffff168152602081019190915260400160002080549091506001600160801b0316156119b15784547328D1E0e4460FB7e65DE364e613b3C29C0C0A09339063aab69633908690849060019060ff6201000082048116916301000000900416828d600281111561179757634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b1580156117f557600080fd5b505af4158015611809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182d9190614a89565b8051909250156118bd576040828101518654600160201b90046001600160a01b031660009081526009602052919091205461187a91611875916001600160801b0316906136c6565b6136d2565b8554600160201b90046001600160a01b0316600090815260096020526040902080546001600160801b0319166001600160801b039290921691909117905561193b565b60608201511561193b5760a082015160018601546001600160a01b031660009081526009602052604090205461190091611875916001600160801b0316906136c6565b60018601546001600160a01b0316600090815260096020526040902080546001600160801b0319166001600160801b03929092169190911790555b600186600281111561195d57634e487b7160e01b600052602160045260246000fd5b14156119905761198b8482858860000160019054906101000a900460ff168660a0015187610160015161373f565b6119b1565b845460408301516101008401516119b192879260ff90911691859190613a73565b600060028401816119c360018c615238565b61ffff168152602081019190915260400160002080549091506001600160801b031615611c585785547328D1E0e4460FB7e65DE364e613b3C29C0C0A09339063aab69633908690849060009060ff630100000082048116916201000090041660028e6002811115611a4457634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b158015611aa257600080fd5b505af4158015611ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ada9190614a89565b805190935015611b5d5760408084015160018801546001600160a01b0316600090815260096020529190912054611b1e91611875916001600160801b0316906136c6565b60018701546001600160a01b0316600090815260096020526040902080546001600160801b0319166001600160801b0392909216919091179055611be3565b606083015115611be35760a08301518654600160201b90046001600160a01b0316600090815260096020526040902054611ba491611875916001600160801b0316906136c6565b8654600160201b90046001600160a01b0316600090815260096020526040902080546001600160801b0319166001600160801b03929092169190911790555b6002876002811115611c0557634e487b7160e01b600052602160045260246000fd5b1415611c3157855460a0840151610160850151611c2c92879285928a9260ff16919061373f565b611c58565b611c58848760000160019054906101000a900460ff16838660400151876101000151613a73565b6040516366aef26360e01b81526004810186905261ffff8a1660248201527328D1E0e4460FB7e65DE364e613b3C29C0C0A0933906366aef2639060440160006040518083038186803b158015611cad57600080fd5b505af4158015611cc1573d6000803e3d6000fd5b50506040516366aef26360e01b81526004810187905261ffff8c1660248201527328D1E0e4460FB7e65DE364e613b3C29C0C0A093392506366aef263915060440160006040518083038186803b158015611d1a57600080fd5b505af4158015611d2e573d6000803e3d6000fd5b50505050505050505050508080611d44906152f3565b915050611639565b50611d55613cca565b50506002805462ff00001916905550565b6001600160a01b0381163314611dd65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016111ec565b611de08282613f47565b5050565b611dfc600080516020615390833981519152336135a2565b805160025462010000900460ff1615611e1457600080fd5b600254600161ffff90911611611e2957600080fd5b600260039054906101000a900460ff166002611e459190615181565b60ff168114611e5357600080fd5b60005b818160ff1610156115d2576000838260ff1681518110611e8657634e487b7160e01b600052603260045260246000fd5b60200260200101519050600060066000846001611ea39190615107565b60ff168152602081019190915260400160009081206002805491019190611ed09060019061ffff16615238565b61ffff16815260208101919091526040908101600020905163338dfe2f60e21b815260048101849052602481018290529091507328D1E0e4460FB7e65DE364e613b3C29C0C0A09339063ce37f8bc9060440160006040518083038186803b158015611f3a57600080fd5b505af4158015611f4e573d6000803e3d6000fd5b5050505050508080611f5f906152f3565b915050611e56565b611f7083613606565b60006004816002611f82600188615272565b611f8c9190615140565b60ff908116825260208083019390935260409182016000908120888316808352600690955292902060025483549395507328D1E0e4460FB7e65DE364e613b3C29C0C0A093394637441e8bb94929333938a9361ffff16929116148015612005575086546001600160a01b03898116600160201b90920416145b806120355750865460ff8b811661010090920416148015612035575060018701546001600160a01b038981169116145b6040516001600160e01b031960e088901b16815260048101959095526001600160a01b039093166024850152604484019190915261ffff1660648301521515608482015260a40160006040518083038186803b15801561209457600080fd5b505af41580156120a8573d6000803e3d6000fd5b505050506120b93384846000613fac565b816001600160a01b0316336001600160a01b03168560ff167f9ac0ff79dc491174b021e6532a2fc734e82751bba8672e9183a76cb994a5f65a866040516113f091815260200190565b6001600160a01b03811660009081526009602052604081206001810154600f90810b9081900b8313612138575060019392505050565b60405163b2838a7360e01b81526001600160a01b03851660048201523060248201527328D1E0e4460FB7e65DE364e613b3C29C0C0A09339063b2838a739060440160206040518083038186803b15801561219157600080fd5b505af41580156121a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c99190614c23565b6121d7575060009392505050565b6121e08461409f565b6121e990615313565b81600f0b121592505050919050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff82811660009081526006602052604090819020600254915163c975707360e01b815260048101919091526201000082049092161515602483015261ffff1660448201527328D1E0e4460FB7e65DE364e613b3C29C0C0A09339063c9757073906064015b60c06040518083038186803b1580156122a757600080fd5b505af41580156122bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c589190614b27565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff828116600090815260066020526040908190206002549151634ed14a7f60e01b815260048101919091523360248201526201000082049092161515604483015261ffff1660648201527328D1E0e4460FB7e65DE364e613b3C29C0C0A093390634ed14a7f9060840161228f565b61238982613606565b60ff828116600090815260066020526040908190206002549151630f681f9360e31b81526004810191909152336024820152604481018490526201000082049092161515606483015261ffff1660848201527328D1E0e4460FB7e65DE364e613b3C29C0C0A093390637b40fc989060a40161114f565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b612440600080516020615390833981519152336135a2565b60ff811661245d57600a805460ff19811660ff9091161517905550565b8060ff166001141561248557600a805461ff001981166101009182900460ff16159091021790555b50565b6124a0600080516020615390833981519152336135a2565b60025462010000900460ff16156124b657600080fd5b6002546124c89061ffff1660016150c9565b6002805462ffffff191661ffff92909216919091176201000017905560005b60025460ff630100000090910481169082161015612fdc5760ff8181166000908152600460208181526040808420805490951684526006909152808320600254915163161dd97560e31b815292830181905261ffff90911660248301526001604483015291907328D1E0e4460FB7e65DE364e613b3C29C0C0A09339063b0eecba89060640160206040518083038186803b15801561258457600080fd5b505af4158015612598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bc9190614c09565b8354610100900460ff16600090815260066020526040808220600254915163161dd97560e31b81526004810182905261ffff9092166024830152604482018390529293507328D1E0e4460FB7e65DE364e613b3C29C0C0A09339063b0eecba89060640160206040518083038186803b15801561263757600080fd5b505af415801561264b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266f9190614c09565b90506001600160801b03831615612700578454600160201b90046001600160a01b03166000908152600960205260409020546126c390611875906001600160801b03600160801b90910481169086166136c6565b85546001600160a01b03600160201b90910416600090815260096020526040902080546001600160801b03928316600160801b0292169190911790555b6001600160801b038116156127865760018501546001600160a01b031660009081526009602052604090205461274e9061187590600160801b90046001600160801b039081169084166136c6565b60018601546001600160a01b0316600090815260096020526040902080546001600160801b03928316600160801b0292169190911790555b6002805461ffff161161279d575050505050612fca565b8454600254604051631bb98a3360e01b81526000927328D1E0e4460FB7e65DE364e613b3C29C0C0A093392631bb98a33926127fa928a9260019260ff62010000840481169363010000009004169161ffff16908990600401614ee1565b6101406040518083038186803b15801561281357600080fd5b505af4158015612827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284b9190614b42565b8654600254604051631bb98a3360e01b81529293506000927328D1E0e4460FB7e65DE364e613b3C29C0C0A093392631bb98a33926128ad928992879260ff6301000000830481169362010000909304169161ffff909116908490600401614ee1565b6101406040518083038186803b1580156128c657600080fd5b505af41580156128da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fe9190614b42565b9050600060405180606001604052808481526020018381526020016000600281111561293a57634e487b7160e01b600052602160045260246000fd5b90529050806005600061294e8c6003615181565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff191691908490811115612ad057634e487b7160e01b600052602160045260246000fd5b0217905550508854600254604051631bb98a3360e01b8152600093507328D1E0e4460FB7e65DE364e613b3C29C0C0A093392631bb98a3392612b37928d9260019260ff6201000083048116936301000000909304169161ffff909116908490600401614ee1565b6101406040518083038186803b158015612b5057600080fd5b505af4158015612b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b889190614b42565b604080516060810182528281526020810186905291925081016001905291508160056000612bb78d6003615181565b612bc2906001615107565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff191691908490811115612d4457634e487b7160e01b600052602160045260246000fd5b0217905550508954600254604051631bb98a3360e01b8152600093507328D1E0e4460FB7e65DE364e613b3C29C0C0A093392631bb98a3392612dab928c92879260ff6301000000830481169362010000909304169161ffff90911690600190600401614ee1565b6101406040518083038186803b158015612dc457600080fd5b505af4158015612dd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfc9190614b42565b604080516060810182528781526020810183905291925081016002905292508260056000612e2b8e6003615181565b612e36906002615107565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff191691908490811115612fb857634e487b7160e01b600052602160045260246000fd5b02179055505050505050505050505050505b80612fd4816152f3565b9150506124e7565b5060025461ffff1660011415612ffa576002805462ff000019169055565b6002805461ffff1614156130da5760015b600260039054906101000a900460ff1660026130279190615181565b60ff168160ff16116130c45760ff81166000908152600660205260409081902090516366aef26360e01b81526004810191909152600160248201527328D1E0e4460FB7e65DE364e613b3C29C0C0A0933906366aef2639060440160006040518083038186803b15801561309957600080fd5b505af41580156130ad573d6000803e3d6000fd5b5050505080806130bc906152f3565b91505061300b565b506130cd613cca565b6002805462ff0000191690555b565b6000828152602081905260409020600101546130f881336135a2565b6115d28383613f47565b818060ff166001148061311857508060ff166002145b1561316f57600a5460ff1661316f5760405162461bcd60e51b815260206004820152601a60248201527f63616e6e6f74206465706f73697420657468206f72207573646300000000000060448201526064016111ec565b8060ff166003148061318457508060ff166004145b156131e057600a54610100900460ff166131e05760405162461bcd60e51b815260206004820152601b60248201527f63616e6e6f74206465706f7369742077627463206f722075736463000000000060448201526064016111ec565b60025461ffff1661321e5760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b60448201526064016111ec565b600082116132585760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b60448201526064016111ec565b61326183613606565b60006004816002613273600188615272565b61327d9190615140565b60ff908116825260208201929092526040016000908120805490935090918681169116146132b85760018201546001600160a01b03166132cb565b8154600160201b90046001600160a01b03165b90506001600160a01b0381166132e057600080fd5b60ff8516600090815260066020526040808220600254915163c502f99160e01b81527328D1E0e4460FB7e65DE364e613b3C29C0C0A09339363c502f9919361333b939233928b92909161ffff90911690600190600401614eaa565b60006040518083038186803b15801561335357600080fd5b505af4158015613367573d6000803e3d6000fd5b505060025460405187815261ffff909116925033915060ff8816906000805160206153708339815191529060200160405180910390a46133b26001600160a01b0382163330876141a3565b5050505050565b606060006133c8836002615162565b6133d39060026150ef565b67ffffffffffffffff8111156133f957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613423576020820181803683370190505b509050600360fc1b8160008151811061344c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061348957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006134ad846002615162565b6134b89060016150ef565b90505b600181111561354c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106134fa57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061351e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93613545816152c1565b90506134bb565b50831561359b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016111ec565b9392505050565b6135ac82826123ff565b611de0576135c4816001600160a01b031660146133b9565b6135cf8360206133b9565b6040516020016135e0929190614e02565b60408051601f198184030181529082905262461bcd60e51b82526111ec91600401614e77565b60ff8116158015906136395750600260039054906101000a900460ff16600261362f9190615181565b60ff168160ff1611155b61248557600080fd5b61364c82826123ff565b611de0576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556136823390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061359b82846150ef565b60006001600160801b0382111561373b5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b60648201526084016111ec565b5090565b8454600090613761906001600160801b0380821691600160801b9004166141fd565b60018801549091506001600160801b0316158015906137805750600082115b156137df5760018601546137bc90611875906137a8908490600160901b900461ffff16614209565b60018a01546001600160801b03169061422b565b6001880180546001600160801b0319166001600160801b03929092169190911790555b600387015460005b81811015613a6857600089600301828154811061381457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048d0190915260409091206001810154919250906001600160801b0316613857575050613a56565b60018101548a54600091613885918a916001600160801b03600160801b918290048116929190910416614246565b905080156138cc5760038201546138a990611875906001600160801b0316836136c6565b6003830180546001600160801b0319166001600160801b03929092169190911790555b60018201546000906138f1906001600160801b0380821691600160801b9004166141fd565b9050600061390089838a614246565b90508015613a415760018d01546000908190613928908590600160901b900461ffff16614209565b60028701549091506001600160801b031681106139605760028601546139599084906001600160801b031683614246565b9150613964565b8291505b7328D1E0e4460FB7e65DE364e613b3C29C0C0A093363c502f9918f8986866001600260009054906101000a900461ffff1661399f9190615238565b60006040518763ffffffff1660e01b81526004016139c296959493929190614eaa565b60006040518083038186803b1580156139da57600080fd5b505af41580156139ee573d6000803e3d6000fd5b5050600254613a0592506001915061ffff16615238565b61ffff16876001600160a01b03168e60ff1660008051602061537083398151915286604051613a3691815260200190565b60405180910390a450505b50505060010180546001600160801b03169055505b80613a60816152d8565b9150506137e7565b505050505050505050565b8254600090613a95906001600160801b0380821691600160801b9004166141fd565b600387015490915060005b81811015613cc0576000886003018281548110613acd57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048c0190915260409091206001810154919250906001600160801b0316613b10575050613cae565b60018101548854600091613b3e918a916001600160801b03600160801b918290048116929190910416614246565b90508015613b89576002820154613b699061187590600160801b90046001600160801b0316836136c6565b6002830180546001600160801b03928316600160801b0292169190911790555b6001820154600090613bba908990613bb4906001600160801b0380821691600160801b9004166141fd565b89614246565b90508015613c9a576002547328D1E0e4460FB7e65DE364e613b3C29C0C0A09339063c502f991908e9087908590600090613bfa9060019061ffff16615238565b60006040518763ffffffff1660e01b8152600401613c1d96959493929190614eaa565b60006040518083038186803b158015613c3557600080fd5b505af4158015613c49573d6000803e3d6000fd5b5050600254613c6092506001915061ffff16615238565b61ffff16846001600160a01b03168c60ff1660008051602061537083398151915284604051613c9191815260200190565b60405180910390a45b505060010180546001600160801b03169055505b80613cb8816152d8565b915050613aa0565b5050505050505050565b60005b60075460ff90811690821610156124855760ff81166000908152600860209081526040808320546001600160a01b031680845260099092528220600280549293919261ffff1614613d505781546001600160801b0380821691600160801b900416613d378561409f565b613d4191906151aa565b613d4b919061507b565b613d53565b60005b6001830154613d659190600f0b61507b565b6002830180546001600160801b0316905560405163b2838a7360e01b81526001600160a01b0385166004820152306024820152909150613e0e907328D1E0e4460FB7e65DE364e613b3C29C0C0A09339063b2838a739060440160206040518083038186803b158015613dd657600080fd5b505af4158015613dea573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118759190614c23565b6001830180546001600160801b03928316600160801b029216919091179055613e396118758461428e565b600283810180546001600160801b03199081166001600160801b0394851617909155604080516080810182528654600160801b808204871683529086166020808401918252600f89810b8587019081526001600160a01b038d811660608801818152600091825260039095529790972086519451948b16948b16860294909417845551600184018054909816910b89161790955593519390940180546001600160a01b031916939092169290921790558454909281811692613efd9204168461507b565b613f0791906151aa565b600184018054600f9290920b6001600160801b03166001600160801b03199092169190911790555050600090555080613f3f816152f3565b915050613ccd565b613f5182826123ff565b15611de0576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60026001541415613fff5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016111ec565b60026001558061401b5761401282612102565b61401b57600080fd5b604051631a4ca37b60e21b81526001600160a01b03808616600483015260248201859052831660448201527328D1E0e4460FB7e65DE364e613b3C29C0C0A0933906369328dec9060640160006040518083038186803b15801561407d57600080fd5b505af4158015614091573d6000803e3d6000fd5b505060018055505050505050565b6001600160a01b03811660009081526009602052604081206140de6140c38461428e565b6001830154600160801b90046001600160801b0316906136c6565b600282015460405163b2838a7360e01b81526001600160a01b0386166004820152306024820152614199916001600160801b038082169261419392600160801b9004909116907328D1E0e4460FB7e65DE364e613b3C29C0C0A09339063b2838a739060440160206040518083038186803b15801561415b57600080fd5b505af415801561416f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141939190614c23565b906136c6565b61359b91906151f9565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526115a6908590614417565b600061359b828461525b565b600061359b61271061422561421e85836150ef565b86906144e9565b906144f5565b60008183101561423c57600061359b565b61359b828461525b565b6000821580614253575081155b8061425c575083155b156142695750600061359b565b818310156142845761427f8261422586866144e9565b614286565b835b949350505050565b600080805b60025460ff6301000000909104811690821610156144105760ff8116600090815260046020526040902080546001600160a01b03868116600160201b9092041614806142ee575060018101546001600160a01b038681169116145b156143fd57805460ff8116600090815260066020526040902090614373906001600160a01b03888116600160201b909204161461433c578154600160801b90046001600160801b031661436c565b81546002805461ffff166000908152908401602052604090205461436c916001600160801b0391821691166136c6565b85906136c6565b8254610100900460ff1660009081526006602052604090206001840154919550906143f8906001600160a01b038981169116146143c1578154600160801b90046001600160801b03166143f1565b81546002805461ffff16600090815290840160205260409020546143f1916001600160801b0391821691166136c6565b86906136c6565b945050505b5080614408816152f3565b915050614293565b5092915050565b600061446c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166145019092919063ffffffff16565b8051909150156115d2578080602001905181019061448a9190614a0d565b6115d25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016111ec565b600061359b8284615162565b600061359b828461512c565b6060614286848460008585843b61455a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016111ec565b600080866001600160a01b031685876040516145769190614de6565b60006040518083038185875af1925050503d80600081146145b3576040519150601f19603f3d011682016040523d82523d6000602084013e6145b8565b606091505b50915091506145c88282866145d3565b979650505050505050565b606083156145e257508161359b565b8251156145f25782518084602001fd5b8160405162461bcd60e51b81526004016111ec9190614e77565b80356001600160a01b038116811461462357600080fd5b919050565b8051801515811461462357600080fd5b600060c08284031215614649578081fd5b614651614fb5565b905061465c826146b9565b815261466a602083016146b9565b602082015261467b604083016146b9565b604082015261468c606083016146b9565b606082015261469d608083016146b9565b60808201526146ae60a083016146b9565b60a082015292915050565b80516001600160801b038116811461462357600080fd5b803560ff8116811461462357600080fd5b6000602082840312156146f2578081fd5b61359b8261460c565b6000806040838503121561470d578081fd5b6147168361460c565b91506147246020840161460c565b90509250929050565b6000806040838503121561473f578182fd5b6147488361460c565b915060208084013567ffffffffffffffff811115614764578283fd5b8401601f81018613614774578283fd5b803561478761478282615057565b615026565b80828252848201915084840189868560051b87010111156147a6578687fd5b8694505b838510156147cf576147bb8161460c565b8352600194909401939185019185016147aa565b5080955050505050509250929050565b600060208083850312156147f1578182fd5b823567ffffffffffffffff811115614807578283fd5b8301601f81018513614817578283fd5b803561482561478282615057565b80828252848201915084840188868560051b8701011115614844578687fd5b8694505b838510156148725780356003811061485e578788fd5b835260019490940193918501918501614848565b50979650505050505050565b60006020808385031215614890578182fd5b823567ffffffffffffffff8111156148a6578283fd5b8301601f810185136148b6578283fd5b80356148c461478282615057565b8181528381019083850160c0808502860187018a10156148e2578788fd5b8795505b848610156149785780828b0312156148fc578788fd5b614904614fb5565b61490d836146d0565b815261491a8884016146d0565b88820152604061492b8185016146d0565b90820152606061493c8482016146d0565b90820152608061494d84820161460c565b9082015260a061495e84820161460c565b9082015284526001959095019492860192908101906148e6565b509098975050505050505050565b60006020808385031215614998578182fd5b823567ffffffffffffffff8111156149ae578283fd5b8301601f810185136149be578283fd5b80356149cc61478282615057565b80828252848201915084840188868560051b87010111156149eb578687fd5b8694505b838510156148725780358352600194909401939185019185016149ef565b600060208284031215614a1e578081fd5b61359b82614628565b600060208284031215614a38578081fd5b5035919050565b60008060408385031215614a51578182fd5b823591506147246020840161460c565b600060208284031215614a72578081fd5b81356001600160e01b03198116811461359b578182fd5b60006101808284031215614a9b578081fd5b614aa3614fde565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101608084015181830152508091505092915050565b600060c08284031215614b38578081fd5b61359b8383614638565b60006101408284031215614b54578081fd5b614b5c615002565b614b65836146b9565b8152614b73602084016146b9565b6020820152614b84604084016146b9565b6040820152614b95606084016146b9565b6060820152614ba6608084016146b9565b6080820152614bb760a084016146b9565b60a0820152614bc860c084016146b9565b60c0820152614bd960e084016146b9565b60e0820152610100614bec8185016146b9565b90820152610120614bfe848201614628565b908201529392505050565b600060208284031215614c1a578081fd5b61359b826146b9565b600060208284031215614c34578081fd5b5051919050565b600060208284031215614c4c578081fd5b61359b826146d0565b60008060408385031215614c67578182fd5b614c70836146d0565b9150602083013561ffff81168114614c86578182fd5b809150509250929050565b60008060408385031215614ca3578182fd5b614cac836146d0565b946020939093013593505050565b600080600060608486031215614cce578081fd5b614cd7846146d0565b925060208401359150614cec6040850161460c565b90509250925092565b80516001600160801b031682526020810151614d1c60208401826001600160801b03169052565b506040810151614d3760408401826001600160801b03169052565b506060810151614d5260608401826001600160801b03169052565b506080810151614d6d60808401826001600160801b03169052565b5060a0810151614d8860a08401826001600160801b03169052565b5060c0810151614da360c08401826001600160801b03169052565b5060e0810151614dbe60e08401826001600160801b03169052565b50610100818101516001600160801b03169083015261012080820151801515828501526115a6565b60008251614df8818460208701615295565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e3a816017850160208801615295565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614e6b816028840160208801615295565b01602801949350505050565b6020815260008251806020840152614e96816040850160208701615295565b601f01601f19169190910160400192915050565b9586526001600160a01b039490941660208601526040850192909252606084015261ffff166080830152151560a082015260c00190565b958652931515602086015260ff92831660408601529116606084015261ffff166080830152151560a082015260c00190565b60c08101610c5882846001600160801b038082511683528060208301511660208401528060408301511660408401528060608301511660608401528060808301511660808401528060a08301511660a0840152505050565b6102a08101614f7a8286614cf5565b614f88610140830185614cf5565b60038310614fa657634e487b7160e01b600052602160045260246000fd5b82610280830152949350505050565b60405160c0810167ffffffffffffffff81118282101715614fd857614fd8615359565b60405290565b604051610180810167ffffffffffffffff81118282101715614fd857614fd8615359565b604051610140810167ffffffffffffffff81118282101715614fd857614fd8615359565b604051601f8201601f1916810167ffffffffffffffff8111828210171561504f5761504f615359565b604052919050565b600067ffffffffffffffff82111561507157615071615359565b5060051b60200190565b600081600f0b83600f0b8282128260016001607f1b03038213811516156150a4576150a461532d565b8260016001607f1b03190382128116156150c0576150c061532d565b50019392505050565b600061ffff8083168185168083038211156150e6576150e661532d565b01949350505050565b600082198211156151025761510261532d565b500190565b600060ff821660ff84168060ff038211156151245761512461532d565b019392505050565b60008261513b5761513b615343565b500490565b600060ff83168061515357615153615343565b8060ff84160491505092915050565b600081600019048311821515161561517c5761517c61532d565b500290565b600060ff821660ff84168160ff04811182151516156151a2576151a261532d565b029392505050565b600081600f0b83600f0b8281128160016001607f1b0319018312811516156151d4576151d461532d565b8160016001607f1b030183138116156151ef576151ef61532d565b5090039392505050565b60008083128015600160ff1b8501841216156152175761521761532d565b6001600160ff1b03840183138116156152325761523261532d565b50500390565b600061ffff838116908316818110156152535761525361532d565b039392505050565b60008282101561526d5761526d61532d565b500390565b600060ff821660ff84168082101561528c5761528c61532d565b90039392505050565b60005b838110156152b0578181015183820152602001615298565b838111156115a65750506000910152565b6000816152d0576152d061532d565b506000190190565b60006000198214156152ec576152ec61532d565b5060010190565b600060ff821660ff81141561530a5761530a61532d565b60010192915050565b6000600160ff1b8214156153295761532961532d565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfee963a73e630cb9812a026653bfb6b1e14ffa92f8c38b79f318f2637557ea9f126666bf5bfee463d10a7fc50448047f8a53b7762d7e28fbc5c643182785f3fd3fa2646970667358221220383d5d8a74d027f13d859e395b821f6c05831bd515edfe5a91a5e0606a83a94364736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101dc5760003560e01c8063644d41ed1161010257806391d1485411610095578063c78b432e11610064578063c78b432e14610b9f578063d547741f14610bb4578063ddd0247514610bd4578063f4d4c9d714610c0757600080fd5b806391d14854146109e5578063a217fddf14610a05578063ac95045214610a1a578063c5cfc5be14610a3a57600080fd5b80637332655b116100d15780637332655b146108e457806377d841f71461090457806383eb772e1461091e5780638a19c8bc146109b757600080fd5b8063644d41ed14610858578063685207e4146108785780636b37e4e31461089757806371018682146108c457600080fd5b806326b516991161017a5780634dd96f86116101495780634dd96f861461037057806351fe669e1461039057806355bf621f1461078b5780636386bcc4146107ab57600080fd5b806326b51699146102f05780632f2ff15d1461031057806332b76e861461033057806336568abe1461035057600080fd5b806319162852116101b6578063191628521461025f578063222f6b831461027f578063248a9ca31461029f578063256d43d7146102dd57600080fd5b806301ffc9a7146101e857806302c178d71461021d5780630748248f1461023f57600080fd5b366101e357005b600080fd5b3480156101f457600080fd5b50610208610203366004614a61565b610c27565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b5061023d6102383660046146fb565b610c5e565b005b34801561024b57600080fd5b506002546102089062010000900460ff1681565b34801561026b57600080fd5b5061023d61027a36600461487e565b610d6a565b34801561028b57600080fd5b5061023d61029a366004614c91565b6110d4565b3480156102ab57600080fd5b506102cf6102ba366004614a27565b60009081526020819052604090206001015490565b604051908152602001610214565b61023d6102eb366004614c3b565b611183565b3480156102fc57600080fd5b5061023d61030b36600461472d565b6113fe565b34801561031c57600080fd5b5061023d61032b366004614a3f565b6115ac565b34801561033c57600080fd5b5061023d61034b3660046147df565b6115d7565b34801561035c57600080fd5b5061023d61036b366004614a3f565b611d66565b34801561037c57600080fd5b5061023d61038b366004614986565b611de4565b34801561039c57600080fd5b5061077c6103ab366004614c3b565b600560205280600052604060002060009150905080600001604051806101400160405290816000820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016000820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016002820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016002820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016003820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016003820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016004820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016004820160109054906101000a900460ff1615151515815250509080600501604051806101400160405290816000820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016000820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016002820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016002820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016003820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016003820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016004820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016004820160109054906101000a900460ff1615151515815250509080600a0160009054906101000a900460ff16905083565b60405161021493929190614f6b565b34801561079757600080fd5b5061023d6107a6366004614cba565b611f67565b3480156107b757600080fd5b506108136107c6366004614c3b565b6004602052600090815260409020805460019091015460ff8083169261010081048216926201000082048316926301000000830416916001600160a01b03600160201b9091048116911686565b6040805160ff9788168152958716602087015293861693850193909352931660608301526001600160a01b0392831660808301529190911660a082015260c001610214565b34801561086457600080fd5b506102086108733660046146e1565b612102565b34801561088457600080fd5b50600a5461020890610100900460ff1681565b3480156108a357600080fd5b506108b76108b2366004614c3b565b6121f8565b6040516102149190614f13565b3480156108d057600080fd5b506108b76108df366004614c3b565b6122df565b3480156108f057600080fd5b5061023d6108ff366004614c91565b612380565b34801561091057600080fd5b50600a546102089060ff1681565b34801561092a57600080fd5b5061097a6109393660046146e1565b6003602052600090815260409020805460018201546002909201546001600160801b0380831693600160801b9093041691600f0b906001600160a01b031684565b604080516001600160801b039586168152949093166020850152600f9190910b918301919091526001600160a01b03166060820152608001610214565b3480156109c357600080fd5b506002546109d29061ffff1681565b60405161ffff9091168152602001610214565b3480156109f157600080fd5b50610208610a00366004614a3f565b6123ff565b348015610a1157600080fd5b506102cf600081565b348015610a2657600080fd5b5061023d610a35366004614c3b565b612428565b348015610a4657600080fd5b50610b2c610a55366004614c55565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060ff918216600090815260066020908152604080832061ffff9485168452600201825291829020825160e08101845281546001600160801b038082168352600160801b9182900481169483019490945260019092015492831693810193909352810483166060830152600160901b81049092166080820152600160a01b82048316151560a0820152600160a81b909104909116151560c082015290565b6040516102149190600060e0820190506001600160801b0380845116835280602085015116602084015280604085015116604084015250606083015161ffff8082166060850152806080860151166080850152505060a0830151151560a083015260c0830151151560c083015292915050565b348015610bab57600080fd5b5061023d612488565b348015610bc057600080fd5b5061023d610bcf366004614a3f565b6130dc565b348015610be057600080fd5b50600254610bf5906301000000900460ff1681565b60405160ff9091168152602001610214565b348015610c1357600080fd5b5061023d610c22366004614c91565b613102565b60006001600160e01b03198216637965db0b60e01b1480610c5857506301ffc9a760e01b6001600160e01b03198316145b92915050565b610c76600080516020615390833981519152336135a2565b6001600160a01b038116600090815260096020526040812060018101549091600f91820b90910b13610ca757600080fd5b6001810154604051631a4ca37b60e21b81526001600160a01b0380861660048301526001600160801b03600f9390930b92831660248301528416604482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906369328dec9060640160006040518083038186803b158015610d1d57600080fd5b505af4158015610d31573d6000803e3d6000fd5b5050506002830180546001600160801b03938416600160801b029316929092179091555060010180546001600160801b03191690555050565b610d756000336135a2565b805160025460075460ff63010000009092048216911660005b838110156110a7576000858281518110610db857634e487b7160e01b600052603260045260246000fd5b60200260200101519050836002610dcf9190615181565b610dda906001615107565b60ff16808252610deb906001615107565b60ff166020820152806004600086610e02816152f3565b60ff91821683526020808401949094526040928301600020855181549587015194870151606088015160808901516001600160a01b03908116600160201b02640100000000600160c01b031992881663010000000263ff0000001994891662010000029490941663ffff0000199989166101000261ffff19909b1695891695909517999099179790971692909217171694909417845560a09094015160019093018054939092166001600160a01b03199093169290921790559094508316610f645760808101516008600085610ed7816152f3565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060a00151600860008580610f25906152f3565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550611094565b60008060005b8560ff168160ff161015610fea57608084015160ff82166000908152600860205260409020546001600160a01b0390811691161415610fa857600192505b60a084015160ff82166000908152600860205260409020546001600160a01b0390811691161415610fd857600191505b80610fe2816152f3565b915050610f6a565b508161103e5760808301516008600087611003816152f3565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b806110915760a08301516008600087611056816152f3565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b50505b508061109f816152d8565b915050610d8e565b506002805463ff0000001916630100000060ff948516021790556007805460ff1916919092161790555050565b6110dd82613606565b60ff828116600090815260066020526040908190206002549151638a229a5760e01b81526004810191909152336024820152604481018490526201000082049092161515606483015261ffff16608482015273__$e36f5330ef2566ea8a183e1e27b10de643$__90638a229a579060a4015b60006040518083038186803b15801561116757600080fd5b505af415801561117b573d6000803e3d6000fd5b505050505050565b808060ff166001148061119957508060ff166002145b156111f557600a5460ff166111f55760405162461bcd60e51b815260206004820152601a60248201527f63616e6e6f74206465706f73697420657468206f72207573646300000000000060448201526064015b60405180910390fd5b8060ff166003148061120a57508060ff166004145b1561126657600a54610100900460ff166112665760405162461bcd60e51b815260206004820152601b60248201527f63616e6e6f74206465706f7369742077627463206f722075736463000000000060448201526064016111ec565b60025461ffff166112a45760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b60448201526064016111ec565b600034116112b157600080fd5b6112ba82613606565b600060048160026112cc600187615272565b6112d69190615140565b60ff908116825260208201929092526040016000908120805490935090918581169116146113115760018201546001600160a01b0316611324565b8154600160201b90046001600160a01b03165b90506001600160a01b0381161561133a57600080fd5b60ff8416600090815260066020526040808220600254915163c502f99160e01b815273__$e36f5330ef2566ea8a183e1e27b10de643$__9363c502f99193611395939233923492909161ffff90911690600190600401614eaa565b60006040518083038186803b1580156113ad57600080fd5b505af41580156113c1573d6000803e3d6000fd5b505060025460405134815261ffff909116925033915060ff871690600080516020615370833981519152906020015b60405180910390a450505050565b611416600080516020615390833981519152336135a2565b805160005b818110156115a65760006009600085848151811061144957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905060008160010160009054906101000a9004600f0b600f0b1361149457600080fd5b60008160010160009054906101000a9004600f0b905073__$e36f5330ef2566ea8a183e1e27b10de643$__6369328dec87836001600160801b03168887815181106114ef57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401611533939291906001600160a01b0393841681526020810192909252909116604082015260600190565b60006040518083038186803b15801561154b57600080fd5b505af415801561155f573d6000803e3d6000fd5b5050506002830180546001600160801b03938416600160801b029316929092179091555060010180546001600160801b03191690558061159e816152d8565b91505061141b565b50505050565b6000828152602081905260409020600101546115c881336135a2565b6115d28383613642565b505050565b6115ef600080516020615390833981519152336135a2565b60025462010000900460ff1661160457600080fd5b80516002546301000000900460ff16811461161e57600080fd5b6002546000906116349060019061ffff16615238565b905060005b828160ff161015611d4c576000848260ff168151811061166957634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160ff80851660009081526004845260408082208054808516845260068752828420610100918290049095168452828420835161018081018552858152978801859052928701849052606087018490526080870184905260a0870184905260c0870184905260e08701849052860183905261012086018390526101408601839052610160860192909252929450929091906000600284018161171760018b615238565b61ffff168152602081019190915260400160002080549091506001600160801b0316156119b157845473__$e36f5330ef2566ea8a183e1e27b10de643$__9063aab69633908690849060019060ff6201000082048116916301000000900416828d600281111561179757634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b1580156117f557600080fd5b505af4158015611809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182d9190614a89565b8051909250156118bd576040828101518654600160201b90046001600160a01b031660009081526009602052919091205461187a91611875916001600160801b0316906136c6565b6136d2565b8554600160201b90046001600160a01b0316600090815260096020526040902080546001600160801b0319166001600160801b039290921691909117905561193b565b60608201511561193b5760a082015160018601546001600160a01b031660009081526009602052604090205461190091611875916001600160801b0316906136c6565b60018601546001600160a01b0316600090815260096020526040902080546001600160801b0319166001600160801b03929092169190911790555b600186600281111561195d57634e487b7160e01b600052602160045260246000fd5b14156119905761198b8482858860000160019054906101000a900460ff168660a0015187610160015161373f565b6119b1565b845460408301516101008401516119b192879260ff90911691859190613a73565b600060028401816119c360018c615238565b61ffff168152602081019190915260400160002080549091506001600160801b031615611c5857855473__$e36f5330ef2566ea8a183e1e27b10de643$__9063aab69633908690849060009060ff630100000082048116916201000090041660028e6002811115611a4457634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b158015611aa257600080fd5b505af4158015611ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ada9190614a89565b805190935015611b5d5760408084015160018801546001600160a01b0316600090815260096020529190912054611b1e91611875916001600160801b0316906136c6565b60018701546001600160a01b0316600090815260096020526040902080546001600160801b0319166001600160801b0392909216919091179055611be3565b606083015115611be35760a08301518654600160201b90046001600160a01b0316600090815260096020526040902054611ba491611875916001600160801b0316906136c6565b8654600160201b90046001600160a01b0316600090815260096020526040902080546001600160801b0319166001600160801b03929092169190911790555b6002876002811115611c0557634e487b7160e01b600052602160045260246000fd5b1415611c3157855460a0840151610160850151611c2c92879285928a9260ff16919061373f565b611c58565b611c58848760000160019054906101000a900460ff16838660400151876101000151613a73565b6040516366aef26360e01b81526004810186905261ffff8a16602482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906366aef2639060440160006040518083038186803b158015611cad57600080fd5b505af4158015611cc1573d6000803e3d6000fd5b50506040516366aef26360e01b81526004810187905261ffff8c16602482015273__$e36f5330ef2566ea8a183e1e27b10de643$__92506366aef263915060440160006040518083038186803b158015611d1a57600080fd5b505af4158015611d2e573d6000803e3d6000fd5b50505050505050505050508080611d44906152f3565b915050611639565b50611d55613cca565b50506002805462ff00001916905550565b6001600160a01b0381163314611dd65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016111ec565b611de08282613f47565b5050565b611dfc600080516020615390833981519152336135a2565b805160025462010000900460ff1615611e1457600080fd5b600254600161ffff90911611611e2957600080fd5b600260039054906101000a900460ff166002611e459190615181565b60ff168114611e5357600080fd5b60005b818160ff1610156115d2576000838260ff1681518110611e8657634e487b7160e01b600052603260045260246000fd5b60200260200101519050600060066000846001611ea39190615107565b60ff168152602081019190915260400160009081206002805491019190611ed09060019061ffff16615238565b61ffff16815260208101919091526040908101600020905163338dfe2f60e21b8152600481018490526024810182905290915073__$e36f5330ef2566ea8a183e1e27b10de643$__9063ce37f8bc9060440160006040518083038186803b158015611f3a57600080fd5b505af4158015611f4e573d6000803e3d6000fd5b5050505050508080611f5f906152f3565b915050611e56565b611f7083613606565b60006004816002611f82600188615272565b611f8c9190615140565b60ff9081168252602080830193909352604091820160009081208883168083526006909552929020600254835493955073__$e36f5330ef2566ea8a183e1e27b10de643$__94637441e8bb94929333938a9361ffff16929116148015612005575086546001600160a01b03898116600160201b90920416145b806120355750865460ff8b811661010090920416148015612035575060018701546001600160a01b038981169116145b6040516001600160e01b031960e088901b16815260048101959095526001600160a01b039093166024850152604484019190915261ffff1660648301521515608482015260a40160006040518083038186803b15801561209457600080fd5b505af41580156120a8573d6000803e3d6000fd5b505050506120b93384846000613fac565b816001600160a01b0316336001600160a01b03168560ff167f9ac0ff79dc491174b021e6532a2fc734e82751bba8672e9183a76cb994a5f65a866040516113f091815260200190565b6001600160a01b03811660009081526009602052604081206001810154600f90810b9081900b8313612138575060019392505050565b60405163b2838a7360e01b81526001600160a01b038516600482015230602482015273__$e36f5330ef2566ea8a183e1e27b10de643$__9063b2838a739060440160206040518083038186803b15801561219157600080fd5b505af41580156121a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c99190614c23565b6121d7575060009392505050565b6121e08461409f565b6121e990615313565b81600f0b121592505050919050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff82811660009081526006602052604090819020600254915163c975707360e01b815260048101919091526201000082049092161515602483015261ffff16604482015273__$e36f5330ef2566ea8a183e1e27b10de643$__9063c9757073906064015b60c06040518083038186803b1580156122a757600080fd5b505af41580156122bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c589190614b27565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff828116600090815260066020526040908190206002549151634ed14a7f60e01b815260048101919091523360248201526201000082049092161515604483015261ffff16606482015273__$e36f5330ef2566ea8a183e1e27b10de643$__90634ed14a7f9060840161228f565b61238982613606565b60ff828116600090815260066020526040908190206002549151630f681f9360e31b81526004810191909152336024820152604481018490526201000082049092161515606483015261ffff16608482015273__$e36f5330ef2566ea8a183e1e27b10de643$__90637b40fc989060a40161114f565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b612440600080516020615390833981519152336135a2565b60ff811661245d57600a805460ff19811660ff9091161517905550565b8060ff166001141561248557600a805461ff001981166101009182900460ff16159091021790555b50565b6124a0600080516020615390833981519152336135a2565b60025462010000900460ff16156124b657600080fd5b6002546124c89061ffff1660016150c9565b6002805462ffffff191661ffff92909216919091176201000017905560005b60025460ff630100000090910481169082161015612fdc5760ff8181166000908152600460208181526040808420805490951684526006909152808320600254915163161dd97560e31b815292830181905261ffff909116602483015260016044830152919073__$e36f5330ef2566ea8a183e1e27b10de643$__9063b0eecba89060640160206040518083038186803b15801561258457600080fd5b505af4158015612598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bc9190614c09565b8354610100900460ff16600090815260066020526040808220600254915163161dd97560e31b81526004810182905261ffff90921660248301526044820183905292935073__$e36f5330ef2566ea8a183e1e27b10de643$__9063b0eecba89060640160206040518083038186803b15801561263757600080fd5b505af415801561264b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266f9190614c09565b90506001600160801b03831615612700578454600160201b90046001600160a01b03166000908152600960205260409020546126c390611875906001600160801b03600160801b90910481169086166136c6565b85546001600160a01b03600160201b90910416600090815260096020526040902080546001600160801b03928316600160801b0292169190911790555b6001600160801b038116156127865760018501546001600160a01b031660009081526009602052604090205461274e9061187590600160801b90046001600160801b039081169084166136c6565b60018601546001600160a01b0316600090815260096020526040902080546001600160801b03928316600160801b0292169190911790555b6002805461ffff161161279d575050505050612fca565b8454600254604051631bb98a3360e01b815260009273__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a33926127fa928a9260019260ff62010000840481169363010000009004169161ffff16908990600401614ee1565b6101406040518083038186803b15801561281357600080fd5b505af4158015612827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284b9190614b42565b8654600254604051631bb98a3360e01b815292935060009273__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a33926128ad928992879260ff6301000000830481169362010000909304169161ffff909116908490600401614ee1565b6101406040518083038186803b1580156128c657600080fd5b505af41580156128da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fe9190614b42565b9050600060405180606001604052808481526020018381526020016000600281111561293a57634e487b7160e01b600052602160045260246000fd5b90529050806005600061294e8c6003615181565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff191691908490811115612ad057634e487b7160e01b600052602160045260246000fd5b0217905550508854600254604051631bb98a3360e01b81526000935073__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a3392612b37928d9260019260ff6201000083048116936301000000909304169161ffff909116908490600401614ee1565b6101406040518083038186803b158015612b5057600080fd5b505af4158015612b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b889190614b42565b604080516060810182528281526020810186905291925081016001905291508160056000612bb78d6003615181565b612bc2906001615107565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff191691908490811115612d4457634e487b7160e01b600052602160045260246000fd5b0217905550508954600254604051631bb98a3360e01b81526000935073__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a3392612dab928c92879260ff6301000000830481169362010000909304169161ffff90911690600190600401614ee1565b6101406040518083038186803b158015612dc457600080fd5b505af4158015612dd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfc9190614b42565b604080516060810182528781526020810183905291925081016002905292508260056000612e2b8e6003615181565b612e36906002615107565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff191691908490811115612fb857634e487b7160e01b600052602160045260246000fd5b02179055505050505050505050505050505b80612fd4816152f3565b9150506124e7565b5060025461ffff1660011415612ffa576002805462ff000019169055565b6002805461ffff1614156130da5760015b600260039054906101000a900460ff1660026130279190615181565b60ff168160ff16116130c45760ff81166000908152600660205260409081902090516366aef26360e01b815260048101919091526001602482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906366aef2639060440160006040518083038186803b15801561309957600080fd5b505af41580156130ad573d6000803e3d6000fd5b5050505080806130bc906152f3565b91505061300b565b506130cd613cca565b6002805462ff0000191690555b565b6000828152602081905260409020600101546130f881336135a2565b6115d28383613f47565b818060ff166001148061311857508060ff166002145b1561316f57600a5460ff1661316f5760405162461bcd60e51b815260206004820152601a60248201527f63616e6e6f74206465706f73697420657468206f72207573646300000000000060448201526064016111ec565b8060ff166003148061318457508060ff166004145b156131e057600a54610100900460ff166131e05760405162461bcd60e51b815260206004820152601b60248201527f63616e6e6f74206465706f7369742077627463206f722075736463000000000060448201526064016111ec565b60025461ffff1661321e5760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b60448201526064016111ec565b600082116132585760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b60448201526064016111ec565b61326183613606565b60006004816002613273600188615272565b61327d9190615140565b60ff908116825260208201929092526040016000908120805490935090918681169116146132b85760018201546001600160a01b03166132cb565b8154600160201b90046001600160a01b03165b90506001600160a01b0381166132e057600080fd5b60ff8516600090815260066020526040808220600254915163c502f99160e01b815273__$e36f5330ef2566ea8a183e1e27b10de643$__9363c502f9919361333b939233928b92909161ffff90911690600190600401614eaa565b60006040518083038186803b15801561335357600080fd5b505af4158015613367573d6000803e3d6000fd5b505060025460405187815261ffff909116925033915060ff8816906000805160206153708339815191529060200160405180910390a46133b26001600160a01b0382163330876141a3565b5050505050565b606060006133c8836002615162565b6133d39060026150ef565b67ffffffffffffffff8111156133f957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613423576020820181803683370190505b509050600360fc1b8160008151811061344c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061348957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006134ad846002615162565b6134b89060016150ef565b90505b600181111561354c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106134fa57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061351e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93613545816152c1565b90506134bb565b50831561359b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016111ec565b9392505050565b6135ac82826123ff565b611de0576135c4816001600160a01b031660146133b9565b6135cf8360206133b9565b6040516020016135e0929190614e02565b60408051601f198184030181529082905262461bcd60e51b82526111ec91600401614e77565b60ff8116158015906136395750600260039054906101000a900460ff16600261362f9190615181565b60ff168160ff1611155b61248557600080fd5b61364c82826123ff565b611de0576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556136823390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061359b82846150ef565b60006001600160801b0382111561373b5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b60648201526084016111ec565b5090565b8454600090613761906001600160801b0380821691600160801b9004166141fd565b60018801549091506001600160801b0316158015906137805750600082115b156137df5760018601546137bc90611875906137a8908490600160901b900461ffff16614209565b60018a01546001600160801b03169061422b565b6001880180546001600160801b0319166001600160801b03929092169190911790555b600387015460005b81811015613a6857600089600301828154811061381457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048d0190915260409091206001810154919250906001600160801b0316613857575050613a56565b60018101548a54600091613885918a916001600160801b03600160801b918290048116929190910416614246565b905080156138cc5760038201546138a990611875906001600160801b0316836136c6565b6003830180546001600160801b0319166001600160801b03929092169190911790555b60018201546000906138f1906001600160801b0380821691600160801b9004166141fd565b9050600061390089838a614246565b90508015613a415760018d01546000908190613928908590600160901b900461ffff16614209565b60028701549091506001600160801b031681106139605760028601546139599084906001600160801b031683614246565b9150613964565b8291505b73__$e36f5330ef2566ea8a183e1e27b10de643$__63c502f9918f8986866001600260009054906101000a900461ffff1661399f9190615238565b60006040518763ffffffff1660e01b81526004016139c296959493929190614eaa565b60006040518083038186803b1580156139da57600080fd5b505af41580156139ee573d6000803e3d6000fd5b5050600254613a0592506001915061ffff16615238565b61ffff16876001600160a01b03168e60ff1660008051602061537083398151915286604051613a3691815260200190565b60405180910390a450505b50505060010180546001600160801b03169055505b80613a60816152d8565b9150506137e7565b505050505050505050565b8254600090613a95906001600160801b0380821691600160801b9004166141fd565b600387015490915060005b81811015613cc0576000886003018281548110613acd57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048c0190915260409091206001810154919250906001600160801b0316613b10575050613cae565b60018101548854600091613b3e918a916001600160801b03600160801b918290048116929190910416614246565b90508015613b89576002820154613b699061187590600160801b90046001600160801b0316836136c6565b6002830180546001600160801b03928316600160801b0292169190911790555b6001820154600090613bba908990613bb4906001600160801b0380821691600160801b9004166141fd565b89614246565b90508015613c9a5760025473__$e36f5330ef2566ea8a183e1e27b10de643$__9063c502f991908e9087908590600090613bfa9060019061ffff16615238565b60006040518763ffffffff1660e01b8152600401613c1d96959493929190614eaa565b60006040518083038186803b158015613c3557600080fd5b505af4158015613c49573d6000803e3d6000fd5b5050600254613c6092506001915061ffff16615238565b61ffff16846001600160a01b03168c60ff1660008051602061537083398151915284604051613c9191815260200190565b60405180910390a45b505060010180546001600160801b03169055505b80613cb8816152d8565b915050613aa0565b5050505050505050565b60005b60075460ff90811690821610156124855760ff81166000908152600860209081526040808320546001600160a01b031680845260099092528220600280549293919261ffff1614613d505781546001600160801b0380821691600160801b900416613d378561409f565b613d4191906151aa565b613d4b919061507b565b613d53565b60005b6001830154613d659190600f0b61507b565b6002830180546001600160801b0316905560405163b2838a7360e01b81526001600160a01b0385166004820152306024820152909150613e0e9073__$e36f5330ef2566ea8a183e1e27b10de643$__9063b2838a739060440160206040518083038186803b158015613dd657600080fd5b505af4158015613dea573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118759190614c23565b6001830180546001600160801b03928316600160801b029216919091179055613e396118758461428e565b600283810180546001600160801b03199081166001600160801b0394851617909155604080516080810182528654600160801b808204871683529086166020808401918252600f89810b8587019081526001600160a01b038d811660608801818152600091825260039095529790972086519451948b16948b16860294909417845551600184018054909816910b89161790955593519390940180546001600160a01b031916939092169290921790558454909281811692613efd9204168461507b565b613f0791906151aa565b600184018054600f9290920b6001600160801b03166001600160801b03199092169190911790555050600090555080613f3f816152f3565b915050613ccd565b613f5182826123ff565b15611de0576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60026001541415613fff5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016111ec565b60026001558061401b5761401282612102565b61401b57600080fd5b604051631a4ca37b60e21b81526001600160a01b038086166004830152602482018590528316604482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906369328dec9060640160006040518083038186803b15801561407d57600080fd5b505af4158015614091573d6000803e3d6000fd5b505060018055505050505050565b6001600160a01b03811660009081526009602052604081206140de6140c38461428e565b6001830154600160801b90046001600160801b0316906136c6565b600282015460405163b2838a7360e01b81526001600160a01b0386166004820152306024820152614199916001600160801b038082169261419392600160801b90049091169073__$e36f5330ef2566ea8a183e1e27b10de643$__9063b2838a739060440160206040518083038186803b15801561415b57600080fd5b505af415801561416f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141939190614c23565b906136c6565b61359b91906151f9565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526115a6908590614417565b600061359b828461525b565b600061359b61271061422561421e85836150ef565b86906144e9565b906144f5565b60008183101561423c57600061359b565b61359b828461525b565b6000821580614253575081155b8061425c575083155b156142695750600061359b565b818310156142845761427f8261422586866144e9565b614286565b835b949350505050565b600080805b60025460ff6301000000909104811690821610156144105760ff8116600090815260046020526040902080546001600160a01b03868116600160201b9092041614806142ee575060018101546001600160a01b038681169116145b156143fd57805460ff8116600090815260066020526040902090614373906001600160a01b03888116600160201b909204161461433c578154600160801b90046001600160801b031661436c565b81546002805461ffff166000908152908401602052604090205461436c916001600160801b0391821691166136c6565b85906136c6565b8254610100900460ff1660009081526006602052604090206001840154919550906143f8906001600160a01b038981169116146143c1578154600160801b90046001600160801b03166143f1565b81546002805461ffff16600090815290840160205260409020546143f1916001600160801b0391821691166136c6565b86906136c6565b945050505b5080614408816152f3565b915050614293565b5092915050565b600061446c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166145019092919063ffffffff16565b8051909150156115d2578080602001905181019061448a9190614a0d565b6115d25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016111ec565b600061359b8284615162565b600061359b828461512c565b6060614286848460008585843b61455a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016111ec565b600080866001600160a01b031685876040516145769190614de6565b60006040518083038185875af1925050503d80600081146145b3576040519150601f19603f3d011682016040523d82523d6000602084013e6145b8565b606091505b50915091506145c88282866145d3565b979650505050505050565b606083156145e257508161359b565b8251156145f25782518084602001fd5b8160405162461bcd60e51b81526004016111ec9190614e77565b80356001600160a01b038116811461462357600080fd5b919050565b8051801515811461462357600080fd5b600060c08284031215614649578081fd5b614651614fb5565b905061465c826146b9565b815261466a602083016146b9565b602082015261467b604083016146b9565b604082015261468c606083016146b9565b606082015261469d608083016146b9565b60808201526146ae60a083016146b9565b60a082015292915050565b80516001600160801b038116811461462357600080fd5b803560ff8116811461462357600080fd5b6000602082840312156146f2578081fd5b61359b8261460c565b6000806040838503121561470d578081fd5b6147168361460c565b91506147246020840161460c565b90509250929050565b6000806040838503121561473f578182fd5b6147488361460c565b915060208084013567ffffffffffffffff811115614764578283fd5b8401601f81018613614774578283fd5b803561478761478282615057565b615026565b80828252848201915084840189868560051b87010111156147a6578687fd5b8694505b838510156147cf576147bb8161460c565b8352600194909401939185019185016147aa565b5080955050505050509250929050565b600060208083850312156147f1578182fd5b823567ffffffffffffffff811115614807578283fd5b8301601f81018513614817578283fd5b803561482561478282615057565b80828252848201915084840188868560051b8701011115614844578687fd5b8694505b838510156148725780356003811061485e578788fd5b835260019490940193918501918501614848565b50979650505050505050565b60006020808385031215614890578182fd5b823567ffffffffffffffff8111156148a6578283fd5b8301601f810185136148b6578283fd5b80356148c461478282615057565b8181528381019083850160c0808502860187018a10156148e2578788fd5b8795505b848610156149785780828b0312156148fc578788fd5b614904614fb5565b61490d836146d0565b815261491a8884016146d0565b88820152604061492b8185016146d0565b90820152606061493c8482016146d0565b90820152608061494d84820161460c565b9082015260a061495e84820161460c565b9082015284526001959095019492860192908101906148e6565b509098975050505050505050565b60006020808385031215614998578182fd5b823567ffffffffffffffff8111156149ae578283fd5b8301601f810185136149be578283fd5b80356149cc61478282615057565b80828252848201915084840188868560051b87010111156149eb578687fd5b8694505b838510156148725780358352600194909401939185019185016149ef565b600060208284031215614a1e578081fd5b61359b82614628565b600060208284031215614a38578081fd5b5035919050565b60008060408385031215614a51578182fd5b823591506147246020840161460c565b600060208284031215614a72578081fd5b81356001600160e01b03198116811461359b578182fd5b60006101808284031215614a9b578081fd5b614aa3614fde565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101608084015181830152508091505092915050565b600060c08284031215614b38578081fd5b61359b8383614638565b60006101408284031215614b54578081fd5b614b5c615002565b614b65836146b9565b8152614b73602084016146b9565b6020820152614b84604084016146b9565b6040820152614b95606084016146b9565b6060820152614ba6608084016146b9565b6080820152614bb760a084016146b9565b60a0820152614bc860c084016146b9565b60c0820152614bd960e084016146b9565b60e0820152610100614bec8185016146b9565b90820152610120614bfe848201614628565b908201529392505050565b600060208284031215614c1a578081fd5b61359b826146b9565b600060208284031215614c34578081fd5b5051919050565b600060208284031215614c4c578081fd5b61359b826146d0565b60008060408385031215614c67578182fd5b614c70836146d0565b9150602083013561ffff81168114614c86578182fd5b809150509250929050565b60008060408385031215614ca3578182fd5b614cac836146d0565b946020939093013593505050565b600080600060608486031215614cce578081fd5b614cd7846146d0565b925060208401359150614cec6040850161460c565b90509250925092565b80516001600160801b031682526020810151614d1c60208401826001600160801b03169052565b506040810151614d3760408401826001600160801b03169052565b506060810151614d5260608401826001600160801b03169052565b506080810151614d6d60808401826001600160801b03169052565b5060a0810151614d8860a08401826001600160801b03169052565b5060c0810151614da360c08401826001600160801b03169052565b5060e0810151614dbe60e08401826001600160801b03169052565b50610100818101516001600160801b03169083015261012080820151801515828501526115a6565b60008251614df8818460208701615295565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e3a816017850160208801615295565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614e6b816028840160208801615295565b01602801949350505050565b6020815260008251806020840152614e96816040850160208701615295565b601f01601f19169190910160400192915050565b9586526001600160a01b039490941660208601526040850192909252606084015261ffff166080830152151560a082015260c00190565b958652931515602086015260ff92831660408601529116606084015261ffff166080830152151560a082015260c00190565b60c08101610c5882846001600160801b038082511683528060208301511660208401528060408301511660408401528060608301511660608401528060808301511660808401528060a08301511660a0840152505050565b6102a08101614f7a8286614cf5565b614f88610140830185614cf5565b60038310614fa657634e487b7160e01b600052602160045260246000fd5b82610280830152949350505050565b60405160c0810167ffffffffffffffff81118282101715614fd857614fd8615359565b60405290565b604051610180810167ffffffffffffffff81118282101715614fd857614fd8615359565b604051610140810167ffffffffffffffff81118282101715614fd857614fd8615359565b604051601f8201601f1916810167ffffffffffffffff8111828210171561504f5761504f615359565b604052919050565b600067ffffffffffffffff82111561507157615071615359565b5060051b60200190565b600081600f0b83600f0b8282128260016001607f1b03038213811516156150a4576150a461532d565b8260016001607f1b03190382128116156150c0576150c061532d565b50019392505050565b600061ffff8083168185168083038211156150e6576150e661532d565b01949350505050565b600082198211156151025761510261532d565b500190565b600060ff821660ff84168060ff038211156151245761512461532d565b019392505050565b60008261513b5761513b615343565b500490565b600060ff83168061515357615153615343565b8060ff84160491505092915050565b600081600019048311821515161561517c5761517c61532d565b500290565b600060ff821660ff84168160ff04811182151516156151a2576151a261532d565b029392505050565b600081600f0b83600f0b8281128160016001607f1b0319018312811516156151d4576151d461532d565b8160016001607f1b030183138116156151ef576151ef61532d565b5090039392505050565b60008083128015600160ff1b8501841216156152175761521761532d565b6001600160ff1b03840183138116156152325761523261532d565b50500390565b600061ffff838116908316818110156152535761525361532d565b039392505050565b60008282101561526d5761526d61532d565b500390565b600060ff821660ff84168082101561528c5761528c61532d565b90039392505050565b60005b838110156152b0578181015183820152602001615298565b838111156115a65750506000910152565b6000816152d0576152d061532d565b506000190190565b60006000198214156152ec576152ec61532d565b5060010190565b600060ff821660ff81141561530a5761530a61532d565b60010192915050565b6000600160ff1b8214156153295761532961532d565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfee963a73e630cb9812a026653bfb6b1e14ffa92f8c38b79f318f2637557ea9f126666bf5bfee463d10a7fc50448047f8a53b7762d7e28fbc5c643182785f3fd3fa2646970667358221220383d5d8a74d027f13d859e395b821f6c05831bd515edfe5a91a5e0606a83a94364736f6c63430008040033",
  "libraries": {
    "OptionLifecycle": "0x28D1E0e4460FB7e65DE364e613b3C29C0C0A0933"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 908,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)903_storage)"
      },
      {
        "astId": 1378,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3585,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "currentRound",
        "offset": 0,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 3587,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "underSettlement",
        "offset": 2,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3589,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "optionPairCount",
        "offset": 3,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 3594,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "settlementCashflowResult",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(SettlementCashflowResult)13058_storage)"
      },
      {
        "astId": 3599,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "optionPairs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint8,t_struct(OptionPairDefinition)13014_storage)"
      },
      {
        "astId": 3604,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "executionAccountingResult",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint8,t_struct(OptionPairExecutionAccountingResult)13049_storage)"
      },
      {
        "astId": 3609,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "optionData",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint8,t_struct(OptionData)12958_storage)"
      },
      {
        "astId": 3611,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "assetCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 3615,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "asset",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint8,t_address)"
      },
      {
        "astId": 3620,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "assetData",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(AssetData)12938_storage)"
      },
      {
        "astId": 7169,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "canDepositEthAndUsdc",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 7171,
        "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
        "label": "canDepositWbtcAndUsdc",
        "offset": 1,
        "slot": "10",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(OptionExecution)13039": {
        "encoding": "inplace",
        "label": "enum StructureData.OptionExecution",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(AssetData)12938_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.AssetData)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetData)12938_storage"
      },
      "t_mapping(t_address,t_struct(SettlementCashflowResult)13058_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.SettlementCashflowResult)",
        "numberOfBytes": "32",
        "value": "t_struct(SettlementCashflowResult)13058_storage"
      },
      "t_mapping(t_address,t_struct(UserState)12975_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)12975_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)903_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)903_storage"
      },
      "t_mapping(t_uint16,t_struct(OptionState)12900_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct StructureData.OptionState)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionState)12900_storage"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint8,t_struct(OptionData)12958_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StructureData.OptionData)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionData)12958_storage"
      },
      "t_mapping(t_uint8,t_struct(OptionPairDefinition)13014_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StructureData.OptionPairDefinition)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionPairDefinition)13014_storage"
      },
      "t_mapping(t_uint8,t_struct(OptionPairExecutionAccountingResult)13049_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StructureData.OptionPairExecutionAccountingResult)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionPairExecutionAccountingResult)13049_storage"
      },
      "t_struct(AssetData)12938_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.AssetData",
        "members": [
          {
            "astId": 12927,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "releasedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 12929,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "depositAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 12931,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "leftOverAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_int128"
          },
          {
            "astId": 12933,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "balanceAfterSettle",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 12935,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "withdrawableAfterSettle",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 12937,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "traderWithdrawn",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(OptionData)12958_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionData",
        "members": [
          {
            "astId": 12940,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "totalReleasedDepositAssetAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 12942,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "totalReleasedCounterPartyAssetAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 12944,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "assetToTerminateForNextRound",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 12949,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "optionStates",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint16,t_struct(OptionState)12900_storage)"
          },
          {
            "astId": 12952,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "usersInvolved",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12957,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "userStates",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(UserState)12975_storage)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(OptionPairDefinition)13014_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionPairDefinition",
        "members": [
          {
            "astId": 13003,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "callOptionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 13005,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "putOptionId",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 13007,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "depositAssetAmountDecimals",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 13009,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "counterPartyAssetAmountDecimals",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 13011,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "depositAsset",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13013,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "counterPartyAsset",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OptionPairExecutionAccountingResult)13049_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionPairExecutionAccountingResult",
        "members": [
          {
            "astId": 13042,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "callOptionResult",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(SettlementAccountingResult)13035_storage"
          },
          {
            "astId": 13045,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "putOptionResult",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(SettlementAccountingResult)13035_storage"
          },
          {
            "astId": 13048,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "execute",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(OptionExecution)13039"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(OptionState)12900_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionState",
        "members": [
          {
            "astId": 12887,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 12889,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "totalTerminate",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 12891,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "strikePrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 12893,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "round",
            "offset": 16,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 12895,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "premiumRate",
            "offset": 18,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 12897,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "executed",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 12899,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "callOrPut",
            "offset": 21,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)903_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 900,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 902,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SettlementAccountingResult)13035_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.SettlementAccountingResult",
        "members": [
          {
            "astId": 13016,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "depositAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 13018,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "autoRollAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 13020,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "autoRollPremium",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 13022,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "releasedAmount",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 13024,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "releasedPremium",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 13026,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "autoRollCounterPartyAmount",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 13028,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "autoRollCounterPartyPremium",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 13030,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "releasedCounterPartyAmount",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 13032,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "releasedCounterPartyPremium",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 13034,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "executed",
            "offset": 16,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(SettlementCashflowResult)13058_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.SettlementCashflowResult",
        "members": [
          {
            "astId": 13051,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "newDepositAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 13053,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "newReleasedAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 13055,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "leftOverAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_int128"
          },
          {
            "astId": 13057,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "contractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserState)12975_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.UserState",
        "members": [
          {
            "astId": 12960,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "pendingAsset",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 12962,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "tempLocked",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 12964,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "ongoingAsset",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 12966,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "assetToTerminate",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 12968,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "assetToTerminateForNextRound",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 12970,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "releasedDepositAssetAmount",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 12972,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "releasedCounterPartyAssetAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 12974,
            "contract": "contracts/PKKTHodlBoosterOption.sol:PKKTHodlBoosterOption",
            "label": "hasState",
            "offset": 16,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}