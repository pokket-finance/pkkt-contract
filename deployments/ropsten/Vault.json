{
  "address": "0xC4064A7394AB5fbe6D66c162ec9F43F13f1fdFfa",
  "abi": [],
  "transactionHash": "0x098adf3c86686521932fb34906379d9ef325872ce823e33ab11b448990a6384e",
  "receipt": {
    "to": null,
    "from": "0x7FAa46FB04BB00de3F6D5E90d78b4a37f8E48cd4",
    "contractAddress": "0xC4064A7394AB5fbe6D66c162ec9F43F13f1fdFfa",
    "transactionIndex": 26,
    "gasUsed": "200596",
    "logsBloom": "0x
    "blockHash": "0x8b9dcb68112e4302524ef14121a8bd473f1c69e25c1ba2a00740e46acbc6a39e",
    "transactionHash": "0x098adf3c86686521932fb34906379d9ef325872ce823e33ab11b448990a6384e",
    "logs": [],
    "blockNumber": 11573294,
    "cumulativeGasUsed": "5190546",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8474e35b853e611c5d70139c0961d073",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Utils { \\n     \\n      function StringConcat(bytes memory _base, bytes memory _value) internal pure returns (string memory) {\\n        string memory _tmpValue = new string(_base.length + _value.length);\\n        bytes memory _newValue = bytes(_tmpValue);\\n\\n        uint i;\\n        uint j;\\n\\n        for(i=0; i<_base.length; i++) {\\n            _newValue[j++] = _base[i];\\n        }\\n\\n        for(i=0; i<_value.length; i++) {\\n            _newValue[j++] = _value[i++];\\n        }\\n\\n        return string(_newValue);\\n    }\\n\\n    function Uint8Sub(uint8 a, uint8 b) internal pure returns (uint8) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n \\n\\n}\",\"keccak256\":\"0xbf6fa1647a1adccfe3d98608754aa1c15f5910299b6d48798f6931874d451ee9\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n \\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; \\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport './Utils.sol';\\n\\nlibrary Vault { \\n    \\n    using SafeMath for uint256;\\n\\n    struct UserInfo {\\n        uint256 pendingAmount;  \\n        uint256 ongoingAmount;   \\n        uint256 requestingAmount;\\n        uint256 maturedAmount; \\n        uint256 pendingPKKTReward;  \\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 pendingReward;// Reward but not harvest\\n        //\\n        //   pending reward = (user.amount * pool.accPKKTPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accPKKTPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n        bool hasDeposit;\\n    } \\n \\n    struct VaultInfo {   \\n        uint256 lastRewardBlock; // Last block number that PKKTs distribution occurs.\\n        uint256 accPKKTPerShare; // Accumulated PKKTs per share, times 1e12. See below.\\n        uint256 totalPending;\\n        uint256 totalOngoing;\\n        uint256 totalRequesting;\\n        uint256 totalMatured;\\n      \\n        // the underlying token: usdt/usdc/dai/etc.\\n        IERC20 underlying;\\n        uint8 decimals;\\n    }\\n    \\n    function getShare(VaultInfo storage _vault, uint8 _maxDecimals) external view returns(uint256) {\\n        uint8 extraDecimals = Utils.Uint8Sub(_maxDecimals, _vault.decimals);\\n        if (extraDecimals > 0) {\\n            return _vault.totalOngoing.mul(10 ** uint256(extraDecimals));\\n        }\\n        else {\\n            return _vault.totalOngoing;\\n        }\\n    }\\n\\n \\n    struct VaultSettings {\\n        \\n        IERC20 underlying; \\n        uint8 decimals;\\n    }\\n\\n     \\n}\\n\",\"keccak256\":\"0x5c7daf44bcd47d981042aa5854db4f92b502c0886d08f80bbf4a41e0cb55292c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6102aa61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063c47b23c61461003a575b600080fd5b61004d6100483660046100fd565b61005f565b60405190815260200160405180910390f35b60008061007d838560060160149054906101000a900460ff166100ba565b905060ff8116156100ac576100a461009960ff8316600a610174565b6003860154906100f1565b9150506100b4565b505060038201545b92915050565b60008260ff168260ff1611156100e057634e487b7160e01b600052600160045260246000fd5b6100ea828461023b565b9392505050565b60006100ea828461021c565b6000806040838503121561010f578182fd5b82359150602083013560ff81168114610126578182fd5b809150509250929050565b600181815b8085111561016c5781600019048211156101525761015261025e565b8085161561015f57918102915b93841c9390800290610136565b509250929050565b60006100ea838360008261018a575060016100b4565b81610197575060006100b4565b81600181146101ad57600281146101b7576101d3565b60019150506100b4565b60ff8411156101c8576101c861025e565b50506001821b6100b4565b5060208310610133831016604e8410600b84101617156101f6575081810a6100b4565b6102008383610131565b80600019048211156102145761021461025e565b029392505050565b60008160001904831182151516156102365761023661025e565b500290565b600060ff821660ff8416808210156102555761025561025e565b90039392505050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220e40c2f187c4a2c0ef452a2f074d85e17e9bd84b6472a0b1d8f80a50410a528a664736f6c63430008040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063c47b23c61461003a575b600080fd5b61004d6100483660046100fd565b61005f565b60405190815260200160405180910390f35b60008061007d838560060160149054906101000a900460ff166100ba565b905060ff8116156100ac576100a461009960ff8316600a610174565b6003860154906100f1565b9150506100b4565b505060038201545b92915050565b60008260ff168260ff1611156100e057634e487b7160e01b600052600160045260246000fd5b6100ea828461023b565b9392505050565b60006100ea828461021c565b6000806040838503121561010f578182fd5b82359150602083013560ff81168114610126578182fd5b809150509250929050565b600181815b8085111561016c5781600019048211156101525761015261025e565b8085161561015f57918102915b93841c9390800290610136565b509250929050565b60006100ea838360008261018a575060016100b4565b81610197575060006100b4565b81600181146101ad57600281146101b7576101d3565b60019150506100b4565b60ff8411156101c8576101c861025e565b50506001821b6100b4565b5060208310610133831016604e8410600b84101617156101f6575081810a6100b4565b6102008383610131565b80600019048211156102145761021461025e565b029392505050565b60008160001904831182151516156102365761023661025e565b500290565b600060ff821660ff8416808210156102555761025561025e565b90039392505050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220e40c2f187c4a2c0ef452a2f074d85e17e9bd84b6472a0b1d8f80a50410a528a664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}