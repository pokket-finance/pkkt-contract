{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IClaimable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.4;\r\n\r\ninterface IClaimable {\r\n    function harvestAllPools() external;\r\n}\r\n"
    },
    "contracts/PKKTRewardAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport \"./interfaces/IClaimable.sol\"; \r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract PKKTRewardAggregator is Ownable{\r\n    \r\n    address[] managers;\r\n    constructor(address[] memory _manangers) {\r\n       managers = _manangers;\r\n    }\r\n    \r\n    \r\n    function addManager(address _mananger) external onlyOwner {\r\n        managers.push(_mananger);\r\n    }\r\n    function harvest() external {\r\n        uint256 length = managers.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            IClaimable(managers[i]).harvestAllPools();\r\n        }\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/OptionVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n//import \"hardhat/console.sol\";\r\n\r\nimport {StructureData} from \"./libraries/StructureData.sol\";\r\nimport {Utils} from \"./libraries/Utils.sol\";\r\nimport {OptionLifecycle} from \"./libraries/OptionLifecycle.sol\";\r\nimport \"./interfaces/ISettlementAggregator.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\r\n\r\nabstract contract OptionVault is\r\n    AccessControl,\r\n    ReentrancyGuard,\r\n    ISettlementAggregator\r\n{\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using Utils for uint256;\r\n    using SafeCast for uint256;\r\n    using SafeCast for int256;\r\n\r\n    uint16 public override currentRound;\r\n    bool public underSettlement;\r\n    uint8 public optionPairCount;\r\n\r\n    mapping(address => StructureData.SettlementCashflowResult)\r\n        public settlementCashflowResult;\r\n\r\n    mapping(uint8 => StructureData.OptionPairDefinition) public optionPairs;\r\n\r\n    mapping(uint8 => StructureData.OptionPairExecutionAccountingResult)\r\n        public executionAccountingResult;\r\n\r\n    mapping(uint8 => StructureData.OptionData) internal optionData;\r\n    uint8 private assetCount;\r\n    mapping(uint8 => address) private asset;\r\n    mapping(address => StructureData.AssetData) private assetData;\r\n\r\n    constructor(address _settler) {\r\n        require(_settler != address(0));\r\n\r\n        // Contract deployer will be able to grant and revoke trading role\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        // Address capable of initiating and finizalizing settlement\r\n        _setupRole(StructureData.SETTLER_ROLE, _settler);\r\n    }\r\n\r\n    function clientWithdraw(\r\n        address _target,\r\n        uint256 _amount,\r\n        address _contractAddress,\r\n        bool _redeem\r\n    ) internal nonReentrant {\r\n        if (!_redeem) {\r\n            require(balanceEnough(_contractAddress));\r\n        }\r\n        OptionLifecycle.withdraw(_target, _amount, _contractAddress);\r\n    }\r\n\r\n    function addOptionPairs(\r\n        StructureData.OptionPairDefinition[] memory _optionPairDefinitions\r\n    ) public override {\r\n        _checkRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        uint256 length = _optionPairDefinitions.length;\r\n        uint8 optionPairCount_ = optionPairCount;\r\n        uint8 assetCount_ = assetCount;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            StructureData.OptionPairDefinition\r\n                memory pair = _optionPairDefinitions[i];\r\n            pair.callOptionId = optionPairCount_ * 2 + 1;\r\n            pair.putOptionId = pair.callOptionId + 1;\r\n            optionPairs[optionPairCount_++] = pair;\r\n            if (assetCount_ == 0) {\r\n                asset[assetCount_++] = pair.depositAsset;\r\n                asset[assetCount_++] = pair.counterPartyAsset;\r\n            } else {\r\n                bool callAdded = false;\r\n                bool putAdded = false;\r\n                for (uint8 j = 0; j < assetCount_; j++) {\r\n                    if (asset[j] == pair.depositAsset) {\r\n                        callAdded = true;\r\n                    }\r\n                    if (asset[j] == pair.counterPartyAsset) {\r\n                        putAdded = true;\r\n                    }\r\n                }\r\n                if (!callAdded) {\r\n                    asset[assetCount_++] = pair.depositAsset;\r\n                }\r\n                if (!putAdded) {\r\n                    asset[assetCount_++] = pair.counterPartyAsset;\r\n                }\r\n            }\r\n        }\r\n        optionPairCount = optionPairCount_;\r\n        assetCount = assetCount_;\r\n    }\r\n\r\n    function initiateSettlement() external override {\r\n        _checkRole(StructureData.SETTLER_ROLE, msg.sender);\r\n        require(!underSettlement);\r\n        currentRound = currentRound + 1;\r\n        underSettlement = true;\r\n        for (uint8 i = 0; i < optionPairCount; i++) {\r\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\r\n            StructureData.OptionData storage callOption = optionData[\r\n                pair.callOptionId\r\n            ];\r\n            uint128 pending1 = OptionLifecycle.rollToNextByOption(\r\n                callOption,\r\n                currentRound,\r\n                true\r\n            );\r\n            StructureData.OptionData storage putOption = optionData[\r\n                pair.putOptionId\r\n            ];\r\n            uint128 pending2 = OptionLifecycle.rollToNextByOption(\r\n                putOption,\r\n                currentRound,\r\n                false\r\n            );\r\n            if (pending1 > 0) {\r\n                assetData[pair.depositAsset].depositAmount = uint256(assetData[\r\n                    pair.depositAsset\r\n                ].depositAmount).add(pending1).toUint128();\r\n            }\r\n            if (pending2 > 0) {\r\n                assetData[pair.counterPartyAsset].depositAmount = uint256(assetData[\r\n                    pair.counterPartyAsset\r\n                ].depositAmount).add(pending2).toUint128();\r\n            }\r\n            if (currentRound <= 2) {\r\n                continue;\r\n            }\r\n\r\n            StructureData.SettlementAccountingResult\r\n                memory noneExecuteCallOption = OptionLifecycle\r\n                    .dryRunSettlementByOption(\r\n                        callOption, \r\n                        true,\r\n                        pair.depositAssetAmountDecimals,\r\n                        pair.counterPartyAssetAmountDecimals,\r\n                        currentRound,\r\n                        false\r\n                    );\r\n            StructureData.SettlementAccountingResult\r\n                memory noneExecutePutOption = OptionLifecycle\r\n                    .dryRunSettlementByOption(\r\n                        putOption, \r\n                        false,\r\n                        pair.counterPartyAssetAmountDecimals,\r\n                        pair.depositAssetAmountDecimals,\r\n                        currentRound,\r\n                        false\r\n                    );\r\n\r\n            StructureData.OptionPairExecutionAccountingResult\r\n                memory pairResult = StructureData\r\n                    .OptionPairExecutionAccountingResult({\r\n                        execute: StructureData.OptionExecution.NoExecution,\r\n                        callOptionResult: noneExecuteCallOption,\r\n                        putOptionResult: noneExecutePutOption\r\n                    });\r\n            executionAccountingResult[i * 3] = pairResult;\r\n            StructureData.SettlementAccountingResult\r\n                memory executeCallOption = OptionLifecycle\r\n                    .dryRunSettlementByOption(\r\n                        callOption, \r\n                        true,\r\n                        pair.depositAssetAmountDecimals,\r\n                        pair.counterPartyAssetAmountDecimals,\r\n                        currentRound,\r\n                        true\r\n                    );\r\n            pairResult = StructureData.OptionPairExecutionAccountingResult({\r\n                execute: StructureData.OptionExecution.ExecuteCall,\r\n                callOptionResult: executeCallOption,\r\n                putOptionResult: noneExecutePutOption\r\n            });\r\n            executionAccountingResult[i * 3 + 1] = pairResult;\r\n\r\n            StructureData.SettlementAccountingResult\r\n                memory executePutOption = OptionLifecycle\r\n                    .dryRunSettlementByOption(\r\n                        putOption, \r\n                        false,\r\n                        pair.counterPartyAssetAmountDecimals,\r\n                        pair.depositAssetAmountDecimals,\r\n                        currentRound,\r\n                        true\r\n                    );\r\n            pairResult = StructureData.OptionPairExecutionAccountingResult({\r\n                execute: StructureData.OptionExecution.ExecutePut,\r\n                callOptionResult: noneExecuteCallOption,\r\n                putOptionResult: executePutOption\r\n            });\r\n            executionAccountingResult[i * 3 + 2] = pairResult;\r\n        }\r\n\r\n        if (currentRound == 1) {\r\n            underSettlement = false;\r\n            return;\r\n        }\r\n        if (currentRound == 2) {\r\n            for(uint8 i = 1; i <= optionPairCount * 2; i++) { \r\n                OptionLifecycle.commitByOption(optionData[i], 1); \r\n            }            \r\n            updateAsset();\r\n            underSettlement = false;\r\n        }\r\n    }\r\n\r\n    function settle(StructureData.OptionExecution[] memory _execution)\r\n        external\r\n        override\r\n    {\r\n        _checkRole(StructureData.SETTLER_ROLE, msg.sender);\r\n        require(underSettlement);\r\n        uint256 count = _execution.length;\r\n        require(count == optionPairCount);\r\n        uint16 previousRound = currentRound - 1;\r\n        for (uint8 i = 0; i < count; i++) {\r\n            StructureData.OptionExecution execution = _execution[i];\r\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\r\n\r\n            StructureData.OptionData storage callOption = optionData[\r\n                pair.callOptionId\r\n            ];\r\n            StructureData.OptionData storage putOption = optionData[\r\n                pair.putOptionId\r\n            ];\r\n            StructureData.MaturedState memory maturedState;\r\n            StructureData.OptionState\r\n                storage previousCallOptionState = callOption.optionStates[\r\n                    previousRound - 1\r\n                ];\r\n            if (previousCallOptionState.totalAmount > 0) { \r\n                maturedState = OptionLifecycle.closePreviousByOption(\r\n                    callOption,\r\n                    previousCallOptionState,\r\n                    true,\r\n                    pair.depositAssetAmountDecimals,\r\n                    pair.counterPartyAssetAmountDecimals,\r\n                    execution == StructureData.OptionExecution.ExecuteCall\r\n                );\r\n                if (maturedState.releasedDepositAssetAmount > 0) {\r\n                    assetData[pair.depositAsset].releasedAmount = uint256(assetData[\r\n                        pair.depositAsset\r\n                    ].releasedAmount).add(\r\n                            maturedState.releasedDepositAssetAmountWithPremium\r\n                        ).toUint128();\r\n                } else if (maturedState.releasedCounterPartyAssetAmount > 0) {\r\n                    assetData[pair.counterPartyAsset]\r\n                        .releasedAmount = uint256(assetData[pair.counterPartyAsset]\r\n                        .releasedAmount)\r\n                        .add(\r\n                            maturedState\r\n                                .releasedCounterPartyAssetAmountWithPremium\r\n                        ).toUint128();\r\n                }\r\n                if (execution == StructureData.OptionExecution.ExecuteCall) {\r\n                    autoRollToCounterPartyByOption(\r\n                        callOption,\r\n                        previousCallOptionState,\r\n                        putOption,\r\n                        pair.putOptionId,\r\n                        maturedState.releasedCounterPartyAssetAmountWithPremium,\r\n                        maturedState.autoRollCounterPartyAssetAmountWithPremium\r\n                    );\r\n                } else {\r\n                    autoRollByOption(\r\n                        callOption,\r\n                        pair.callOptionId,\r\n                        previousCallOptionState,\r\n                        maturedState.releasedDepositAssetAmountWithPremium,\r\n                        maturedState.autoRollDepositAssetAmountWithPremium\r\n                    );\r\n                }\r\n            }\r\n\r\n            StructureData.OptionState storage previousPutOptionState = putOption\r\n                .optionStates[previousRound - 1];\r\n\r\n            if (previousPutOptionState.totalAmount > 0) { \r\n                maturedState = OptionLifecycle.closePreviousByOption(\r\n                    putOption,\r\n                    previousPutOptionState,\r\n                    false,\r\n                    pair.counterPartyAssetAmountDecimals,\r\n                    pair.depositAssetAmountDecimals,\r\n                    execution == StructureData.OptionExecution.ExecutePut\r\n                );\r\n                if (maturedState.releasedDepositAssetAmount > 0) {\r\n                    assetData[pair.counterPartyAsset]\r\n                        .releasedAmount = uint256(assetData[pair.counterPartyAsset]\r\n                        .releasedAmount)\r\n                        .add(\r\n                            maturedState.releasedDepositAssetAmountWithPremium\r\n                        ).toUint128();\r\n                } else if (maturedState.releasedCounterPartyAssetAmount > 0) {\r\n                    assetData[pair.depositAsset].releasedAmount = uint256(assetData[\r\n                        pair.depositAsset\r\n                    ].releasedAmount).add(\r\n                            maturedState\r\n                                .releasedCounterPartyAssetAmountWithPremium\r\n                        ).toUint128();\r\n                }\r\n                if (execution == StructureData.OptionExecution.ExecutePut) {\r\n                    autoRollToCounterPartyByOption(\r\n                        putOption,\r\n                        previousPutOptionState,\r\n                        callOption,\r\n                        pair.callOptionId,\r\n                        maturedState.releasedCounterPartyAssetAmountWithPremium,\r\n                        maturedState.autoRollCounterPartyAssetAmountWithPremium\r\n                    );\r\n                } else {\r\n                    autoRollByOption(\r\n                        putOption,\r\n                        pair.putOptionId,\r\n                        previousPutOptionState,\r\n                        maturedState.releasedDepositAssetAmountWithPremium,\r\n                        maturedState.autoRollDepositAssetAmountWithPremium\r\n                    );\r\n                }\r\n            }\r\n            OptionLifecycle.commitByOption(callOption, previousRound);\r\n            OptionLifecycle.commitByOption(putOption, previousRound);\r\n        }\r\n\r\n        updateAsset();\r\n        underSettlement = false;\r\n    }\r\n\r\n    function updateAsset() private {\r\n        for (uint8 i = 0; i < assetCount; i++) {\r\n            address assetAddress = asset[i];\r\n            StructureData.AssetData storage assetSubData = assetData[\r\n                assetAddress\r\n            ];\r\n            //no snaphot previously, so, no balance change\r\n            //todo: room for gas improvement\r\n            int128 leftOver = assetSubData.leftOverAmount +\r\n                (\r\n                    currentRound == 2\r\n                        ? int128(0)\r\n                        : (int128(getBalanceChange(assetAddress)) -\r\n                            int128(assetSubData.depositAmount) +\r\n                            int128(assetSubData.releasedAmount))\r\n                );\r\n\r\n            assetSubData.traderWithdrawn = 0;\r\n            assetSubData.balanceAfterSettle = OptionLifecycle.getAvailableBalance(assetAddress, address(this)).toUint128();\r\n            assetSubData.withdrawableAfterSettle = collectWithdrawable(\r\n                assetAddress\r\n            ).toUint128();\r\n            StructureData.SettlementCashflowResult\r\n                memory instruction = StructureData.SettlementCashflowResult({\r\n                    newReleasedAmount: assetSubData.releasedAmount,\r\n                    newDepositAmount: assetSubData.depositAmount,\r\n                    leftOverAmount: leftOver,\r\n                    contractAddress: assetAddress\r\n                });\r\n            settlementCashflowResult[assetAddress] = instruction;\r\n            //todo: check overflow\r\n            assetSubData.leftOverAmount =\r\n                int128(leftOver +\r\n                int128(assetSubData.depositAmount) -\r\n                int128(assetSubData.releasedAmount));\r\n            assetSubData.depositAmount = 0;\r\n            assetSubData.releasedAmount = 0;\r\n        }\r\n    }\r\n\r\n    function setOptionParameters(\r\n        uint256[] memory _parameters\r\n    ) external override {\r\n        _checkRole(StructureData.SETTLER_ROLE, msg.sender);\r\n        uint256 count = _parameters.length; \r\n        require(!underSettlement);\r\n        require(currentRound > 1);\r\n        require(count == optionPairCount*2);\r\n        for (uint8 i = 0; i < count; i++) {\r\n            uint256 parameter = _parameters[i];\r\n            StructureData.OptionState storage optionState = optionData[i+1].optionStates[currentRound - 1];\r\n            OptionLifecycle.setOptionParameters(parameter, optionState); \r\n        }\r\n    }\r\n\r\n    //todo: whitelist / nonReentrancy check\r\n    function withdrawAsset(address _trader, address _asset) external override {\r\n        _checkRole(StructureData.SETTLER_ROLE, msg.sender);\r\n        StructureData.AssetData storage assetSubData = assetData[_asset];\r\n        require(assetSubData.leftOverAmount > 0); \r\n        uint128 balance = uint128(assetSubData.leftOverAmount);\r\n        OptionLifecycle.withdraw(_trader, uint256(balance), _asset);\r\n        assetSubData.traderWithdrawn = balance;\r\n        assetSubData.leftOverAmount = 0;\r\n    }\r\n\r\n    function batchWithdrawAssets(address _trader, address[] memory _assets) external override {\r\n        _checkRole(StructureData.SETTLER_ROLE, msg.sender);\r\n        uint256 count = _assets.length;\r\n        for(uint256 i = 0; i < count; i++) {\r\n            StructureData.AssetData storage assetSubData = assetData[_assets[i]];\r\n            require(assetSubData.leftOverAmount > 0); \r\n            uint128 balance = uint128(assetSubData.leftOverAmount);\r\n            OptionLifecycle.withdraw(_trader, uint256(balance), _assets[i]);\r\n            assetSubData.traderWithdrawn = balance;\r\n            assetSubData.leftOverAmount = 0;\r\n        }  \r\n    }\r\n    function balanceEnough(address _asset) public view override returns (bool) {\r\n        StructureData.AssetData storage assetSubData = assetData[_asset];\r\n        int128 balance = assetSubData.leftOverAmount;\r\n        if (balance >= 0) {\r\n            return true;\r\n        }\r\n        if (OptionLifecycle.getAvailableBalance(_asset, address(this)) == 0) {\r\n            return false;\r\n        }\r\n\r\n        return balance >= -getBalanceChange(_asset);\r\n    }\r\n\r\n    function getBalanceChange(address _asset) private view returns (int256) {\r\n        StructureData.AssetData storage assetSubData = assetData[_asset];\r\n        // int128 leastBalance = int128(assetSubData.balanceAfterSettle + collectWithdrawable(_asset) - assetSubData.withdrawableAfterSettle);\r\n        //return  int128(uint128(getAvailableBalance(_asset))) - leastBalance + int128(assetSubData.traderWithdrawn);\r\n        return\r\n            int256(\r\n                OptionLifecycle.getAvailableBalance(_asset, address(this))\r\n                .add(assetSubData.traderWithdrawn).add(assetSubData.withdrawableAfterSettle)\r\n            ) -\r\n            int256(\r\n                uint256(assetSubData.balanceAfterSettle).add(collectWithdrawable(_asset))\r\n            );\r\n    }\r\n\r\n    function collectWithdrawable(address _asset)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 total = 0;\r\n        for (uint8 i = 0; i < optionPairCount; i++) {\r\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\r\n            if (\r\n                pair.depositAsset == _asset || pair.counterPartyAsset == _asset\r\n            ) {\r\n                StructureData.OptionData storage callOption = optionData[\r\n                    pair.callOptionId\r\n                ];\r\n                total = total.add(\r\n                    pair.depositAsset == _asset\r\n                        ? uint256(callOption.optionStates[currentRound].totalAmount).add(\r\n                            callOption.totalReleasedDepositAssetAmount\r\n                        )\r\n                        : callOption.totalReleasedCounterPartyAssetAmount\r\n                );\r\n\r\n                StructureData.OptionData storage putOption = optionData[\r\n                    pair.putOptionId\r\n                ];\r\n                total = total.add(\r\n                    pair.counterPartyAsset == _asset\r\n                        ? uint256(putOption.optionStates[currentRound].totalAmount).add(\r\n                            putOption.totalReleasedDepositAssetAmount\r\n                        )\r\n                        : putOption.totalReleasedCounterPartyAssetAmount\r\n                );\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function autoRollToCounterPartyByOption(\r\n        StructureData.OptionData storage _option,\r\n        StructureData.OptionState storage _optionState,\r\n        StructureData.OptionData storage _counterPartyOption,\r\n        uint8 _counterPartyOptionId,\r\n        uint256 _totalReleased,\r\n        uint256 _totalAutoRoll\r\n    ) internal virtual;\r\n\r\n    function autoRollByOption(\r\n        StructureData.OptionData storage _option,\r\n        uint8 _optionId,\r\n        StructureData.OptionState storage _optionState,\r\n        uint256 _totalReleased,\r\n        uint256 _totalAutoRoll\r\n    ) internal virtual;\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/libraries/StructureData.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nlibrary StructureData {\r\n    bytes32 public constant OPTION_ROLE = keccak256(\"OPTION_ROLE\");\r\n    bytes32 public constant SETTLER_ROLE = keccak256(\"SETTLER_ROLE\");\r\n    uint8 public constant MATUREROUND = 1; //7 for daily settlement, 1 for daily settlement\r\n    uint8 public constant PRICE_PRECISION = 4;\r\n    struct OptionParameters { \r\n        uint128 strikePrice; // strike price if executed\r\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\r\n    }\r\n\r\n    struct OptionState {\r\n        uint128 totalAmount;\r\n        uint128 totalTerminate;\r\n        uint128 strikePrice;\r\n        uint16 round;\r\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\r\n        bool executed;\r\n        bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral;\r\n    }\r\n\r\n    struct MaturedState {\r\n        uint256 releasedDepositAssetAmount;\r\n        uint256 releasedDepositAssetPremiumAmount;\r\n        uint256 releasedDepositAssetAmountWithPremium;\r\n        uint256 releasedCounterPartyAssetAmount;\r\n        uint256 releasedCounterPartyAssetPremiumAmount;\r\n        uint256 releasedCounterPartyAssetAmountWithPremium;\r\n        uint256 autoRollDepositAssetAmount;\r\n        uint256 autoRollDepositAssetPremiumAmount;\r\n        uint256 autoRollDepositAssetAmountWithPremium;\r\n        uint256 autoRollCounterPartyAssetAmount;\r\n        uint256 autoRollCounterPartyAssetPremiumAmount;\r\n        uint256 autoRollCounterPartyAssetAmountWithPremium;\r\n    }\r\n\r\n    struct AssetData {\r\n        uint128 releasedAmount; //debit\r\n        uint128 depositAmount; //credit\r\n        int128 leftOverAmount; //history balance\r\n        /*\r\n         *  actual balance perspective\r\n         *  withdrawable = redeemable + released\r\n         *  balance = withdrawable + leftOver\r\n         */\r\n        uint128 balanceAfterSettle;\r\n        uint128 withdrawableAfterSettle;\r\n        uint128 traderWithdrawn;\r\n    }\r\n\r\n    struct OptionData {\r\n        uint128 totalReleasedDepositAssetAmount;\r\n        uint128 totalReleasedCounterPartyAssetAmount;\r\n        uint128 assetToTerminateForNextRound;\r\n        mapping(uint16 => StructureData.OptionState) optionStates;\r\n        address[] usersInvolved;\r\n        mapping(address => StructureData.UserState) userStates;\r\n    }\r\n\r\n    struct UserState {\r\n        uint128 pendingAsset; //for current round\r\n        uint128 tempLocked; //asset not sent to trader yet, but closed for deposit\r\n        uint128 ongoingAsset;\r\n        uint128 assetToTerminate;\r\n        uint128 assetToTerminateForNextRound;\r\n        uint128 releasedDepositAssetAmount;\r\n        uint128 releasedCounterPartyAssetAmount;\r\n        bool hasState;\r\n    }\r\n\r\n    struct OptionSnapshot {\r\n        uint128 totalPending;\r\n        //total tvl = totalLocked + totalTerminating\r\n        uint128 totalLocked;\r\n        //only set during settlement\r\n        uint128 totalTerminating;\r\n        //amount to terminate in next round,  totalToTerminate <= totalLocked\r\n        uint128 totalToTerminate;\r\n        uint128 totalReleasedDeposit;\r\n        uint128 totalReleasedCounterParty;\r\n    }\r\n\r\n    struct UserBalance {\r\n        uint128 pendingDepositAssetAmount;\r\n        //tvl = lockedDepositAssetAmount + terminatingDepositAssetAmount\r\n        uint128 lockedDepositAssetAmount;\r\n        //only set during settlement\r\n        uint128 terminatingDepositAssetAmount;\r\n        //amount to terminate in next round, toTerminateDepositAssetAmount <= lockedDepositAssetAmount\r\n        uint128 toTerminateDepositAssetAmount;\r\n        uint128 releasedDepositAssetAmount;\r\n        uint128 releasedCounterPartyAssetAmount;\r\n    }\r\n    struct OptionPairDefinition {\r\n        uint8 callOptionId;\r\n        uint8 putOptionId;\r\n        uint8 depositAssetAmountDecimals;\r\n        uint8 counterPartyAssetAmountDecimals;\r\n        address depositAsset;\r\n        address counterPartyAsset;\r\n    }\r\n    struct SettlementAccountingResult {\r\n        uint128 depositAmount;\r\n        uint128 autoRollAmount; //T-1 Carried (filled only when not executed)\r\n        uint128 autoRollPremium; //Premium (filled only when not executed)\r\n        //maturedAmount+maturedPremium = requested withdrawal for deposit asset(filled only when not executed and with withdraw request)\r\n        uint128 releasedAmount;\r\n        uint128 releasedPremium;\r\n        //autoRollCounterPartyAmount + autoRollCounterPartyPremium = Execution rolled-out for deposit asset (Execution roll-in for counter party option)\r\n        //filled only when executed\r\n        uint128 autoRollCounterPartyAmount;\r\n        uint128 autoRollCounterPartyPremium;\r\n        //maturedCounterPartyAmount+maturedCounterPartyPremium= requested withdrawal for couter party asset(filled only when executed and with withdraw request)\r\n        uint128 releasedCounterPartyAmount;\r\n        uint128 releasedCounterPartyPremium;  \r\n        bool executed;\r\n    }\r\n\r\n    enum OptionExecution {\r\n        NoExecution,\r\n        ExecuteCall,\r\n        ExecutePut\r\n    }\r\n\r\n    struct OptionPairExecutionAccountingResult {\r\n        SettlementAccountingResult callOptionResult;\r\n        SettlementAccountingResult putOptionResult;\r\n        OptionExecution execute;\r\n    }\r\n\r\n    struct SettlementCashflowResult {\r\n        uint128 newDepositAmount;\r\n        uint128 newReleasedAmount;\r\n        int128 leftOverAmount; //positive, if trader didn't withdraw last time; negative, if trader failed to send back last time;\r\n        address contractAddress; //0 for eth\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nlibrary Utils { \r\n     \r\n    uint256 public constant RATIOMULTIPLIER = 10000;\r\n \r\n     using SafeMath for uint256;\r\n      function StringConcat(bytes memory _base, bytes memory _value) internal pure returns (string memory) {\r\n        string memory _tmpValue = new string(_base.length + _value.length);\r\n        bytes memory _newValue = bytes(_tmpValue);\r\n\r\n        uint i;\r\n        uint j;\r\n\r\n        for(i=0; i<_base.length; i++) {\r\n            _newValue[j++] = _base[i];\r\n        }\r\n\r\n        for(i=0; i<_value.length; i++) {\r\n            _newValue[j++] = _value[i++];\r\n        }\r\n\r\n        return string(_newValue);\r\n    }\r\n\r\n    function Uint8Sub(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n \r\n    function getAmountToTerminate(uint256 _maturedAmount, uint256 _assetToTerminate, uint256 _assetAmount) \r\n    internal pure returns(uint256) {\r\n       if (_assetToTerminate == 0 || _assetAmount == 0 || _maturedAmount == 0) return 0;\r\n       return _assetToTerminate >= _assetAmount ?  _maturedAmount  : _maturedAmount.mul(_assetToTerminate).div(_assetAmount);\r\n   }\r\n\r\n   function withPremium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\r\n       return  _baseAmount.mul(RATIOMULTIPLIER + _premimumRate).div(RATIOMULTIPLIER);\r\n   }\r\n   \r\n   function premium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\r\n       return   _baseAmount.mul(_premimumRate).div(RATIOMULTIPLIER);\r\n   }\r\n   \r\n   function subOrZero(uint256 _base, uint256 _substractor) internal pure returns (uint256) {\r\n       return _base >= _substractor ? _base - _substractor : 0;\r\n   }\r\n  \r\n    /*function assertUint104(uint256 num) internal pure {\r\n        require(num <= type(uint104).max, \"Overflow uint104\");\r\n    }\r\n\r\n    function assertUint128(uint256 num) internal pure {\r\n        require(num <= type(uint128).max, \"Overflow uint128\");\r\n    }*/\r\n\r\n}"
    },
    "contracts/libraries/OptionLifecycle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"./Utils.sol\";\r\nimport \"./StructureData.sol\";\r\nimport \"hardhat/console.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\r\n\r\nlibrary OptionLifecycle {\r\n    using SafeERC20 for IERC20;\r\n    using Utils for uint128;\r\n    using Utils for uint256;\r\n    using SafeMath for uint256;\r\n    using SafeCast for uint256;\r\n    using StructureData for StructureData.UserState;\r\n\r\n    function deriveVirtualLocked(\r\n        StructureData.UserState memory userState,\r\n        uint16 premiumRate\r\n    ) internal pure returns (uint256) {\r\n        uint256 onGoing = uint256(userState.ongoingAsset);\r\n        if (onGoing == 0) {\r\n            return uint256(userState.tempLocked);\r\n        }\r\n        onGoing = (onGoing.sub(userState.assetToTerminate)).withPremium(\r\n            premiumRate\r\n        );\r\n        if (userState.tempLocked == 0) {\r\n            return onGoing;\r\n        }\r\n        return uint256(userState.tempLocked).add(onGoing);\r\n    }\r\n\r\n    function getAvailableBalance(address _asset, address _source)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_asset != address(0)) {\r\n            return IERC20(_asset).balanceOf(_source);\r\n        } else {\r\n            return _source.balance;\r\n        }\r\n    }\r\n\r\n    function withdraw(\r\n        address _target,\r\n        uint256 _amount,\r\n        address _contractAddress\r\n    ) external {\r\n        require(_amount > 0);\r\n        if (_contractAddress == address(0)) {\r\n            payable(_target).transfer(_amount);\r\n        } else {\r\n            IERC20(_contractAddress).safeTransfer(_target, _amount);\r\n        }\r\n    }\r\n\r\n    function calculateMaturity(\r\n        bool _execute,\r\n        StructureData.OptionState memory _optionState,\r\n        bool _callOrPut,\r\n        uint8 _depositAssetAmountDecimals,\r\n        uint8 _counterPartyAssetAmountDecimals\r\n    ) public pure returns (StructureData.MaturedState memory) {\r\n        StructureData.MaturedState memory state = StructureData.MaturedState({\r\n            releasedDepositAssetAmount: 0,\r\n            releasedDepositAssetPremiumAmount: 0,\r\n            releasedDepositAssetAmountWithPremium: 0,\r\n            autoRollDepositAssetAmount: 0,\r\n            autoRollDepositAssetPremiumAmount: 0,\r\n            autoRollDepositAssetAmountWithPremium: 0,\r\n            releasedCounterPartyAssetAmount: 0,\r\n            releasedCounterPartyAssetPremiumAmount: 0,\r\n            releasedCounterPartyAssetAmountWithPremium: 0,\r\n            autoRollCounterPartyAssetAmount: 0,\r\n            autoRollCounterPartyAssetPremiumAmount: 0,\r\n            autoRollCounterPartyAssetAmountWithPremium: 0\r\n        });\r\n        if (_execute) {\r\n            uint256 maturedCounterPartyAssetAmount = \r\n                _callOrPut\r\n                    ? uint256(_optionState.totalAmount)\r\n                        .mul(_optionState.strikePrice)\r\n                        .mul(10**_counterPartyAssetAmountDecimals)\r\n                        .div(\r\n                            10 **\r\n                                (StructureData.PRICE_PRECISION +\r\n                                    _depositAssetAmountDecimals)\r\n                        )\r\n                    : uint256(_optionState.totalAmount)\r\n                        .mul(\r\n                            10 **\r\n                                (StructureData.PRICE_PRECISION +\r\n                                    _counterPartyAssetAmountDecimals)\r\n                        )\r\n                        .div(_optionState.strikePrice)\r\n                        .div(10**_depositAssetAmountDecimals);\r\n\r\n            uint256 maturedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetAmount\r\n                    .premium(_optionState.premiumRate);\r\n            if (_optionState.totalTerminate > 0) {\r\n                state\r\n                    .releasedCounterPartyAssetAmount = maturedCounterPartyAssetAmount\r\n                    .getAmountToTerminate(\r\n                        _optionState.totalTerminate,\r\n                        _optionState.totalAmount\r\n                    );\r\n                state\r\n                    .releasedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetPremiumAmount\r\n                    .getAmountToTerminate(\r\n                        _optionState.totalTerminate,\r\n                        _optionState.totalAmount\r\n                    );\r\n                state.releasedCounterPartyAssetAmountWithPremium =\r\n                    state.releasedCounterPartyAssetAmount.add(\r\n                    state.releasedCounterPartyAssetPremiumAmount);\r\n            }\r\n            state.autoRollCounterPartyAssetAmount =\r\n                maturedCounterPartyAssetAmount.sub(\r\n                state.releasedCounterPartyAssetAmount);\r\n            state.autoRollCounterPartyAssetPremiumAmount =\r\n                maturedCounterPartyAssetPremiumAmount.sub(\r\n                state.releasedCounterPartyAssetPremiumAmount);\r\n            state.autoRollCounterPartyAssetAmountWithPremium =\r\n                state.autoRollCounterPartyAssetAmount.add(\r\n                state.autoRollCounterPartyAssetPremiumAmount);\r\n        } else {\r\n            uint256 maturedDepositAssetAmount = uint256(_optionState.totalAmount);\r\n            uint256 maturedDepositAssetPremiumAmount = maturedDepositAssetAmount\r\n                .premium(_optionState.premiumRate);\r\n            if (_optionState.totalTerminate > 0) {\r\n                state.releasedDepositAssetAmount = maturedDepositAssetAmount\r\n                    .getAmountToTerminate(\r\n                        _optionState.totalTerminate,\r\n                        _optionState.totalAmount\r\n                    );\r\n                state\r\n                    .releasedDepositAssetPremiumAmount = maturedDepositAssetPremiumAmount\r\n                    .getAmountToTerminate(\r\n                        _optionState.totalTerminate,\r\n                        _optionState.totalAmount\r\n                    );\r\n                state.releasedDepositAssetAmountWithPremium =\r\n                    state.releasedDepositAssetAmount.add(\r\n                    state.releasedDepositAssetPremiumAmount);\r\n            }\r\n            state.autoRollDepositAssetAmount =\r\n                maturedDepositAssetAmount.sub(\r\n                state.releasedDepositAssetAmount);\r\n            state.autoRollDepositAssetPremiumAmount =\r\n                maturedDepositAssetPremiumAmount.sub(\r\n                state.releasedDepositAssetPremiumAmount);\r\n            state.autoRollDepositAssetAmountWithPremium =\r\n                state.autoRollDepositAssetAmount.add(\r\n                state.autoRollDepositAssetPremiumAmount);\r\n        }\r\n        return state;\r\n    }\r\n\r\n    function commitByOption(\r\n        StructureData.OptionData storage _option,\r\n        uint16 _roundToCommit\r\n    ) external {\r\n        uint256 userCount = _option.usersInvolved.length;\r\n        for (uint256 i = 0; i < userCount; i++) {\r\n            StructureData.UserState storage userState = _option.userStates[\r\n                _option.usersInvolved[i]\r\n            ];\r\n            if (userState.assetToTerminateForNextRound != 0) {\r\n                userState.assetToTerminate = userState\r\n                    .assetToTerminateForNextRound;\r\n                userState.assetToTerminateForNextRound = 0;\r\n            } else if (userState.assetToTerminate != 0) {\r\n                userState.assetToTerminate = 0;\r\n            }\r\n            if (userState.tempLocked == 0) {\r\n                userState.ongoingAsset = 0;\r\n                continue;\r\n            }\r\n            userState.ongoingAsset = userState.tempLocked;\r\n            userState.tempLocked = 0;\r\n        } \r\n        _option.optionStates[_roundToCommit].totalTerminate = uint256(_option\r\n            .optionStates[_roundToCommit]\r\n            .totalTerminate)\r\n            .add(_option.assetToTerminateForNextRound).toUint128();\r\n        _option.assetToTerminateForNextRound = 0;\r\n    }\r\n\r\n    function rollToNextByOption(\r\n        StructureData.OptionData storage _option,\r\n        uint16 _currentRound,\r\n        bool _callOrPut\r\n    ) external returns (uint128 _pendingAmount) { \r\n        StructureData.OptionState memory currentOption = StructureData\r\n            .OptionState({\r\n                round: _currentRound,\r\n                totalAmount: 0,\r\n                totalTerminate: 0,\r\n                premiumRate: 0,\r\n                strikePrice: 0,\r\n                executed: false,\r\n                callOrPut: _callOrPut\r\n            });\r\n        _option.optionStates[_currentRound] = currentOption;\r\n        if (_currentRound > 1) {\r\n            uint256 userCount = _option.usersInvolved.length;\r\n            for (uint256 i = 0; i < userCount; i++) {\r\n                StructureData.UserState storage userState = _option.userStates[\r\n                    _option.usersInvolved[i]\r\n                ];\r\n                if (userState.pendingAsset != 0) {\r\n                    userState.tempLocked = userState.pendingAsset;\r\n                }\r\n                userState.pendingAsset = 0;\r\n            }\r\n        } \r\n        return\r\n            _currentRound > 1\r\n                ? _option.optionStates[_currentRound - 1].totalAmount\r\n                : 0;\r\n    }\r\n\r\n    function dryRunSettlementByOption(\r\n        StructureData.OptionData storage _option,\r\n        bool _isCall,\r\n        uint8 _depositAssetAmountDecimals,\r\n        uint8 _counterPartyAssetAmountDecimals,\r\n        uint16 _currentRound,\r\n        bool _execute\r\n    )\r\n        external\r\n        view\r\n        returns (StructureData.SettlementAccountingResult memory _result)\r\n    {\r\n        StructureData.SettlementAccountingResult memory result = StructureData\r\n            .SettlementAccountingResult({ \r\n                depositAmount: _option\r\n                    .optionStates[_currentRound - 1]\r\n                    .totalAmount,\r\n                executed: _execute,\r\n                autoRollAmount: 0,\r\n                autoRollPremium: 0,\r\n                releasedAmount: 0,\r\n                releasedPremium: 0,\r\n                autoRollCounterPartyAmount: 0,\r\n                autoRollCounterPartyPremium: 0,\r\n                releasedCounterPartyAmount: 0,\r\n                releasedCounterPartyPremium: 0\r\n            });\r\n        if (_currentRound > 2) {\r\n            StructureData.OptionState storage previousOptionState = _option\r\n                .optionStates[_currentRound - 2];\r\n            if (previousOptionState.totalAmount == 0) {\r\n                return result;\r\n            }\r\n            StructureData.MaturedState memory maturedState = calculateMaturity(\r\n                _execute,\r\n                previousOptionState,\r\n                _isCall,\r\n                _depositAssetAmountDecimals,\r\n                _counterPartyAssetAmountDecimals\r\n            );\r\n            if (_execute) {\r\n                result.autoRollCounterPartyAmount = maturedState\r\n                    .autoRollCounterPartyAssetAmount.toUint128();\r\n                result.autoRollCounterPartyPremium = maturedState\r\n                    .autoRollCounterPartyAssetPremiumAmount.toUint128();\r\n                result.releasedCounterPartyAmount = maturedState\r\n                    .releasedCounterPartyAssetAmount.toUint128();\r\n                result.releasedCounterPartyPremium = maturedState\r\n                    .releasedCounterPartyAssetPremiumAmount.toUint128();\r\n            } else {\r\n                result.autoRollAmount = maturedState.autoRollDepositAssetAmount.toUint128();\r\n                result.autoRollPremium = maturedState\r\n                    .autoRollDepositAssetPremiumAmount.toUint128();\r\n                result.releasedAmount = maturedState.releasedDepositAssetAmount.toUint128();\r\n                result.releasedPremium = maturedState\r\n                    .releasedDepositAssetPremiumAmount.toUint128();\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function closePreviousByOption(\r\n        StructureData.OptionData storage _option,\r\n        StructureData.OptionState storage previousOptionState,\r\n        bool _isCall,\r\n        uint8 _depositAssetAmountDecimals,\r\n        uint8 _counterPartyAssetAmountDecimals,\r\n        bool _execute\r\n    ) external returns (StructureData.MaturedState memory _maturedState) {\r\n        //uint16 maturedRound = currentRound - 2;\r\n        StructureData.MaturedState memory maturedState = calculateMaturity(\r\n            _execute,\r\n            previousOptionState,\r\n            _isCall,\r\n            _depositAssetAmountDecimals,\r\n            _counterPartyAssetAmountDecimals\r\n        );\r\n        previousOptionState.executed = _execute;\r\n\r\n        if (_execute) {\r\n            _option.totalReleasedCounterPartyAssetAmount =uint256(_option\r\n                .totalReleasedCounterPartyAssetAmount)\r\n                .add(maturedState.releasedCounterPartyAssetAmountWithPremium).toUint128();\r\n        } else {\r\n            _option.totalReleasedDepositAssetAmount = uint256(_option\r\n                .totalReleasedDepositAssetAmount)\r\n                .add(maturedState.releasedDepositAssetAmountWithPremium).toUint128();\r\n        }\r\n        return maturedState;\r\n    }\r\n    /*\r\n        struct OptionParameters { \r\n        uint128 strikePrice; // strike price if executed\r\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\r\n    }\r\n*/\r\n    function setOptionParameters(uint256 _parameters, StructureData.OptionState storage _optionState) external {\r\n \r\n        require(_optionState.strikePrice == 0); \r\n        _optionState.strikePrice = uint128(_parameters >> 16);\r\n        _optionState.premiumRate = uint16(_parameters & 0xffff);     \r\n    }\r\n    function getAccountBalance(\r\n        StructureData.OptionData storage _option,\r\n        address _user,\r\n        bool _underSettlement,\r\n        uint16 _currentRound\r\n    ) external view returns (StructureData.UserBalance memory) {\r\n        StructureData.UserState storage userState = _option.userStates[_user];\r\n\r\n        StructureData.UserBalance memory result = StructureData.UserBalance({\r\n            pendingDepositAssetAmount: userState.pendingAsset,\r\n            releasedDepositAssetAmount: userState.releasedDepositAssetAmount,\r\n            releasedCounterPartyAssetAmount: userState\r\n                .releasedCounterPartyAssetAmount,\r\n            lockedDepositAssetAmount: 0,\r\n            terminatingDepositAssetAmount: 0,\r\n            toTerminateDepositAssetAmount: 0\r\n        });\r\n        if (_underSettlement) {\r\n            if (_currentRound > 2) {\r\n                //when there are maturing round waiting for settlement, it becomes complex\r\n                uint16 premiumRate = _option\r\n                    .optionStates[_currentRound - 2]\r\n                    .premiumRate;\r\n                result.lockedDepositAssetAmount = deriveVirtualLocked(\r\n                    userState,\r\n                    premiumRate\r\n                ).toUint128();\r\n                result.terminatingDepositAssetAmount = uint256(userState\r\n                    .assetToTerminate)\r\n                    .withPremium(premiumRate).toUint128();\r\n            } else {\r\n                result.lockedDepositAssetAmount = userState.tempLocked;\r\n            }\r\n            result.toTerminateDepositAssetAmount = userState\r\n                    .assetToTerminateForNextRound;\r\n        } else {\r\n            result.lockedDepositAssetAmount = userState.ongoingAsset;\r\n            result.toTerminateDepositAssetAmount = userState.assetToTerminate;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getOptionSnapShot(\r\n        StructureData.OptionData storage _option,\r\n        bool _underSettlement,\r\n        uint16 _currentRound\r\n    ) external view returns (StructureData.OptionSnapshot memory) {\r\n        StructureData.OptionState memory lockedOption;\r\n        StructureData.OptionState memory onGoingOption;\r\n        StructureData.OptionSnapshot memory result = StructureData\r\n            .OptionSnapshot({\r\n                totalPending: _option.optionStates[_currentRound].totalAmount,\r\n                totalReleasedDeposit: _option.totalReleasedDepositAssetAmount,\r\n                totalReleasedCounterParty: _option\r\n                    .totalReleasedCounterPartyAssetAmount,\r\n                totalLocked: 0,\r\n                totalTerminating: 0,\r\n                totalToTerminate: 0\r\n            });\r\n        if (_underSettlement) {\r\n            lockedOption = _option.optionStates[_currentRound - 1];\r\n            result.totalToTerminate = _option.assetToTerminateForNextRound;\r\n            if (_currentRound > 2) {\r\n                //when there are maturing round waiting for settlement, it becomes complex\r\n                onGoingOption = _option.optionStates[_currentRound - 2];\r\n                result.totalTerminating = uint256(onGoingOption\r\n                    .totalTerminate)\r\n                    .withPremium(onGoingOption.premiumRate).toUint128();\r\n                result.totalLocked = uint256(lockedOption\r\n                    .totalAmount)\r\n                    .add(\r\n                        onGoingOption.totalAmount.withPremium(\r\n                            onGoingOption.premiumRate\r\n                        )\r\n                    )\r\n                    .sub(result.totalTerminating).toUint128();\r\n            } else {\r\n                result.totalLocked = lockedOption.totalAmount;\r\n            }\r\n        } else if (_currentRound > 1) {\r\n            onGoingOption = _option.optionStates[_currentRound - 1];\r\n            result.totalLocked = onGoingOption.totalAmount;\r\n            result.totalToTerminate = onGoingOption.totalTerminate;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function initiateWithrawStorage(\r\n        StructureData.OptionData storage _option,\r\n        address _user,\r\n        uint256 _assetToTerminate,\r\n        bool _underSettlement,\r\n        uint16 _currentRound\r\n    ) external {\r\n        StructureData.UserState storage userState = _option.userStates[_user];\r\n        if (_underSettlement) {\r\n            uint256 newAssetToTerminate = uint256(userState\r\n                .assetToTerminateForNextRound)\r\n                .add(_assetToTerminate);\r\n            if (_currentRound == 2) {\r\n                require(newAssetToTerminate <= userState.tempLocked);\r\n                StructureData.OptionState storage previousOption = _option\r\n                    .optionStates[_currentRound - 1];\r\n                previousOption.totalTerminate = uint256(previousOption\r\n                    .totalTerminate)\r\n                    .add(_assetToTerminate).toUint128();\r\n            } else {\r\n                StructureData.OptionState storage onGoingOption = _option\r\n                    .optionStates[_currentRound - 2];\r\n                uint256 totalLocked = deriveVirtualLocked(\r\n                    userState,\r\n                    onGoingOption.premiumRate\r\n                );\r\n                require(newAssetToTerminate <= totalLocked);\r\n                //store temporarily\r\n                _option.assetToTerminateForNextRound = uint256(_option\r\n                    .assetToTerminateForNextRound)\r\n                    .add(_assetToTerminate).toUint128();\r\n            }\r\n            userState.assetToTerminateForNextRound = newAssetToTerminate.toUint128();\r\n        } else {\r\n            uint256 newAssetToTerminate = uint256(userState.assetToTerminate).add(\r\n                _assetToTerminate\r\n            );\r\n            require(newAssetToTerminate <= userState.ongoingAsset);\r\n            userState.assetToTerminate = newAssetToTerminate.toUint128();\r\n            StructureData.OptionState storage previousOption = _option\r\n                .optionStates[_currentRound - 1];\r\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).add(\r\n                _assetToTerminate\r\n            ).toUint128();\r\n        }\r\n    }\r\n\r\n    function cancelWithdrawStorage(\r\n        StructureData.OptionData storage _option,\r\n        address _user,\r\n        uint256 _assetToTerminate,\r\n        bool _underSettlement,\r\n        uint16 _currentRound\r\n    ) external {\r\n        StructureData.UserState storage userState = _option.userStates[_user];\r\n        if (_underSettlement) {\r\n            userState.assetToTerminateForNextRound = uint256(userState\r\n                .assetToTerminateForNextRound)\r\n                .sub(_assetToTerminate).toUint128();\r\n            if (_currentRound == 2) {\r\n                StructureData.OptionState storage previousOption = _option\r\n                    .optionStates[_currentRound - 1];\r\n                previousOption.totalTerminate = uint256(previousOption\r\n                    .totalTerminate)\r\n                    .sub(_assetToTerminate).toUint128();\r\n            } else {\r\n                //store temporarily\r\n                _option.assetToTerminateForNextRound = uint256(_option\r\n                    .assetToTerminateForNextRound)\r\n                    .sub(_assetToTerminate).toUint128();\r\n            }\r\n        } else {\r\n            userState.assetToTerminate = uint256(userState.assetToTerminate).sub(\r\n                _assetToTerminate\r\n            ).toUint128();\r\n            StructureData.OptionState storage previousOption = _option\r\n                .optionStates[_currentRound - 1];\r\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).sub(\r\n                _assetToTerminate\r\n            ).toUint128();\r\n        }\r\n    }\r\n\r\n    function withdrawStorage(\r\n        StructureData.OptionData storage _option,\r\n        address _user,\r\n        uint256 _amount,\r\n        uint16 _currentRound,\r\n        bool _isDeposit\r\n    ) external {\r\n        //require(_amount > 0, \"!amount\");\r\n        StructureData.UserState storage userState = _option.userStates[_user];\r\n        if (_isDeposit) {\r\n            //todo: 0 out released amount if missing balance from trader\r\n            uint256 releasedAmount = uint256(userState.releasedDepositAssetAmount);\r\n            if (releasedAmount <= _amount) {\r\n                uint256 redeemAmount = _amount.sub(releasedAmount);\r\n                userState.pendingAsset = uint256(userState.pendingAsset).sub(\r\n                    redeemAmount\r\n                ).toUint128();\r\n                userState.releasedDepositAssetAmount = 0;\r\n                _option.totalReleasedDepositAssetAmount = uint256(_option\r\n                    .totalReleasedDepositAssetAmount)\r\n                    .sub(releasedAmount).toUint128();\r\n                StructureData.OptionState storage optionState = _option\r\n                    .optionStates[_currentRound];\r\n                optionState.totalAmount = uint256(optionState.totalAmount).sub(\r\n                    redeemAmount\r\n                ).toUint128();\r\n            } else {\r\n                userState.releasedDepositAssetAmount = releasedAmount.sub(\r\n                    _amount\r\n                ).toUint128();\r\n                _option.totalReleasedDepositAssetAmount = uint256(_option\r\n                    .totalReleasedDepositAssetAmount)\r\n                    .sub(_amount).toUint128();\r\n            }\r\n        } else {\r\n            //same result as completeWithdraw\r\n            userState.releasedCounterPartyAssetAmount = uint256(userState\r\n                .releasedCounterPartyAssetAmount)\r\n                .sub(_amount).toUint128();\r\n            _option.totalReleasedCounterPartyAssetAmount = uint256(_option\r\n                .totalReleasedCounterPartyAssetAmount)\r\n                .sub(_amount).toUint128();\r\n        }\r\n    }\r\n\r\n    function depositFor(\r\n        StructureData.OptionData storage _option,\r\n        address _userAddress,\r\n        uint256 _amount,\r\n        uint256 _toTerminate,\r\n        uint16 _round,\r\n        bool _isOpenRound\r\n    ) external {\r\n        //require(optionState.totalAmount + (_amount) <= quota[_optionId], \"Not enough quota\");\r\n\r\n        StructureData.OptionState storage optionState = _option.optionStates[\r\n            _round\r\n        ];\r\n        StructureData.UserState storage userState = _option.userStates[\r\n            _userAddress\r\n        ];\r\n        //first time added\r\n        if (!userState.hasState) {\r\n            userState.hasState = true;\r\n            _option.usersInvolved.push(_userAddress);\r\n        }\r\n        if (!_isOpenRound) {\r\n            userState.tempLocked = uint256(userState.tempLocked).add(_amount).toUint128();\r\n            if (_toTerminate > 0) {\r\n                userState.assetToTerminateForNextRound = uint256(userState\r\n                    .assetToTerminateForNextRound)\r\n                    .add(_toTerminate).toUint128();\r\n                _option.assetToTerminateForNextRound = uint256(_option\r\n                    .assetToTerminateForNextRound)\r\n                    .add(_toTerminate).toUint128();\r\n            }\r\n        } else {\r\n            userState.pendingAsset = uint256(userState.pendingAsset).add(_amount).toUint128();\r\n        }\r\n        optionState.totalAmount = uint256(optionState.totalAmount).add(_amount).toUint128();\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ISettlementAggregator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.4;\r\nimport {StructureData} from \"../libraries/StructureData.sol\";  \r\n\r\ninterface ISettlementAggregator {\r\n         \r\n    function addOptionPairs(StructureData.OptionPairDefinition[] memory _optionPairDefinitions) external; \r\n    function currentRound() external view returns(uint16);\r\n    //rollToNext + dryRunSettlement\r\n    //todo: specifying quota\r\n    function initiateSettlement() external; \r\n\r\n    //closePrevious + calculate cash flow \r\n    function settle(StructureData.OptionExecution[] memory _execution) external;\r\n\r\n    function setOptionParameters(uint256[] memory _paramters) external;\r\n\r\n    function withdrawAsset(address _trader, address _asset) external;\r\n\r\n    function batchWithdrawAssets(address _trader, address[] memory _assets) external;\r\n\r\n    function balanceEnough(address _asset) external view returns(bool); \r\n}"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/PKKTHodlBoosterOption.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {StructureData} from \"./libraries/StructureData.sol\";\r\nimport {Utils} from \"./libraries/Utils.sol\";\r\nimport {OptionLifecycle} from \"./libraries/OptionLifecycle.sol\";\r\nimport \"./interfaces/IPKKTStructureOption.sol\";\r\nimport \"./OptionVault.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\ncontract PKKTHodlBoosterOption is OptionVault, IPKKTStructureOption {\r\n    using SafeERC20 for IERC20;\r\n    using SafeCast for uint256;\r\n    using SafeMath for uint256;\r\n    using Utils for uint256;\r\n    using OptionLifecycle for StructureData.UserState;\r\n\r\n    //private data for complete withdrawal and redeposit\r\n\r\n    //take if for eth, we make price precision as 4, then underlying price can be 40000000 for 4000$\r\n    //for shib, we make price precision as 8, then underlying price can be 4000 for 0.00004000$\r\n    constructor(\r\n        address _settler,\r\n        StructureData.OptionPairDefinition[] memory _optionPairDefinitions\r\n    ) OptionVault(_settler) {\r\n        addOptionPairs(_optionPairDefinitions);\r\n    }\r\n\r\n    function validateOptionById(uint8 _optionId) private view {\r\n        require(_optionId != 0 && _optionId <= optionPairCount * 2);\r\n    }\r\n\r\n    function getAccountBalance(uint8 _optionId)\r\n        external\r\n        view\r\n        override\r\n        returns (StructureData.UserBalance memory)\r\n    {\r\n        return\r\n            OptionLifecycle.getAccountBalance(\r\n                optionData[_optionId],\r\n                msg.sender,\r\n                underSettlement,\r\n                currentRound\r\n            );\r\n    }\r\n\r\n    function getOptionSnapShot(uint8 _optionId)\r\n        external\r\n        view\r\n        override\r\n        returns (StructureData.OptionSnapshot memory)\r\n    {\r\n        return\r\n            OptionLifecycle.getOptionSnapShot(\r\n                optionData[_optionId],\r\n                underSettlement,\r\n                currentRound\r\n            );\r\n    }\r\n\r\n    function initiateWithraw(uint8 _optionId, uint256 _assetToTerminate)\r\n        external\r\n        override\r\n    {\r\n        //require(_assetToTerminate > 0 , \"!_assetToTerminate\");\r\n        //require(currentRound > 1, \"No on going\");\r\n        validateOptionById(_optionId);\r\n        OptionLifecycle.initiateWithrawStorage(\r\n            optionData[_optionId],\r\n            msg.sender,\r\n            _assetToTerminate,\r\n            underSettlement,\r\n            currentRound\r\n        );\r\n    }\r\n\r\n    function cancelWithdraw(uint8 _optionId, uint256 _assetToTerminate)\r\n        external\r\n        override\r\n    {\r\n        //require(_assetToTerminate > 0 , \"!_assetToTerminate\");\r\n        //require(currentRound > 1, \"No on going\");\r\n        validateOptionById(_optionId);\r\n\r\n        OptionLifecycle.cancelWithdrawStorage(\r\n            optionData[_optionId],\r\n            msg.sender,\r\n            _assetToTerminate,\r\n            underSettlement,\r\n            currentRound\r\n        );\r\n    }\r\n\r\n    function withdraw(\r\n        uint8 _optionId,\r\n        uint256 _amount,\r\n        address _asset\r\n    ) external override {\r\n        //require(_amount > 0, \"!amount\");\r\n\r\n        validateOptionById(_optionId);\r\n        StructureData.OptionPairDefinition storage pair = optionPairs[\r\n            (_optionId - 1) / 2\r\n        ];\r\n        //require(_asset == pair.depositAsset || _asset == pair.counterPartyAsset, \"!asset\");\r\n        OptionLifecycle.withdrawStorage(\r\n            optionData[_optionId],\r\n            msg.sender,\r\n            _amount,\r\n            currentRound,\r\n            (_optionId == pair.callOptionId && _asset == pair.depositAsset) ||\r\n            (_optionId == pair.putOptionId && _asset == pair.counterPartyAsset)\r\n        );\r\n        clientWithdraw(msg.sender, _amount, _asset, false);\r\n        emit Withdraw(_optionId, msg.sender, _asset, _amount);\r\n    }\r\n\r\n    //deposit eth\r\n    function depositETH(uint8 _optionId) external payable override {\r\n        //require(currentRound > 0, \"!Started\");\r\n        require(msg.value > 0);\r\n\r\n        validateOptionById(_optionId);\r\n        StructureData.OptionPairDefinition storage pair = optionPairs[\r\n            (_optionId - 1) / 2\r\n        ];\r\n        address depositAsset = pair.callOptionId == _optionId\r\n            ? pair.depositAsset\r\n            : pair.counterPartyAsset;\r\n        require(depositAsset == address(0));\r\n\r\n        //todo: convert to weth\r\n        OptionLifecycle.depositFor(\r\n            optionData[_optionId],\r\n            msg.sender,\r\n            msg.value,\r\n            0,\r\n            currentRound,\r\n            true\r\n        );\r\n\r\n        emit Deposit(_optionId, msg.sender, currentRound, msg.value);\r\n        //payable(vaultAddress()).transfer(msg.value);\r\n    }\r\n\r\n    //deposit other erc20 coin, take wbtc\r\n    function deposit(uint8 _optionId, uint256 _amount) external override {\r\n        //require(currentRound > 0, \"!Started\");\r\n        //require(_amount > 0, \"!amount\");\r\n        validateOptionById(_optionId);\r\n        StructureData.OptionPairDefinition storage pair = optionPairs[\r\n            (_optionId - 1) / 2\r\n        ];\r\n        address depositAsset = pair.callOptionId == _optionId\r\n            ? pair.depositAsset\r\n            : pair.counterPartyAsset;\r\n        require(depositAsset != address(0));\r\n\r\n        OptionLifecycle.depositFor(\r\n            optionData[_optionId],\r\n            msg.sender,\r\n            _amount,\r\n            0,\r\n            currentRound,\r\n            true\r\n        );\r\n        emit Deposit(_optionId, msg.sender, currentRound, _amount);\r\n        IERC20(depositAsset).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n    }\r\n\r\n    //used to render the history at client side, reading the minting transactions of a specific address,\r\n    //for each transaction, read the blockheight and call this method to get the result\r\n    //the blockheight is the the height when the round is committed\r\n    //function getRoundData(uint8 _optionId, uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\r\n    //    return optionStates[_optionId][optionHeights[_blockHeight]];\r\n    //}\r\n\r\n    /*function getRoundDataByBlock(uint8 _optionId, uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\r\n        return optionData[_optionId].optionStates[optionHeights[_blockHeight]];\r\n    }*/\r\n\r\n    function getOptionStateByRound(uint8 _optionId, uint16 _round)\r\n        external\r\n        view\r\n        override\r\n        returns (StructureData.OptionState memory)\r\n    {\r\n        return optionData[_optionId].optionStates[_round];\r\n    }\r\n\r\n    function autoRollToCounterPartyByOption(\r\n        StructureData.OptionData storage _option,\r\n        StructureData.OptionState storage _optionState,\r\n        StructureData.OptionData storage _counterPartyOption,\r\n        uint8 _counterPartyOptionId,\r\n        uint256 _totalReleased,\r\n        uint256 _totalAutoRoll\r\n    ) internal override {\r\n        uint256 totalAutoRollBase = uint256(_optionState.totalAmount).sub(\r\n            _optionState.totalTerminate\r\n        );\r\n        if (_option.assetToTerminateForNextRound > 0 && _totalAutoRoll > 0) {\r\n            _option.assetToTerminateForNextRound = uint256(_option\r\n                .assetToTerminateForNextRound)\r\n                .subOrZero(\r\n                    totalAutoRollBase.withPremium(_optionState.premiumRate)\r\n                ).toUint128();\r\n        }\r\n        uint256 userCount = _option.usersInvolved.length;\r\n        for (uint256 i = 0; i < userCount; i++) {\r\n            address userAddress = _option.usersInvolved[i];\r\n            StructureData.UserState storage userState = _option.userStates[\r\n                userAddress\r\n            ];\r\n\r\n            if (userState.ongoingAsset == 0) {\r\n                continue;\r\n            }\r\n            uint256 amountToTerminate = Utils.getAmountToTerminate(\r\n                _totalReleased,\r\n                userState.assetToTerminate,\r\n                _optionState.totalTerminate\r\n            );\r\n            if (amountToTerminate > 0) {\r\n                userState.releasedCounterPartyAssetAmount = uint256(userState\r\n                    .releasedCounterPartyAssetAmount)\r\n                    .add(amountToTerminate).toUint128();\r\n            }\r\n            uint256 onGoing = uint256(userState.ongoingAsset).sub(\r\n                userState.assetToTerminate\r\n            );\r\n            uint256 remainingAmount = Utils.getAmountToTerminate(\r\n                _totalAutoRoll,\r\n                onGoing,\r\n                totalAutoRollBase\r\n            );\r\n            if (remainingAmount > 0) {\r\n                uint256 onGoingTerminate = 0;\r\n                uint256 virtualOnGoing = onGoing.withPremium(\r\n                    _optionState.premiumRate\r\n                );\r\n                if (userState.assetToTerminateForNextRound <= virtualOnGoing) {\r\n                    onGoingTerminate = Utils.getAmountToTerminate(\r\n                        remainingAmount,\r\n                        userState.assetToTerminateForNextRound,\r\n                        virtualOnGoing\r\n                    );\r\n                } else {\r\n                    onGoingTerminate = remainingAmount;\r\n                }\r\n                OptionLifecycle.depositFor(\r\n                    _counterPartyOption,\r\n                    userAddress,\r\n                    remainingAmount,\r\n                    onGoingTerminate,\r\n                    currentRound - 1,\r\n                    false\r\n                );\r\n                emit Deposit(\r\n                    _counterPartyOptionId,\r\n                    userAddress,\r\n                    currentRound - 1,\r\n                    remainingAmount\r\n                );\r\n            }\r\n            userState.assetToTerminate = 0;\r\n        }\r\n    }\r\n\r\n    function autoRollByOption(\r\n        StructureData.OptionData storage _option,\r\n        uint8 _optionId,\r\n        StructureData.OptionState storage _optionState,\r\n        uint256 _totalReleased,\r\n        uint256 _totalAutoRoll\r\n    ) internal override {\r\n        //uint256 lockedRound = currentRound - 1;\r\n\r\n        uint256 totalAutoRollBase = uint256(_optionState.totalAmount).sub(\r\n            _optionState.totalTerminate\r\n        );\r\n        uint256 userCount = _option.usersInvolved.length;\r\n        for (uint256 i = 0; i < userCount; i++) {\r\n            address userAddress = _option.usersInvolved[i];\r\n            StructureData.UserState storage userState = _option.userStates[\r\n                userAddress\r\n            ];\r\n            if (userState.ongoingAsset == 0) {\r\n                continue;\r\n            }\r\n\r\n            uint256 amountToTerminate = Utils.getAmountToTerminate(\r\n                _totalReleased,\r\n                userState.assetToTerminate,\r\n                _optionState.totalTerminate\r\n            );\r\n            if (amountToTerminate > 0) {\r\n                userState.releasedDepositAssetAmount = uint256(userState\r\n                    .releasedDepositAssetAmount)\r\n                    .add(amountToTerminate).toUint128();\r\n            }\r\n            uint256 remainingAmount = Utils.getAmountToTerminate(\r\n                _totalAutoRoll,\r\n                uint256(userState.ongoingAsset).sub(userState.assetToTerminate),\r\n                totalAutoRollBase\r\n            );\r\n            if (remainingAmount > 0) {\r\n                OptionLifecycle.depositFor(\r\n                    _option,\r\n                    userAddress,\r\n                    remainingAmount,\r\n                    0,\r\n                    currentRound - 1,\r\n                    false\r\n                );\r\n                emit Deposit(\r\n                    _optionId,\r\n                    userAddress,\r\n                    currentRound - 1,\r\n                    remainingAmount\r\n                );\r\n            }\r\n\r\n            userState.assetToTerminate = 0;\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/interfaces/IPKKTStructureOption.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.4;\r\nimport {StructureData} from \"../libraries/StructureData.sol\";\r\n \r\ninterface IPKKTStructureOption {\r\n \r\n     event Deposit(uint8 indexed optionId, address indexed account, uint16 indexed round, uint256 amount);\r\n     event Withdraw(uint8 indexed optionId, address indexed account, address indexed asset, uint256 amount);\r\n     //event CloseOption(uint8 indexed optionId, uint16 indexed round);\r\n     //event CommitOption(uint8 indexed optionId, uint16 indexed round);\r\n     //event OpenOption(uint8 indexed optionId, uint16 indexed round);\r\n     //event OptionCreated(uint8 indexed optionId, string name);\r\n     //event OptionTransfer(uint8 indexed optionId, address indexed account, uint16 premium, uint16 round);\r\n\r\n    function getAccountBalance(uint8 _optionId) external view returns (StructureData.UserBalance memory); \r\n\r\n    //ISettlementAggregator.balanceEnough needs to be called if there is any release amount\r\n    function getOptionSnapShot(uint8 _optionId) external view returns(StructureData.OptionSnapshot memory); \r\n\r\n    //deposit eth\r\n    function depositETH(uint8 _optionId) external payable;\r\n\r\n    //deposit other erc20 coin, take wbtc or stable coin\r\n    function deposit(uint8 _optionId, uint256 _amount) external;\r\n\r\n    //complete withdraw happens on the option vault\r\n    function initiateWithraw(uint8 _optionId, uint256 _assetToTerminate) external; \r\n\r\n    function cancelWithdraw(uint8 _optionId, uint256 _assetToTerminate) external;\r\n \r\n    \r\n    function withdraw(uint8 _optionId, uint256 _amount, address _asset) external; \r\n \r\n \r\n\r\n    //used to render the history at client side, reading the minting transactions of a specific address,\r\n    //for each transaction, read the blockheight and call this method to get the result\r\n    //the blockheight is the the height when the round is committed \r\n    //function getRoundDataByBlock(uint8 _optionId, uint256 _blockHeight) external view returns(StructureData.OptionState memory);\r\n\r\n    function getOptionStateByRound(uint8 _optionId, uint16 _round) external view returns(StructureData.OptionState memory);\r\n \r\n}\r\n\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/PKKTVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\"; \r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport {Vault} from \"./libraries/Vault.sol\";  \r\nimport {PoolData, UserData} from \"./libraries/SharedData.sol\";  \r\nimport \"./PKKTToken.sol\";\r\nimport \"./PKKTRewardManager.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\n\r\ncontract PKKTVault is PKKTRewardManager, AccessControlUpgradeable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256; \r\n    using Vault for Vault.VaultInfo;\r\n    \r\n    Vault.VaultInfo[] public vaultInfo;\r\n\r\n    bool public isSettelled; \r\n \r\n    mapping(uint256 => mapping(address => Vault.UserInfo)) public userInfo; \r\n    \r\n    mapping(uint256 => address[]) userAddresses;\r\n\r\n    mapping(uint256 => int256 ) public settlementResult;\r\n    uint8 maxDecimals;\r\n\r\n    bytes32 public constant TRADER_ROLE = keccak256(\"TRADER_ROLE\");\r\n\r\n\r\n    /************************************************\r\n     *  EVENTS\r\n     ***********************************************/\r\n \r\n    event Deposit(address indexed account, uint256 indexed vid, uint256 amount, bool fromWallet); \r\n\r\n    event InitiateWithdraw(address indexed account, uint256 indexed vid,uint256 amount);\r\n    \r\n    event CancelWithdraw(address indexed account, uint256 indexed vid, uint256 amount);\r\n\r\n    event Redeem(address indexed account, uint256 indexed vid, uint256 amount);\r\n\r\n    event CompleteWithdraw(address indexed account, uint256 indexed vid, uint256 amount);\r\n \r\n \r\n\r\n    /************************************************\r\n     *  CONSTRUCTOR & INITIALIZATION\r\n     ***********************************************/\r\n\r\n    /// @notice Initializes the contract with storage variables\r\n    /// @param _pkktPerBlock total number of PKKT rewarded to users\r\n    /// @param trader address of trader who manages settlements\r\n    function initialize(PKKTToken _pkkt, uint256 _pkktPerBlock, uint256 _startBlock, address trader) public initializer {\r\n        PKKTRewardManager.initialize(_pkkt, \"Vault\", _pkktPerBlock, _startBlock);\r\n        AccessControlUpgradeable.__AccessControl_init();\r\n        // Contract deployer will be able to grant and revoke trading role\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        // Address capable of initiating and finizalizing settlement\r\n        _setupRole(TRADER_ROLE, trader);\r\n        isSettelled = true;\r\n    }\r\n\r\n    // Add a range of new underlyings to the vault. Can only be called by the owner.\r\n    function addMany(Vault.VaultSettings[] memory _vaults, bool _withUpdate) external onlyOwner {\r\n         for(uint256 i = 0; i < _vaults.length; i++) {\r\n            IERC20  underlying = _vaults[i].underlying;\r\n            require(!isAdded[address(underlying)], \"Vault already is added\"); \r\n            //here to ensure it's a valid address\r\n            uint256 underlyingSupply = underlying.balanceOf(address(this));\r\n            require(underlyingSupply == 0, \"Vault should not be staked\");\r\n        }  \r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        } \r\n        for(uint256 i = 0; i <  _vaults.length; i++) {\r\n            Vault.VaultSettings memory setting = _vaults[i];\r\n            uint256 lastRewardBlock =\r\n                block.number > startBlock ? block.number : startBlock; \r\n            vaultInfo.push(\r\n                        Vault.VaultInfo({\r\n                            underlying: setting.underlying, \r\n                            lastRewardBlock: lastRewardBlock,\r\n                            decimals: setting.decimals,\r\n                            accPKKTPerShare: 0, \r\n                            totalPending: 0,\r\n                            totalOngoing: 0,\r\n                            totalRequesting: 0,\r\n                            totalMatured: 0\r\n                        })\r\n                    );\r\n            if (maxDecimals < setting.decimals) {\r\n                maxDecimals = setting.decimals;\r\n            }\r\n            isAdded[address(setting.underlying)] = true;\r\n        }         \r\n    }\r\n    // Add a new underlying  to the vault. Can only be called by the owner.\r\n    // XXX DO NOT add the same underlying token more than once. Rewards will be messed up if you do.\r\n    function add(Vault.VaultSettings memory _vault,\r\n        bool _withUpdate\r\n    ) external onlyOwner {\r\n        require(!isAdded[address(_vault.underlying)], \"Vault already is added\");\r\n        //here to ensure it's a valid address\r\n        uint256 underlyingSupply = _vault.underlying.balanceOf(address(this));\r\n        require(underlyingSupply == 0, \"Vault should not been stake\");\r\n        \r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n  \r\n\r\n        uint256 lastRewardBlock =\r\n            block.number > startBlock ? block.number : startBlock; \r\n        vaultInfo.push(\r\n                    Vault.VaultInfo({\r\n                        underlying: _vault.underlying, \r\n                        lastRewardBlock: lastRewardBlock,\r\n                        decimals: _vault.decimals,\r\n                        accPKKTPerShare: 0,\r\n                        totalPending: 0,\r\n                        totalOngoing: 0,\r\n                        totalRequesting: 0,\r\n                        totalMatured: 0\r\n                    })\r\n                );\r\n        if (maxDecimals < _vault.decimals) {\r\n            maxDecimals = _vault.decimals;\r\n        }               \r\n        isAdded[address(_vault.underlying)] = true;\r\n    }\r\n\r\n\r\n    /************************************************\r\n     *  DEPOSIT & WITHDRAWALS\r\n     ***********************************************/\r\n\r\n \r\n    function deposit(uint256 _vid, uint256 _amount) external validatePoolById(_vid) {\r\n        require(_amount > 0, \"!amount\");\r\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\r\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \r\n\r\n        // An approve() by the msg.sender is required beforehand\r\n        IERC20(vault.underlying).safeTransferFrom(msg.sender, address(this), _amount);\r\n        if (!user.hasDeposit) {\r\n            user.hasDeposit = true;\r\n            userAddresses[_vid].push(msg.sender);\r\n        }\r\n        user.pendingAmount = user.pendingAmount.add(_amount); \r\n        vault.totalPending = vault.totalPending.add(_amount);\r\n        emit Deposit(msg.sender, _vid, _amount, true);\r\n    }\r\n  \r\n \r\n    function redeem(uint256 _vid, uint256 _amount) external validatePoolById(_vid) {\r\n        require(_amount > 0, \"!amount\");\r\n        _redeem(_vid, _amount, false);\r\n    }\r\n \r\n    function maxRedeem(uint256 _vid) external validatePoolById(_vid) {\r\n        _redeem(_vid, 0, true);\r\n    }\r\n\r\n \r\n    function _redeem(uint256 _vid, uint256 _amount, bool _isMax) internal {\r\n        \r\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\r\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \r\n \r\n        _amount = _isMax ? user.pendingAmount : _amount;\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n        require(_amount <= user.pendingAmount, \"Exceeds available\");\r\n\r\n        user.pendingAmount = user.pendingAmount.sub(_amount);  \r\n        vault.totalPending = vault.totalPending.sub(_amount);\r\n        IERC20(vault.underlying).safeTransfer(msg.sender, _amount); \r\n        \r\n\r\n        emit Redeem(msg.sender, _vid, _amount); \r\n    }\r\n  \r\n    function initiateWithdraw(uint256 _vid, uint256 _amount) external validatePoolById(_vid)  {\r\n        _initiateWithdraw(_vid, _amount, false);\r\n   \r\n    }\r\n \r\n    function maxInitiateWithdraw(uint256 _vid) external validatePoolById(_vid) {\r\n        _initiateWithdraw(_vid, 0, true);\r\n    }\r\n\r\n \r\n    function _initiateWithdraw(uint256 _vid, uint256 _amount, bool _isMax) internal {\r\n        require(_amount > 0, \"!amount\");\r\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\r\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \r\n\r\n        uint256 maxAmountForRequest = user.ongoingAmount.sub(user.requestingAmount);\r\n       \r\n        _amount = _isMax ? maxAmountForRequest : _amount;\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n        \r\n        require(_amount <= maxAmountForRequest,\"Exceeds available\"); \r\n        user.requestingAmount = user.requestingAmount.add(_amount);  \r\n        vault.totalRequesting = vault.totalRequesting.add(_amount);\r\n        emit InitiateWithdraw(msg.sender, _vid, _amount);\r\n\r\n    }\r\n \r\n    function cancelWithdraw(uint256 _vid, uint256 _amount) external validatePoolById(_vid) {\r\n        _cancelWithdraw(_vid, _amount, false); \r\n    }\r\n \r\n    function maxCancelWithdraw(uint256 _vid) external validatePoolById(_vid) {\r\n        _cancelWithdraw(_vid, 0, true); \r\n    }\r\n \r\n    function _cancelWithdraw(uint256 _vid, uint256 _amount, bool _isMax) internal {\r\n        require(_amount > 0, \"!amount\");\r\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\r\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \r\n \r\n       _amount = _isMax ? user.requestingAmount : _amount;\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n        \r\n        require(_amount <= user.requestingAmount,  \"Exceeds available\"); \r\n        user.requestingAmount = user.requestingAmount.sub(_amount); \r\n        vault.totalRequesting = vault.totalRequesting.sub(_amount);\r\n        emit CancelWithdraw(msg.sender, _vid, _amount); \r\n    }\r\n\r\n \r\n    function completeWithdraw(uint256 _vid, uint256 _amount) external validatePoolById(_vid) {\r\n        _completeWithdraw(_vid, _amount, false); \r\n  \r\n    }\r\n \r\n    function maxCompleteWithdraw(uint256 _vid) external validatePoolById(_vid) {\r\n        _completeWithdraw(_vid, 0, true);\r\n    }\r\n \r\n    function _completeWithdraw(uint256 _vid, uint256 _amount, bool _isMax) internal {\r\n        require(isSettelled, \"Settlment not finished yet\");\r\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\r\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \r\n \r\n        _amount = _isMax ? user.maturedAmount : _amount;\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n\r\n        require(_amount <= user.maturedAmount, \"Exceeds available\");\r\n    \r\n        IERC20(vault.underlying).safeTransfer(msg.sender, _amount); \r\n        \r\n        user.maturedAmount = user.maturedAmount.sub(_amount); \r\n        vault.totalMatured = vault.totalMatured.sub(_amount);\r\n        emit CompleteWithdraw(msg.sender, _vid, _amount);\r\n\r\n    }\r\n    \r\n \r\n    function redeposit(uint256 _vid, uint256 _amount) external validatePoolById(_vid) {\r\n       \r\n         _redeposit(_vid, _amount, false); \r\n    }\r\n\r\n        \r\n \r\n    function maxRedeposit(uint256 _vid) external validatePoolById(_vid) {\r\n         _redeposit(_vid, 0, true); \r\n    } \r\n \r\n \r\n    function _redeposit(uint256 _vid, uint256 _amount, bool _isMax) internal {\r\n        Vault.VaultInfo storage vault = vaultInfo[_vid];\r\n        Vault.UserInfo storage user = userInfo[_vid][msg.sender]; \r\n \r\n        _amount = _isMax ? user.maturedAmount : _amount;\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n\r\n        require(_amount <= user.maturedAmount, \"Exceeds available\");\r\n   \r\n        user.pendingAmount = user.pendingAmount.add(_amount);\r\n        user.maturedAmount = user.maturedAmount.sub(_amount); \r\n        //todo:do we need totalPending?\r\n        vault.totalPending = vault.totalPending.add(_amount);\r\n        vault.totalMatured = vault.totalMatured.sub(_amount); \r\n        emit Deposit(msg.sender, _vid, _amount, false); \r\n    }\r\n \r\n\r\n    /************************************************\r\n     *  SETTLEMENT\r\n     ***********************************************/\r\n    function initiateSettlement(uint256 _pkktPerBlock, address target) external onlyRole(TRADER_ROLE) {\r\n        massUpdatePools();\r\n        isSettelled = false;\r\n        uint256 vaultCount = vaultInfo.length; \r\n        for(uint256 vid = 0; vid < vaultCount; vid++){\r\n            Vault.VaultInfo storage vault = vaultInfo[vid];\r\n            address[] storage addresses = userAddresses[vid];  \r\n            mapping(address=>Vault.UserInfo) storage users = userInfo[vid];\r\n            uint256 userCount = addresses.length;\r\n            int256 diff = 0;\r\n            uint256 totalOngoing = 0;\r\n            uint256 totalMatured = 0;\r\n            for (uint i=0; i < userCount; i++) {\r\n                Vault.UserInfo storage user = users[addresses[i]]; \r\n                diff = diff + int256(user.pendingAmount) - int256(user.requestingAmount); \r\n                uint256 newUserOngoing = user.ongoingAmount.add(user.pendingAmount).sub(user.requestingAmount); //it must be possitive \r\n                totalOngoing = totalOngoing.add(newUserOngoing);\r\n                updateUserReward(vid, addresses[i],  \r\n                    user.ongoingAmount, newUserOngoing, true); \r\n                user.ongoingAmount = newUserOngoing;\r\n                user.pendingAmount = 0;\r\n                user.maturedAmount =  user.maturedAmount.add(user.requestingAmount);\r\n                totalMatured = totalMatured.add(user.maturedAmount);\r\n                user.requestingAmount = 0; \r\n            }\r\n            vault.totalOngoing = totalOngoing; \r\n            vault.totalPending = 0;\r\n            vault.totalRequesting = 0;\r\n            vault.totalMatured  = totalMatured;\r\n            settlementResult[vid] = diff; \r\n        }\r\n        if (_pkktPerBlock != pkktPerBlock) {\r\n            setPKKTPerBlock(_pkktPerBlock);\r\n        }\r\n        bool allDone = true;\r\n        for(uint256 vid = 0; vid < vaultCount; vid++){ \r\n           int256 diff2 = settlementResult[vid];\r\n           if (diff2 < 0) {\r\n               allDone = false;\r\n           }\r\n           else if (diff2 > 0) {\r\n               Vault.VaultInfo storage vault = vaultInfo[vid];\r\n               IERC20(vault.underlying).safeTransfer(address(target), uint256(diff2)); \r\n           }\r\n        }\r\n        if (allDone) {\r\n            for(uint256 vid = 0; vid < vaultCount; vid++){  \r\n                settlementResult[vid] = 0;\r\n            }\r\n            isSettelled = true;\r\n        }\r\n    }\r\n\r\n     \r\n    function finishSettlement() external onlyRole(TRADER_ROLE) {\r\n        require(!isSettelled, \"Settlement already finished\");\r\n        uint256 length = vaultInfo.length;\r\n        for (uint256 vid = 0; vid < length; vid++) {\r\n           Vault.VaultInfo memory vault = vaultInfo[vid];\r\n           //check if the totalMatured is fullfilled or not\r\n           require(IERC20(vault.underlying).balanceOf(address(this)) >=  vault.totalMatured, \"Matured amount not fullfilled\");\r\n        }\r\n        for (uint256 vid = 0; vid < length; vid++) {\r\n            settlementResult[vid] = 0;\r\n        }\r\n        isSettelled = true;\r\n    }\r\n\r\n    //Update number of pkkt per block \r\n    function setPKKTPerBlock(uint256 _pkktPerBlock) public override {\r\n        require(hasRole(TRADER_ROLE, msg.sender) || owner() == msg.sender, \"Only the owner or trader can set PKKT per block.\");\r\n        massUpdatePools();\r\n        pkktPerBlock = _pkktPerBlock;\r\n    }\r\n\r\n    function poolLength() public override view returns (uint256) {\r\n        return vaultInfo.length;\r\n    }\r\n    \r\n \r\n\r\n    function _updatePool(uint256 _pid, uint256 _accPKKTPerShare) internal override {\r\n\r\n        Vault.VaultInfo storage vault = vaultInfo[_pid];\r\n        vault.lastRewardBlock = block.number;\r\n         \r\n        if (_accPKKTPerShare > 0) { \r\n           vault.accPKKTPerShare = _accPKKTPerShare;\r\n        }\r\n    }\r\n\r\n\r\n    function _getPoolData(uint256 _poolId, bool _getShare) internal override view returns(PoolData.Data memory){\r\n        Vault.VaultInfo storage vault = vaultInfo[_poolId];  \r\n        return PoolData.Data({\r\n            lastRewardBlock: vault.lastRewardBlock,\r\n            accPKKTPerShare: vault.accPKKTPerShare, \r\n            shareAmount: _getShare ? vault.totalOngoing : 0,\r\n            id: _poolId\r\n        });\r\n    }\r\n\r\n    function _getUserData(uint256 _poolId, address _userAddress) internal override view returns (UserData.Data memory) { \r\n        Vault.UserInfo storage user = userInfo[_poolId][_userAddress]; \r\n        return UserData.Data({\r\n            shareAmount: user.ongoingAmount,\r\n            rewardDebt: user.rewardDebt,\r\n            pendingReward: user.pendingReward\r\n        });\r\n    }\r\n\r\n    function _getPoolPercentage(PoolData.Data memory _poolData) internal override view returns(uint256) {\r\n         Vault.VaultInfo storage vault = vaultInfo[_poolData.id];    \r\n         return vault.getShare(maxDecimals).mul(normalizer).div(getTotalShare());\r\n    }\r\n\r\n    \r\n    function _updateUserRewardDebt(uint256 _poolId, address _userAddress, uint256 _newValue) internal override {\r\n         Vault.UserInfo storage user = userInfo[_poolId][_userAddress];\r\n         user.rewardDebt = _newValue;\r\n    }\r\n    function  _updateUserPendingReward(uint256 _poolId, address _userAddress, uint256 _newValue) internal override{\r\n         Vault.UserInfo storage user = userInfo[_poolId][_userAddress];\r\n         user.pendingReward = _newValue;\r\n    }\r\n \r\n\r\n    function getTotalShare() private view returns(uint256) {\r\n       uint256 totalShares = 0;\r\n       uint256 vaultCount = vaultInfo.length;\r\n       for(uint256 vid = 0; vid < vaultCount; vid++){\r\n           Vault.VaultInfo storage vault = vaultInfo[vid]; \r\n           totalShares = totalShares.add(vault.getShare(maxDecimals));\r\n       }\r\n       //console.log(\"TotalShare: %d\", totalShares);\r\n       return totalShares;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/libraries/Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n \r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; \r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport './Utils.sol';\r\n\r\nlibrary Vault { \r\n    \r\n    using SafeMath for uint256;\r\n\r\n    struct UserInfo {\r\n        uint256 pendingAmount;  \r\n        uint256 ongoingAmount;   \r\n        uint256 requestingAmount;\r\n        uint256 maturedAmount; \r\n        uint256 pendingPKKTReward;  \r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256 pendingReward;// Reward but not harvest\r\n        //\r\n        //   pending reward = (user.amount * pool.accPKKTPerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accPKKTPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n        bool hasDeposit;\r\n    } \r\n \r\n    struct VaultInfo {   \r\n        uint256 lastRewardBlock; // Last block number that PKKTs distribution occurs.\r\n        uint256 accPKKTPerShare; // Accumulated PKKTs per share, times 1e12. See below.\r\n        uint256 totalPending;\r\n        uint256 totalOngoing;\r\n        uint256 totalRequesting;\r\n        uint256 totalMatured;\r\n      \r\n        // the underlying token: usdt/usdc/dai/etc.\r\n        IERC20 underlying;\r\n        uint8 decimals;\r\n    }\r\n    \r\n    function getShare(VaultInfo storage _vault, uint8 _maxDecimals) external view returns(uint256) {\r\n        uint8 extraDecimals = Utils.Uint8Sub(_maxDecimals, _vault.decimals);\r\n        if (extraDecimals > 0) {\r\n            return _vault.totalOngoing.mul(10 ** uint256(extraDecimals));\r\n        }\r\n        else {\r\n            return _vault.totalOngoing;\r\n        }\r\n    }\r\n\r\n \r\n    struct VaultSettings {\r\n        \r\n        IERC20 underlying; \r\n        uint8 decimals;\r\n    }\r\n\r\n     \r\n}\r\n"
    },
    "contracts/libraries/SharedData.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n \r\nlibrary PoolData { \r\n    // Info of each user.\r\n    struct Data { \r\n        uint256 lastRewardBlock;\r\n        uint256 accPKKTPerShare;\r\n        uint256 shareAmount; \r\n        uint256 id;\r\n    }\r\n \r\n}\r\n\r\nlibrary UserData {\r\n    struct Data {\r\n      uint256 shareAmount;\r\n      uint256 pendingReward;\r\n      uint256 rewardDebt;\r\n    }\r\n}\r\n"
    },
    "contracts/PKKTToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\ncontract PKKTToken is ERC20, Ownable {\r\n\r\n    using SafeMath for uint256; \r\n    /**\r\n     * @dev A record status of minter.\r\n     */\r\n    mapping (address => bool) public minters;\r\n    mapping (address => uint256) public mintingAllowance;\r\n    \r\n     /**\r\n     * @dev maximum amount can be minted.\r\n     */\r\n    uint256 private immutable _cap;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n    event MintingAllowanceUpdated(address indexed account, uint256 oldAllowance, uint256 newAllowance);\r\n\r\n    constructor(string memory tokenName, string memory symbol, uint256 cap_) ERC20(tokenName, symbol) {\r\n        minters[msg.sender] = true;\r\n        _cap = cap_;\r\n    }\r\n     \r\n    function cap() public view returns(uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    function isMinter(address _account) public view returns(bool) {\r\n        return minters[_account];\r\n    }\r\n\r\n      /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint _amount) public onlyOwner {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address _account, uint256 _amount) public virtual onlyOwner {\r\n        uint256 decreasedAllowance = \r\n        allowance(_account, msg.sender).sub(_amount, \"ERC20: burn amount exceeds allowance\");\r\n        _approve(_account, msg.sender, decreasedAllowance);\r\n        _burn(_account, _amount);\r\n    }\r\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the minter .\r\n    function mint(address _to, uint256 _amount) public virtual {\r\n        require(minters[msg.sender], \"must have minter role to mint\");\r\n        require(mintingAllowance[msg.sender] >= _amount, \"mint amount exceeds allowance\");\r\n        require(totalSupply().add(_amount) <= _cap, \"mint amount exceeds cap\");\r\n        mintingAllowance[msg.sender] = mintingAllowance[msg.sender].sub(_amount);\r\n        _mint(_to, _amount);\r\n    }\r\n    /// @notice Add `_minter` . Must only be called by the owner .\r\n    function addMinter(address _minter,uint256 _amount) public virtual onlyOwner {\r\n        minters[_minter] = true;\r\n        mintingAllowance[_minter] = _amount;\r\n        emit MinterAdded(_minter);\r\n    }\r\n\r\n    /// @notice Remove `_minter` . Must only be called by the owner .\r\n    function removeMinter(address _minter) public virtual onlyOwner {\r\n        minters[_minter] = false;\r\n        mintingAllowance[_minter] = 0;\r\n        emit MinterRemoved(_minter);\r\n    }\r\n\r\n    /// @notice Increase minting allowance for minter` . Must only be called by the owner .\r\n    function increaseMintingAllowance(address _minter, uint256 _addedValue) public virtual onlyOwner {\r\n        uint256 currentMintingAllowance = mintingAllowance[_minter];\r\n        mintingAllowance[_minter] = currentMintingAllowance.add(_addedValue);\r\n        emit MintingAllowanceUpdated(_minter, currentMintingAllowance, currentMintingAllowance.add(_addedValue));\r\n    }\r\n\r\n    /// @notice Decrease minting allowance for minter` . Must only be called by the owner .\r\n    function decreaseMintingAllowance(address _minter, uint256 _subtractedValue) public virtual onlyOwner {\r\n        uint256 currentMintingAllowance = mintingAllowance[_minter];\r\n        mintingAllowance[_minter] = currentMintingAllowance.sub(_subtractedValue,\"decreased allowance below zero\");\r\n        emit MintingAllowanceUpdated(_minter, currentMintingAllowance, currentMintingAllowance.sub(_subtractedValue));\r\n    }\r\n\r\n}\r\n\r\n"
    },
    "contracts/PKKTRewardManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n//import {SafeERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\"; \r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"./PKKTToken.sol\";  \r\nimport {PoolData, UserData} from \"./libraries/SharedData.sol\";  \r\nimport \"./libraries/Utils.sol\";  \r\nimport \"./interfaces/IClaimable.sol\"; \r\nimport \"hardhat/console.sol\";\r\n\r\n\r\nabstract contract PKKTRewardManager is IClaimable, OwnableUpgradeable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**********************************************\r\n    *  NON UPGRADABLE STORAGE\r\n    ***********************************************/\r\n\r\n    uint256 public pkktPerBlock;\r\n    // A record status of LP pool.\r\n    mapping(address => bool) public isAdded; \r\n    string itemName;\r\n    // The PKKT TOKEN!\r\n    PKKTToken public pkkt;\r\n    // The block number when PKKT mining starts.\r\n    uint256 public startBlock;\r\n\r\n    // TODO: Research whether or not we need a uint256[30] private __gap here for safety\r\n\r\n    /**********************************************\r\n    *  IMMUTABLES AND CONSTANTS\r\n    ***********************************************/\r\n\r\n    uint256 public constant normalizer = 1e18;\r\n\r\n\r\n    event RewardsHarvested(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n\r\n    /// @notice Initializes the contract with storage variables\r\n    /// @param _itemName name of underlying storage ex: \"Vault\" or \"Pool\"\r\n    /// @param _pkktPerBlock total number of PKKT rewarded to users per block\r\n    function initialize(\r\n        PKKTToken _pkkt,\r\n        string memory _itemName,\r\n        uint256 _pkktPerBlock,\r\n        uint256 _startBlock) internal initializer {\r\n        require(address(_pkkt) != address(0), \"Zero address\");\r\n        OwnableUpgradeable.__Ownable_init();\r\n        pkkt = _pkkt;\r\n        pkktPerBlock = _pkktPerBlock;\r\n        itemName = _itemName;\r\n        startBlock = _startBlock;\r\n    }\r\n\r\n \r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolLength();\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n \r\n    modifier validatePoolById(uint256 _pid) {\r\n        require(_pid < poolLength() , Utils.StringConcat(bytes(itemName), bytes(\" doesn't exist\")));\r\n        _;\r\n    }\r\n\r\n    //Update number of pkkt per block \r\n    function setPKKTPerBlock(uint256 _pkktPerBlock) public virtual onlyOwner {\r\n        massUpdatePools();\r\n        pkktPerBlock = _pkktPerBlock;\r\n    }\r\n \r\n\r\n    // View function to see pending PKKTs on frontend.\r\n    function pendingPKKT(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        validatePoolById(_pid)\r\n        returns (uint256)\r\n    {\r\n        PoolData.Data memory poolData = _getPoolData(_pid, true);\r\n        UserData.Data memory userData = _getUserData(_pid, _user); \r\n       \r\n        uint256 accPKKTPerShare = poolData.accPKKTPerShare;  \r\n        if (block.number > poolData.lastRewardBlock && poolData.shareAmount > 0) {   \r\n            accPKKTPerShare = _getAccPKKTPerShare(poolData); \r\n        }  \r\n        return userData.pendingReward.add(userData.shareAmount.mul(accPKKTPerShare).div(normalizer).sub(userData.rewardDebt)); \r\n    }\r\n    \r\n       // Update reward variables of the given pool to be up-to-date. \r\n    function updatePool(uint256 _pid) public validatePoolById(_pid) {\r\n        PoolData.Data memory poolData = _getPoolData(_pid, true);\r\n        if (block.number <= poolData.lastRewardBlock) {\r\n            return;\r\n        } \r\n        if (poolData.shareAmount == 0) { \r\n             _updatePool(_pid, 0); \r\n            return;\r\n        }  \r\n         _updatePool(_pid, _getAccPKKTPerShare(poolData)); \r\n    }\r\n\r\n\r\n    //Harvest proceeds of all pools for msg.sender\r\n    function harvestAll(uint256[] memory _pids) external {\r\n       uint256 length = _pids.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            harvest(_pids[i]);\r\n        }\r\n    }\r\n\r\n    function harvestAllPools() override external  {\r\n        uint256 length = poolLength();\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            harvest(i);\r\n        }\r\n    }\r\n    //Harvest proceeds msg.sender\r\n    function harvest(uint256 _pid) public validatePoolById(_pid) returns(uint256) {\r\n        updatePool(_pid); \r\n        PoolData.Data memory poolData = _getPoolData(_pid, false);\r\n        UserData.Data memory userData = _getUserData(_pid, msg.sender); \r\n \r\n        uint256 pendingReward = userData.pendingReward;\r\n        uint256 totalPending = userData.shareAmount.mul(poolData.accPKKTPerShare)\r\n                                        .div(normalizer)\r\n                                        .sub(userData.rewardDebt)\r\n                                        .add(pendingReward); \r\n        _updateUserPendingReward(_pid, msg.sender, 0);\r\n        if (totalPending > 0) {\r\n            pkkt.mint(address(this), totalPending);\r\n            pkkt.transfer(msg.sender, totalPending);\r\n        }\r\n        _updateUserRewardDebt(_pid, msg.sender, userData.shareAmount.mul(poolData.accPKKTPerShare).div(normalizer)); \r\n        emit RewardsHarvested(msg.sender, _pid, totalPending);\r\n        return totalPending;\r\n    }\r\n\r\n    function updateUserReward(uint256 _pid, address _userAddress, uint256 _oldShareAmount, uint256 _newShareAmount, bool _updatePending) internal validatePoolById(_pid) {\r\n        PoolData.Data memory poolData = _getPoolData(_pid, false);\r\n        UserData.Data memory userData = _getUserData(_pid,_userAddress);  \r\n\r\n        if (_updatePending){\r\n            uint256 pending =\r\n                    _oldShareAmount.mul(poolData.accPKKTPerShare).div(normalizer).sub(\r\n                        userData.rewardDebt\r\n                    );\r\n            _updateUserPendingReward(_pid, _userAddress, userData.pendingReward.add(pending)); \r\n        }\r\n        _updateUserRewardDebt(_pid,_userAddress, _newShareAmount.mul(poolData.accPKKTPerShare).div(normalizer));  \r\n    }\r\n\r\n  \r\n\r\n    function _getAccPKKTPerShare(PoolData.Data memory _poolData) private view returns(uint256) {  \r\n        uint256 pkktReward = block.number.sub(_poolData.lastRewardBlock).mul(pkktPerBlock).mul(_getPoolPercentage(_poolData)); \r\n        return _poolData.accPKKTPerShare.add(\r\n                pkktReward.div(_poolData.shareAmount)\r\n            );\r\n    }\r\n\r\n    function _updatePool(uint256 _pid, uint256 _accPKKTPerShare) internal virtual;\r\n    function poolLength() public virtual view returns (uint256);\r\n    function _updateUserPendingReward(uint256 _poolId, address _userAddress, uint256 _newValue) internal virtual;\r\n    function _updateUserRewardDebt(uint256 _poolId, address _userAddress, uint256 _newValue) internal virtual;\r\n    function _getPoolPercentage(PoolData.Data memory _poolData) internal virtual view returns(uint256);\r\n    function _getPoolData(uint256 _poolId, bool _getShare) internal virtual view returns(PoolData.Data memory);\r\n    function _getUserData(uint256 _poolId, address _userAddress) internal virtual view returns(UserData.Data memory);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/PKKTFarmV2Test.sol": {
      "content": "// Test file to test upgradeability\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\"; \r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {Pool} from \"./libraries/Pool.sol\"; \r\nimport {PoolData, UserData} from \"./libraries/SharedData.sol\";   \r\nimport \"./PKKTToken.sol\"; \r\nimport \"./PKKTRewardManager.sol\";\r\n\r\ncontract PKKTFarmV2Test is PKKTRewardManager {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n \r\n    // Info of each pool.\r\n    Pool.PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => Pool.UserInfo)) public userInfo;\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n\r\n    /// @notice Initializes the contract with storage variables\r\n    /// @param _pkktPerBlock total number of PKKT rewarded to users\r\n    function initialize(PKKTToken _pkkt, uint256 _pkktPerBlock, uint256 _startBlock) public initializer {\r\n        PKKTRewardManager.initialize(_pkkt, \"Pool\", _pkktPerBlock, _startBlock);\r\n        totalAllocPoint = 0;\r\n    }\r\n\r\n  \r\n    function poolLength() public override view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Function to test upgradeablity\r\n    function testUpgrade() public view returns(uint256) {\r\n        return poolInfo.length + 1;\r\n    }\r\n    \r\n    \r\n    // Add an array of new lps to the pool. Can only be called by the owner.\r\n    function addMany(Pool.PoolSettings[] calldata _pools, bool _withUpdate) external onlyOwner {\r\n        for(uint256 i = 0; i < _pools.length; i++) {\r\n            Pool.PoolSettings memory pool = _pools[i];\r\n            require(!isAdded[address(pool.lpToken)], \"Pool already is added\");\r\n            uint256 lpSupply = pool.lpToken.balanceOf(address(this)); \r\n            require(lpSupply == 0, \"Pool should not be staked\"); \r\n        }  \r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        for(uint256 i = 0; i < _pools.length; i++) {\r\n            \r\n            Pool.PoolSettings memory pool = _pools[i];\r\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\r\n            poolInfo.push(\r\n                Pool.PoolInfo({\r\n                    lpToken: pool.lpToken,\r\n                    allocPoint: pool.allocPoint,\r\n                    lastRewardBlock: lastRewardBlock,\r\n                    accPKKTPerShare: 0\r\n                })\r\n            );\r\n            isAdded[address(pool.lpToken)] = true;\r\n        }  \r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(Pool.PoolSettings memory _pool, bool _withUpdate) external onlyOwner {\r\n        require(!isAdded[address(_pool.lpToken)], \"Pool already is added\");\r\n        //here to ensure it's a valid address\r\n        uint256 lpSupply = _pool.lpToken.balanceOf(address(this));\r\n        require(lpSupply == 0, \"Pool should not be staked\");\r\n        \r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock =\r\n            block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_pool.allocPoint);\r\n        poolInfo.push(\r\n            Pool.PoolInfo({\r\n                lpToken: _pool.lpToken,\r\n                allocPoint: _pool.allocPoint,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accPKKTPerShare: 0\r\n            })\r\n        );\r\n        isAdded[address(_pool.lpToken)] = true;\r\n    }\r\n\r\n    // Update the given array of pools' PKKT allocation points. Can only be called by the owner.\r\n    function setMany(Pool.UpdatePoolParameters[] memory _newSettings, bool _withUpdate) external onlyOwner  {\r\n        for(uint256 i = 0; i < _newSettings.length; i++) {\r\n           Pool.UpdatePoolParameters memory newSetting = _newSettings[i]; \r\n           require(newSetting.pid < poolInfo.length , \"Pool doesn't exist\"); \r\n        }  \r\n\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        for(uint256 i = 0; i < _newSettings.length; i++) {\r\n            Pool.UpdatePoolParameters memory newSetting = _newSettings[i]; \r\n            totalAllocPoint = totalAllocPoint.sub(poolInfo[newSetting.pid].allocPoint).add(\r\n                newSetting.allocPoint\r\n            );\r\n            poolInfo[newSetting.pid].allocPoint = newSetting.allocPoint;\r\n        }  \r\n    }\r\n\r\n    // Update the given pool's PKKT allocation point. Can only be called by the owner.\r\n    function set(Pool.UpdatePoolParameters memory _newSetting, bool _withUpdate) external \r\n    onlyOwner validatePoolById(_newSetting.pid) \r\n    {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_newSetting.pid].allocPoint).add(\r\n            _newSetting.allocPoint\r\n        );\r\n        poolInfo[_newSetting.pid].allocPoint = _newSetting.allocPoint;\r\n    }\r\n\r\n\r\n \r\n    // Deposit LP tokens to PKKT Farm for PKKT allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public validatePoolById(_pid) {\r\n        require(_amount > 0, \"!amount\");\r\n        Pool.PoolInfo storage pool = poolInfo[_pid];\r\n        Pool.UserInfo storage user = userInfo[_pid][msg.sender]; \r\n        updatePool(_pid);\r\n        updateUserReward(_pid, msg.sender, user.amount, user.amount.add(_amount), true);\r\n        user.amount = user.amount.add(_amount); \r\n        pool.lpToken.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        ); \r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from Pool.\r\n    function withdraw(uint256 _pid, uint256 _amount, bool _harvestReward)\r\n        external\r\n        validatePoolById(_pid)\r\n    {\r\n        require(_amount > 0, \"!amount\");\r\n        Pool.PoolInfo storage pool = poolInfo[_pid];\r\n        Pool.UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: exceeds available\");\r\n        bool updatePending = false;\r\n        if (_harvestReward || user.amount == _amount) {\r\n            harvest(_pid); \r\n        }\r\n        else { \r\n            updatePool(_pid); \r\n            updatePending = true;\r\n        }\r\n        \r\n        updateUserReward(_pid, msg.sender, user.amount, user.amount.sub(_amount), updatePending); \r\n        user.amount = user.amount.sub(_amount);  \r\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) external validatePoolById(_pid) {\r\n        Pool.PoolInfo storage pool = poolInfo[_pid];\r\n        Pool.UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\r\n    }\r\n\r\n    //Compound rewards to pkkt pool\r\n    function compoundReward(uint256 _pkktPoolId) external validatePoolById(_pkktPoolId) {\r\n        Pool.PoolInfo memory pool = poolInfo[_pkktPoolId];\r\n        require(pool.lpToken == IERC20(pkkt), \"not pkkt pool\");\r\n        uint256 totalPending = harvest(_pkktPoolId);\r\n        if(totalPending > 0) {\r\n            deposit(_pkktPoolId, totalPending);\r\n        }\r\n    }\r\n \r\n    \r\n    function _getPoolData(uint256 _poolId, bool _getShare) internal override view returns(PoolData.Data memory){\r\n        Pool.PoolInfo storage pool = poolInfo[_poolId];\r\n        return PoolData.Data({\r\n            lastRewardBlock: pool.lastRewardBlock,\r\n            accPKKTPerShare: pool.accPKKTPerShare,\r\n            shareAmount: _getShare ? pool.lpToken.balanceOf(address(this)) : 0,\r\n            id: _poolId\r\n        });\r\n    }\r\n\r\n    function _getUserData(uint256 _poolId, address _userAddress) internal override view returns(UserData.Data memory) {\r\n        \r\n        Pool.UserInfo storage user = userInfo[_poolId][_userAddress];\r\n\r\n        return UserData.Data({\r\n            shareAmount: user.amount,\r\n            rewardDebt: user.rewardDebt,\r\n            pendingReward: user.pendingReward\r\n        });\r\n    }\r\n\r\n    function _getPoolPercentage(PoolData.Data memory _poolData) internal override view returns(uint256) {\r\n         Pool.PoolInfo storage pool = poolInfo[_poolData.id];  \r\n         return pool.allocPoint.mul(normalizer).div(totalAllocPoint);\r\n    }\r\n \r\n    function _updatePool(uint256 _pid, uint256 _accPKKTPerShare) internal override {\r\n        Pool.PoolInfo storage pool = poolInfo[_pid];\r\n        pool.lastRewardBlock = block.number;\r\n        if (_accPKKTPerShare > 0) { \r\n           pool.accPKKTPerShare = _accPKKTPerShare;\r\n        }\r\n    }\r\n    function  _updateUserPendingReward(uint256 _poolId, address _userAddress, uint256 _newValue) internal override{\r\n         Pool.UserInfo storage user = userInfo[_poolId][_userAddress];\r\n         user.pendingReward = _newValue;\r\n    }\r\n\r\n    function _updateUserRewardDebt(uint256 _poolId, address _userAddress, uint256 _newValue) internal override {\r\n         Pool.UserInfo storage user = userInfo[_poolId][_userAddress];\r\n         user.rewardDebt = _newValue;\r\n    }\r\n     \r\n}\r\n"
    },
    "contracts/libraries/Pool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.4;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; \r\n\r\nlibrary Pool { \r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint pendingReward;// Reward but not harvest\r\n        //\r\n        //   pending reward = (user.amount * pool.accPKKTPerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accPKKTPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; \r\n        uint256 allocPoint; // How many allocation points assigned to this pool. PKKTs to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that PKKTs distribution occurs.\r\n        uint256 accPKKTPerShare; // Accumulated PKKTs per share, times 1e12. See below.\r\n    }\r\n\r\n    struct PoolSettings {\r\n        \r\n        IERC20 lpToken; \r\n        uint256 allocPoint;\r\n    }\r\n\r\n    \r\n    struct UpdatePoolParameters {\r\n        \r\n        uint256 pid; \r\n        uint256 allocPoint;\r\n    }\r\n\r\n\r\n}\r\n"
    },
    "contracts/PKKTFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\"; \r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {Pool} from \"./libraries/Pool.sol\"; \r\nimport {PoolData, UserData} from \"./libraries/SharedData.sol\";   \r\nimport \"./PKKTToken.sol\"; \r\nimport \"./PKKTRewardManager.sol\";\r\n\r\ncontract PKKTFarm is PKKTRewardManager {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n \r\n    // Info of each pool.\r\n    Pool.PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => Pool.UserInfo)) public userInfo;\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n\r\n    /// @notice Initializes the contract with storage variables\r\n    /// @param _pkktPerBlock total number of PKKT rewarded to users\r\n    function initialize(PKKTToken _pkkt, uint256 _pkktPerBlock, uint256 _startBlock) public initializer {\r\n        PKKTRewardManager.initialize(_pkkt, \"Pool\", _pkktPerBlock, _startBlock);\r\n        totalAllocPoint = 0;\r\n    }\r\n\r\n  \r\n    function poolLength() public override view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n    \r\n    \r\n    // Add an array of new lps to the pool. Can only be called by the owner.\r\n    function addMany(Pool.PoolSettings[] calldata _pools, bool _withUpdate) external onlyOwner {\r\n        for(uint256 i = 0; i < _pools.length; i++) {\r\n            Pool.PoolSettings memory pool = _pools[i];\r\n            require(!isAdded[address(pool.lpToken)], \"Pool already is added\");\r\n            uint256 lpSupply = pool.lpToken.balanceOf(address(this)); \r\n            require(lpSupply == 0, \"Pool should not be staked\"); \r\n        }  \r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        for(uint256 i = 0; i < _pools.length; i++) {\r\n            \r\n            Pool.PoolSettings memory pool = _pools[i];\r\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\r\n            poolInfo.push(\r\n                Pool.PoolInfo({\r\n                    lpToken: pool.lpToken,\r\n                    allocPoint: pool.allocPoint,\r\n                    lastRewardBlock: lastRewardBlock,\r\n                    accPKKTPerShare: 0\r\n                })\r\n            );\r\n            isAdded[address(pool.lpToken)] = true;\r\n        }  \r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(Pool.PoolSettings memory _pool, bool _withUpdate) external onlyOwner {\r\n        require(!isAdded[address(_pool.lpToken)], \"Pool already is added\");\r\n        //here to ensure it's a valid address\r\n        uint256 lpSupply = _pool.lpToken.balanceOf(address(this));\r\n        require(lpSupply == 0, \"Pool should not be staked\");\r\n        \r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock =\r\n            block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_pool.allocPoint);\r\n        poolInfo.push(\r\n            Pool.PoolInfo({\r\n                lpToken: _pool.lpToken,\r\n                allocPoint: _pool.allocPoint,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accPKKTPerShare: 0\r\n            })\r\n        );\r\n        isAdded[address(_pool.lpToken)] = true;\r\n    }\r\n\r\n    // Update the given array of pools' PKKT allocation points. Can only be called by the owner.\r\n    function setMany(Pool.UpdatePoolParameters[] memory _newSettings, bool _withUpdate) external onlyOwner  {\r\n        for(uint256 i = 0; i < _newSettings.length; i++) {\r\n           Pool.UpdatePoolParameters memory newSetting = _newSettings[i]; \r\n           require(newSetting.pid < poolInfo.length , \"Pool doesn't exist\"); \r\n        }  \r\n\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        for(uint256 i = 0; i < _newSettings.length; i++) {\r\n            Pool.UpdatePoolParameters memory newSetting = _newSettings[i]; \r\n            totalAllocPoint = totalAllocPoint.sub(poolInfo[newSetting.pid].allocPoint).add(\r\n                newSetting.allocPoint\r\n            );\r\n            poolInfo[newSetting.pid].allocPoint = newSetting.allocPoint;\r\n        }  \r\n    }\r\n\r\n    // Update the given pool's PKKT allocation point. Can only be called by the owner.\r\n    function set(Pool.UpdatePoolParameters memory _newSetting, bool _withUpdate) external \r\n    onlyOwner validatePoolById(_newSetting.pid) \r\n    {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_newSetting.pid].allocPoint).add(\r\n            _newSetting.allocPoint\r\n        );\r\n        poolInfo[_newSetting.pid].allocPoint = _newSetting.allocPoint;\r\n    }\r\n\r\n\r\n \r\n    // Deposit LP tokens to PKKT Farm for PKKT allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public validatePoolById(_pid) {\r\n        require(_amount > 0, \"!amount\");\r\n        Pool.PoolInfo storage pool = poolInfo[_pid];\r\n        Pool.UserInfo storage user = userInfo[_pid][msg.sender]; \r\n        updatePool(_pid);\r\n        updateUserReward(_pid, msg.sender, user.amount, user.amount.add(_amount), true);\r\n        user.amount = user.amount.add(_amount); \r\n        pool.lpToken.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        ); \r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from Pool.\r\n    function withdraw(uint256 _pid, uint256 _amount, bool _harvestReward)\r\n        external\r\n        validatePoolById(_pid)\r\n    {\r\n        require(_amount > 0, \"!amount\");\r\n        Pool.PoolInfo storage pool = poolInfo[_pid];\r\n        Pool.UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: exceeds available\");\r\n        bool updatePending = false;\r\n        if (_harvestReward || user.amount == _amount) {\r\n            harvest(_pid); \r\n        }\r\n        else { \r\n            updatePool(_pid); \r\n            updatePending = true;\r\n        }\r\n        \r\n        updateUserReward(_pid, msg.sender, user.amount, user.amount.sub(_amount), updatePending); \r\n        user.amount = user.amount.sub(_amount);  \r\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) external validatePoolById(_pid) {\r\n        Pool.PoolInfo storage pool = poolInfo[_pid];\r\n        Pool.UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\r\n    }\r\n\r\n    //Compound rewards to pkkt pool\r\n    function compoundReward(uint256 _pkktPoolId) external validatePoolById(_pkktPoolId) {\r\n        Pool.PoolInfo memory pool = poolInfo[_pkktPoolId];\r\n        require(pool.lpToken == IERC20(pkkt), \"not pkkt pool\");\r\n        uint256 totalPending = harvest(_pkktPoolId);\r\n        if(totalPending > 0) {\r\n            deposit(_pkktPoolId, totalPending);\r\n        }\r\n    }\r\n \r\n    \r\n    function _getPoolData(uint256 _poolId, bool _getShare) internal override view returns(PoolData.Data memory){\r\n        Pool.PoolInfo storage pool = poolInfo[_poolId];\r\n        return PoolData.Data({\r\n            lastRewardBlock: pool.lastRewardBlock,\r\n            accPKKTPerShare: pool.accPKKTPerShare,\r\n            shareAmount: _getShare ? pool.lpToken.balanceOf(address(this)) : 0,\r\n            id: _poolId\r\n        });\r\n    }\r\n\r\n    function _getUserData(uint256 _poolId, address _userAddress) internal override view returns(UserData.Data memory) {\r\n        \r\n        Pool.UserInfo storage user = userInfo[_poolId][_userAddress];\r\n\r\n        return UserData.Data({\r\n            shareAmount: user.amount,\r\n            rewardDebt: user.rewardDebt,\r\n            pendingReward: user.pendingReward\r\n        });\r\n    }\r\n\r\n    function _getPoolPercentage(PoolData.Data memory _poolData) internal override view returns(uint256) {\r\n         Pool.PoolInfo storage pool = poolInfo[_poolData.id];  \r\n         return pool.allocPoint.mul(normalizer).div(totalAllocPoint);\r\n    }\r\n \r\n    function _updatePool(uint256 _pid, uint256 _accPKKTPerShare) internal override {\r\n        Pool.PoolInfo storage pool = poolInfo[_pid];\r\n        pool.lastRewardBlock = block.number;\r\n        if (_accPKKTPerShare > 0) { \r\n           pool.accPKKTPerShare = _accPKKTPerShare;\r\n        }\r\n    }\r\n    function  _updateUserPendingReward(uint256 _poolId, address _userAddress, uint256 _newValue) internal override{\r\n         Pool.UserInfo storage user = userInfo[_poolId][_userAddress];\r\n         user.pendingReward = _newValue;\r\n    }\r\n\r\n    function _updateUserRewardDebt(uint256 _poolId, address _userAddress, uint256 _newValue) internal override {\r\n         Pool.UserInfo storage user = userInfo[_poolId][_userAddress];\r\n         user.rewardDebt = _newValue;\r\n    }\r\n     \r\n}\r\n"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract ERC20Mock is ERC20 {\r\n    uint8 private _decimals;\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 supply,\r\n        uint8 decimals_\r\n    ) ERC20(name, symbol) {\r\n        _decimals = decimals_;\r\n        _mint(msg.sender, supply);\r\n    }\r\n\r\n      \r\n     function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n     }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}