{
  "language": "Solidity",
  "sources": {
    "contracts/HodlBoosterOption.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {StructureData} from \"./libraries/StructureData.sol\";\nimport {Utils} from \"./libraries/Utils.sol\";\nimport {OptionLifecycle} from \"./libraries/OptionLifecycle.sol\";\nimport \"./interfaces/IPKKTStructureOption.sol\";\nimport \"./OptionVaultBase.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract HodlBoosterOption is OptionVaultBase, IPKKTStructureOption {\n    using SafeERC20 for IERC20;\n    using SafeCast for uint256;\n    using SafeMath for uint256;\n    using Utils for uint256;\n    using OptionLifecycle for StructureData.UserState;\n \n\n    modifier validateOptionById(uint8 _optionId) {\n        require(_optionId != 0 && _optionId <= optionPairCount * 2);\n        _;\n    }\n\n    function getAccountBalance(uint8 _optionId)\n        external\n        view\n        override\n        returns (StructureData.UserBalance memory)\n    {\n        return\n            OptionLifecycle.getAccountBalance(\n                optionData[_optionId],\n                msg.sender,\n                underSettlement,\n                currentRound\n            );\n    }\n\n    function getOptionSnapShot(uint8 _optionId)\n        external\n        view\n        override\n        returns (StructureData.OptionSnapshot memory)\n    {\n        return\n            OptionLifecycle.getOptionSnapShot(\n                optionData[_optionId],\n                underSettlement,\n                currentRound\n            );\n    }\n\n    function initiateWithraw(uint8 _optionId, uint256 _assetToTerminate)\n        external\n        override \n        validateOptionById(_optionId)\n    {\n        //require(_assetToTerminate > 0 , \"!_assetToTerminate\");\n        //require(currentRound > 1, \"No on going\"); \n        OptionLifecycle.initiateWithrawStorage(\n            optionData[_optionId],\n            msg.sender,\n            _assetToTerminate,\n            underSettlement,\n            currentRound\n        );\n    }\n\n    function cancelWithdraw(uint8 _optionId, uint256 _assetToTerminate)\n        external\n        override\n        validateOptionById(_optionId)\n    {\n        //require(_assetToTerminate > 0 , \"!_assetToTerminate\");\n        //require(currentRound > 1, \"No on going\"); \n\n        OptionLifecycle.cancelWithdrawStorage(\n            optionData[_optionId],\n            msg.sender,\n            _assetToTerminate,\n            underSettlement,\n            currentRound\n        );\n    }\n\n    function withdraw(\n        uint8 _optionId,\n        uint256 _amount,\n        address _asset\n    ) external override \n        validateOptionById(_optionId){\n        //require(_amount > 0, \"!amount\"); \n        StructureData.OptionPairDefinition storage pair = optionPairs[\n            (_optionId - 1) / 2\n        ];\n        //require(_asset == pair.depositAsset || _asset == pair.counterPartyAsset, \"!asset\");\n        OptionLifecycle.withdrawStorage(\n            optionData[_optionId],\n            msg.sender,\n            _amount,\n            currentRound,\n            (_optionId == pair.callOptionId && _asset == pair.depositAsset) ||\n            (_optionId == pair.putOptionId && _asset == pair.counterPartyAsset)\n        );\n        clientWithdraw(msg.sender, _amount, _asset, false);\n        emit Withdraw(_optionId, msg.sender, _asset, _amount);\n    }\n\n    //deposit eth\n    function depositETH(uint8 _optionId) external payable override \n        validateOptionById(_optionId){\n        require(currentRound > 0, \"!Started\");\n        require(msg.value > 0, \"no value\");\n \n        StructureData.OptionPairDefinition storage pair = optionPairs[\n            (_optionId - 1) / 2\n        ];\n        require(!pair.manualDepositDisabled, \"DepositDisabled\");  \n        address depositAsset = pair.callOptionId == _optionId\n            ? pair.depositAsset\n            : pair.counterPartyAsset;\n        require(depositAsset == address(0));\n\n        //todo: convert to weth\n        OptionLifecycle.depositFor(\n            optionData[_optionId],\n            msg.sender,\n            msg.value,\n            0,\n            currentRound,\n            true\n        );\n\n        emit Deposit(_optionId, msg.sender, currentRound, msg.value);\n        //payable(vaultAddress()).transfer(msg.value);\n    }\n\n    //deposit other erc20 coin, take wbtc\n    function deposit(uint8 _optionId, uint256 _amount) external override \n        validateOptionById(_optionId){\n        require(currentRound > 0, \"!Started\");\n        require(_amount > 0, \"!amount\"); \n        StructureData.OptionPairDefinition storage pair = optionPairs[\n            (_optionId - 1) / 2\n        ];\n        require(!pair.manualDepositDisabled, \"DepositDisabled\");  \n        address depositAsset = pair.callOptionId == _optionId\n            ? pair.depositAsset\n            : pair.counterPartyAsset;\n        require(depositAsset != address(0));\n\n        OptionLifecycle.depositFor(\n            optionData[_optionId],\n            msg.sender,\n            _amount,\n            0,\n            currentRound,\n            true\n        );\n        emit Deposit(_optionId, msg.sender, currentRound, _amount);\n        IERC20(depositAsset).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n    }\n \n\n    //used to render the history at client side, reading the minting transactions of a specific address,\n    //for each transaction, read the blockheight and call this method to get the result\n    //the blockheight is the the height when the round is committed\n    //function getRoundData(uint8 _optionId, uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\n    //    return optionStates[_optionId][optionHeights[_blockHeight]];\n    //}\n\n    /*function getRoundDataByBlock(uint8 _optionId, uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\n        return optionData[_optionId].optionStates[optionHeights[_blockHeight]];\n    }*/\n\n    function getOptionStateByRound(uint8 _optionId, uint16 _round)\n        external\n        view\n        override\n        returns (StructureData.OptionState memory)\n    {\n        return optionData[_optionId].optionStates[_round];\n    }\n\n    function autoRollToCounterPartyByOption(\n        StructureData.OptionData storage _option,\n        StructureData.OptionState storage _optionState,\n        StructureData.OptionData storage _counterPartyOption,\n        uint8 _counterPartyOptionId,\n        uint256 _totalReleased,\n        uint256 _totalAutoRoll\n    ) internal override {\n        uint256 totalAutoRollBase = uint256(_optionState.totalAmount).sub(\n            _optionState.totalTerminate\n        );\n        if (_option.assetToTerminateForNextRound > 0 && _totalAutoRoll > 0) {\n            _option.assetToTerminateForNextRound = uint256(_option\n                .assetToTerminateForNextRound)\n                .subOrZero(\n                    totalAutoRollBase.withPremium(_optionState.premiumRate)\n                ).toUint128();\n        }\n        uint256 userCount = _option.usersInvolved.length;\n        for (uint256 i = 0; i < userCount; i++) {\n            address userAddress = _option.usersInvolved[i];\n            StructureData.UserState storage userState = _option.userStates[\n                userAddress\n            ];\n\n            if (userState.ongoingAsset == 0) {\n                continue;\n            }\n            uint256 amountToTerminate = Utils.getAmountToTerminate(\n                _totalReleased,\n                userState.assetToTerminate,\n                _optionState.totalTerminate\n            );\n            if (amountToTerminate > 0) {\n                userState.releasedCounterPartyAssetAmount = uint256(userState\n                    .releasedCounterPartyAssetAmount)\n                    .add(amountToTerminate).toUint128();\n            }\n            uint256 onGoing = uint256(userState.ongoingAsset).sub(\n                userState.assetToTerminate\n            );\n            uint256 remainingAmount = Utils.getAmountToTerminate(\n                _totalAutoRoll,\n                onGoing,\n                totalAutoRollBase\n            );\n            if (remainingAmount > 0) {\n                uint256 onGoingTerminate = 0;\n                uint256 virtualOnGoing = onGoing.withPremium(\n                    _optionState.premiumRate\n                );\n                if (userState.assetToTerminateForNextRound <= virtualOnGoing) {\n                    onGoingTerminate = Utils.getAmountToTerminate(\n                        remainingAmount,\n                        userState.assetToTerminateForNextRound,\n                        virtualOnGoing\n                    );\n                } else {\n                    onGoingTerminate = remainingAmount;\n                }\n                OptionLifecycle.depositFor(\n                    _counterPartyOption,\n                    userAddress,\n                    remainingAmount,\n                    onGoingTerminate,\n                    currentRound - 1,\n                    false\n                );\n                emit Deposit(\n                    _counterPartyOptionId,\n                    userAddress,\n                    currentRound - 1,\n                    remainingAmount\n                );\n            }\n            userState.assetToTerminate = 0;\n        }\n    }\n\n    function autoRollByOption(\n        StructureData.OptionData storage _option,\n        uint8 _optionId,\n        StructureData.OptionState storage _optionState,\n        uint256 _totalReleased,\n        uint256 _totalAutoRoll\n    ) internal override {\n        //uint256 lockedRound = currentRound - 1;\n\n        uint256 totalAutoRollBase = uint256(_optionState.totalAmount).sub(\n            _optionState.totalTerminate\n        );\n        uint256 userCount = _option.usersInvolved.length;\n        for (uint256 i = 0; i < userCount; i++) {\n            address userAddress = _option.usersInvolved[i];\n            StructureData.UserState storage userState = _option.userStates[\n                userAddress\n            ];\n            if (userState.ongoingAsset == 0) {\n                continue;\n            }\n\n            uint256 amountToTerminate = Utils.getAmountToTerminate(\n                _totalReleased,\n                userState.assetToTerminate,\n                _optionState.totalTerminate\n            );\n            if (amountToTerminate > 0) {\n                userState.releasedDepositAssetAmount = uint256(userState\n                    .releasedDepositAssetAmount)\n                    .add(amountToTerminate).toUint128();\n            }\n            uint256 remainingAmount = Utils.getAmountToTerminate(\n                _totalAutoRoll,\n                uint256(userState.ongoingAsset).sub(userState.assetToTerminate),\n                totalAutoRollBase\n            );\n            if (remainingAmount > 0) {\n                OptionLifecycle.depositFor(\n                    _option,\n                    userAddress,\n                    remainingAmount,\n                    0,\n                    currentRound - 1,\n                    false\n                );\n                emit Deposit(\n                    _optionId,\n                    userAddress,\n                    currentRound - 1,\n                    remainingAmount\n                );\n            }\n\n            userState.assetToTerminate = 0;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/libraries/StructureData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nlibrary StructureData {\n    bytes32 public constant OPTION_ROLE = keccak256(\"OPTION_ROLE\");\n    bytes32 public constant SETTLER_ROLE = keccak256(\"SETTLER_ROLE\");\n    uint8 public constant MATUREROUND = 1; //7 for daily settlement, 1 for daily settlement\n    uint8 public constant PRICE_PRECISION = 4;\n    struct OptionParameters { \n        uint128 strikePrice; // strike price if executed\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\n    }\n\n    struct OptionState {\n        uint128 totalAmount;\n        uint128 totalTerminate;\n        uint128 strikePrice;\n        uint16 round;\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\n        bool executed;\n        bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral;\n    }\n\n    struct MaturedState {\n        uint256 releasedDepositAssetAmount;\n        uint256 releasedDepositAssetPremiumAmount;\n        uint256 releasedDepositAssetAmountWithPremium;\n        uint256 releasedCounterPartyAssetAmount;\n        uint256 releasedCounterPartyAssetPremiumAmount;\n        uint256 releasedCounterPartyAssetAmountWithPremium;\n        uint256 autoRollDepositAssetAmount;\n        uint256 autoRollDepositAssetPremiumAmount;\n        uint256 autoRollDepositAssetAmountWithPremium;\n        uint256 autoRollCounterPartyAssetAmount;\n        uint256 autoRollCounterPartyAssetPremiumAmount;\n        uint256 autoRollCounterPartyAssetAmountWithPremium;\n    }\n\n    struct AssetData {\n        uint128 releasedAmount; //debit\n        uint128 depositAmount; //credit\n        int128 leftOverAmount; //history balance\n        /*\n         *  actual balance perspective\n         *  withdrawable = redeemable + released\n         *  balance = withdrawable + leftOver\n         */\n        uint128 balanceAfterSettle;\n        uint128 withdrawableAfterSettle;\n        uint128 traderWithdrawn;\n    }\n\n    struct OptionData {\n        uint128 totalReleasedDepositAssetAmount;\n        uint128 totalReleasedCounterPartyAssetAmount;\n        uint128 assetToTerminateForNextRound;\n        mapping(uint16 => StructureData.OptionState) optionStates;\n        address[] usersInvolved;\n        mapping(address => StructureData.UserState) userStates;\n    }\n\n    struct UserState {\n        uint128 pendingAsset; //for current round\n        uint128 tempLocked; //asset not sent to trader yet, but closed for deposit\n        uint128 ongoingAsset;\n        uint128 assetToTerminate;\n        uint128 assetToTerminateForNextRound;\n        uint128 releasedDepositAssetAmount;\n        uint128 releasedCounterPartyAssetAmount;\n        bool hasState;\n    }\n\n    struct OptionSnapshot {\n        uint128 totalPending;\n        //total tvl = totalLocked + totalTerminating\n        uint128 totalLocked;\n        //only set during settlement\n        uint128 totalTerminating;\n        //amount to terminate in next round,  totalToTerminate <= totalLocked\n        uint128 totalToTerminate;\n        uint128 totalReleasedDeposit;\n        uint128 totalReleasedCounterParty;\n    }\n\n    struct UserBalance {\n        uint128 pendingDepositAssetAmount;\n        //tvl = lockedDepositAssetAmount + terminatingDepositAssetAmount\n        uint128 lockedDepositAssetAmount;\n        //only set during settlement\n        uint128 terminatingDepositAssetAmount;\n        //amount to terminate in next round, toTerminateDepositAssetAmount <= lockedDepositAssetAmount\n        uint128 toTerminateDepositAssetAmount;\n        uint128 releasedDepositAssetAmount;\n        uint128 releasedCounterPartyAssetAmount;\n    }\n    struct OptionPairDefinition {\n        uint8 callOptionId;\n        uint8 putOptionId;\n        uint8 depositAssetAmountDecimals;\n        uint8 counterPartyAssetAmountDecimals;\n        address depositAsset;\n        address counterPartyAsset;\n        bool manualDepositDisabled;\n    }\n    struct SettlementAccountingResult {\n        uint128 depositAmount;\n        uint128 autoRollAmount; //T-1 Carried (filled only when not executed)\n        uint128 autoRollPremium; //Premium (filled only when not executed)\n        //maturedAmount+maturedPremium = requested withdrawal for deposit asset(filled only when not executed and with withdraw request)\n        uint128 releasedAmount;\n        uint128 releasedPremium;\n        //autoRollCounterPartyAmount + autoRollCounterPartyPremium = Execution rolled-out for deposit asset (Execution roll-in for counter party option)\n        //filled only when executed\n        uint128 autoRollCounterPartyAmount;\n        uint128 autoRollCounterPartyPremium;\n        //maturedCounterPartyAmount+maturedCounterPartyPremium= requested withdrawal for couter party asset(filled only when executed and with withdraw request)\n        uint128 releasedCounterPartyAmount;\n        uint128 releasedCounterPartyPremium;  \n        bool executed;\n    }\n\n    enum OptionExecution {\n        NoExecution,\n        ExecuteCall,\n        ExecutePut\n    }\n\n    struct OptionPairExecutionAccountingResult {\n        SettlementAccountingResult callOptionResult;\n        SettlementAccountingResult putOptionResult;\n        OptionExecution execute;\n    }\n\n    struct SettlementCashflowResult {\n        uint128 newDepositAmount;\n        uint128 newReleasedAmount;\n        int128 leftOverAmount; //positive, if trader didn't withdraw last time; negative, if trader failed to send back last time;\n        address contractAddress; //0 for eth\n    }\n}\n"
    },
    "contracts/libraries/Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nlibrary Utils { \n     \n    uint256 public constant RATIOMULTIPLIER = 10000;\n \n     using SafeMath for uint256;\n      function StringConcat(bytes memory _base, bytes memory _value) internal pure returns (string memory) {\n        string memory _tmpValue = new string(_base.length + _value.length);\n        bytes memory _newValue = bytes(_tmpValue);\n\n        uint i;\n        uint j;\n\n        for(i=0; i<_base.length; i++) {\n            _newValue[j++] = _base[i];\n        }\n\n        for(i=0; i<_value.length; i++) {\n            _newValue[j++] = _value[i++];\n        }\n\n        return string(_newValue);\n    }\n\n    function Uint8Sub(uint8 a, uint8 b) internal pure returns (uint8) {\n        require(b <= a);\n        return a - b;\n    }\n    \n \n    function getAmountToTerminate(uint256 _maturedAmount, uint256 _assetToTerminate, uint256 _assetAmount) \n    internal pure returns(uint256) {\n       if (_assetToTerminate == 0 || _assetAmount == 0 || _maturedAmount == 0) return 0;\n       return _assetToTerminate >= _assetAmount ?  _maturedAmount  : _maturedAmount.mul(_assetToTerminate).div(_assetAmount);\n   }\n\n   function withPremium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\n       return  _baseAmount.mul(RATIOMULTIPLIER + _premimumRate).div(RATIOMULTIPLIER);\n   }\n   \n   function premium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\n       return   _baseAmount.mul(_premimumRate).div(RATIOMULTIPLIER);\n   }\n   \n   function subOrZero(uint256 _base, uint256 _substractor) internal pure returns (uint256) {\n       return _base >= _substractor ? _base - _substractor : 0;\n   }\n  \n    /*function assertUint104(uint256 num) internal pure {\n        require(num <= type(uint104).max, \"Overflow uint104\");\n    }\n\n    function assertUint128(uint256 num) internal pure {\n        require(num <= type(uint128).max, \"Overflow uint128\");\n    }*/\n\n}"
    },
    "contracts/libraries/OptionLifecycle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./Utils.sol\";\nimport \"./StructureData.sol\";\n//import \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nlibrary OptionLifecycle {\n    using SafeERC20 for IERC20;\n    using Utils for uint128;\n    using Utils for uint256;\n    using SafeMath for uint256;\n    using SafeCast for uint256;\n    using StructureData for StructureData.UserState;\n\n    function deriveVirtualLocked(\n        StructureData.UserState memory userState,\n        uint16 premiumRate\n    ) internal pure returns (uint256) {\n        uint256 onGoing = uint256(userState.ongoingAsset);\n        if (onGoing == 0) {\n            return uint256(userState.tempLocked);\n        }\n        onGoing = (onGoing.sub(userState.assetToTerminate)).withPremium(\n            premiumRate\n        );\n        if (userState.tempLocked == 0) {\n            return onGoing;\n        }\n        return uint256(userState.tempLocked).add(onGoing);\n    }\n\n    function getAvailableBalance(address _asset, address _source)\n        external\n        view\n        returns (uint256)\n    {\n        if (_asset != address(0)) {\n            return IERC20(_asset).balanceOf(_source);\n        } else {\n            return _source.balance;\n        }\n    }\n\n    function withdraw(\n        address _target,\n        uint256 _amount,\n        address _contractAddress\n    ) external {\n        require(_amount > 0, \"!_amount\");\n        if (_contractAddress == address(0)) {\n            payable(_target).transfer(_amount);\n        } else {\n            IERC20(_contractAddress).safeTransfer(_target, _amount);\n        }\n    }\n\n    function calculateMaturity(\n        bool _execute,\n        StructureData.OptionState memory _optionState,\n        bool _callOrPut,\n        uint8 _depositAssetAmountDecimals,\n        uint8 _counterPartyAssetAmountDecimals\n    ) public pure returns (StructureData.MaturedState memory) {\n        StructureData.MaturedState memory state = StructureData.MaturedState({\n            releasedDepositAssetAmount: 0,\n            releasedDepositAssetPremiumAmount: 0,\n            releasedDepositAssetAmountWithPremium: 0,\n            autoRollDepositAssetAmount: 0,\n            autoRollDepositAssetPremiumAmount: 0,\n            autoRollDepositAssetAmountWithPremium: 0,\n            releasedCounterPartyAssetAmount: 0,\n            releasedCounterPartyAssetPremiumAmount: 0,\n            releasedCounterPartyAssetAmountWithPremium: 0,\n            autoRollCounterPartyAssetAmount: 0,\n            autoRollCounterPartyAssetPremiumAmount: 0,\n            autoRollCounterPartyAssetAmountWithPremium: 0\n        });\n        if (_execute) {\n            uint256 maturedCounterPartyAssetAmount = \n                _callOrPut\n                    ? uint256(_optionState.totalAmount)\n                        .mul(_optionState.strikePrice)\n                        .mul(10**_counterPartyAssetAmountDecimals)\n                        .div(\n                            10 **\n                                (StructureData.PRICE_PRECISION +\n                                    _depositAssetAmountDecimals)\n                        )\n                    : uint256(_optionState.totalAmount)\n                        .mul(\n                            10 **\n                                (StructureData.PRICE_PRECISION +\n                                    _counterPartyAssetAmountDecimals)\n                        )\n                        .div(_optionState.strikePrice)\n                        .div(10**_depositAssetAmountDecimals);\n\n            uint256 maturedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetAmount\n                    .premium(_optionState.premiumRate);\n            if (_optionState.totalTerminate > 0) {\n                state\n                    .releasedCounterPartyAssetAmount = maturedCounterPartyAssetAmount\n                    .getAmountToTerminate(\n                        _optionState.totalTerminate,\n                        _optionState.totalAmount\n                    );\n                state\n                    .releasedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetPremiumAmount\n                    .getAmountToTerminate(\n                        _optionState.totalTerminate,\n                        _optionState.totalAmount\n                    );\n                state.releasedCounterPartyAssetAmountWithPremium =\n                    state.releasedCounterPartyAssetAmount.add(\n                    state.releasedCounterPartyAssetPremiumAmount);\n            }\n            state.autoRollCounterPartyAssetAmount =\n                maturedCounterPartyAssetAmount.sub(\n                state.releasedCounterPartyAssetAmount);\n            state.autoRollCounterPartyAssetPremiumAmount =\n                maturedCounterPartyAssetPremiumAmount.sub(\n                state.releasedCounterPartyAssetPremiumAmount);\n            state.autoRollCounterPartyAssetAmountWithPremium =\n                state.autoRollCounterPartyAssetAmount.add(\n                state.autoRollCounterPartyAssetPremiumAmount);\n        } else {\n            uint256 maturedDepositAssetAmount = uint256(_optionState.totalAmount);\n            uint256 maturedDepositAssetPremiumAmount = maturedDepositAssetAmount\n                .premium(_optionState.premiumRate);\n            if (_optionState.totalTerminate > 0) {\n                state.releasedDepositAssetAmount = maturedDepositAssetAmount\n                    .getAmountToTerminate(\n                        _optionState.totalTerminate,\n                        _optionState.totalAmount\n                    );\n                state\n                    .releasedDepositAssetPremiumAmount = maturedDepositAssetPremiumAmount\n                    .getAmountToTerminate(\n                        _optionState.totalTerminate,\n                        _optionState.totalAmount\n                    );\n                state.releasedDepositAssetAmountWithPremium =\n                    state.releasedDepositAssetAmount.add(\n                    state.releasedDepositAssetPremiumAmount);\n            }\n            state.autoRollDepositAssetAmount =\n                maturedDepositAssetAmount.sub(\n                state.releasedDepositAssetAmount);\n            state.autoRollDepositAssetPremiumAmount =\n                maturedDepositAssetPremiumAmount.sub(\n                state.releasedDepositAssetPremiumAmount);\n            state.autoRollDepositAssetAmountWithPremium =\n                state.autoRollDepositAssetAmount.add(\n                state.autoRollDepositAssetPremiumAmount);\n        }\n        return state;\n    }\n\n    function commitByOption(\n        StructureData.OptionData storage _option,\n        uint16 _roundToCommit\n    ) external {\n        uint256 userCount = _option.usersInvolved.length;\n        for (uint256 i = 0; i < userCount; i++) {\n            StructureData.UserState storage userState = _option.userStates[\n                _option.usersInvolved[i]\n            ];\n            if (userState.assetToTerminateForNextRound != 0) {\n                userState.assetToTerminate = userState\n                    .assetToTerminateForNextRound;\n                userState.assetToTerminateForNextRound = 0;\n            } else if (userState.assetToTerminate != 0) {\n                userState.assetToTerminate = 0;\n            }\n            if (userState.tempLocked == 0) {\n                userState.ongoingAsset = 0;\n                continue;\n            }\n            userState.ongoingAsset = userState.tempLocked;\n            userState.tempLocked = 0;\n        } \n        _option.optionStates[_roundToCommit].totalTerminate = uint256(_option\n            .optionStates[_roundToCommit]\n            .totalTerminate)\n            .add(_option.assetToTerminateForNextRound).toUint128();\n        _option.assetToTerminateForNextRound = 0;\n    }\n\n    function rollToNextByOption(\n        StructureData.OptionData storage _option,\n        uint16 _currentRound,\n        bool _callOrPut\n    ) external returns (uint128 _pendingAmount) { \n        StructureData.OptionState memory currentOption = StructureData\n            .OptionState({\n                round: _currentRound,\n                totalAmount: 0,\n                totalTerminate: 0,\n                premiumRate: 0,\n                strikePrice: 0,\n                executed: false,\n                callOrPut: _callOrPut\n            });\n        _option.optionStates[_currentRound] = currentOption;\n        if (_currentRound > 1) {\n            uint256 userCount = _option.usersInvolved.length;\n            for (uint256 i = 0; i < userCount; i++) {\n                StructureData.UserState storage userState = _option.userStates[\n                    _option.usersInvolved[i]\n                ];\n                if (userState.pendingAsset != 0) {\n                    userState.tempLocked = userState.pendingAsset;\n                }\n                userState.pendingAsset = 0;\n            }\n        } \n        return\n            _currentRound > 1\n                ? _option.optionStates[_currentRound - 1].totalAmount\n                : 0;\n    }\n\n    function dryRunSettlementByOption(\n        StructureData.OptionData storage _option,\n        bool _isCall,\n        uint8 _depositAssetAmountDecimals,\n        uint8 _counterPartyAssetAmountDecimals,\n        uint16 _currentRound,\n        bool _execute\n    )\n        external\n        view\n        returns (StructureData.SettlementAccountingResult memory _result)\n    {\n        StructureData.SettlementAccountingResult memory result = StructureData\n            .SettlementAccountingResult({ \n                depositAmount: _option\n                    .optionStates[_currentRound - 1]\n                    .totalAmount,\n                executed: _execute,\n                autoRollAmount: 0,\n                autoRollPremium: 0,\n                releasedAmount: 0,\n                releasedPremium: 0,\n                autoRollCounterPartyAmount: 0,\n                autoRollCounterPartyPremium: 0,\n                releasedCounterPartyAmount: 0,\n                releasedCounterPartyPremium: 0\n            });\n        if (_currentRound > 2) {\n            StructureData.OptionState storage previousOptionState = _option\n                .optionStates[_currentRound - 2];\n            if (previousOptionState.totalAmount == 0) {\n                return result;\n            }\n            StructureData.MaturedState memory maturedState = calculateMaturity(\n                _execute,\n                previousOptionState,\n                _isCall,\n                _depositAssetAmountDecimals,\n                _counterPartyAssetAmountDecimals\n            );\n            if (_execute) {\n                result.autoRollCounterPartyAmount = maturedState\n                    .autoRollCounterPartyAssetAmount.toUint128();\n                result.autoRollCounterPartyPremium = maturedState\n                    .autoRollCounterPartyAssetPremiumAmount.toUint128();\n                result.releasedCounterPartyAmount = maturedState\n                    .releasedCounterPartyAssetAmount.toUint128();\n                result.releasedCounterPartyPremium = maturedState\n                    .releasedCounterPartyAssetPremiumAmount.toUint128();\n            } else {\n                result.autoRollAmount = maturedState.autoRollDepositAssetAmount.toUint128();\n                result.autoRollPremium = maturedState\n                    .autoRollDepositAssetPremiumAmount.toUint128();\n                result.releasedAmount = maturedState.releasedDepositAssetAmount.toUint128();\n                result.releasedPremium = maturedState\n                    .releasedDepositAssetPremiumAmount.toUint128();\n            }\n        }\n        return result;\n    }\n\n    function closePreviousByOption(\n        StructureData.OptionData storage _option,\n        StructureData.OptionState storage previousOptionState,\n        bool _isCall,\n        uint8 _depositAssetAmountDecimals,\n        uint8 _counterPartyAssetAmountDecimals,\n        bool _execute\n    ) external returns (StructureData.MaturedState memory _maturedState) {\n        //uint16 maturedRound = currentRound - 2;\n        StructureData.MaturedState memory maturedState = calculateMaturity(\n            _execute,\n            previousOptionState,\n            _isCall,\n            _depositAssetAmountDecimals,\n            _counterPartyAssetAmountDecimals\n        );\n        previousOptionState.executed = _execute;\n\n        if (_execute) {\n            _option.totalReleasedCounterPartyAssetAmount =uint256(_option\n                .totalReleasedCounterPartyAssetAmount)\n                .add(maturedState.releasedCounterPartyAssetAmountWithPremium).toUint128();\n        } else {\n            _option.totalReleasedDepositAssetAmount = uint256(_option\n                .totalReleasedDepositAssetAmount)\n                .add(maturedState.releasedDepositAssetAmountWithPremium).toUint128();\n        }\n        return maturedState;\n    }\n    /*\n        struct OptionParameters { \n        uint128 strikePrice; // strike price if executed\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\n    }\n*/\n    function setOptionParameters(uint256 _parameters, StructureData.OptionState storage _optionState) external {\n \n        require(_optionState.strikePrice == 0); \n        _optionState.strikePrice = uint128(_parameters >> 16);\n        _optionState.premiumRate = uint16(_parameters & 0xffff);     \n    }\n    function getAccountBalance(\n        StructureData.OptionData storage _option,\n        address _user,\n        bool _underSettlement,\n        uint16 _currentRound\n    ) external view returns (StructureData.UserBalance memory) {\n        StructureData.UserState storage userState = _option.userStates[_user];\n\n        StructureData.UserBalance memory result = StructureData.UserBalance({\n            pendingDepositAssetAmount: userState.pendingAsset,\n            releasedDepositAssetAmount: userState.releasedDepositAssetAmount,\n            releasedCounterPartyAssetAmount: userState\n                .releasedCounterPartyAssetAmount,\n            lockedDepositAssetAmount: 0,\n            terminatingDepositAssetAmount: 0,\n            toTerminateDepositAssetAmount: 0\n        });\n        if (_underSettlement) {\n            if (_currentRound > 2) {\n                //when there are maturing round waiting for settlement, it becomes complex\n                uint16 premiumRate = _option\n                    .optionStates[_currentRound - 2]\n                    .premiumRate;\n                result.lockedDepositAssetAmount = deriveVirtualLocked(\n                    userState,\n                    premiumRate\n                ).toUint128();\n                result.terminatingDepositAssetAmount = uint256(userState\n                    .assetToTerminate)\n                    .withPremium(premiumRate).toUint128();\n            } else {\n                result.lockedDepositAssetAmount = userState.tempLocked;\n            }\n            result.toTerminateDepositAssetAmount = userState\n                    .assetToTerminateForNextRound;\n        } else {\n            result.lockedDepositAssetAmount = userState.ongoingAsset;\n            result.toTerminateDepositAssetAmount = userState.assetToTerminate;\n        }\n        return result;\n    }\n\n    function getOptionSnapShot(\n        StructureData.OptionData storage _option,\n        bool _underSettlement,\n        uint16 _currentRound\n    ) external view returns (StructureData.OptionSnapshot memory) {\n        StructureData.OptionState memory lockedOption;\n        StructureData.OptionState memory onGoingOption;\n        StructureData.OptionSnapshot memory result = StructureData\n            .OptionSnapshot({\n                totalPending: _option.optionStates[_currentRound].totalAmount,\n                totalReleasedDeposit: _option.totalReleasedDepositAssetAmount,\n                totalReleasedCounterParty: _option\n                    .totalReleasedCounterPartyAssetAmount,\n                totalLocked: 0,\n                totalTerminating: 0,\n                totalToTerminate: 0\n            });\n        if (_underSettlement) {\n            lockedOption = _option.optionStates[_currentRound - 1];\n            result.totalToTerminate = _option.assetToTerminateForNextRound;\n            if (_currentRound > 2) {\n                //when there are maturing round waiting for settlement, it becomes complex\n                onGoingOption = _option.optionStates[_currentRound - 2];\n                result.totalTerminating = uint256(onGoingOption\n                    .totalTerminate)\n                    .withPremium(onGoingOption.premiumRate).toUint128();\n                result.totalLocked = uint256(lockedOption\n                    .totalAmount)\n                    .add(\n                        onGoingOption.totalAmount.withPremium(\n                            onGoingOption.premiumRate\n                        )\n                    )\n                    .sub(result.totalTerminating).toUint128();\n            } else {\n                result.totalLocked = lockedOption.totalAmount;\n            }\n        } else if (_currentRound > 1) {\n            onGoingOption = _option.optionStates[_currentRound - 1];\n            result.totalLocked = onGoingOption.totalAmount;\n            result.totalToTerminate = onGoingOption.totalTerminate;\n        }\n        return result;\n    }\n\n    function initiateWithrawStorage(\n        StructureData.OptionData storage _option,\n        address _user,\n        uint256 _assetToTerminate,\n        bool _underSettlement,\n        uint16 _currentRound\n    ) external {\n        StructureData.UserState storage userState = _option.userStates[_user];\n        if (_underSettlement) {\n            uint256 newAssetToTerminate = uint256(userState\n                .assetToTerminateForNextRound)\n                .add(_assetToTerminate);\n            if (_currentRound == 2) {\n                require(newAssetToTerminate <= userState.tempLocked);\n                StructureData.OptionState storage previousOption = _option\n                    .optionStates[_currentRound - 1];\n                previousOption.totalTerminate = uint256(previousOption\n                    .totalTerminate)\n                    .add(_assetToTerminate).toUint128();\n            } else {\n                StructureData.OptionState storage onGoingOption = _option\n                    .optionStates[_currentRound - 2];\n                uint256 totalLocked = deriveVirtualLocked(\n                    userState,\n                    onGoingOption.premiumRate\n                );\n                require(newAssetToTerminate <= totalLocked);\n                //store temporarily\n                _option.assetToTerminateForNextRound = uint256(_option\n                    .assetToTerminateForNextRound)\n                    .add(_assetToTerminate).toUint128();\n            }\n            userState.assetToTerminateForNextRound = newAssetToTerminate.toUint128();\n        } else {\n            uint256 newAssetToTerminate = uint256(userState.assetToTerminate).add(\n                _assetToTerminate\n            );\n            require(newAssetToTerminate <= userState.ongoingAsset);\n            userState.assetToTerminate = newAssetToTerminate.toUint128();\n            StructureData.OptionState storage previousOption = _option\n                .optionStates[_currentRound - 1];\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).add(\n                _assetToTerminate\n            ).toUint128();\n        }\n    }\n\n    function cancelWithdrawStorage(\n        StructureData.OptionData storage _option,\n        address _user,\n        uint256 _assetToTerminate,\n        bool _underSettlement,\n        uint16 _currentRound\n    ) external {\n        StructureData.UserState storage userState = _option.userStates[_user];\n        if (_underSettlement) {\n            userState.assetToTerminateForNextRound = uint256(userState\n                .assetToTerminateForNextRound)\n                .sub(_assetToTerminate).toUint128();\n            if (_currentRound == 2) {\n                StructureData.OptionState storage previousOption = _option\n                    .optionStates[_currentRound - 1];\n                previousOption.totalTerminate = uint256(previousOption\n                    .totalTerminate)\n                    .sub(_assetToTerminate).toUint128();\n            } else {\n                //store temporarily\n                _option.assetToTerminateForNextRound = uint256(_option\n                    .assetToTerminateForNextRound)\n                    .sub(_assetToTerminate).toUint128();\n            }\n        } else {\n            userState.assetToTerminate = uint256(userState.assetToTerminate).sub(\n                _assetToTerminate\n            ).toUint128();\n            StructureData.OptionState storage previousOption = _option\n                .optionStates[_currentRound - 1];\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).sub(\n                _assetToTerminate\n            ).toUint128();\n        }\n    }\n\n    function withdrawStorage(\n        StructureData.OptionData storage _option,\n        address _user,\n        uint256 _amount,\n        uint16 _currentRound,\n        bool _isDeposit\n    ) external {\n        //require(_amount > 0, \"!amount\");\n        StructureData.UserState storage userState = _option.userStates[_user];\n        if (_isDeposit) {\n            //todo: 0 out released amount if missing balance from trader\n            uint256 releasedAmount = uint256(userState.releasedDepositAssetAmount);\n            if (releasedAmount <= _amount) {\n                uint256 redeemAmount = _amount.sub(releasedAmount);\n                userState.pendingAsset = uint256(userState.pendingAsset).sub(\n                    redeemAmount\n                ).toUint128();\n                userState.releasedDepositAssetAmount = 0;\n                _option.totalReleasedDepositAssetAmount = uint256(_option\n                    .totalReleasedDepositAssetAmount)\n                    .sub(releasedAmount).toUint128();\n                StructureData.OptionState storage optionState = _option\n                    .optionStates[_currentRound];\n                optionState.totalAmount = uint256(optionState.totalAmount).sub(\n                    redeemAmount\n                ).toUint128();\n            } else {\n                userState.releasedDepositAssetAmount = releasedAmount.sub(\n                    _amount\n                ).toUint128();\n                _option.totalReleasedDepositAssetAmount = uint256(_option\n                    .totalReleasedDepositAssetAmount)\n                    .sub(_amount).toUint128();\n            }\n        } else {\n            //same result as completeWithdraw\n            userState.releasedCounterPartyAssetAmount = uint256(userState\n                .releasedCounterPartyAssetAmount)\n                .sub(_amount).toUint128();\n            _option.totalReleasedCounterPartyAssetAmount = uint256(_option\n                .totalReleasedCounterPartyAssetAmount)\n                .sub(_amount).toUint128();\n        }\n    }\n\n    function depositFor(\n        StructureData.OptionData storage _option,\n        address _userAddress,\n        uint256 _amount,\n        uint256 _toTerminate,\n        uint16 _round,\n        bool _isOpenRound\n    ) external {\n        //require(optionState.totalAmount + (_amount) <= quota[_optionId], \"Not enough quota\");\n\n        StructureData.OptionState storage optionState = _option.optionStates[\n            _round\n        ];\n        StructureData.UserState storage userState = _option.userStates[\n            _userAddress\n        ];\n        //first time added\n        if (!userState.hasState) {\n            userState.hasState = true;\n            _option.usersInvolved.push(_userAddress);\n        }\n        if (!_isOpenRound) {\n            userState.tempLocked = uint256(userState.tempLocked).add(_amount).toUint128();\n            if (_toTerminate > 0) {\n                userState.assetToTerminateForNextRound = uint256(userState\n                    .assetToTerminateForNextRound)\n                    .add(_toTerminate).toUint128();\n                _option.assetToTerminateForNextRound = uint256(_option\n                    .assetToTerminateForNextRound)\n                    .add(_toTerminate).toUint128();\n            }\n        } else {\n            userState.pendingAsset = uint256(userState.pendingAsset).add(_amount).toUint128();\n        }\n        optionState.totalAmount = uint256(optionState.totalAmount).add(_amount).toUint128();\n    }\n}\n"
    },
    "contracts/interfaces/IPKKTStructureOption.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.4;\nimport {StructureData} from \"../libraries/StructureData.sol\";\n \ninterface IPKKTStructureOption {\n \n     event Deposit(uint8 indexed optionId, address indexed account, uint16 indexed round, uint256 amount);\n     event Withdraw(uint8 indexed optionId, address indexed account, address indexed asset, uint256 amount);\n     //event CloseOption(uint8 indexed optionId, uint16 indexed round);\n     //event CommitOption(uint8 indexed optionId, uint16 indexed round);\n     //event OpenOption(uint8 indexed optionId, uint16 indexed round);\n     //event OptionCreated(uint8 indexed optionId, string name);\n     //event OptionTransfer(uint8 indexed optionId, address indexed account, uint16 premium, uint16 round);\n\n    function getAccountBalance(uint8 _optionId) external view returns (StructureData.UserBalance memory); \n\n    //ISettlementAggregator.balanceEnough needs to be called if there is any release amount\n    function getOptionSnapShot(uint8 _optionId) external view returns(StructureData.OptionSnapshot memory); \n\n    //deposit eth\n    function depositETH(uint8 _optionId) external payable;\n\n    //deposit other erc20 coin, take wbtc or stable coin\n    function deposit(uint8 _optionId, uint256 _amount) external;\n\n    //complete withdraw happens on the option vault\n    function initiateWithraw(uint8 _optionId, uint256 _assetToTerminate) external; \n\n    function cancelWithdraw(uint8 _optionId, uint256 _assetToTerminate) external;\n \n    \n    function withdraw(uint8 _optionId, uint256 _amount, address _asset) external; \n \n \n\n    //used to render the history at client side, reading the minting transactions of a specific address,\n    //for each transaction, read the blockheight and call this method to get the result\n    //the blockheight is the the height when the round is committed \n    //function getRoundDataByBlock(uint8 _optionId, uint256 _blockHeight) external view returns(StructureData.OptionState memory);\n\n    function getOptionStateByRound(uint8 _optionId, uint16 _round) external view returns(StructureData.OptionState memory);\n \n}\n\n"
    },
    "contracts/OptionVaultBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\"; \n//import \"hardhat/console.sol\";\n\nimport {StructureData} from \"./libraries/StructureData.sol\";\nimport {Utils} from \"./libraries/Utils.sol\";\nimport {OptionLifecycle} from \"./libraries/OptionLifecycle.sol\";\nimport {OptionVaultStorage} from \"./storage/OptionVaultStorage.sol\";\nimport \"./interfaces/ISettlementAggregator.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nabstract contract OptionVaultBase is\n    OptionVaultStorage, \n    ISettlementAggregator\n{\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using Utils for uint256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    event SettlerChanged(address indexed previousSettler, address indexed newSettler); \n\n\n    function clientWithdraw(\n        address _target,\n        uint256 _amount,\n        address _contractAddress,\n        bool _redeem\n    ) internal lock {\n        if (!_redeem) {\n            require(balanceEnough(_contractAddress));\n        }\n        OptionLifecycle.withdraw(_target, _amount, _contractAddress);\n    }\n    function setSettlerInternal(address _settler) internal {\n        address oldSettlerAddress = settlerRoleAddress;\n        settlerRoleAddress = _settler;\n        emit SettlerChanged(oldSettlerAddress, _settler);\n    }  \n    function addOptionPairsInternal(\n        StructureData.OptionPairDefinition[] memory _optionPairDefinitions\n    ) internal { \n        uint256 length = _optionPairDefinitions.length;\n        uint8 optionPairCount_ = optionPairCount;\n        uint8 assetCount_ = assetCount;\n        for (uint256 i = 0; i < length; i++) {\n            StructureData.OptionPairDefinition\n                memory pair = _optionPairDefinitions[i];\n            pair.callOptionId = optionPairCount_ * 2 + 1;\n            pair.putOptionId = pair.callOptionId + 1;\n            optionPairs[optionPairCount_++] = pair;\n            if (assetCount_ == 0) {\n                asset[assetCount_++] = pair.depositAsset;\n                asset[assetCount_++] = pair.counterPartyAsset;\n            } else {\n                bool callAdded = false;\n                bool putAdded = false;\n                for (uint8 j = 0; j < assetCount_; j++) {\n                    if (asset[j] == pair.depositAsset) {\n                        callAdded = true;\n                    }\n                    if (asset[j] == pair.counterPartyAsset) {\n                        putAdded = true;\n                    }\n                }\n                if (!callAdded) {\n                    asset[assetCount_++] = pair.depositAsset;\n                }\n                if (!putAdded) {\n                    asset[assetCount_++] = pair.counterPartyAsset;\n                }\n            }\n        }\n        optionPairCount = optionPairCount_;\n        assetCount = assetCount_;\n    }\n\n\n    function toggleOptionPairDeposit(uint8 _pairId) external override settlerOnly {\n        StructureData.OptionPairDefinition storage pair = optionPairs[_pairId];\n        pair.manualDepositDisabled = !pair.manualDepositDisabled;\n    }\n    \n    function initiateSettlement() external override settlerOnly { \n        require(!underSettlement);\n        currentRound = currentRound + 1;\n        underSettlement = true;\n        for (uint8 i = 0; i < optionPairCount; i++) {\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\n            StructureData.OptionData storage callOption = optionData[\n                pair.callOptionId\n            ];\n            uint128 pending1 = OptionLifecycle.rollToNextByOption(\n                callOption,\n                currentRound,\n                true\n            );\n            StructureData.OptionData storage putOption = optionData[\n                pair.putOptionId\n            ];\n            uint128 pending2 = OptionLifecycle.rollToNextByOption(\n                putOption,\n                currentRound,\n                false\n            );\n            if (pending1 > 0) {\n                assetData[pair.depositAsset].depositAmount = uint256(assetData[\n                    pair.depositAsset\n                ].depositAmount).add(pending1).toUint128();\n            }\n            if (pending2 > 0) {\n                assetData[pair.counterPartyAsset].depositAmount = uint256(assetData[\n                    pair.counterPartyAsset\n                ].depositAmount).add(pending2).toUint128();\n            }\n            if (currentRound <= 2) {\n                continue;\n            }\n\n            StructureData.SettlementAccountingResult\n                memory noneExecuteCallOption = OptionLifecycle\n                    .dryRunSettlementByOption(\n                        callOption, \n                        true,\n                        pair.depositAssetAmountDecimals,\n                        pair.counterPartyAssetAmountDecimals,\n                        currentRound,\n                        false\n                    );\n            StructureData.SettlementAccountingResult\n                memory noneExecutePutOption = OptionLifecycle\n                    .dryRunSettlementByOption(\n                        putOption, \n                        false,\n                        pair.counterPartyAssetAmountDecimals,\n                        pair.depositAssetAmountDecimals,\n                        currentRound,\n                        false\n                    );\n\n            StructureData.OptionPairExecutionAccountingResult\n                memory pairResult = StructureData\n                    .OptionPairExecutionAccountingResult({\n                        execute: StructureData.OptionExecution.NoExecution,\n                        callOptionResult: noneExecuteCallOption,\n                        putOptionResult: noneExecutePutOption\n                    });\n            executionAccountingResult[i * 3] = pairResult;\n            StructureData.SettlementAccountingResult\n                memory executeCallOption = OptionLifecycle\n                    .dryRunSettlementByOption(\n                        callOption, \n                        true,\n                        pair.depositAssetAmountDecimals,\n                        pair.counterPartyAssetAmountDecimals,\n                        currentRound,\n                        true\n                    );\n            pairResult = StructureData.OptionPairExecutionAccountingResult({\n                execute: StructureData.OptionExecution.ExecuteCall,\n                callOptionResult: executeCallOption,\n                putOptionResult: noneExecutePutOption\n            });\n            executionAccountingResult[i * 3 + 1] = pairResult;\n\n            StructureData.SettlementAccountingResult\n                memory executePutOption = OptionLifecycle\n                    .dryRunSettlementByOption(\n                        putOption, \n                        false,\n                        pair.counterPartyAssetAmountDecimals,\n                        pair.depositAssetAmountDecimals,\n                        currentRound,\n                        true\n                    );\n            pairResult = StructureData.OptionPairExecutionAccountingResult({\n                execute: StructureData.OptionExecution.ExecutePut,\n                callOptionResult: noneExecuteCallOption,\n                putOptionResult: executePutOption\n            });\n            executionAccountingResult[i * 3 + 2] = pairResult;\n        }\n\n        if (currentRound == 1) {\n            underSettlement = false;\n            return;\n        }\n        if (currentRound == 2) {\n            for(uint8 i = 1; i <= optionPairCount * 2; i++) { \n                OptionLifecycle.commitByOption(optionData[i], 1); \n            }            \n            updateAsset();\n            underSettlement = false;\n        }\n    }\n\n    function settle(StructureData.OptionExecution[] memory _execution)\n        external\n        override \n        settlerOnly\n    { \n        require(underSettlement);\n        uint256 count = _execution.length;\n        require(count == optionPairCount);\n        uint16 previousRound = currentRound - 1;\n        for (uint8 i = 0; i < count; i++) {\n            StructureData.OptionExecution execution = _execution[i];\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\n\n            StructureData.OptionData storage callOption = optionData[\n                pair.callOptionId\n            ];\n            StructureData.OptionData storage putOption = optionData[\n                pair.putOptionId\n            ];\n            StructureData.MaturedState memory maturedState;\n            StructureData.OptionState\n                storage previousCallOptionState = callOption.optionStates[\n                    previousRound - 1\n                ];\n            if (previousCallOptionState.totalAmount > 0) { \n                maturedState = OptionLifecycle.closePreviousByOption(\n                    callOption,\n                    previousCallOptionState,\n                    true,\n                    pair.depositAssetAmountDecimals,\n                    pair.counterPartyAssetAmountDecimals,\n                    execution == StructureData.OptionExecution.ExecuteCall\n                );\n                if (maturedState.releasedDepositAssetAmount > 0) {\n                    assetData[pair.depositAsset].releasedAmount = uint256(assetData[\n                        pair.depositAsset\n                    ].releasedAmount).add(\n                            maturedState.releasedDepositAssetAmountWithPremium\n                        ).toUint128();\n                } else if (maturedState.releasedCounterPartyAssetAmount > 0) {\n                    assetData[pair.counterPartyAsset]\n                        .releasedAmount = uint256(assetData[pair.counterPartyAsset]\n                        .releasedAmount)\n                        .add(\n                            maturedState\n                                .releasedCounterPartyAssetAmountWithPremium\n                        ).toUint128();\n                }\n                if (execution == StructureData.OptionExecution.ExecuteCall) {\n                    autoRollToCounterPartyByOption(\n                        callOption,\n                        previousCallOptionState,\n                        putOption,\n                        pair.putOptionId,\n                        maturedState.releasedCounterPartyAssetAmountWithPremium,\n                        maturedState.autoRollCounterPartyAssetAmountWithPremium\n                    );\n                } else {\n                    autoRollByOption(\n                        callOption,\n                        pair.callOptionId,\n                        previousCallOptionState,\n                        maturedState.releasedDepositAssetAmountWithPremium,\n                        maturedState.autoRollDepositAssetAmountWithPremium\n                    );\n                }\n            }\n\n            StructureData.OptionState storage previousPutOptionState = putOption\n                .optionStates[previousRound - 1];\n\n            if (previousPutOptionState.totalAmount > 0) { \n                maturedState = OptionLifecycle.closePreviousByOption(\n                    putOption,\n                    previousPutOptionState,\n                    false,\n                    pair.counterPartyAssetAmountDecimals,\n                    pair.depositAssetAmountDecimals,\n                    execution == StructureData.OptionExecution.ExecutePut\n                );\n                if (maturedState.releasedDepositAssetAmount > 0) {\n                    assetData[pair.counterPartyAsset]\n                        .releasedAmount = uint256(assetData[pair.counterPartyAsset]\n                        .releasedAmount)\n                        .add(\n                            maturedState.releasedDepositAssetAmountWithPremium\n                        ).toUint128();\n                } else if (maturedState.releasedCounterPartyAssetAmount > 0) {\n                    assetData[pair.depositAsset].releasedAmount = uint256(assetData[\n                        pair.depositAsset\n                    ].releasedAmount).add(\n                            maturedState\n                                .releasedCounterPartyAssetAmountWithPremium\n                        ).toUint128();\n                }\n                if (execution == StructureData.OptionExecution.ExecutePut) {\n                    autoRollToCounterPartyByOption(\n                        putOption,\n                        previousPutOptionState,\n                        callOption,\n                        pair.callOptionId,\n                        maturedState.releasedCounterPartyAssetAmountWithPremium,\n                        maturedState.autoRollCounterPartyAssetAmountWithPremium\n                    );\n                } else {\n                    autoRollByOption(\n                        putOption,\n                        pair.putOptionId,\n                        previousPutOptionState,\n                        maturedState.releasedDepositAssetAmountWithPremium,\n                        maturedState.autoRollDepositAssetAmountWithPremium\n                    );\n                }\n            }\n            OptionLifecycle.commitByOption(callOption, previousRound);\n            OptionLifecycle.commitByOption(putOption, previousRound);\n        }\n\n        updateAsset();\n        underSettlement = false;\n    }\n\n    function updateAsset() private {\n        for (uint8 i = 0; i < assetCount; i++) {\n            address assetAddress = asset[i];\n            StructureData.AssetData storage assetSubData = assetData[\n                assetAddress\n            ];\n            //no snaphot previously, so, no balance change\n            //todo: room for gas improvement\n            int128 leftOver = assetSubData.leftOverAmount +\n                (\n                    currentRound == 2\n                        ? int128(0)\n                        : (int128(getBalanceChange(assetAddress)) -\n                            int128(assetSubData.depositAmount) +\n                            int128(assetSubData.releasedAmount))\n                );\n\n            assetSubData.traderWithdrawn = 0;\n            assetSubData.balanceAfterSettle = OptionLifecycle.getAvailableBalance(assetAddress, address(this)).toUint128();\n            assetSubData.withdrawableAfterSettle = collectWithdrawable(\n                assetAddress\n            ).toUint128();\n            StructureData.SettlementCashflowResult\n                memory instruction = StructureData.SettlementCashflowResult({\n                    newReleasedAmount: assetSubData.releasedAmount,\n                    newDepositAmount: assetSubData.depositAmount,\n                    leftOverAmount: leftOver,\n                    contractAddress: assetAddress\n                });\n            settlementCashflowResult[assetAddress] = instruction;\n            //todo: check overflow\n            assetSubData.leftOverAmount =\n                int128(leftOver +\n                int128(assetSubData.depositAmount) -\n                int128(assetSubData.releasedAmount));\n            assetSubData.depositAmount = 0;\n            assetSubData.releasedAmount = 0;\n        }\n    }\n\n    function setOptionParameters(\n        uint256[] memory _parameters\n    ) external override settlerOnly { \n        uint256 count = _parameters.length; \n        require(!underSettlement);\n        require(currentRound > 1);\n        require(count == optionPairCount*2);\n        for (uint8 i = 0; i < count; i++) {\n            uint256 parameter = _parameters[i];\n            StructureData.OptionState storage optionState = optionData[i+1].optionStates[currentRound - 1];\n            OptionLifecycle.setOptionParameters(parameter, optionState); \n        }\n    }\n\n    //todo: whitelist\n    function withdrawAsset(address _trader, address _asset) external override lock settlerOnly { \n        StructureData.AssetData storage assetSubData = assetData[_asset];\n        require(assetSubData.leftOverAmount > 0); \n        uint128 balance = uint128(assetSubData.leftOverAmount);\n        OptionLifecycle.withdraw(_trader, uint256(balance), _asset);\n        assetSubData.traderWithdrawn = balance;\n        assetSubData.leftOverAmount = 0;\n    }\n\n    function batchWithdrawAssets(address _trader, address[] memory _assets) external override lock settlerOnly{ \n        uint256 count = _assets.length;\n        for(uint256 i = 0; i < count; i++) {\n            StructureData.AssetData storage assetSubData = assetData[_assets[i]];\n            require(assetSubData.leftOverAmount > 0); \n            uint128 balance = uint128(assetSubData.leftOverAmount);\n            OptionLifecycle.withdraw(_trader, uint256(balance), _assets[i]);\n            assetSubData.traderWithdrawn = balance;\n            assetSubData.leftOverAmount = 0;\n        }  \n    }\n\n    function balanceEnough(address _asset) public view override returns (bool) {\n        StructureData.AssetData storage assetSubData = assetData[_asset];\n        int128 balance = assetSubData.leftOverAmount;\n        if (balance >= 0) {\n            return true;\n        }\n        if (OptionLifecycle.getAvailableBalance(_asset, address(this)) == 0) {\n            return false;\n        }\n\n        return balance >= -getBalanceChange(_asset);\n    }\n\n    function getBalanceChange(address _asset) private view returns (int256) {\n        StructureData.AssetData storage assetSubData = assetData[_asset];\n        // int128 leastBalance = int128(assetSubData.balanceAfterSettle + collectWithdrawable(_asset) - assetSubData.withdrawableAfterSettle);\n        //return  int128(uint128(getAvailableBalance(_asset))) - leastBalance + int128(assetSubData.traderWithdrawn);\n        return\n            int256(\n                OptionLifecycle.getAvailableBalance(_asset, address(this))\n                .add(assetSubData.traderWithdrawn).add(assetSubData.withdrawableAfterSettle)\n            ) -\n            int256(\n                uint256(assetSubData.balanceAfterSettle).add(collectWithdrawable(_asset))\n            );\n    }\n\n    function collectWithdrawable(address _asset)\n        private\n        view\n        returns (uint256)\n    {\n        uint256 total = 0;\n        for (uint8 i = 0; i < optionPairCount; i++) {\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\n            if (\n                pair.depositAsset == _asset || pair.counterPartyAsset == _asset\n            ) {\n                StructureData.OptionData storage callOption = optionData[\n                    pair.callOptionId\n                ];\n                total = total.add(\n                    pair.depositAsset == _asset\n                        ? uint256(callOption.optionStates[currentRound].totalAmount).add(\n                            callOption.totalReleasedDepositAssetAmount\n                        )\n                        : callOption.totalReleasedCounterPartyAssetAmount\n                );\n\n                StructureData.OptionData storage putOption = optionData[\n                    pair.putOptionId\n                ];\n                total = total.add(\n                    pair.counterPartyAsset == _asset\n                        ? uint256(putOption.optionStates[currentRound].totalAmount).add(\n                            putOption.totalReleasedDepositAssetAmount\n                        )\n                        : putOption.totalReleasedCounterPartyAssetAmount\n                );\n            }\n        }\n        return total;\n    }\n\n    receive() external payable {}\n\n    modifier lock {\n        require(locked == 0, \"locked\");\n        locked = 1;\n        _;\n        locked = 0;\n    }\n    modifier settlerOnly() {\n         require(settlerRoleAddress == msg.sender, \"!settler\"); \n         _;\n    }\n    function autoRollToCounterPartyByOption(\n        StructureData.OptionData storage _option,\n        StructureData.OptionState storage _optionState,\n        StructureData.OptionData storage _counterPartyOption,\n        uint8 _counterPartyOptionId,\n        uint256 _totalReleased,\n        uint256 _totalAutoRoll\n    ) internal virtual;\n\n    function autoRollByOption(\n        StructureData.OptionData storage _option,\n        uint8 _optionId,\n        StructureData.OptionState storage _optionState,\n        uint256 _totalReleased,\n        uint256 _totalAutoRoll\n    ) internal virtual;\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/storage/OptionVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport {StructureData} from \"../libraries/StructureData.sol\"; \nabstract contract OptionVaultStorageV1 { \n    uint16 public currentRound;\n    bool public underSettlement;\n    uint8 public optionPairCount;\n    uint8 internal assetCount;\n    address internal settlerRoleAddress;\n    uint256 internal locked;\n\n    mapping(address => StructureData.SettlementCashflowResult)\n        public settlementCashflowResult;\n\n    mapping(uint8 => StructureData.OptionPairDefinition) public optionPairs;\n\n    mapping(uint8 => StructureData.OptionPairExecutionAccountingResult)\n        public executionAccountingResult;\n\n    mapping(uint8 => StructureData.OptionData) internal optionData;\n    mapping(uint8 => address) internal asset;\n    mapping(address => StructureData.AssetData) internal assetData;\n    \n}\n\nabstract contract OptionVaultStorage is OptionVaultStorageV1 {\n\n}"
    },
    "contracts/interfaces/ISettlementAggregator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.4;\nimport {StructureData} from \"../libraries/StructureData.sol\";  \n\ninterface ISettlementAggregator {\n         \n    \n    function toggleOptionPairDeposit(uint8 _pairId) external; \n    \n    //rollToNext + dryRunSettlement\n    //todo: specifying quota\n    function initiateSettlement() external; \n\n    //closePrevious + calculate cash flow \n    function settle(StructureData.OptionExecution[] memory _execution) external;\n\n    function setOptionParameters(uint256[] memory _paramters) external;\n\n    function withdrawAsset(address _trader, address _asset) external;\n\n    function batchWithdrawAssets(address _trader, address[] memory _assets) external;\n\n    function balanceEnough(address _asset) external view returns(bool); \n}"
    },
    "contracts/HodlBoosterOptionUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\nimport {\n    OwnableUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {HodlBoosterOption} from \"./HodlBoosterOption.sol\";\nimport {StructureData} from \"./libraries/StructureData.sol\";\ncontract HodlBoosterOptionUpgradeable is OwnableUpgradeable, HodlBoosterOption {\n    function initialize(\n        address _owner,\n        address _settler,\n         StructureData.OptionPairDefinition[] memory _optionPairDefinitions\n    ) external initializer { \n \n        locked = 0;\n        __Ownable_init();\n        \n        require(_owner != address(0));\n        require(_settler != address(0));\n        transferOwnership(_owner);\n        settlerRoleAddress = _settler;\n        addOptionPairsInternal(_optionPairDefinitions);  \n    }\n\n    function setSettler(address _settler) external onlyOwner{\n        setSettlerInternal(_settler);\n    }  \n    function addOptionPairs(StructureData.OptionPairDefinition[] memory _optionPairDefinitions) external onlyOwner{\n        addOptionPairsInternal(_optionPairDefinitions);\n    }\n}\n "
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/HodlBoosterOptionStatic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n \nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\"; \nimport {HodlBoosterOption} from \"./HodlBoosterOption.sol\";\nimport {StructureData} from \"./libraries/StructureData.sol\";\n\ncontract HodlBoosterOptionStatic is Ownable, HodlBoosterOption { \n    constructor(\n        address _owner,\n        address _settler,\n        StructureData.OptionPairDefinition[] memory _optionPairDefinitions\n    )  {\n        \n        require(_owner != address(0));\n        require(_settler != address(0));\n        locked = 0;\n        transferOwnership(_owner);\n        settlerRoleAddress = _settler;\n        addOptionPairsInternal(_optionPairDefinitions);  \n    }\n\n    function setSettler(address _settler) external onlyOwner{\n        setSettlerInternal(_settler);\n    }  \n    function addOptionPairs(StructureData.OptionPairDefinition[] memory _optionPairDefinitions) external onlyOwner{\n        addOptionPairsInternal(_optionPairDefinitions);\n    }\n\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mock is ERC20 {\n    uint8 private _decimals;\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 supply,\n        uint8 decimals_\n    ) ERC20(name, symbol) {\n        _decimals = decimals_;\n        _mint(msg.sender, supply);\n    }\n\n      \n     function decimals() public view override returns (uint8) {\n        return _decimals;\n     }\n}"
    },
    "contracts/vendor/upgrades/UpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport './Proxy.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\n\n/**\n * @title UpgradeabilityProxy\n * @dev This contract implements a proxy that allows to change the\n * implementation address to which it will delegate.\n * Such a change is called an implementation upgrade.\n */\ncontract UpgradeabilityProxy is Proxy {\n  /**\n   * @dev Contract constructor.\n   * @param _logic Address of the initial implementation.\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   */\n  constructor(address _logic, bytes memory _data) payable {\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n    _setImplementation(_logic);\n    if(_data.length > 0) {\n      (bool success,) = _logic.delegatecall(_data);\n      require(success);\n    }\n  }\n\n  /**\n   * @dev Emitted when the implementation is upgraded.\n   * @param implementation Address of the new implementation.\n   */\n  event Upgraded(address indexed implementation);\n\n  /**\n   * @dev Storage slot with the address of the current implementation.\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n   * validated in the constructor.\n   */\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n  /**\n   * @dev Returns the current implementation.\n   * @return impl Address of the current implementation\n   */\n  function _implementation() internal override view returns (address impl) {\n    bytes32 slot = IMPLEMENTATION_SLOT;\n    assembly {\n      impl := sload(slot)\n    }\n  }\n\n  /**\n   * @dev Upgrades the proxy to a new implementation.\n   * @param newImplementation Address of the new implementation.\n   */\n  function _upgradeTo(address newImplementation) internal {\n    _setImplementation(newImplementation);\n    emit Upgraded(newImplementation);\n  }\n\n  /**\n   * @dev Sets the implementation address of the proxy.\n   * @param newImplementation Address of the new implementation.\n   */\n  function _setImplementation(address newImplementation) internal {\n    require(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n      sstore(slot, newImplementation)\n    }\n  }\n}\n"
    },
    "contracts/vendor/upgrades/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\n/**\n * @title Proxy\n * @dev Implements delegation of calls to other contracts, with proper\n * forwarding of return values and bubbling of failures.\n * It defines a fallback function that delegates all calls to the address\n * returned by the abstract _implementation() internal function.\n */\nabstract contract Proxy {\n  /**\n   * @dev Fallback function.\n   * Implemented entirely in `_fallback`.\n   */\n  fallback () payable external {\n    _fallback();\n  }\n\n  /**\n   * @dev Receive function.\n   * Implemented entirely in `_fallback`.\n   */\n  receive () payable external {\n    // _fallback();\n  }\n\n  /**\n   * @return The Address of the implementation.\n   */\n  function _implementation() internal virtual view returns (address);\n\n  /**\n   * @dev Delegates execution to an implementation contract.\n   * This is a low level function that doesn't return to its internal call site.\n   * It will return to the external caller whatever the implementation returns.\n   * @param implementation Address to delegate.\n   */\n  function _delegate(address implementation) internal {\n    assembly {\n      // Copy msg.data. We take full control of memory in this inline assembly\n      // block because it will not return to Solidity code. We overwrite the\n      // Solidity scratch pad at memory position 0.\n      calldatacopy(0, 0, calldatasize())\n\n      // Call the implementation.\n      // out and outsize are 0 because we don't know the size yet.\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n      // Copy the returned data.\n      returndatacopy(0, 0, returndatasize())\n\n      switch result\n      // delegatecall returns 0 on error.\n      case 0 { revert(0, returndatasize()) }\n      default { return(0, returndatasize()) }\n    }\n  }\n\n  /**\n   * @dev Function that is run as the first thing in the fallback function.\n   * Can be redefined in derived contracts to add functionality.\n   * Redefinitions must call super._willFallback().\n   */\n  function _willFallback() internal virtual {\n  }\n\n  /**\n   * @dev fallback implementation.\n   * Extracted to enable manual triggering.\n   */\n  function _fallback() internal {\n    _willFallback();\n    _delegate(_implementation());\n  }\n}\n"
    },
    "contracts/vendor/upgrades/AdminUpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.8;\n\nimport './UpgradeabilityProxy.sol';\n\n/**\n * @title AdminUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with an authorization\n * mechanism for administrative tasks.\n * All external functions in this contract must be guarded by the\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\n * feature proposal that would enable this to be done automatically.\n */\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\n  /**\n   * Contract constructor.\n   * @param _logic address of the initial implementation.\n   * @param admin_ Address of the proxy administrator.\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   */\n  constructor(address _logic, address admin_, bytes memory _data) UpgradeabilityProxy(_logic, _data) payable {\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n    _setAdmin(admin_);\n  }\n\n  /**\n   * @dev Emitted when the administration has been transferred.\n   * @param previousAdmin Address of the previous admin.\n   * @param newAdmin Address of the new admin.\n   */\n  event AdminChanged(address previousAdmin, address newAdmin);\n\n  /**\n   * @dev Storage slot with the admin of the contract.\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n   * validated in the constructor.\n   */\n\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n  /**\n   * @dev Modifier to check whether the `msg.sender` is the admin.\n   * If it is, it will run the function. Otherwise, it will delegate the call\n   * to the implementation.\n   */\n  modifier ifAdmin() {\n    if (msg.sender == _admin()) {\n      _;\n    } else {\n      _fallback();\n    }\n  }\n\n  /**\n   * @return adminAddress The address of the proxy admin.\n   */\n  function admin() external ifAdmin returns (address adminAddress) {\n    return _admin();\n  }\n\n  /**\n   * @return implementationAddress The address of the implementation.\n   */\n  function implementation() external ifAdmin returns (address implementationAddress) {\n    return _implementation();\n  }\n\n  /**\n   * @dev Changes the admin of the proxy.\n   * Only the current admin can call this function.\n   * @param newAdmin Address to transfer proxy administration to.\n   */\n  function changeAdmin(address newAdmin) external ifAdmin {\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n    emit AdminChanged(_admin(), newAdmin);\n    _setAdmin(newAdmin);\n  }\n\n  /**\n   * @dev Upgrade the backing implementation of the proxy.\n   * Only the admin can call this function.\n   * @param newImplementation Address of the new implementation.\n   */\n  function upgradeTo(address newImplementation) external ifAdmin {\n    _upgradeTo(newImplementation);\n  }\n\n  /**\n   * @dev Upgrade the backing implementation of the proxy and call a function\n   * on the new implementation.\n   * This is useful to initialize the proxied contract.\n   * @param newImplementation Address of the new implementation.\n   * @param data Data to send as msg.data in the low level call.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   */\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n    _upgradeTo(newImplementation);\n    (bool success,) = newImplementation.delegatecall(data);\n    require(success);\n  }\n\n  /**\n   * @return adm The admin slot.\n   */\n  function _admin() internal view returns (address adm) {\n    bytes32 slot = ADMIN_SLOT;\n    assembly {\n      adm := sload(slot)\n    }\n  }\n\n  /**\n   * @dev Sets the address of the proxy admin.\n   * @param newAdmin Address of the new proxy admin.\n   */\n  function _setAdmin(address newAdmin) internal {\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n      sstore(slot, newAdmin)\n    }\n  }\n\n  /**\n   * @dev Only fall back when the sender is not the admin.\n   */\n  function _willFallback() internal override virtual {\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n    super._willFallback();\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}