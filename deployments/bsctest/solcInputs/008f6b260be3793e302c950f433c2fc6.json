{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IDOVOption.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.4; \r\nimport {StructureData} from \"../libraries/StructureData.sol\";\r\n\r\ninterface IDOVOption {\r\n  \r\n\r\n    //deposit eth\r\n    function depositETH(uint8 _vaultId) external payable;\r\n\r\n    //deposit other erc20 coin, take wbtc or stable coin\r\n    function deposit(uint8 _vaultId, uint256 _amount) external;\r\n\r\n    //complete withdraw happens on the option vault\r\n    function initiateWithraw(uint8 _vaultId, uint256 _redeemAmount) external; \r\n\r\n    function cancelWithdraw(uint8 _vaultId, uint256 _redeemAmount) external;\r\n \r\n    \r\n    function withdraw(uint8 _vaultId, uint256 _amount) external; \r\n \r\n \r\n    function getUserState(uint8 _vaultId) external view returns (StructureData.UserState memory); \r\n \r\n    function getVaultState(uint8 _vaultId) external view returns(StructureData.VaultSnapShot memory); \r\n \r\n \r\n}\r\n\r\n"
    },
    "contracts/libraries/StructureData.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nlibrary StructureData {\r\n    bytes32 public constant OPTION_ROLE = keccak256(\"OPTION_ROLE\");\r\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\r\n   \r\n\r\n    //struct kick off parameters \r\n    struct KickOffOptionParameters { \r\n        uint8 vaultId; \r\n        uint128 maxCapacity;  \r\n        uint8 environment;\r\n    }\r\n\r\n    //parameters for cutoff option\r\n    struct OnGoingOptionParameters {  \r\n        uint128 strike; // strike price \r\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\r\n        uint8 vaultId; \r\n    }\r\n\r\n    //parameters for expired option \r\n    struct ExpiredOptionParameters{\r\n        uint128 expiryLevel;\r\n        uint8 vaultId; \r\n    }\r\n\r\n    struct CapacityParameters {\r\n        uint8 vaultId;\r\n        uint128 maxCapacity;\r\n    }\r\n    //information that won't change\r\n    struct VaultDefinition {\r\n        uint8 vaultId; \r\n        uint8 assetAmountDecimals; \r\n        address asset;\r\n        address underlying;\r\n        bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral; \r\n    } \r\n\r\n    struct OptionState {\r\n        uint128 amount;\r\n        uint128 queuedRedeemAmount;\r\n        uint128 strike;\r\n        uint16 premiumRate;\r\n        address buyerAddress; \r\n    }\r\n \r\n    struct VaultState { \r\n        uint128 totalPending; \r\n        uint128 totalRedeemed;\r\n        uint32 cutOffAt;  \r\n        uint16 currentRound;\r\n        uint128 maxCapacity;   \r\n        uint8 environment;\r\n        StructureData.OptionState onGoing;\r\n        StructureData.OptionState expired; \r\n        mapping(uint16 => uint128) depositPriceAfterExpiryPerRound; \r\n        mapping(address=>StructureData.UserState) userStates;\r\n    }\r\n\r\n    struct OptionBuyerState {\r\n       mapping(address=>uint256) optionValueToCollect;\r\n    } \r\n\r\n    struct UserState {\r\n        uint128 pending;\r\n        uint128 redeemed;\r\n        uint128 expiredAmount;\r\n        uint128 expiredQueuedRedeemAmount;\r\n        uint128 onGoingAmount;\r\n        uint128 onGoingQueuedRedeemAmount;\r\n        uint16 lastUpdateRound;\r\n    }\r\n \r\n    struct VaultSnapShot {\r\n        uint128 totalPending; \r\n        uint128 totalRedeemed;\r\n        uint32 cutOffAt;  \r\n        uint16 currentRound;\r\n        uint128 maxCapacity;   \r\n        StructureData.OptionState onGoing;\r\n        StructureData.OptionState expired;\r\n    \r\n    }\r\n\r\n    struct CollectableValue {\r\n       address asset;\r\n       uint256 amount;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/upgradeable/SingleDirectionOptionV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\"; \r\nimport {StructureData} from \"../libraries/StructureData.sol\";\r\nimport {Utils} from \"../libraries/Utils.sol\";\r\nimport {OptionLifecycle} from \"../libraries/OptionLifecycle.sol\";\r\nimport \"../interfaces/IDOVOption.sol\";\r\nimport \"./OptionVaultManagerV2.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\ncontract SingleDirectionOptionV2 is OptionVaultManagerV2, IDOVOption {\r\n    using SafeERC20 for IERC20;\r\n    using SafeCast for uint256;\r\n    using SafeMath for uint256;\r\n    using Utils for uint256; \r\n \r\n\r\n    modifier validateVaultId(uint8 _vaultId) {\r\n        require(_vaultId != 0 && _vaultId < vaultCount);\r\n        _;\r\n    }\r\n\r\n\r\n    function initiateWithraw(uint8 _vaultId, uint256 _redeemAmount)\r\n        external\r\n        override \r\n        validateVaultId(_vaultId) { \r\n        OptionLifecycle.initiateWithrawStorage(\r\n            vaultStates[_vaultId],\r\n            msg.sender,\r\n            _redeemAmount\r\n        );\r\n    }\r\n\r\n \r\n\r\n    function cancelWithdraw(uint8 _vaultId, uint256 _redeemAmount) \r\n        external \r\n        override \r\n        validateVaultId(_vaultId) {\r\n\r\n        OptionLifecycle.cancelWithrawStorage(\r\n            vaultStates[_vaultId],\r\n            msg.sender,\r\n            _redeemAmount\r\n        );\r\n    }\r\n    \r\n    //withdraw pending and expired amount\r\n    function withdraw(uint8 _vaultId, uint256 _amount) \r\n        external \r\n        override \r\n        validateVaultId(_vaultId) lock{ \r\n \r\n        OptionLifecycle.withdrawStorage(\r\n            vaultStates[_vaultId],\r\n            msg.sender,\r\n            _amount);\r\n        OptionLifecycle.withdraw(msg.sender, _amount, vaultDefinitions[_vaultId].asset);\r\n    }\r\n\r\n    //deposit eth\r\n    function depositETH(uint8 _vaultId) external payable override \r\n        validateVaultId(_vaultId) lock{ \r\n\r\n        require(msg.value > 0, \"!value\"); \r\n        address asset = vaultDefinitions[_vaultId].asset; \r\n        require(asset == address(0), \"!ETH\");\r\n        StructureData.VaultState storage data = vaultStates[_vaultId];\r\n        require(data.cutOffAt > 0, \"!started\");\r\n        //todo: check for cap\r\n        OptionLifecycle.depositFor(\r\n            data,\r\n            msg.sender,\r\n            msg.value);\r\n  \r\n    }\r\n\r\n    //deposit other erc20 coin, take wbtc\r\n    function deposit(uint8 _vaultId, uint256 _amount) external override \r\n        validateVaultId(_vaultId) lock{ \r\n        require(_amount > 0, \"!amount\"); \r\n        address asset = vaultDefinitions[_vaultId].asset; \r\n        require(asset != address(0), \"ETH\");\r\n        StructureData.VaultState storage data = vaultStates[_vaultId];\r\n        require(data.cutOffAt > 0, \"!started\"); \r\n\r\n        IERC20(asset).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n        OptionLifecycle.depositFor(\r\n            data,\r\n            msg.sender,\r\n            _amount); \r\n    }\r\n \r\n    function getUserState(uint8 _vaultId) external override view validateVaultId(_vaultId) returns (StructureData.UserState memory) {\r\n\r\n        StructureData.VaultState storage data = vaultStates[_vaultId];\r\n        uint16 currentRound = data.currentRound;\r\n        if (data.cutOffAt <= block.timestamp) {\r\n            currentRound = currentRound + 1;\r\n        }\r\n        StructureData.UserState storage state = data.userStates[msg.sender];\r\n        return OptionLifecycle.recalcState(data, state, currentRound);\r\n\r\n    }\r\n\r\n    \r\n    function getVaultState(uint8 _vaultId) external override view validateVaultId(_vaultId) returns(StructureData.VaultSnapShot memory) {\r\n        StructureData.VaultState storage data = vaultStates[_vaultId];\r\n        return OptionLifecycle.recalcVault(data);\r\n\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/libraries/Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nlibrary Utils { \r\n     \r\n    uint256 public constant RATIOMULTIPLIER = 10000;\r\n \r\n     using SafeMath for uint256;\r\n      function StringConcat(bytes memory _base, bytes memory _value) internal pure returns (string memory) {\r\n        string memory _tmpValue = new string(_base.length + _value.length);\r\n        bytes memory _newValue = bytes(_tmpValue);\r\n\r\n        uint i;\r\n        uint j;\r\n\r\n        for(i=0; i<_base.length; i++) {\r\n            _newValue[j++] = _base[i];\r\n        }\r\n\r\n        for(i=0; i<_value.length; i++) {\r\n            _newValue[j++] = _value[i++];\r\n        }\r\n\r\n        return string(_newValue);\r\n    }\r\n\r\n    function Uint8Sub(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n \r\n    function getAmountToTerminate(uint256 _maturedAmount, uint256 _assetToTerminate, uint256 _assetAmount) \r\n    internal pure returns(uint256) {\r\n       if (_assetToTerminate == 0 || _assetAmount == 0 || _maturedAmount == 0) return 0;\r\n       return _assetToTerminate >= _assetAmount ?  _maturedAmount  : _maturedAmount.mul(_assetToTerminate).div(_assetAmount);\r\n   }\r\n\r\n   function withPremium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\r\n       return  _baseAmount.mul(RATIOMULTIPLIER + _premimumRate).div(RATIOMULTIPLIER);\r\n   }\r\n   \r\n   function premium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\r\n       return   _baseAmount.mul(_premimumRate).div(RATIOMULTIPLIER);\r\n   }\r\n   \r\n   function subOrZero(uint256 _base, uint256 _substractor) internal pure returns (uint256) {\r\n       return _base >= _substractor ? _base - _substractor : 0;\r\n   }\r\n  \r\n    function assertUint104(uint256 num) internal pure {\r\n        require(num <= type(uint104).max, \"Overflow uint104\");\r\n    }\r\n\r\n    function assertUint128(uint256 num) internal pure {\r\n        require(num <= type(uint128).max, \"Overflow uint128\");\r\n    }\r\n\r\n}"
    },
    "contracts/libraries/OptionLifecycle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"./Utils.sol\";\r\nimport \"./StructureData.sol\";\r\nimport \"hardhat/console.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\r\n\r\nlibrary OptionLifecycle {\r\n    using SafeERC20 for IERC20;\r\n    using Utils for uint128;\r\n    using Utils for uint256;\r\n    using SafeMath for uint256;\r\n    using SafeCast for uint256;\r\n    using StructureData for StructureData.UserState;\r\n    uint256 public constant PERIOD = 7 days;\r\n    uint256 public constant ROUND_PRICE_DECIMALS = 8;\r\n    uint256 public constant PERIOD_TEST = 60 seconds;\r\n    uint256 public constant PERIOD_QA = 1 hours;\r\n\r\n    function withdraw(\r\n        address _target,\r\n        uint256 _amount,\r\n        address _contractAddress\r\n    ) external {\r\n        require(_amount > 0, \"!amt\");\r\n        if (_contractAddress == address(0)) {\r\n            payable(_target).transfer(_amount);\r\n        } else {\r\n            IERC20(_contractAddress).safeTransfer(_target, _amount);\r\n        }\r\n    }\r\n\r\n    //for withdraw we need to check the deposit\r\n    function initiateWithrawStorage(\r\n        StructureData.VaultState storage _vault,\r\n        address _user,\r\n        uint256 _amountToRedeem\r\n    ) external {\r\n        rollToNextRoundIfNeeded(_vault);\r\n        require(_vault.currentRound > 1, \"Nothing to redeem\");\r\n\r\n        StructureData.UserState storage state = _vault.userStates[_user];\r\n        _vault.userStates[_user] = recalcState(\r\n            _vault,\r\n            state,\r\n            _vault.currentRound\r\n        );\r\n        state = _vault.userStates[_user]; \r\n\r\n        uint256 maxInstantRedeemable = uint256(state.expiredAmount).sub(\r\n            state.expiredQueuedRedeemAmount\r\n        );\r\n        uint256 maxRedeemable = maxInstantRedeemable\r\n            .add(state.onGoingAmount)\r\n            .sub(state.onGoingQueuedRedeemAmount);\r\n        require(_amountToRedeem <= maxRedeemable, \"Not enough to redeem\");\r\n\r\n        //check if the sold amount is expired or not\r\n        //1. withdraw initiated before the sold option expired (buyer not providing the expiry level yet)\r\n        //user could terminate all the sold options, and selling options\r\n        //user would be able to redeem all the sold options after expiry and all the selling option after next expiry\r\n        uint256 price = _vault.currentRound > 2\r\n            ? _vault.depositPriceAfterExpiryPerRound[_vault.currentRound - 2]\r\n            : 0;\r\n        if (price == 0) {\r\n            //first redeem from the sold options\r\n            if (_amountToRedeem <= maxInstantRedeemable) {\r\n                uint256 expiredQueuedRedeemAmount = _amountToRedeem.add(\r\n                    state.expiredQueuedRedeemAmount\r\n                );\r\n                Utils.assertUint128(expiredQueuedRedeemAmount);\r\n                state.expiredQueuedRedeemAmount = uint128(\r\n                    expiredQueuedRedeemAmount\r\n                );\r\n                uint256 totalExpiredQueuedRedeemAmount = _amountToRedeem.add(\r\n                    _vault.expired.queuedRedeemAmount\r\n                );\r\n                Utils.assertUint128(totalExpiredQueuedRedeemAmount);\r\n                _vault.expired.queuedRedeemAmount = uint128(\r\n                    totalExpiredQueuedRedeemAmount\r\n                );\r\n            } else {\r\n                uint256 amountToRemdeemNextRound = _amountToRedeem -\r\n                    maxInstantRedeemable;\r\n                state.expiredQueuedRedeemAmount = state.expiredAmount;\r\n                uint256 onGoingQueuedRedeemAmount = amountToRemdeemNextRound\r\n                    .add(state.onGoingQueuedRedeemAmount);\r\n                Utils.assertUint128(onGoingQueuedRedeemAmount);\r\n                state.onGoingQueuedRedeemAmount = uint128(\r\n                    onGoingQueuedRedeemAmount\r\n                );\r\n                _vault.expired.queuedRedeemAmount = uint128(\r\n                    uint256(_vault.expired.queuedRedeemAmount).add(\r\n                        maxInstantRedeemable\r\n                    )\r\n                );\r\n                _vault.onGoing.queuedRedeemAmount = uint128(\r\n                    uint256(_vault.onGoing.queuedRedeemAmount).add(\r\n                        amountToRemdeemNextRound\r\n                    )\r\n                );\r\n            }\r\n        }\r\n        //2. withdraw initiated after the sold option expired (expiry level specified)\r\n        //user could terminate all the selling options\r\n        //user would be able to redeem all the selling options after next expiry\r\n        else {\r\n            uint256 onGoingQueuedRedeemAmount = _amountToRedeem.add(\r\n                state.onGoingQueuedRedeemAmount\r\n            );\r\n            Utils.assertUint128(onGoingQueuedRedeemAmount);\r\n            state.onGoingQueuedRedeemAmount = uint128(\r\n                onGoingQueuedRedeemAmount\r\n            );\r\n            uint256 totalOnGoingQueuedRedeemAmount = _amountToRedeem.add(\r\n                _vault.onGoing.queuedRedeemAmount\r\n            );\r\n            Utils.assertUint128(totalOnGoingQueuedRedeemAmount);\r\n            _vault.onGoing.queuedRedeemAmount = uint128(\r\n                totalOnGoingQueuedRedeemAmount\r\n            );\r\n        } \r\n    }\r\n\r\n    function cancelWithrawStorage(\r\n        StructureData.VaultState storage _vault,\r\n        address _user,\r\n        uint256 _amountToRedeemToCancel\r\n    ) external {\r\n        rollToNextRoundIfNeeded(_vault);\r\n        require(_vault.currentRound > 1, \"Nothing to cancel redeem\");\r\n\r\n        StructureData.UserState storage state = _vault.userStates[_user];\r\n        _vault.userStates[_user] = recalcState(\r\n            _vault,\r\n            state,\r\n            _vault.currentRound\r\n        );\r\n        state = _vault.userStates[_user];\r\n\r\n        uint256 expiredQueuedRedeemAmount = state.expiredQueuedRedeemAmount;\r\n        uint256 onGoingQueuedRedeemAmount = state.onGoingQueuedRedeemAmount;\r\n        require(\r\n            _amountToRedeemToCancel <=\r\n                expiredQueuedRedeemAmount.add(onGoingQueuedRedeemAmount),\r\n            \"Not enough to cancel redeem\"\r\n        );\r\n        if (_amountToRedeemToCancel <= expiredQueuedRedeemAmount) {\r\n            state.expiredQueuedRedeemAmount = uint128(\r\n                expiredQueuedRedeemAmount.sub(_amountToRedeemToCancel)\r\n            );\r\n            _vault.expired.queuedRedeemAmount = uint128(\r\n                uint256(_vault.expired.queuedRedeemAmount).sub(\r\n                    _amountToRedeemToCancel\r\n                )\r\n            );\r\n            return;\r\n        }\r\n        state.expiredQueuedRedeemAmount = 0;\r\n        _vault.expired.queuedRedeemAmount = uint128(\r\n            uint256(_vault.expired.queuedRedeemAmount).sub(\r\n                expiredQueuedRedeemAmount\r\n            )\r\n        );\r\n        uint256 onGoingQueuedRedeeemAmountToCancel = _amountToRedeemToCancel\r\n            .sub(expiredQueuedRedeemAmount);\r\n        state.onGoingQueuedRedeemAmount = uint128(\r\n            onGoingQueuedRedeemAmount.sub(onGoingQueuedRedeeemAmountToCancel)\r\n        );\r\n        _vault.onGoing.queuedRedeemAmount = uint128(\r\n            uint256(_vault.onGoing.queuedRedeemAmount).sub(\r\n                onGoingQueuedRedeeemAmountToCancel\r\n            )\r\n        );\r\n    }\r\n\r\n    function withdrawStorage(\r\n        StructureData.VaultState storage _vaultState,\r\n        address _user,\r\n        uint256 _amount\r\n    ) external {\r\n        rollToNextRoundIfNeeded(_vaultState);\r\n\r\n        StructureData.UserState storage state = _vaultState.userStates[_user];\r\n        _vaultState.userStates[_user] = recalcState(\r\n            _vaultState,\r\n            state,\r\n            _vaultState.currentRound\r\n        );\r\n        state = _vaultState.userStates[_user];\r\n\r\n        uint256 redeemed = state.redeemed;\r\n        if (state.redeemed >= _amount) {\r\n            state.redeemed = uint128(redeemed.sub(_amount));\r\n            _vaultState.totalRedeemed = uint128(\r\n                uint256(_vaultState.totalRedeemed).sub(_amount)\r\n            );\r\n            return;\r\n        }\r\n\r\n        //then withdraw the pending\r\n        uint256 pendingAmountToWithdraw = _amount.sub(redeemed);\r\n        require(\r\n            state.pending >= pendingAmountToWithdraw,\r\n            \"Not enough to withdraw\"\r\n        );\r\n        _vaultState.totalRedeemed = uint128(\r\n            uint256(_vaultState.totalRedeemed).sub(redeemed)\r\n        );\r\n        _vaultState.totalPending = uint128(\r\n            uint256(_vaultState.totalPending).sub(pendingAmountToWithdraw)\r\n        );\r\n        state.redeemed = 0;\r\n        state.pending = uint128(\r\n            uint256(state.pending).sub(pendingAmountToWithdraw)\r\n        );\r\n    }\r\n\r\n    //for deposit we need to check the cap\r\n    function depositFor(\r\n        StructureData.VaultState storage _vaultState,\r\n        address _user,\r\n        uint256 _amount\r\n    ) external {\r\n        rollToNextRoundIfNeeded(_vaultState);\r\n\r\n        StructureData.UserState storage state = _vaultState.userStates[_user];\r\n        _vaultState.userStates[_user] = recalcState(\r\n            _vaultState,\r\n            state,\r\n            _vaultState.currentRound\r\n        );\r\n        state = _vaultState.userStates[_user];\r\n\r\n        uint256 newTVL = _amount\r\n            .add(_vaultState.totalPending)\r\n            .add(_vaultState.onGoing.amount)\r\n            .add(_vaultState.expired.amount)\r\n            .sub(_vaultState.expired.queuedRedeemAmount);\r\n        uint256 newUserPending = _amount.add(state.pending);\r\n        require(newTVL <= _vaultState.maxCapacity, \"Exceeds capacity\");\r\n        Utils.assertUint128(newUserPending);\r\n        state.pending = uint128(newUserPending);\r\n        uint256 newTotalPending = _amount.add(_vaultState.totalPending);\r\n        Utils.assertUint128(newTotalPending);\r\n        _vaultState.totalPending = uint128(newTotalPending);\r\n    }\r\n\r\n    function getRealRound(StructureData.VaultState storage _vaultState)\r\n        public\r\n        view\r\n        returns (uint32, uint16)\r\n    {\r\n        if (_vaultState.cutOffAt > block.timestamp || _vaultState.currentRound == 0) {\r\n            return (_vaultState.cutOffAt, _vaultState.currentRound);\r\n        }\r\n        uint256 cutOffAt = _vaultState.cutOffAt;\r\n        uint256 currentRound = _vaultState.currentRound;\r\n        while (cutOffAt <= block.timestamp) {\r\n            if (_vaultState.environment == 0) {\r\n                //prod\r\n                cutOffAt = PERIOD.add(cutOffAt);\r\n            } else if (_vaultState.environment == 1) {\r\n                //qa\r\n                cutOffAt = PERIOD_QA.add(cutOffAt);\r\n            } else {\r\n                //test\r\n                cutOffAt = PERIOD_TEST.add(cutOffAt);\r\n            }\r\n            require(cutOffAt <= type(uint32).max, \"Overflow cutOffAt\");\r\n            currentRound++;\r\n        }\r\n        return (uint32(cutOffAt), uint16(currentRound));\r\n    }\r\n\r\n    function rollToNextRoundIfNeeded(\r\n        StructureData.VaultState storage _vaultState\r\n    ) public {\r\n        if (_vaultState.cutOffAt > block.timestamp || _vaultState.currentRound == 0) {\r\n            return;\r\n        } \r\n        (uint32 cutOffAt,uint16 currentRound) = getRealRound(_vaultState);\r\n        uint256 lastUpdateRound = _vaultState.currentRound;\r\n        uint256 pending = _vaultState.totalPending;\r\n        _vaultState.totalPending = 0;\r\n        while (lastUpdateRound < currentRound) {\r\n            StructureData.OptionState memory onGoing = _vaultState.onGoing;\r\n\r\n            _vaultState.onGoing = StructureData.OptionState({\r\n                amount: uint128(pending),\r\n                queuedRedeemAmount: 0,\r\n                strike: 0,\r\n                premiumRate: 0,\r\n                buyerAddress: address(0)\r\n            });\r\n            pending = 0;\r\n            //premium not sent, simply bring it to next round\r\n            if (\r\n                lastUpdateRound > 1 &&\r\n                _vaultState.expired.amount > 0 &&\r\n                _vaultState.expired.buyerAddress == address(0)\r\n            ) {\r\n                uint256 onGoingAmount = uint256(_vaultState.onGoing.amount)\r\n                    .add(_vaultState.expired.amount)\r\n                    .sub(_vaultState.expired.queuedRedeemAmount);\r\n                Utils.assertUint128(onGoingAmount);\r\n                _vaultState.onGoing.amount = uint128(onGoingAmount);\r\n                uint256 totalRedeemed = uint256(_vaultState.totalRedeemed).add(\r\n                    _vaultState.expired.queuedRedeemAmount\r\n                );\r\n                Utils.assertUint128(totalRedeemed);\r\n                _vaultState.totalRedeemed = uint128(totalRedeemed);\r\n                _vaultState.depositPriceAfterExpiryPerRound[\r\n                    uint16(lastUpdateRound - 1)\r\n                ] = 0;\r\n            }\r\n            _vaultState.expired = onGoing;\r\n            lastUpdateRound = lastUpdateRound + 1; \r\n        }\r\n\r\n        _vaultState.cutOffAt = cutOffAt;\r\n        _vaultState.currentRound = currentRound; \r\n    }\r\n\r\n    function recalcVault(StructureData.VaultState storage _vaultState)\r\n        external\r\n        view\r\n        returns (StructureData.VaultSnapShot memory)\r\n    {\r\n        StructureData.VaultSnapShot memory snapShot = StructureData\r\n            .VaultSnapShot({\r\n                totalPending: _vaultState.totalPending,\r\n                totalRedeemed: _vaultState.totalRedeemed,\r\n                cutOffAt: _vaultState.cutOffAt,\r\n                currentRound: _vaultState.currentRound,\r\n                maxCapacity: _vaultState.maxCapacity,\r\n                onGoing: _vaultState.onGoing,\r\n                expired: _vaultState.expired\r\n            });\r\n        if (_vaultState.cutOffAt > block.timestamp || _vaultState.currentRound == 0) {\r\n            return snapShot;\r\n        }\r\n\r\n\r\n       (uint32 cutOffAt,uint16 currentRound) = getRealRound(_vaultState);\r\n        uint256 lastUpdateRound = _vaultState.currentRound;\r\n        while (lastUpdateRound < currentRound) {\r\n            StructureData.OptionState memory onGoing = snapShot.onGoing;\r\n            snapShot.onGoing = StructureData.OptionState({\r\n                amount: snapShot.totalPending,\r\n                queuedRedeemAmount: 0,\r\n                strike: 0,\r\n                premiumRate: 0,\r\n                buyerAddress: address(0)\r\n            });\r\n\r\n            //premium not sent, simply bring it to next round\r\n            if (\r\n                lastUpdateRound > 1 &&\r\n                snapShot.expired.amount > 0 &&\r\n                snapShot.expired.buyerAddress == address(0)\r\n            ) {\r\n                uint256 onGoingAmount = uint256(snapShot.onGoing.amount)\r\n                    .add(snapShot.expired.amount)\r\n                    .sub(snapShot.expired.queuedRedeemAmount);\r\n                Utils.assertUint128(onGoingAmount);\r\n                snapShot.onGoing.amount = uint128(onGoingAmount);\r\n                uint256 totalRedeemed = uint256(snapShot.totalRedeemed).add(\r\n                    snapShot.expired.queuedRedeemAmount\r\n                );\r\n                Utils.assertUint128(totalRedeemed);\r\n                snapShot.totalRedeemed = uint128(totalRedeemed); \r\n            }\r\n            snapShot.expired = onGoing;\r\n            snapShot.totalPending = 0;\r\n            lastUpdateRound = lastUpdateRound + 1;\r\n        }\r\n\r\n        snapShot.totalPending = 0;\r\n        snapShot.cutOffAt = cutOffAt;\r\n        snapShot.currentRound = currentRound;\r\n        return snapShot;\r\n    }\r\n\r\n    function recalcState(\r\n        StructureData.VaultState storage _vaultState,\r\n        StructureData.UserState storage _userState,\r\n        uint16 _currentRound\r\n    ) public view returns (StructureData.UserState memory) {\r\n        //first recalc to the state before expiry\r\n        uint256 onGoingAmount = _userState.onGoingAmount;\r\n        uint256 expiredAmount = _userState.expiredAmount;\r\n        uint256 expiredQueuedRedeemAmount = _userState\r\n            .expiredQueuedRedeemAmount;\r\n        uint256 onGoingQueuedRedeemAmount = _userState\r\n            .onGoingQueuedRedeemAmount;\r\n        uint256 lastUpdateRound = _userState.lastUpdateRound;\r\n        uint256 pendingAmount = _userState.pending;\r\n        uint256 redeemed = _userState.redeemed;\r\n        while (lastUpdateRound < _currentRound) {\r\n            uint256 oldonGoingAmount = onGoingAmount;\r\n            onGoingAmount = 0;\r\n            if (expiredAmount > 0) {\r\n                uint256 price = _vaultState.depositPriceAfterExpiryPerRound[\r\n                    uint16(lastUpdateRound - 2)\r\n                ];\r\n                if (price > 0) {\r\n                    expiredAmount = expiredAmount.mul(price).div(\r\n                        10**ROUND_PRICE_DECIMALS\r\n                    );\r\n                    if (expiredQueuedRedeemAmount > 0) {\r\n                        expiredQueuedRedeemAmount = expiredQueuedRedeemAmount\r\n                            .mul(price)\r\n                            .div(10**ROUND_PRICE_DECIMALS);\r\n                    }\r\n                }\r\n                redeemed = redeemed.add(expiredQueuedRedeemAmount);\r\n                onGoingAmount = expiredAmount.sub(expiredQueuedRedeemAmount);\r\n                expiredQueuedRedeemAmount = 0; \r\n            }\r\n\r\n            if (pendingAmount > 0) {\r\n                onGoingAmount = onGoingAmount.add(pendingAmount);\r\n                pendingAmount = 0;\r\n            }\r\n            if (oldonGoingAmount > 0) {\r\n                expiredAmount = oldonGoingAmount;\r\n                expiredQueuedRedeemAmount = onGoingQueuedRedeemAmount;\r\n                onGoingQueuedRedeemAmount = 0;\r\n            } else {\r\n                expiredAmount = 0;\r\n                expiredQueuedRedeemAmount = 0;\r\n            }\r\n\r\n            lastUpdateRound = lastUpdateRound + 1;\r\n        }\r\n \r\n        //then check if the expiry level is specified\r\n        if (expiredAmount > 0) {\r\n            uint256 price = _vaultState.depositPriceAfterExpiryPerRound[\r\n                uint16(lastUpdateRound - 2)\r\n            ]; \r\n            if (price > 0) {\r\n                expiredAmount = expiredAmount.mul(price).div(\r\n                    10**ROUND_PRICE_DECIMALS\r\n                );\r\n                if (expiredQueuedRedeemAmount > 0) {\r\n                    expiredQueuedRedeemAmount = expiredQueuedRedeemAmount\r\n                        .mul(price)\r\n                        .div(10**ROUND_PRICE_DECIMALS);\r\n                }\r\n\r\n                onGoingAmount = onGoingAmount.add(expiredAmount).sub(\r\n                    expiredQueuedRedeemAmount\r\n                ); \r\n                expiredAmount = 0;\r\n                if (expiredQueuedRedeemAmount > 0) {\r\n                    redeemed = redeemed.add(expiredQueuedRedeemAmount);\r\n                    expiredQueuedRedeemAmount = 0;\r\n                }\r\n            }\r\n        }\r\n        Utils.assertUint128(pendingAmount);\r\n        Utils.assertUint128(redeemed);\r\n        Utils.assertUint128(expiredAmount);\r\n        Utils.assertUint128(expiredQueuedRedeemAmount);\r\n        Utils.assertUint128(onGoingAmount);\r\n        Utils.assertUint128(onGoingQueuedRedeemAmount);\r\n        StructureData.UserState memory updatedUserState = StructureData\r\n            .UserState({\r\n                lastUpdateRound: _currentRound,\r\n                pending: uint128(pendingAmount),\r\n                redeemed: uint128(redeemed),\r\n                expiredAmount: uint128(expiredAmount),\r\n                expiredQueuedRedeemAmount: uint128(expiredQueuedRedeemAmount),\r\n                onGoingAmount: uint128(onGoingAmount),\r\n                onGoingQueuedRedeemAmount: uint128(onGoingQueuedRedeemAmount)\r\n            });\r\n        return updatedUserState;\r\n    }\r\n}\r\n"
    },
    "contracts/upgradeable/OptionVaultManagerV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n//import \"hardhat/console.sol\";\r\n\r\nimport {StructureData} from \"../libraries/StructureData.sol\";\r\nimport {Utils} from \"../libraries/Utils.sol\";\r\nimport {OptionLifecycle} from \"../libraries/OptionLifecycle.sol\";\r\nimport {OptionVaultStorage} from \"../storage/OptionVaultStorage.sol\";\r\nimport \"./IOptionVaultManagerV2.sol\";\r\nimport {OptionVaultStorageV2} from \"./OptionVaultStorageV2.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\r\n\r\nabstract contract OptionVaultManagerV2 is\r\n    OptionVaultStorage,\r\n    OptionVaultStorageV2,\r\n    IOptionVaultManagerV2\r\n{\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using Utils for uint256;\r\n    using SafeCast for uint256;\r\n    using SafeCast for int256;\r\n\r\n    function setManagerInternal(address _manager) internal {\r\n        require(_manager != address(0), \"!manager\");\r\n        managerRoleAddress = _manager;\r\n    }\r\n\r\n    function addVaultsInternal(\r\n        StructureData.VaultDefinition[] memory _vaultDefinitions\r\n    ) internal {\r\n        uint256 length = _vaultDefinitions.length;\r\n        uint8 vaultCount_ = vaultCount;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            StructureData.VaultDefinition memory vault = _vaultDefinitions[i];\r\n            vault.vaultId = vaultCount_;\r\n            vaultDefinitions[vaultCount_++] = vault;\r\n        }\r\n        vaultCount = vaultCount_;\r\n    }\r\n\r\n    //only needed for the initial kick off\r\n    function kickOffOptions(\r\n        StructureData.KickOffOptionParameters[] memory _kickoffs\r\n    ) external override managerOnly {\r\n        for (uint256 i = 0; i < _kickoffs.length; i++) {\r\n            StructureData.KickOffOptionParameters memory kickoff = _kickoffs[i];\r\n            StructureData.VaultState storage data = vaultStates[\r\n                kickoff.vaultId\r\n            ];\r\n            require(data.cutOffAt <= block.timestamp, \"already kicked off\");\r\n\r\n            data.cutOffAt = uint32(block.timestamp.add(OptionLifecycle.PERIOD));\r\n            data.maxCapacity = kickoff.maxCapacity;\r\n        }\r\n    }\r\n\r\n    //start selling the options, buyers can bid by increasing the premiumRate\r\n    function sellOptions(\r\n        StructureData.OnGoingOptionParameters[] memory _ongoingParameters\r\n    ) external override {\r\n        for (uint256 i = 0; i < _ongoingParameters.length; i++) {\r\n            StructureData.OnGoingOptionParameters\r\n                memory ongoingParameters = _ongoingParameters[i];\r\n            require(ongoingParameters.premiumRate > 0, \"!premium\");\r\n            require(ongoingParameters.strike > 0, \"!strike\");\r\n            StructureData.VaultState storage data = vaultStates[\r\n                ongoingParameters.vaultId\r\n            ];\r\n            OptionLifecycle.rollToNextRoundIfNeeded(data);\r\n            require(data.currentRound > 1, \"No selling round\");\r\n            StructureData.OptionState storage onGoing = data.onGoing;\r\n            require(onGoing.buyerAddress == address(0), \"Already sold\");\r\n            onGoing.strike = ongoingParameters.strike;\r\n            onGoing.premiumRate = ongoingParameters.premiumRate;\r\n        }\r\n    }\r\n\r\n    function bidOption(uint8 _vaultId, uint16 _premiumRate) external override payable lock {\r\n        StructureData.VaultState storage data = vaultStates[_vaultId];\r\n        require(data.currentRound > 1, \"Nothing to bid\");\r\n\r\n        StructureData.OptionState storage onGoing = data.onGoing;\r\n        require(onGoing.buyerAddress == address(0), \"Already sold\");\r\n        require(onGoing.premiumRate <= _premiumRate, \"premium rate too low\");\r\n\r\n        uint8 index = 0;\r\n        for (uint256 i = 0; ; i++) {\r\n            address bidder = bidders[uint8(i)];\r\n            if (bidder == msg.sender) {\r\n                index = uint8(i);\r\n                break;\r\n            }\r\n            if (bidder == address(0)) {\r\n                index = uint8(i);\r\n                bidders[index] = msg.sender;\r\n                break;\r\n            }\r\n        }\r\n        uint16 oldPremium = bidding[_vaultId][uint8(index)];\r\n        bidding[_vaultId][index] = _premiumRate;\r\n        if (oldPremium < _premiumRate) {\r\n            uint256 needed = uint256(onGoing.amount).premium(\r\n                uint256(_premiumRate).sub(oldPremium)\r\n            );\r\n            address asset = vaultDefinitions[_vaultId].asset;\r\n            if (asset == address(0)) {\r\n                require(msg.value >= needed, \"not enough premium sent\");\r\n                if (msg.value > needed) {\r\n                    OptionLifecycle.withdraw(msg.sender, needed, asset);\r\n                }\r\n            } else {\r\n                IERC20(asset).safeTransferFrom(\r\n                    msg.sender,\r\n                    address(this),\r\n                    needed\r\n                );\r\n            }\r\n        } else if (_premiumRate < oldPremium) {\r\n            uint256 redundant = uint256(onGoing.amount).premium(\r\n                uint256(oldPremium).sub(_premiumRate)\r\n            );\r\n            address asset = vaultDefinitions[_vaultId].asset;\r\n            if (asset == address(0)) {\r\n                OptionLifecycle.withdraw(\r\n                    msg.sender,\r\n                    redundant.add(msg.value),\r\n                    asset\r\n                );\r\n            } else {\r\n                OptionLifecycle.withdraw(msg.sender, redundant, asset);\r\n            }\r\n        }\r\n    }\r\n\r\n    function clearBidding() external override payable managerOnly lock {\r\n        for (uint256 i = 0; i < vaultCount; i++) {\r\n            StructureData.VaultState storage data = vaultStates[uint8(i)];\r\n            require(data.currentRound > 1, \"Nothing to bid\");\r\n            StructureData.OptionState storage onGoing = data.onGoing;\r\n            require(onGoing.buyerAddress == address(0), \"Already sold\");\r\n            uint16 highestPremiumRate = 0;\r\n            uint8 highestBidderIndex = 0;\r\n            for (uint256 j = 0; ; j++) {\r\n                address bidder = bidders[uint8(j)];\r\n                if (bidder == address(0)) {\r\n                    break;\r\n                }\r\n                uint16 premiumRate = bidding[uint8(i)][uint8(j)];\r\n                if (premiumRate > highestPremiumRate) {\r\n                    highestBidderIndex = uint8(j);\r\n                }\r\n            }\r\n            if (highestPremiumRate == 0) {\r\n                continue;\r\n            }\r\n\r\n            onGoing.buyerAddress = bidders[highestBidderIndex];\r\n            for (uint256 j = 0; ; j++) {\r\n                address bidder = bidders[uint8(j)];\r\n                if (bidder == address(0)) {\r\n                    break;\r\n                }\r\n                if (j == highestBidderIndex) {\r\n                    bidding[uint8(i)][uint8(j)] = 0;\r\n                    continue;\r\n                }\r\n                uint16 premiumRate = bidding[uint8(i)][uint8(j)];\r\n                bidding[uint8(i)][uint8(j)] = 0;\r\n                uint256 redundant = uint256(onGoing.amount).premium(\r\n                    premiumRate\r\n                );\r\n                address asset = vaultDefinitions[uint8(i)].asset;\r\n                if (asset == address(0)) {\r\n                    OptionLifecycle.withdraw(\r\n                        msg.sender,\r\n                        redundant.add(msg.value),\r\n                        asset\r\n                    );\r\n                } else {\r\n                    OptionLifecycle.withdraw(msg.sender, redundant, asset);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function expireOptions(\r\n        StructureData.ExpiredOptionParameters[] memory _expiryParameters\r\n    ) external override managerOnly {\r\n        for (uint256 i = 0; i < _expiryParameters.length; i++) {\r\n            StructureData.ExpiredOptionParameters\r\n                memory expiryParameters = _expiryParameters[i];\r\n            require(expiryParameters.expiryLevel > 0, \"!expiryLevel\");\r\n            StructureData.VaultState storage data = vaultStates[\r\n                expiryParameters.vaultId\r\n            ];\r\n            OptionLifecycle.rollToNextRoundIfNeeded(data);\r\n            require(data.currentRound > 2, \"No expired round\");\r\n            StructureData.OptionState storage expired = data.expired;\r\n            if (expired.amount == 0 || expired.buyerAddress == address(0)) {\r\n                continue;\r\n            }\r\n\r\n            require(expired.strike > 0, \"!strike\");\r\n            address asset = vaultDefinitions[expiryParameters.vaultId].asset;\r\n            uint256 diff = vaultDefinitions[expiryParameters.vaultId].callOrPut\r\n                ? (\r\n                    expiryParameters.expiryLevel > expired.strike\r\n                        ? expiryParameters.expiryLevel - expired.strike\r\n                        : 0\r\n                )\r\n                : (\r\n                    expired.strike > expiryParameters.expiryLevel\r\n                        ? expired.strike - expiryParameters.expiryLevel\r\n                        : 0\r\n                );\r\n\r\n            //can be withdrawn by trader\r\n            StructureData.OptionBuyerState storage buyerState = buyerStates[\r\n                expired.buyerAddress\r\n            ];\r\n\r\n            uint256 depositPriceAfterExpiry = diff\r\n                .mul(10**OptionLifecycle.ROUND_PRICE_DECIMALS)\r\n                .div(expiryParameters.expiryLevel);\r\n            data.depositPriceAfterExpiryPerRound[\r\n                data.currentRound - 2\r\n            ] = uint128(depositPriceAfterExpiry);\r\n\r\n            uint256 optionHolderValue = diff.mul(expired.amount).div(\r\n                expiryParameters.expiryLevel\r\n            );\r\n            buyerState.optionValueToCollect[asset] = uint128(\r\n                optionHolderValue.add(buyerState.optionValueToCollect[asset])\r\n            );\r\n\r\n            uint256 remaining = uint256(expired.amount)\r\n                .withPremium(expired.premiumRate)\r\n                .sub(optionHolderValue);\r\n            uint256 redeemed = remaining.mul(expired.queuedRedeemAmount).div(\r\n                expired.amount\r\n            );\r\n            data.totalRedeemed = uint128(redeemed.add(data.totalRedeemed));\r\n\r\n            data.onGoing.amount = uint128(\r\n                remaining.sub(redeemed).add(data.onGoing.amount)\r\n            );\r\n        }\r\n    }\r\n\r\n    function collectOptionHolderValues() external override lock {\r\n        StructureData.OptionBuyerState storage buyerState = buyerStates[\r\n            msg.sender\r\n        ];\r\n        for (uint256 i = 0; i < vaultCount; i++) {\r\n            address asset = vaultDefinitions[uint8(i)].asset;\r\n            uint256 assetAmount = buyerState.optionValueToCollect[asset];\r\n            if (assetAmount > 0) {\r\n                buyerState.optionValueToCollect[asset] = 0;\r\n                OptionLifecycle.withdraw(msg.sender, assetAmount, asset);\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier lock() {\r\n        require(locked == 0, \"locked\");\r\n        locked = 1;\r\n        _;\r\n        locked = 0;\r\n    }\r\n    modifier managerOnly() {\r\n        require(managerRoleAddress == msg.sender, \"!manager\");\r\n        _;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/storage/OptionVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {StructureData} from \"../libraries/StructureData.sol\"; \r\nabstract contract OptionVaultStorageV1 { \r\n    uint256 internal locked;\r\n    address public managerRoleAddress;\r\n    uint8 public vaultCount;  \r\n    uint8 internal assetCount;\r\n \r\n    mapping(uint8 => StructureData.VaultDefinition) public vaultDefinitions;\r\n    mapping(uint8 => address) internal assets;\r\n  \r\n    mapping(uint8 => StructureData.VaultState) internal vaultStates;\r\n\r\n    mapping(address => StructureData.OptionBuyerState) internal buyerStates;\r\n \r\n     \r\n}\r\n\r\nabstract contract OptionVaultStorage is OptionVaultStorageV1 {\r\n    mapping(address=>bool) internal whitelist;\r\n    mapping(uint8 => address) internal traders;\r\n    uint8 internal traderCount;\r\n}"
    },
    "contracts/upgradeable/IOptionVaultManagerV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.4;\r\nimport {StructureData} from \"../libraries/StructureData.sol\";  \r\n\r\ninterface IOptionVaultManagerV2 {\r\n\r\n    function kickOffOptions(StructureData.KickOffOptionParameters[] memory _kickoffs) external;\r\n    function expireOptions(StructureData.ExpiredOptionParameters[] memory _expired) external;\r\n    function collectOptionHolderValues() external;\r\n    function sellOptions(StructureData.OnGoingOptionParameters[] memory _cutoff) external;\r\n    function bidOption(uint8 _vaultId, uint16 _premiumRate) external payable;\r\n    function clearBidding() external payable;\r\n}"
    },
    "contracts/upgradeable/OptionVaultStorageV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n//This is the only change, in real use, it would be inherited by OptionVaultStorage\r\nabstract contract OptionVaultStorageV2 {  \r\n\r\n    //instead of using whitelist to allow bidders to buy the option, we store the premium bidding of each person\r\n    //and then choose the highest one when clearing\r\n    mapping(uint8 => mapping(uint8=>uint16)) bidding;\r\n    mapping(uint8 => address) bidders;\r\n    \r\n    \r\n}\r\n "
    },
    "contracts/upgradeable/SingleDirectionOptionV2Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\nimport {\r\n    OwnableUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport {SingleDirectionOptionV2} from \"./SingleDirectionOptionV2.sol\";\r\nimport {StructureData} from \"../libraries/StructureData.sol\";\r\ncontract SingleDirectionOptionV2Upgradeable is OwnableUpgradeable, SingleDirectionOptionV2 {\r\n    function initialize(\r\n        address _owner,\r\n        address _manager,StructureData.VaultDefinition[] memory _vaultDefinitions\r\n    ) external initializer { \r\n        \r\n        require(_owner != address(0)); \r\n        locked = 0;\r\n        __Ownable_init();\r\n        transferOwnership(_owner);\r\n        setManagerInternal(_manager);\r\n        addVaultsInternal(_vaultDefinitions);  \r\n    }\r\n\r\n    function setManager(address _manager) external onlyOwner{\r\n        setManagerInternal(_manager);\r\n    }  \r\n    function addVaults(StructureData.VaultDefinition[] memory _vaultDefinitions) external onlyOwner{\r\n        addVaultsInternal(_vaultDefinitions);\r\n    }\r\n\r\n}\r\n "
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/SingleDirectionOption.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\"; \r\nimport {StructureData} from \"./libraries/StructureData.sol\";\r\nimport {Utils} from \"./libraries/Utils.sol\";\r\nimport {OptionLifecycle} from \"./libraries/OptionLifecycle.sol\";\r\nimport \"./interfaces/IDOVOption.sol\";\r\nimport \"./OptionVaultManager.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\ncontract SingleDirectionOption is OptionVaultManager, IDOVOption {\r\n    using SafeERC20 for IERC20;\r\n    using SafeCast for uint256;\r\n    using SafeMath for uint256;\r\n    using Utils for uint256; \r\n \r\n\r\n    modifier validateVaultId(uint8 _vaultId) {\r\n        require(_vaultId < vaultCount, \"Invalid vaultId\");\r\n        _;\r\n    }\r\n\r\n\r\n    function initiateWithraw(uint8 _vaultId, uint256 _redeemAmount)\r\n        external\r\n        override \r\n        validateVaultId(_vaultId) { \r\n        OptionLifecycle.initiateWithrawStorage(\r\n            vaultStates[_vaultId],\r\n            msg.sender,\r\n            _redeemAmount\r\n        );\r\n    }\r\n\r\n \r\n\r\n    function cancelWithdraw(uint8 _vaultId, uint256 _redeemAmount) \r\n        external \r\n        override \r\n        validateVaultId(_vaultId) {\r\n\r\n        OptionLifecycle.cancelWithrawStorage(\r\n            vaultStates[_vaultId],\r\n            msg.sender,\r\n            _redeemAmount\r\n        );\r\n    }\r\n    \r\n    //withdraw pending and expired amount\r\n    function withdraw(uint8 _vaultId, uint256 _amount) \r\n        external \r\n        override \r\n        validateVaultId(_vaultId) lock{ \r\n \r\n        OptionLifecycle.withdrawStorage(\r\n            vaultStates[_vaultId],\r\n            msg.sender,\r\n            _amount);\r\n        OptionLifecycle.withdraw(msg.sender, _amount, vaultDefinitions[_vaultId].asset);\r\n    }\r\n\r\n    //deposit eth\r\n    function depositETH(uint8 _vaultId) external payable override \r\n        validateVaultId(_vaultId) lock{ \r\n\r\n        require(msg.value > 0, \"!value\"); \r\n        address asset = vaultDefinitions[_vaultId].asset; \r\n        require(asset == address(0), \"!ETH\");\r\n        StructureData.VaultState storage data = vaultStates[_vaultId];\r\n        require(data.cutOffAt > 0, \"!started\");\r\n        //todo: check for cap\r\n        OptionLifecycle.depositFor(\r\n            data,\r\n            msg.sender,\r\n            msg.value);\r\n  \r\n    }\r\n\r\n    //deposit other erc20 coin, take wbtc\r\n    function deposit(uint8 _vaultId, uint256 _amount) external override \r\n        validateVaultId(_vaultId) lock{ \r\n        require(_amount > 0, \"!amount\"); \r\n        address asset = vaultDefinitions[_vaultId].asset; \r\n        require(asset != address(0), \"ETH\");\r\n        StructureData.VaultState storage data = vaultStates[_vaultId];\r\n        require(data.cutOffAt > 0, \"!started\"); \r\n\r\n        IERC20(asset).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n        OptionLifecycle.depositFor(\r\n            data,\r\n            msg.sender,\r\n            _amount); \r\n    }\r\n \r\n    function getUserState(uint8 _vaultId) external override view validateVaultId(_vaultId) returns (StructureData.UserState memory) {\r\n\r\n        StructureData.VaultState storage data = vaultStates[_vaultId];\r\n        (,uint16 currentRound) = OptionLifecycle.getRealRound(data);\r\n        StructureData.UserState storage state = data.userStates[msg.sender];\r\n        return OptionLifecycle.recalcState(data, state, currentRound);\r\n\r\n    }\r\n\r\n    \r\n    function getVaultState(uint8 _vaultId) external override view validateVaultId(_vaultId) returns(StructureData.VaultSnapShot memory) {\r\n        StructureData.VaultState storage data = vaultStates[_vaultId];\r\n        return OptionLifecycle.recalcVault(data);\r\n\r\n    }\r\n}\r\n"
    },
    "contracts/OptionVaultManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n//import \"hardhat/console.sol\";\r\n\r\nimport {StructureData} from \"./libraries/StructureData.sol\";\r\nimport {Utils} from \"./libraries/Utils.sol\";\r\nimport {OptionLifecycle} from \"./libraries/OptionLifecycle.sol\";\r\nimport {OptionVaultStorage} from \"./storage/OptionVaultStorage.sol\";\r\nimport \"./interfaces/IOptionVaultManager.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\r\n\r\nabstract contract OptionVaultManager is\r\n    OptionVaultStorage,\r\n    IOptionVaultManager\r\n{\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using Utils for uint256;\r\n    using SafeCast for uint256;\r\n    using SafeCast for int256;\r\n\r\n    function setManagerInternal(address _manager) internal {\r\n        require(_manager != address(0), \"!manager\");\r\n        managerRoleAddress = _manager;\r\n    }\r\n\r\n    function addVaultsInternal(\r\n        StructureData.VaultDefinition[] memory _vaultDefinitions\r\n    ) internal {\r\n        uint256 length = _vaultDefinitions.length;\r\n        uint8 vaultCount_ = vaultCount;\r\n        uint8 assetCount_ = assetCount;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            StructureData.VaultDefinition memory vault = _vaultDefinitions[i];\r\n            vault.vaultId = vaultCount_;\r\n            vaultDefinitions[vaultCount_++] = vault;\r\n            bool knownAsset = false;\r\n            for (uint8 j = 0; j < assetCount_; j++) {\r\n                if (assets[j] == vault.asset) {\r\n                    knownAsset = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!knownAsset) {\r\n                assets[assetCount_++] = vault.asset;\r\n            }\r\n        }\r\n        vaultCount = vaultCount_;\r\n        assetCount = assetCount_;\r\n    }\r\n\r\n    function addToWhitelist(address[] memory _whitelistAddresses)\r\n        external\r\n        override\r\n        managerOnly\r\n    {\r\n        uint8 traderCount_ = traderCount;\r\n        for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\r\n            address trader = _whitelistAddresses[i];\r\n            if (!whitelist[trader]) { \r\n               whitelist[trader] = true;\r\n               bool existingTrader = false;\r\n               for(uint8 j=0; j < traderCount_; j++) {\r\n                   if (traders[j] == trader) {   \r\n                       existingTrader = true;\r\n                       break;\r\n                   }\r\n               }\r\n               if (!existingTrader) {\r\n                   traders[traderCount_++] = trader;\r\n               }\r\n            }\r\n        }\r\n        traderCount = traderCount_;\r\n    }\r\n\r\n    function removeFromWhitelist(address[] memory _delistAddresses)\r\n        external\r\n        override\r\n        managerOnly\r\n    { \r\n        for (uint256 i = 0; i < _delistAddresses.length; i++) { \r\n            whitelist[_delistAddresses[i]] = false; \r\n        }\r\n    }\r\n    function whitelistTraders() external override view returns(address[] memory) {\r\n       if (traderCount == 0) {\r\n           return new address[](0);\r\n       }\r\n       uint256 count = 0;\r\n       for(uint8 i = 0; i < traderCount; i++) {\r\n           if (whitelist[traders[i]]) {\r\n               count++;\r\n           }\r\n       }\r\n       address[] memory whitelistData = new address[](count);\r\n       count = 0;\r\n       for(uint8 i = 0; i < traderCount; i++) {\r\n           if (whitelist[traders[i]]) {\r\n               whitelistData[count++] = traders[i];\r\n           }\r\n       }\r\n       return whitelistData;\r\n    }\r\n\r\n    //only needed for the initial kick off\r\n    function kickOffOptions(\r\n        StructureData.KickOffOptionParameters[] memory _kickoffs\r\n    ) external override managerOnly {\r\n        for (uint256 i = 0; i < _kickoffs.length; i++) {\r\n            StructureData.KickOffOptionParameters memory kickoff = _kickoffs[i];\r\n            StructureData.VaultState storage data = vaultStates[\r\n                kickoff.vaultId\r\n            ];\r\n            require(data.currentRound == 0, \"already kicked off\");\r\n            uint256 cutOffAt = 0;\r\n            if (kickoff.environment == 0) {\r\n                //prod\r\n                cutOffAt = block.timestamp.add(OptionLifecycle.PERIOD);\r\n            } else if (kickoff.environment == 1) {\r\n                //qa\r\n                cutOffAt = block.timestamp.add(OptionLifecycle.PERIOD_QA);\r\n            } else {\r\n                //test\r\n                cutOffAt = block.timestamp.add(OptionLifecycle.PERIOD_TEST);\r\n            }\r\n            require(cutOffAt <= type(uint32).max, \"Overflow cutOffAt\");\r\n            data.cutOffAt = uint32(cutOffAt);\r\n\r\n            data.maxCapacity = kickoff.maxCapacity;\r\n            data.environment = kickoff.environment;\r\n            data.currentRound = 1;\r\n        }\r\n    }\r\n\r\n    function setCapacities(\r\n        StructureData.CapacityParameters[] memory _capacities\r\n    ) external override managerOnly {\r\n        for (uint256 i = 0; i < _capacities.length; i++) {\r\n            StructureData.CapacityParameters memory capacity = _capacities[i];\r\n            StructureData.VaultState storage data = vaultStates[\r\n                capacity.vaultId\r\n            ];\r\n            uint256 currentTVL = uint256(data.totalPending)\r\n                .add(data.onGoing.amount)\r\n                .add(data.expired.amount)\r\n                .sub(data.expired.queuedRedeemAmount);\r\n            require(currentTVL <= capacity.maxCapacity, \"Max Cap less than tvl\");\r\n            data.maxCapacity = capacity.maxCapacity;\r\n        }\r\n    }\r\n\r\n    //parameters for option to sell, todo: whitelist\r\n    function sellOptions(\r\n        StructureData.OnGoingOptionParameters[] memory _ongoingParameters\r\n    ) external override managerOnly {\r\n        for (uint256 i = 0; i < _ongoingParameters.length; i++) {\r\n            StructureData.OnGoingOptionParameters\r\n                memory ongoingParameters = _ongoingParameters[i];\r\n            require(ongoingParameters.premiumRate > 0, \"!premium\");\r\n            require(ongoingParameters.strike > 0, \"!strike\");\r\n            StructureData.VaultState storage data = vaultStates[\r\n                ongoingParameters.vaultId\r\n            ];\r\n            OptionLifecycle.rollToNextRoundIfNeeded(data);\r\n            require(data.currentRound > 1, \"No selling round\");\r\n            StructureData.OptionState storage onGoing = data.onGoing;\r\n            require(onGoing.buyerAddress == address(0), \"Already sold\");\r\n            onGoing.strike = ongoingParameters.strike;\r\n            onGoing.premiumRate = ongoingParameters.premiumRate;\r\n        }\r\n    }\r\n\r\n    //after buying by sending back the premium, the premium and strike can no longer be changed\r\n    function buyOptions(uint8[] memory _vaultIds)\r\n        external\r\n        payable\r\n        override\r\n        whitelisted\r\n        lock\r\n    {\r\n        uint256 ethToSend = 0;\r\n        for (uint256 i = 0; i < _vaultIds.length; i++) {\r\n            uint8 vaultId = _vaultIds[i];\r\n            StructureData.VaultState storage data = vaultStates[vaultId];\r\n            OptionLifecycle.rollToNextRoundIfNeeded(data);\r\n            StructureData.OptionState storage onGoing = data.onGoing;\r\n            require(onGoing.amount > 0, \"Nothing to sell\");\r\n            require(onGoing.buyerAddress == address(0), \"Already sold\");\r\n            //if there is any auto rolling, we must wait until expiry level specified\r\n            if (data.expired.amount - data.expired.queuedRedeemAmount > 0) {\r\n                require(\r\n                    data.depositPriceAfterExpiryPerRound[\r\n                        data.currentRound - 2\r\n                    ] > 0,\r\n                    \"Expiry level not specified yet\"\r\n                );\r\n            }\r\n\r\n            uint256 premium = uint256(onGoing.amount).premium(\r\n                onGoing.premiumRate\r\n            );\r\n            address asset = vaultDefinitions[vaultId].asset;\r\n            if (asset == address(0)) {\r\n                ethToSend = ethToSend.add(premium);\r\n            } else {\r\n                IERC20(asset).safeTransferFrom(\r\n                    msg.sender,\r\n                    address(this),\r\n                    premium\r\n                );\r\n            }\r\n            onGoing.buyerAddress = msg.sender;\r\n        }\r\n        require(ethToSend >= msg.value, \"Not enough eth\");\r\n        //transfer back extra\r\n        if (ethToSend > msg.value) {\r\n            payable(msg.sender).transfer(ethToSend - msg.value);\r\n        }\r\n    }\r\n\r\n    function expireOptions(\r\n        StructureData.ExpiredOptionParameters[] memory _expiryParameters\r\n    ) external override managerOnly {\r\n        for (uint256 i = 0; i < _expiryParameters.length; i++) {\r\n            StructureData.ExpiredOptionParameters\r\n                memory expiryParameters = _expiryParameters[i];\r\n            require(expiryParameters.expiryLevel > 0, \"!expiryLevel\");\r\n            StructureData.VaultState storage data = vaultStates[\r\n                expiryParameters.vaultId\r\n            ];\r\n            OptionLifecycle.rollToNextRoundIfNeeded(data);\r\n            require(data.currentRound > 2, \"No expired round\");\r\n            StructureData.OptionState storage expired = data.expired;\r\n            if (expired.amount == 0 || expired.buyerAddress == address(0)) {\r\n                continue;\r\n            }\r\n\r\n            require(expired.strike > 0, \"!strike\");\r\n            address asset = vaultDefinitions[expiryParameters.vaultId].asset;\r\n            uint256 diff = vaultDefinitions[expiryParameters.vaultId].callOrPut\r\n                ? (\r\n                    expiryParameters.expiryLevel > expired.strike\r\n                        ? expiryParameters.expiryLevel - expired.strike\r\n                        : 0\r\n                )\r\n                : (\r\n                    expired.strike > expiryParameters.expiryLevel\r\n                        ? expired.strike - expiryParameters.expiryLevel\r\n                        : 0\r\n                );\r\n\r\n            //can be withdrawn by trader\r\n            StructureData.OptionBuyerState storage buyerState = buyerStates[\r\n                expired.buyerAddress\r\n            ];\r\n\r\n            uint256 optionHolderValue = diff.mul(expired.amount).div(\r\n                vaultDefinitions[expiryParameters.vaultId].callOrPut\r\n                    ? expiryParameters.expiryLevel\r\n                    : expired.strike\r\n            );\r\n            Utils.assertUint128(optionHolderValue);\r\n            buyerState.optionValueToCollect[asset] = uint128(\r\n                optionHolderValue.add(buyerState.optionValueToCollect[asset])\r\n            );\r\n\r\n            uint256 remaining = uint256(expired.amount)\r\n                .withPremium(expired.premiumRate)\r\n                .sub(optionHolderValue);\r\n            uint256 depositPriceAfterExpiry = remaining\r\n                .mul(10**OptionLifecycle.ROUND_PRICE_DECIMALS)\r\n                .div(expired.amount);\r\n            Utils.assertUint128(depositPriceAfterExpiry);\r\n            data.depositPriceAfterExpiryPerRound[\r\n                data.currentRound - 2\r\n            ] = uint128(depositPriceAfterExpiry);\r\n\r\n            uint256 redeemed = remaining.mul(expired.queuedRedeemAmount).div(\r\n                expired.amount\r\n            );\r\n            uint256 totalRedeemed = redeemed.add(data.totalRedeemed);\r\n            Utils.assertUint128(totalRedeemed);\r\n            data.totalRedeemed = uint128(totalRedeemed);\r\n            uint256 totalOnGoing = remaining.sub(redeemed).add(\r\n                data.onGoing.amount\r\n            );\r\n            Utils.assertUint128(totalOnGoing);\r\n            data.onGoing.amount = uint128(totalOnGoing);\r\n            expired.amount = 0;\r\n            expired.queuedRedeemAmount = 0;\r\n        }\r\n    }\r\n\r\n    function collectOptionHolderValues() external override whitelisted lock {\r\n        StructureData.OptionBuyerState storage buyerState = buyerStates[\r\n            msg.sender\r\n        ];\r\n        for (uint256 i = 0; i < assetCount; i++) {\r\n            address asset = assets[uint8(i)];\r\n            uint256 assetAmount = buyerState.optionValueToCollect[asset];\r\n            if (assetAmount > 0) {\r\n                buyerState.optionValueToCollect[asset] = 0;\r\n                OptionLifecycle.withdraw(msg.sender, assetAmount, asset);\r\n            }\r\n        }\r\n    }\r\n\r\n    function optionHolderValues()\r\n        external\r\n        view\r\n        override\r\n        whitelisted\r\n        returns (StructureData.CollectableValue[] memory)\r\n    {\r\n        StructureData.OptionBuyerState storage buyerState = buyerStates[\r\n            msg.sender\r\n        ];\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < assetCount; i++) {\r\n            address asset = assets[uint8(i)];\r\n            uint256 assetAmount = buyerState.optionValueToCollect[asset];\r\n            if (assetAmount > 0) {\r\n                count++;\r\n            }\r\n        }\r\n        StructureData.CollectableValue[]\r\n            memory values = new StructureData.CollectableValue[](count);\r\n        if (count == 0) {\r\n            return values;\r\n        }\r\n        count = 0;\r\n        for (uint256 i = 0; i < assetCount; i++) {\r\n            address asset = assets[uint8(i)];\r\n            uint256 assetAmount = buyerState.optionValueToCollect[asset];\r\n            if (assetAmount > 0) {\r\n                values[count] = StructureData.CollectableValue({\r\n                    asset: asset,\r\n                    amount: assetAmount\r\n                });\r\n                count++;\r\n            }\r\n        }\r\n        return values;\r\n    }\r\n\r\n\r\n    modifier lock() {\r\n        require(locked == 0, \"locked\");\r\n        locked = 1;\r\n        _;\r\n        locked = 0;\r\n    }\r\n    modifier managerOnly() {\r\n        require(managerRoleAddress == msg.sender, \"!manager\");\r\n        _;\r\n    }\r\n\r\n    modifier whitelisted() {\r\n        require(whitelist[msg.sender], \"!whitelisted\");\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IOptionVaultManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.8.4;\r\nimport {StructureData} from \"../libraries/StructureData.sol\";  \r\n\r\ninterface IOptionVaultManager {\r\n    //manager methods\r\n    function addToWhitelist(address[] memory _whitelistAddresses) external;     \r\n    function removeFromWhitelist(address[] memory _delistAddresses) external;\r\n    function kickOffOptions(StructureData.KickOffOptionParameters[] memory _kickoffs) external;\r\n    function expireOptions(StructureData.ExpiredOptionParameters[] memory _expired) external;\r\n    function sellOptions(StructureData.OnGoingOptionParameters[] memory _cutoff) external;\r\n    function setCapacities(StructureData.CapacityParameters[] memory _capacities) external;\r\n    //trader methods\r\n    function collectOptionHolderValues() external;\r\n    function optionHolderValues() external view returns(StructureData.CollectableValue[] memory);\r\n    function buyOptions(uint8[] memory _vaultIds) payable external; \r\n    function whitelistTraders() external view returns(address[] memory);\r\n}"
    },
    "contracts/SingleDirectionOptionUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\nimport {\r\n    OwnableUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport {SingleDirectionOption} from \"./SingleDirectionOption.sol\";\r\nimport {StructureData} from \"./libraries/StructureData.sol\";\r\ncontract SingleDirectionOptionUpgradeable is OwnableUpgradeable, SingleDirectionOption {\r\n    function initialize(\r\n        address _owner,\r\n        address _manager,StructureData.VaultDefinition[] memory _vaultDefinitions\r\n    ) external initializer { \r\n        \r\n        require(_owner != address(0)); \r\n        locked = 0;\r\n        __Ownable_init();\r\n        transferOwnership(_owner);\r\n        setManagerInternal(_manager);\r\n        addVaultsInternal(_vaultDefinitions);  \r\n    }\r\n\r\n    function setManager(address _manager) external onlyOwner{\r\n        setManagerInternal(_manager);\r\n    }  \r\n    function addVaults(StructureData.VaultDefinition[] memory _vaultDefinitions) external onlyOwner{\r\n        addVaultsInternal(_vaultDefinitions);\r\n    }\r\n\r\n}\r\n "
    },
    "contracts/SingleDirectionOptionStatic.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\"; \r\nimport {SingleDirectionOption} from \"./SingleDirectionOption.sol\";\r\nimport {StructureData} from \"./libraries/StructureData.sol\";\r\n\r\ncontract SingleDirectionOptionStatic is Ownable, SingleDirectionOption { \r\n        \r\n    constructor(\r\n        address _owner,\r\n        address _manager,StructureData.VaultDefinition[] memory _vaultDefinitions\r\n    )  {\r\n        \r\n        require(_owner != address(0)); \r\n        locked = 0;\r\n        transferOwnership(_owner);\r\n        setManagerInternal(_manager);\r\n        addVaultsInternal(_vaultDefinitions);  \r\n    }\r\n\r\n    function setManager(address _manager) external onlyOwner{\r\n        setManagerInternal(_manager);\r\n    }  \r\n\r\n    function addVaults(StructureData.VaultDefinition[] memory _vaultDefinitions) external onlyOwner{\r\n        addVaultsInternal(_vaultDefinitions);\r\n    }\r\n\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/vendor/upgrades/UpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport './Proxy.sol';\r\nimport '@openzeppelin/contracts/utils/Address.sol';\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, bytes memory _data) payable {\r\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return impl Address of the current implementation\r\n   */\r\n  function _implementation() internal override view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/vendor/upgrades/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\nabstract contract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  fallback () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @dev Receive function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  receive () payable external {\r\n    // _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal virtual view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize())\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize()) }\r\n      default { return(0, returndatasize()) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal virtual {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n"
    },
    "contracts/vendor/upgrades/AdminUpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.8;\r\n\r\nimport './UpgradeabilityProxy.sol';\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param admin_ Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, address admin_, bytes memory _data) UpgradeabilityProxy(_logic, _data) payable {\r\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\r\n    _setAdmin(admin_);\r\n  }\r\n\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n\r\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return adminAddress The address of the proxy admin.\r\n   */\r\n  function admin() external ifAdmin returns (address adminAddress) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return implementationAddress The address of the implementation.\r\n   */\r\n  function implementation() external ifAdmin returns (address implementationAddress) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @return adm The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() internal override virtual {\r\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n    super._willFallback();\r\n  }\r\n}\r\n"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract ERC20Mock is ERC20 {\r\n    uint8 private _decimals;\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 supply,\r\n        uint8 decimals_\r\n    ) ERC20(name, symbol) {\r\n        _decimals = decimals_;\r\n        _mint(msg.sender, supply);\r\n    }\r\n\r\n      \r\n     function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n     }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}