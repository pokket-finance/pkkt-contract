{
  "address": "0x1C7BA061D0C86d5C4707D81fA2A38702FF8C387e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "_vaultId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_redeemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_round",
          "type": "uint16"
        }
      ],
      "name": "CancelWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "_vaultId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_round",
          "type": "uint16"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "_vaultId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_redeemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_round",
          "type": "uint16"
        }
      ],
      "name": "InitiateWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "_vaultId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_currentRound",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_buyerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_strike",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_premiumRate",
          "type": "uint16"
        }
      ],
      "name": "OptionBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "_vaultId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_currentRound",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_expiryLevel",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_optionHolderValue",
          "type": "uint256"
        }
      ],
      "name": "OptionExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "_vaultId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_round",
          "type": "uint16"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_whitelistAddresses",
          "type": "address[]"
        }
      ],
      "name": "addToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vaultId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "assetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "callOrPut",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.VaultDefinition[]",
          "name": "_vaultDefinitions",
          "type": "tuple[]"
        }
      ],
      "name": "addVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "_vaultIds",
          "type": "uint8[]"
        }
      ],
      "name": "buyOptions",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_vaultId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_redeemAmount",
          "type": "uint256"
        }
      ],
      "name": "cancelWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectOptionHolderValues",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_vaultId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_vaultId",
          "type": "uint8"
        }
      ],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "expiryLevel",
              "type": "uint128"
            },
            {
              "internalType": "uint8",
              "name": "vaultId",
              "type": "uint8"
            }
          ],
          "internalType": "struct StructureData.ExpiredOptionParameters[]",
          "name": "_expiryParameters",
          "type": "tuple[]"
        }
      ],
      "name": "expireOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expiredHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "strike",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "expiryLevel",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "optionHolderValue",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "round",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "vaultId",
              "type": "uint8"
            }
          ],
          "internalType": "struct StructureData.ExpiredVaultState[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_vaultId",
          "type": "uint8"
        }
      ],
      "name": "getUserState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "pending",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "redeemed",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "expiredAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "expiredQueuedRedeemAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "onGoingAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "onGoingQueuedRedeemAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "lastUpdateRound",
              "type": "uint16"
            }
          ],
          "internalType": "struct StructureData.UserState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_vaultId",
          "type": "uint8"
        }
      ],
      "name": "getVaultState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "totalPending",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalRedeemed",
              "type": "uint128"
            },
            {
              "internalType": "uint32",
              "name": "cutOffAt",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "currentRound",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "maxCapacity",
              "type": "uint128"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "queuedRedeemAmount",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "strike",
                  "type": "uint128"
                },
                {
                  "internalType": "uint16",
                  "name": "premiumRate",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "buyerAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct StructureData.OptionState",
              "name": "onGoing",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "amount",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "queuedRedeemAmount",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "strike",
                  "type": "uint128"
                },
                {
                  "internalType": "uint16",
                  "name": "premiumRate",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "buyerAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct StructureData.OptionState",
              "name": "expired",
              "type": "tuple"
            }
          ],
          "internalType": "struct StructureData.VaultSnapShot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vaultId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "assetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "callOrPut",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.VaultDefinition[]",
          "name": "_vaultDefinitions",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_vaultId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_redeemAmount",
          "type": "uint256"
        }
      ],
      "name": "initiateWithraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vaultId",
              "type": "uint8"
            },
            {
              "internalType": "uint128",
              "name": "maxCapacity",
              "type": "uint128"
            },
            {
              "internalType": "uint8",
              "name": "environment",
              "type": "uint8"
            }
          ],
          "internalType": "struct StructureData.KickOffOptionParameters[]",
          "name": "_kickoffs",
          "type": "tuple[]"
        }
      ],
      "name": "kickOffOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managerRoleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionHolderValues",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct StructureData.CollectableValue[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_delistAddresses",
          "type": "address[]"
        }
      ],
      "name": "removeFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "strike",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "vaultId",
              "type": "uint8"
            }
          ],
          "internalType": "struct StructureData.OnGoingOptionParameters[]",
          "name": "_ongoingParameters",
          "type": "tuple[]"
        }
      ],
      "name": "sellOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "vaultId",
              "type": "uint8"
            },
            {
              "internalType": "uint128",
              "name": "maxCapacity",
              "type": "uint128"
            }
          ],
          "internalType": "struct StructureData.CapacityParameters[]",
          "name": "_capacities",
          "type": "tuple[]"
        }
      ],
      "name": "setCapacities",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "vaultDefinitions",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "vaultId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "assetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "callOrPut",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistTraders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_vaultId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x873b6ed9b056ac571829ec52396984f2906920921909740e7d5434e8a5ee269b",
  "receipt": {
    "to": null,
    "from": "0x7BC55d94EEC38E15fE84c90Bf2B10BF4Eabd1189",
    "contractAddress": "0x1C7BA061D0C86d5C4707D81fA2A38702FF8C387e",
    "transactionIndex": 0,
    "gasUsed": "3960932",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xaba2360cdf3eb5b6c2f9920cd8dd47a28979280550f2f787f5b76b74ad194938",
    "transactionHash": "0x873b6ed9b056ac571829ec52396984f2906920921909740e7d5434e8a5ee269b",
    "logs": [],
    "blockNumber": 20878820,
    "cumulativeGasUsed": "3960932",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8c90d2df867b8fd5d3f295b400af15bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_vaultId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_round\",\"type\":\"uint16\"}],\"name\":\"CancelWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_vaultId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_round\",\"type\":\"uint16\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_vaultId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_round\",\"type\":\"uint16\"}],\"name\":\"InitiateWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_vaultId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_currentRound\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_strike\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_premiumRate\",\"type\":\"uint16\"}],\"name\":\"OptionBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_vaultId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_currentRound\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_expiryLevel\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_optionHolderValue\",\"type\":\"uint256\"}],\"name\":\"OptionExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_vaultId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_round\",\"type\":\"uint16\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelistAddresses\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vaultId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"assetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.VaultDefinition[]\",\"name\":\"_vaultDefinitions\",\"type\":\"tuple[]\"}],\"name\":\"addVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_vaultIds\",\"type\":\"uint8[]\"}],\"name\":\"buyOptions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_vaultId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_redeemAmount\",\"type\":\"uint256\"}],\"name\":\"cancelWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectOptionHolderValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_vaultId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_vaultId\",\"type\":\"uint8\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"expiryLevel\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"vaultId\",\"type\":\"uint8\"}],\"internalType\":\"struct StructureData.ExpiredOptionParameters[]\",\"name\":\"_expiryParameters\",\"type\":\"tuple[]\"}],\"name\":\"expireOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiredHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"expiryLevel\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optionHolderValue\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"vaultId\",\"type\":\"uint8\"}],\"internalType\":\"struct StructureData.ExpiredVaultState[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_vaultId\",\"type\":\"uint8\"}],\"name\":\"getUserState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"pending\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"redeemed\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"expiredAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"expiredQueuedRedeemAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"onGoingAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"onGoingQueuedRedeemAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"lastUpdateRound\",\"type\":\"uint16\"}],\"internalType\":\"struct StructureData.UserState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_vaultId\",\"type\":\"uint8\"}],\"name\":\"getVaultState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"totalPending\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalRedeemed\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"cutOffAt\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"currentRound\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"maxCapacity\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"queuedRedeemAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"}],\"internalType\":\"struct StructureData.OptionState\",\"name\":\"onGoing\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"queuedRedeemAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"}],\"internalType\":\"struct StructureData.OptionState\",\"name\":\"expired\",\"type\":\"tuple\"}],\"internalType\":\"struct StructureData.VaultSnapShot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vaultId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"assetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.VaultDefinition[]\",\"name\":\"_vaultDefinitions\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_vaultId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_redeemAmount\",\"type\":\"uint256\"}],\"name\":\"initiateWithraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vaultId\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"maxCapacity\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"environment\",\"type\":\"uint8\"}],\"internalType\":\"struct StructureData.KickOffOptionParameters[]\",\"name\":\"_kickoffs\",\"type\":\"tuple[]\"}],\"name\":\"kickOffOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerRoleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionHolderValues\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct StructureData.CollectableValue[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_delistAddresses\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"vaultId\",\"type\":\"uint8\"}],\"internalType\":\"struct StructureData.OnGoingOptionParameters[]\",\"name\":\"_ongoingParameters\",\"type\":\"tuple[]\"}],\"name\":\"sellOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vaultId\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"maxCapacity\",\"type\":\"uint128\"}],\"internalType\":\"struct StructureData.CapacityParameters[]\",\"name\":\"_capacities\",\"type\":\"tuple[]\"}],\"name\":\"setCapacities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"vaultDefinitions\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"vaultId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"assetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistTraders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_vaultId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SingleDirectionOptionUpgradeable.sol\":\"SingleDirectionOptionUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/OptionVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {\\r\\n    SafeERC20\\r\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";\\r\\nimport {Utils} from \\\"./libraries/Utils.sol\\\";\\r\\nimport {OptionLifecycle} from \\\"./libraries/OptionLifecycle.sol\\\";\\r\\nimport {OptionVaultStorage} from \\\"./storage/OptionVaultStorage.sol\\\";\\r\\nimport \\\"./interfaces/IOptionVaultManager.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\n\\r\\nabstract contract OptionVaultManager is\\r\\n    OptionVaultStorage,\\r\\n    IOptionVaultManager\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n    using Utils for uint256;\\r\\n    using SafeCast for uint256;\\r\\n    using SafeCast for int256;\\r\\n \\r\\n\\r\\n    function setManagerInternal(address _manager) internal {\\r\\n        require(_manager != address(0), \\\"!manager\\\");\\r\\n        managerRoleAddress = _manager;\\r\\n    }\\r\\n\\r\\n    function addVaultsInternal(\\r\\n        StructureData.VaultDefinition[] memory _vaultDefinitions\\r\\n    ) internal {\\r\\n        uint256 length = _vaultDefinitions.length;\\r\\n        uint8 vaultCount_ = vaultCount;\\r\\n        uint8 assetCount_ = assetCount;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            StructureData.VaultDefinition memory vault = _vaultDefinitions[i];\\r\\n            vault.vaultId = vaultCount_;\\r\\n            vaultDefinitions[vaultCount_++] = vault;\\r\\n            bool knownAsset = false;\\r\\n            for (uint8 j = 0; j < assetCount_; j++) {\\r\\n                if (assets[j] == vault.asset) {\\r\\n                    knownAsset = true;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            if (!knownAsset) {\\r\\n                assets[assetCount_++] = vault.asset;\\r\\n            }\\r\\n        }\\r\\n        vaultCount = vaultCount_;\\r\\n        assetCount = assetCount_;\\r\\n    }\\r\\n\\r\\n    function addToWhitelist(address[] memory _whitelistAddresses)\\r\\n        external\\r\\n        override\\r\\n        managerOnly\\r\\n    {\\r\\n        uint8 traderCount_ = traderCount;\\r\\n        for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\\r\\n            address trader = _whitelistAddresses[i];\\r\\n            if (!whitelist[trader]) {\\r\\n                whitelist[trader] = true;\\r\\n                bool existingTrader = false;\\r\\n                for (uint8 j = 0; j < traderCount_; j++) {\\r\\n                    if (traders[j] == trader) {\\r\\n                        existingTrader = true;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n                if (!existingTrader) {\\r\\n                    traders[traderCount_++] = trader;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        traderCount = traderCount_;\\r\\n    }\\r\\n\\r\\n    function removeFromWhitelist(address[] memory _delistAddresses)\\r\\n        external\\r\\n        override\\r\\n        managerOnly\\r\\n    {\\r\\n        for (uint256 i = 0; i < _delistAddresses.length; i++) {\\r\\n            whitelist[_delistAddresses[i]] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function whitelistTraders()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        if (traderCount == 0) {\\r\\n            return new address[](0);\\r\\n        }\\r\\n        uint256 count = 0;\\r\\n        for (uint8 i = 0; i < traderCount; i++) {\\r\\n            if (whitelist[traders[i]]) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        address[] memory whitelistData = new address[](count);\\r\\n        count = 0;\\r\\n        for (uint8 i = 0; i < traderCount; i++) {\\r\\n            if (whitelist[traders[i]]) {\\r\\n                whitelistData[count++] = traders[i];\\r\\n            }\\r\\n        }\\r\\n        return whitelistData;\\r\\n    }\\r\\n\\r\\n    //only needed for the initial kick off\\r\\n    function kickOffOptions(\\r\\n        StructureData.KickOffOptionParameters[] memory _kickoffs\\r\\n    ) external override managerOnly {\\r\\n        for (uint256 i = 0; i < _kickoffs.length; i++) {\\r\\n            StructureData.KickOffOptionParameters memory kickoff = _kickoffs[i];\\r\\n            StructureData.VaultState storage data =\\r\\n                vaultStates[kickoff.vaultId];\\r\\n            require(data.currentRound == 0, \\\"already kicked off\\\");\\r\\n            uint256 cutOffAt = 0;\\r\\n            if (kickoff.environment == 0) {\\r\\n                //prod\\r\\n                cutOffAt = block.timestamp.add(OptionLifecycle.PERIOD);\\r\\n            } else if (kickoff.environment == 1) {\\r\\n                //qa\\r\\n                cutOffAt = block.timestamp.add(OptionLifecycle.PERIOD_QA);\\r\\n            } else {\\r\\n                //test\\r\\n                cutOffAt = block.timestamp.add(OptionLifecycle.PERIOD_TEST);\\r\\n            }\\r\\n            require(cutOffAt <= type(uint32).max, \\\"cutOffAt Overflow\\\");\\r\\n            data.cutOffAt = uint32(cutOffAt);\\r\\n\\r\\n            data.maxCapacity = kickoff.maxCapacity;\\r\\n            data.environment = kickoff.environment;\\r\\n            data.currentRound = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setCapacities(\\r\\n        StructureData.CapacityParameters[] memory _capacities\\r\\n    ) external override managerOnly {\\r\\n        for (uint256 i = 0; i < _capacities.length; i++) {\\r\\n            StructureData.CapacityParameters memory capacity = _capacities[i];\\r\\n            StructureData.VaultState storage data =\\r\\n                vaultStates[capacity.vaultId];\\r\\n            uint256 currentTVL =\\r\\n                uint256(data.totalPending)\\r\\n                    .add(data.onGoing.amount)\\r\\n                    .add(data.expired.amount)\\r\\n                    .sub(data.expired.queuedRedeemAmount); \\r\\n            require(\\r\\n                currentTVL <= capacity.maxCapacity,\\r\\n                \\\"Max Cap less than tvl\\\"\\r\\n            );\\r\\n            data.maxCapacity = capacity.maxCapacity;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //parameters for option to sell, todo: whitelist\\r\\n    function sellOptions(\\r\\n        StructureData.OnGoingOptionParameters[] memory _ongoingParameters\\r\\n    ) external override managerOnly {\\r\\n        for (uint256 i = 0; i < _ongoingParameters.length; i++) {\\r\\n            StructureData.OnGoingOptionParameters memory ongoingParameters =\\r\\n                _ongoingParameters[i];\\r\\n            require(ongoingParameters.premiumRate > 0, \\\"!premium\\\");\\r\\n            require(ongoingParameters.strike > 0, \\\"!strike\\\");\\r\\n            StructureData.VaultState storage data =\\r\\n                vaultStates[ongoingParameters.vaultId];\\r\\n            OptionLifecycle.rollToNextRoundIfNeeded(data);\\r\\n            require(data.currentRound > 1, \\\"No selling round\\\");\\r\\n            StructureData.OptionState storage onGoing = data.onGoing;\\r\\n            require(onGoing.buyerAddress == address(0), \\\"Already sold\\\");\\r\\n            onGoing.strike = ongoingParameters.strike;\\r\\n            onGoing.premiumRate = ongoingParameters.premiumRate;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //after buying by sending back the premium, the premium and strike can no longer be changed\\r\\n    function buyOptions(uint8[] memory _vaultIds)\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n        whitelisted\\r\\n        lock\\r\\n    {\\r\\n        uint256 ethToSend = 0;\\r\\n        for (uint256 i = 0; i < _vaultIds.length; i++) {\\r\\n            uint8 vaultId = _vaultIds[i];\\r\\n            StructureData.VaultState storage data = vaultStates[vaultId];\\r\\n            OptionLifecycle.rollToNextRoundIfNeeded(data);\\r\\n            StructureData.OptionState storage onGoing = data.onGoing;\\r\\n            require(onGoing.amount > 0, \\\"Nothing to sell\\\");\\r\\n            require(onGoing.buyerAddress == address(0), \\\"Already sold\\\");\\r\\n            //if there is any auto rolling, we must wait until expiry level specified\\r\\n            if (\\r\\n                data.expired.buyerAddress != address(0) &&\\r\\n                data.expired.amount - data.expired.queuedRedeemAmount > 0\\r\\n            ) {\\r\\n                require(\\r\\n                    data.depositPriceAfterExpiryPerRound[\\r\\n                        data.currentRound - 2\\r\\n                    ] > 0,\\r\\n                    \\\"Expiry level not specified yet\\\"\\r\\n                );\\r\\n            }\\r\\n            uint256 total =\\r\\n                uint256(onGoing.amount).add(data.expired.amount).sub(\\r\\n                    data.expired.queuedRedeemAmount\\r\\n                );\\r\\n            Utils.assertUint128(total);\\r\\n            uint256 premium = total.premium(onGoing.premiumRate);\\r\\n            address asset = vaultDefinitions[vaultId].asset;\\r\\n             \\r\\n            StructureData.SoldVaultState memory soldState = StructureData.SoldVaultState({\\r\\n                amount: uint128(total),\\r\\n                strike: onGoing.strike,\\r\\n                premiumRate: onGoing.premiumRate,\\r\\n                buyerAddress: msg.sender,\\r\\n                expiryLevel: 0,\\r\\n                optionHolderValue: 0 \\r\\n            });\\r\\n            soldVaultStates[vaultId][data.currentRound - 1] = soldState;\\r\\n            \\r\\n            emit OptionBought(vaultId, data.currentRound - 1, msg.sender, total, onGoing.strike, onGoing.premiumRate);\\r\\n\\r\\n            if (asset == address(0)) {\\r\\n                ethToSend = ethToSend.add(premium);\\r\\n            } else {\\r\\n                IERC20(asset).safeTransferFrom(\\r\\n                    msg.sender,\\r\\n                    address(this),\\r\\n                    premium\\r\\n                );\\r\\n            }\\r\\n            onGoing.buyerAddress = msg.sender;\\r\\n        }\\r\\n        require(ethToSend >= msg.value, \\\"Not enough eth\\\");\\r\\n        //transfer back extra\\r\\n        if (ethToSend > msg.value) {\\r\\n            payable(msg.sender).transfer(ethToSend - msg.value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function expireOptions(\\r\\n        StructureData.ExpiredOptionParameters[] memory _expiryParameters\\r\\n    ) external override managerOnly {\\r\\n        for (uint256 i = 0; i < _expiryParameters.length; i++) {\\r\\n            StructureData.ExpiredOptionParameters memory expiryParameters =\\r\\n                _expiryParameters[i];\\r\\n            require(expiryParameters.expiryLevel > 0, \\\"!expiryLevel\\\");\\r\\n            StructureData.VaultState storage data =\\r\\n                vaultStates[expiryParameters.vaultId];\\r\\n            OptionLifecycle.rollToNextRoundIfNeeded(data);\\r\\n            require(data.currentRound > 2, \\\"No expired round\\\");\\r\\n            StructureData.OptionState storage expired = data.expired;\\r\\n            if (expired.amount == 0 || expired.buyerAddress == address(0)) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            require(expired.strike > 0, \\\"!strike\\\");\\r\\n            address asset = vaultDefinitions[expiryParameters.vaultId].asset;\\r\\n            uint256 diff =\\r\\n                vaultDefinitions[expiryParameters.vaultId].callOrPut\\r\\n                    ? (\\r\\n                        expiryParameters.expiryLevel > expired.strike\\r\\n                            ? expiryParameters.expiryLevel - expired.strike\\r\\n                            : 0\\r\\n                    )\\r\\n                    : (\\r\\n                        expired.strike > expiryParameters.expiryLevel\\r\\n                            ? expired.strike - expiryParameters.expiryLevel\\r\\n                            : 0\\r\\n                    );\\r\\n\\r\\n            //can be withdrawn by trader\\r\\n            StructureData.OptionBuyerState storage buyerState =\\r\\n                buyerStates[expired.buyerAddress];\\r\\n\\r\\n            uint256 optionHolderValue =\\r\\n                diff.mul(expired.amount).div(\\r\\n                    vaultDefinitions[expiryParameters.vaultId].callOrPut\\r\\n                        ? expiryParameters.expiryLevel\\r\\n                        : expired.strike\\r\\n                );\\r\\n            Utils.assertUint128(optionHolderValue);\\r\\n            buyerState.optionValueToCollect[asset] = uint128(\\r\\n                optionHolderValue.add(buyerState.optionValueToCollect[asset])\\r\\n            ); \\r\\n   \\r\\n           StructureData.SoldVaultState storage soldState = soldVaultStates[expiryParameters.vaultId][data.currentRound - 2];\\r\\n           soldState.expiryLevel = expiryParameters.expiryLevel;\\r\\n           soldState.optionHolderValue = uint128(optionHolderValue);\\r\\n           emit OptionExpired(expiryParameters.vaultId, data.currentRound - 2, expiryParameters.expiryLevel, uint128(optionHolderValue));\\r\\n\\r\\n            uint256 remaining =\\r\\n                uint256(expired.amount).withPremium(expired.premiumRate).sub(\\r\\n                    optionHolderValue\\r\\n                );\\r\\n            uint256 depositPriceAfterExpiry =\\r\\n                remaining.mul(10**OptionLifecycle.ROUND_PRICE_DECIMALS).div(\\r\\n                    expired.amount\\r\\n                );\\r\\n            Utils.assertUint128(depositPriceAfterExpiry);\\r\\n            data.depositPriceAfterExpiryPerRound[\\r\\n                data.currentRound - 2\\r\\n            ] = uint128(depositPriceAfterExpiry);\\r\\n\\r\\n            uint256 redeemed =\\r\\n                remaining.mul(expired.queuedRedeemAmount).div(expired.amount);\\r\\n            uint256 totalRedeemed = redeemed.add(data.totalRedeemed);\\r\\n            Utils.assertUint128(totalRedeemed);\\r\\n            data.totalRedeemed = uint128(totalRedeemed);\\r\\n            uint256 totalOnGoing =\\r\\n                remaining.sub(redeemed).add(data.onGoing.amount);\\r\\n            Utils.assertUint128(totalOnGoing);\\r\\n            data.onGoing.amount = uint128(totalOnGoing);\\r\\n            expired.amount = 0;\\r\\n            expired.queuedRedeemAmount = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function collectOptionHolderValues() external override whitelisted lock {\\r\\n        StructureData.OptionBuyerState storage buyerState =\\r\\n            buyerStates[msg.sender];\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            address asset = assets[uint8(i)];\\r\\n            uint256 assetAmount = buyerState.optionValueToCollect[asset];\\r\\n            if (assetAmount > 0) {\\r\\n                buyerState.optionValueToCollect[asset] = 0;\\r\\n                OptionLifecycle.withdraw(msg.sender, assetAmount, asset);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function optionHolderValues()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (StructureData.CollectableValue[] memory)\\r\\n    {\\r\\n        StructureData.OptionBuyerState storage buyerState =\\r\\n            buyerStates[msg.sender];\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            address asset = assets[uint8(i)];\\r\\n            uint256 assetAmount = buyerState.optionValueToCollect[asset];\\r\\n            if (assetAmount > 0) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        StructureData.CollectableValue[] memory values =\\r\\n            new StructureData.CollectableValue[](count);\\r\\n        if (count == 0) {\\r\\n            return values;\\r\\n        }\\r\\n        count = 0;\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            address asset = assets[uint8(i)];\\r\\n            uint256 assetAmount = buyerState.optionValueToCollect[asset];\\r\\n            if (assetAmount > 0) {\\r\\n                values[count] = StructureData.CollectableValue({\\r\\n                    asset: asset,\\r\\n                    amount: assetAmount\\r\\n                });\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        return values;\\r\\n    }\\r\\n\\r\\n    function expiredHistory()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (StructureData.ExpiredVaultState[] memory)\\r\\n    {\\r\\n        uint256 count = 0;\\r\\n        for(uint8 vaultId = 0; vaultId < vaultCount; vaultId++) {\\r\\n\\r\\n             StructureData.VaultState storage data = vaultStates[vaultId];\\r\\n             StructureData.VaultSnapShot memory vaultSnapshot = OptionLifecycle.recalcVault(data); \\r\\n             if (vaultSnapshot.currentRound < 3){\\r\\n                 continue;\\r\\n             }\\r\\n             for(uint16 round = 1; round <= vaultSnapshot.currentRound - 2; round++) {  \\r\\n                  StructureData.SoldVaultState storage soldState = soldVaultStates[vaultId][round];\\r\\n                 if (soldState.buyerAddress == msg.sender && \\r\\n                     (soldState.expiryLevel != 0 || round < vaultSnapshot.currentRound - 2)) {\\r\\n                     count++;\\r\\n                 }\\r\\n             }\\r\\n        }\\r\\n\\r\\n        StructureData.ExpiredVaultState[] memory values = new StructureData.ExpiredVaultState[](count);\\r\\n        if (count == 0) {\\r\\n            return values;   \\r\\n        }   \\r\\n        count = 0;\\r\\n        for(uint8 vaultId = 0; vaultId <vaultCount; vaultId++) {\\r\\n\\r\\n             StructureData.VaultState storage data = vaultStates[vaultId];\\r\\n             StructureData.VaultSnapShot memory vaultSnapshot = OptionLifecycle.recalcVault(data); \\r\\n             if (vaultSnapshot.currentRound < 3){\\r\\n                 continue;\\r\\n             }\\r\\n             for(uint16 round = 1; round <= vaultSnapshot.currentRound - 2; round++) {  \\r\\n                 StructureData.SoldVaultState memory soldState = soldVaultStates[vaultId][round];\\r\\n                 if (soldState.buyerAddress != msg.sender) {\\r\\n                     continue;\\r\\n                 }\\r\\n                 if (soldState.expiryLevel == 0) {\\r\\n                     //expiryLevel not specified \\r\\n                     if (round == vaultSnapshot.currentRound - 2) {\\r\\n                         continue;\\r\\n                     }\\r\\n                     //expiryLevel not specified, but already passed cutoff, set it to strike\\r\\n                     soldState.expiryLevel = soldState.strike;\\r\\n                 }\\r\\n                 StructureData.ExpiredVaultState memory value = StructureData.ExpiredVaultState({\\r\\n                     amount: soldState.amount, \\r\\n                     strike: soldState.strike,\\r\\n                     premiumRate: soldState.premiumRate,\\r\\n                     round: round,\\r\\n                     vaultId: vaultId,\\r\\n                     expiryLevel: soldState.expiryLevel,\\r\\n                     optionHolderValue: soldState.optionHolderValue\\r\\n                 });\\r\\n                 values[count++] = value;\\r\\n             }\\r\\n        }\\r\\n        \\r\\n        return values;\\r\\n    }\\r\\n\\r\\n    modifier lock() {\\r\\n        require(locked == 0, \\\"locked\\\");\\r\\n        locked = 1;\\r\\n        _;\\r\\n        locked = 0;\\r\\n    }\\r\\n    modifier managerOnly() {\\r\\n        require(managerRoleAddress == msg.sender, \\\"!manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whitelisted() {\\r\\n        require(whitelist[msg.sender], \\\"!whitelisted\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb79baa0e0dca36c8cad6582129ee6267785cb88d1bc65c402b60a37311c3bec9\",\"license\":\"MIT\"},\"contracts/SingleDirectionOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\"; \\r\\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";\\r\\nimport {Utils} from \\\"./libraries/Utils.sol\\\";\\r\\nimport {OptionLifecycle} from \\\"./libraries/OptionLifecycle.sol\\\";\\r\\nimport \\\"./interfaces/IDOVOption.sol\\\";\\r\\nimport \\\"./OptionVaultManager.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract SingleDirectionOption is OptionVaultManager, IDOVOption {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeCast for uint256;\\r\\n    using SafeMath for uint256;\\r\\n    using Utils for uint256; \\r\\n  \\r\\n    modifier validateVaultId(uint8 _vaultId) {\\r\\n        require(_vaultId < vaultCount, \\\"Invalid vaultId\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    function initiateWithraw(uint8 _vaultId, uint256 _redeemAmount)\\r\\n        external\\r\\n        override \\r\\n        validateVaultId(_vaultId) { \\r\\n        OptionLifecycle.initiateWithrawStorage(\\r\\n            vaultStates[_vaultId],\\r\\n            msg.sender,\\r\\n            _redeemAmount\\r\\n        );\\r\\n \\r\\n        emit InitiateWithdraw(msg.sender, _vaultId, _redeemAmount, vaultStates[_vaultId].currentRound);\\r\\n    }\\r\\n\\r\\n \\r\\n\\r\\n    function cancelWithdraw(uint8 _vaultId, uint256 _redeemAmount) \\r\\n        external \\r\\n        override \\r\\n        validateVaultId(_vaultId) {\\r\\n\\r\\n        OptionLifecycle.cancelWithrawStorage(\\r\\n            vaultStates[_vaultId],\\r\\n            msg.sender,\\r\\n            _redeemAmount\\r\\n        );\\r\\n\\r\\n        emit CancelWithdraw(msg.sender, _vaultId, _redeemAmount, vaultStates[_vaultId].currentRound);\\r\\n         \\r\\n    }\\r\\n    \\r\\n    //withdraw pending and expired amount\\r\\n    function withdraw(uint8 _vaultId, uint256 _amount) \\r\\n        external \\r\\n        override \\r\\n        validateVaultId(_vaultId) lock{ \\r\\n \\r\\n        OptionLifecycle.withdrawStorage(\\r\\n            vaultStates[_vaultId],\\r\\n            msg.sender,\\r\\n            _amount);\\r\\n        OptionLifecycle.withdraw(msg.sender, _amount, vaultDefinitions[_vaultId].asset);\\r\\n        \\r\\n        emit Withdraw(msg.sender, _vaultId, _amount, vaultStates[_vaultId].currentRound);\\r\\n    }\\r\\n\\r\\n    //deposit eth\\r\\n    function depositETH(uint8 _vaultId) external payable override \\r\\n        validateVaultId(_vaultId) lock{ \\r\\n\\r\\n        require(msg.value > 0, \\\"!value\\\"); \\r\\n        address asset = vaultDefinitions[_vaultId].asset; \\r\\n        require(asset == address(0), \\\"!ETH\\\");\\r\\n        StructureData.VaultState storage data = vaultStates[_vaultId];\\r\\n        require(data.cutOffAt > 0, \\\"!started\\\");\\r\\n        //todo: check for cap\\r\\n        OptionLifecycle.depositFor(\\r\\n            data,\\r\\n            msg.sender,\\r\\n            msg.value);\\r\\n  \\r\\n        emit Deposit(msg.sender, _vaultId,  msg.value, data.currentRound);\\r\\n    }\\r\\n\\r\\n    //deposit other erc20 coin, take wbtc\\r\\n    function deposit(uint8 _vaultId, uint256 _amount) external override \\r\\n        validateVaultId(_vaultId) lock{ \\r\\n        require(_amount > 0, \\\"!amount\\\"); \\r\\n        address asset = vaultDefinitions[_vaultId].asset; \\r\\n        require(asset != address(0), \\\"ETH\\\");\\r\\n        StructureData.VaultState storage data = vaultStates[_vaultId];\\r\\n        require(data.cutOffAt > 0, \\\"!started\\\"); \\r\\n\\r\\n        IERC20(asset).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n        OptionLifecycle.depositFor(\\r\\n            data,\\r\\n            msg.sender,\\r\\n            _amount); \\r\\n        emit Deposit(msg.sender, _vaultId,  _amount, data.currentRound);\\r\\n    }\\r\\n \\r\\n    function getUserState(uint8 _vaultId) external override view validateVaultId(_vaultId) returns (StructureData.UserState memory) {\\r\\n\\r\\n        StructureData.VaultState storage data = vaultStates[_vaultId];\\r\\n        (,uint16 currentRound) = OptionLifecycle.getRealRound(data);\\r\\n        StructureData.UserState storage state = data.userStates[msg.sender];\\r\\n        return OptionLifecycle.recalcState(data, state, currentRound);\\r\\n\\r\\n    }\\r\\n\\r\\n    \\r\\n    function getVaultState(uint8 _vaultId) external override view validateVaultId(_vaultId) returns(StructureData.VaultSnapShot memory) {\\r\\n        StructureData.VaultState storage data = vaultStates[_vaultId];\\r\\n        return OptionLifecycle.recalcVault(data);\\r\\n\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0369041a8645c69c91858b1ae15183a423681a245ac62570044fcc2a8b38134d\",\"license\":\"MIT\"},\"contracts/SingleDirectionOptionUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\nimport {\\r\\n    OwnableUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport {SingleDirectionOption} from \\\"./SingleDirectionOption.sol\\\";\\r\\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";\\r\\ncontract SingleDirectionOptionUpgradeable is OwnableUpgradeable, SingleDirectionOption {\\r\\n    function initialize(\\r\\n        address _owner,\\r\\n        address _manager,StructureData.VaultDefinition[] memory _vaultDefinitions\\r\\n    ) external initializer { \\r\\n        \\r\\n        require(_owner != address(0)); \\r\\n        locked = 0;\\r\\n        __Ownable_init();\\r\\n        transferOwnership(_owner);\\r\\n        setManagerInternal(_manager);\\r\\n        addVaultsInternal(_vaultDefinitions);  \\r\\n    }\\r\\n\\r\\n    function setManager(address _manager) external onlyOwner{\\r\\n        setManagerInternal(_manager);\\r\\n    }  \\r\\n    function addVaults(StructureData.VaultDefinition[] memory _vaultDefinitions) external onlyOwner{\\r\\n        addVaultsInternal(_vaultDefinitions);\\r\\n    }\\r\\n\\r\\n}\\r\\n \",\"keccak256\":\"0x3461d6f792271c015995c0c378f195ce3f2d950bd504cb673581701809a17e6b\",\"license\":\"MIT\"},\"contracts/interfaces/IDOVOption.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity =0.8.4; \\r\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";\\r\\n\\r\\ninterface IDOVOption {\\r\\n  \\r\\n\\r\\n    //deposit eth\\r\\n    function depositETH(uint8 _vaultId) external payable;\\r\\n\\r\\n    //deposit other erc20 coin, take wbtc or stable coin\\r\\n    function deposit(uint8 _vaultId, uint256 _amount) external;\\r\\n\\r\\n    //complete withdraw happens on the option vault\\r\\n    function initiateWithraw(uint8 _vaultId, uint256 _redeemAmount) external; \\r\\n\\r\\n    function cancelWithdraw(uint8 _vaultId, uint256 _redeemAmount) external;\\r\\n \\r\\n    \\r\\n    function withdraw(uint8 _vaultId, uint256 _amount) external; \\r\\n \\r\\n \\r\\n    function getUserState(uint8 _vaultId) external view returns (StructureData.UserState memory); \\r\\n \\r\\n    function getVaultState(uint8 _vaultId) external view returns(StructureData.VaultSnapShot memory); \\r\\n\\r\\n    \\r\\n    event Deposit(address indexed _account, uint8 indexed _vaultId, uint256 _amount, uint16 _round);\\r\\n    event InitiateWithdraw(address indexed _account, uint8 indexed _vaultId, uint256 _redeemAmount, uint16 _round);\\r\\n    event CancelWithdraw(address indexed _account, uint8 indexed _vaultId, uint256 _redeemAmount, uint16 _round);\\r\\n    event Withdraw(address indexed _account, uint8 indexed _vaultId, uint256 _amount, uint16 _round); \\r\\n \\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x17041ada0077335d793fcb1032d5e320739cce3c581b41e7e596096e24dd6cbc\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOptionVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity =0.8.4;\\r\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";  \\r\\n\\r\\ninterface IOptionVaultManager {\\r\\n    //manager methods\\r\\n    function addToWhitelist(address[] memory _whitelistAddresses) external;     \\r\\n    function removeFromWhitelist(address[] memory _delistAddresses) external;\\r\\n    function kickOffOptions(StructureData.KickOffOptionParameters[] memory _kickoffs) external;\\r\\n    function expireOptions(StructureData.ExpiredOptionParameters[] memory _expired) external;\\r\\n    function sellOptions(StructureData.OnGoingOptionParameters[] memory _cutoff) external;\\r\\n    function setCapacities(StructureData.CapacityParameters[] memory _capacities) external;\\r\\n    //trader methods\\r\\n    function collectOptionHolderValues() external;\\r\\n    function optionHolderValues() external view returns(StructureData.CollectableValue[] memory);\\r\\n    function expiredHistory() external view returns(StructureData.ExpiredVaultState[] memory);\\r\\n    function buyOptions(uint8[] memory _vaultIds) payable external; \\r\\n    function whitelistTraders() external view returns(address[] memory);\\r\\n\\r\\n    event OptionBought(uint8 indexed _vaultId, uint16 indexed _currentRound, address indexed _buyerAddress, uint256 _amount, uint128 _strike, uint16 _premiumRate);\\r\\n    \\r\\n    event OptionExpired(uint8 indexed _vaultId, uint16 indexed _currentRound, uint128 _expiryLevel, uint256 _optionHolderValue);\\r\\n\\r\\n}\",\"keccak256\":\"0xbac9caa7cd752c844920580d582854c7c346179c68250c35237fa786b13d8858\",\"license\":\"UNLICENSED\"},\"contracts/libraries/OptionLifecycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {\\r\\n    SafeERC20\\r\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./Utils.sol\\\";\\r\\nimport \\\"./StructureData.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\n\\r\\nlibrary OptionLifecycle {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Utils for uint128;\\r\\n    using Utils for uint256;\\r\\n    using SafeMath for uint256;\\r\\n    using SafeCast for uint256;\\r\\n    using StructureData for StructureData.UserState;\\r\\n    uint256 public constant PERIOD = 7 days;\\r\\n    uint256 public constant ROUND_PRICE_DECIMALS = 8;\\r\\n    uint256 public constant PERIOD_TEST = 60 seconds;\\r\\n    uint256 public constant PERIOD_QA = 1 hours;\\r\\n\\r\\n    function withdraw(\\r\\n        address _target,\\r\\n        uint256 _amount,\\r\\n        address _contractAddress\\r\\n    ) external {\\r\\n        require(_amount > 0, \\\"!amt\\\");\\r\\n        if (_contractAddress == address(0)) {\\r\\n            payable(_target).transfer(_amount);\\r\\n        } else {\\r\\n            IERC20(_contractAddress).safeTransfer(_target, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //for withdraw we need to check the deposit\\r\\n    function initiateWithrawStorage(\\r\\n        StructureData.VaultState storage _vault,\\r\\n        address _user,\\r\\n        uint256 _amountToRedeem\\r\\n    ) external {\\r\\n        rollToNextRoundIfNeeded(_vault);\\r\\n        require(_vault.currentRound > 1, \\\"Nothing to redeem\\\");\\r\\n\\r\\n        StructureData.UserState storage state = _vault.userStates[_user];\\r\\n        _vault.userStates[_user] = recalcState(\\r\\n            _vault,\\r\\n            state,\\r\\n            _vault.currentRound\\r\\n        );\\r\\n        state = _vault.userStates[_user];\\r\\n\\r\\n        uint256 maxInstantRedeemable =\\r\\n            uint256(state.expiredAmount).sub(state.expiredQueuedRedeemAmount);\\r\\n        uint256 maxRedeemable =\\r\\n            maxInstantRedeemable.add(state.onGoingAmount).sub(\\r\\n                state.onGoingQueuedRedeemAmount\\r\\n            );\\r\\n        require(_amountToRedeem <= maxRedeemable, \\\"Not enough to redeem\\\");\\r\\n\\r\\n        //check if the sold amount is expired or not\\r\\n        //1. withdraw initiated before the sold option expired (buyer not providing the expiry level yet)\\r\\n        //user could terminate all the sold options, and selling options\\r\\n        //user would be able to redeem all the sold options after expiry and all the selling option after next expiry\\r\\n        uint256 price =\\r\\n            _vault.currentRound > 2\\r\\n                ? _vault.depositPriceAfterExpiryPerRound[\\r\\n                    _vault.currentRound - 2\\r\\n                ]\\r\\n                : 0;\\r\\n        if (price == 0) {\\r\\n            //first redeem from the sold options\\r\\n            if (_amountToRedeem <= maxInstantRedeemable) {\\r\\n                uint256 expiredQueuedRedeemAmount =\\r\\n                    _amountToRedeem.add(state.expiredQueuedRedeemAmount);\\r\\n                Utils.assertUint128(expiredQueuedRedeemAmount);\\r\\n                state.expiredQueuedRedeemAmount = uint128(\\r\\n                    expiredQueuedRedeemAmount\\r\\n                );\\r\\n                uint256 totalExpiredQueuedRedeemAmount =\\r\\n                    _amountToRedeem.add(_vault.expired.queuedRedeemAmount);\\r\\n                Utils.assertUint128(totalExpiredQueuedRedeemAmount);\\r\\n                _vault.expired.queuedRedeemAmount = uint128(\\r\\n                    totalExpiredQueuedRedeemAmount\\r\\n                );\\r\\n            } else {\\r\\n                uint256 amountToRemdeemNextRound =\\r\\n                    _amountToRedeem - maxInstantRedeemable;\\r\\n                state.expiredQueuedRedeemAmount = state.expiredAmount;\\r\\n                uint256 onGoingQueuedRedeemAmount =\\r\\n                    amountToRemdeemNextRound.add(\\r\\n                        state.onGoingQueuedRedeemAmount\\r\\n                    );\\r\\n                Utils.assertUint128(onGoingQueuedRedeemAmount);\\r\\n                state.onGoingQueuedRedeemAmount = uint128(\\r\\n                    onGoingQueuedRedeemAmount\\r\\n                );\\r\\n                _vault.expired.queuedRedeemAmount = uint128(\\r\\n                    uint256(_vault.expired.queuedRedeemAmount).add(\\r\\n                        maxInstantRedeemable\\r\\n                    )\\r\\n                );\\r\\n                _vault.onGoing.queuedRedeemAmount = uint128(\\r\\n                    uint256(_vault.onGoing.queuedRedeemAmount).add(\\r\\n                        amountToRemdeemNextRound\\r\\n                    )\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        //2. withdraw initiated after the sold option expired (expiry level specified)\\r\\n        //user could terminate all the selling options\\r\\n        //user would be able to redeem all the selling options after next expiry\\r\\n        else {\\r\\n            uint256 onGoingQueuedRedeemAmount =\\r\\n                _amountToRedeem.add(state.onGoingQueuedRedeemAmount);\\r\\n            Utils.assertUint128(onGoingQueuedRedeemAmount);\\r\\n            state.onGoingQueuedRedeemAmount = uint128(\\r\\n                onGoingQueuedRedeemAmount\\r\\n            );\\r\\n            uint256 totalOnGoingQueuedRedeemAmount =\\r\\n                _amountToRedeem.add(_vault.onGoing.queuedRedeemAmount);\\r\\n            Utils.assertUint128(totalOnGoingQueuedRedeemAmount);\\r\\n            _vault.onGoing.queuedRedeemAmount = uint128(\\r\\n                totalOnGoingQueuedRedeemAmount\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function cancelWithrawStorage(\\r\\n        StructureData.VaultState storage _vault,\\r\\n        address _user,\\r\\n        uint256 _amountToRedeemToCancel\\r\\n    ) external {\\r\\n        rollToNextRoundIfNeeded(_vault);\\r\\n        require(_vault.currentRound > 1, \\\"Nothing to cancel redeem\\\");\\r\\n\\r\\n        StructureData.UserState storage state = _vault.userStates[_user];\\r\\n        _vault.userStates[_user] = recalcState(\\r\\n            _vault,\\r\\n            state,\\r\\n            _vault.currentRound\\r\\n        );\\r\\n        state = _vault.userStates[_user];\\r\\n\\r\\n        uint256 expiredQueuedRedeemAmount = state.expiredQueuedRedeemAmount;\\r\\n        uint256 onGoingQueuedRedeemAmount = state.onGoingQueuedRedeemAmount;\\r\\n        require(\\r\\n            _amountToRedeemToCancel <=\\r\\n                expiredQueuedRedeemAmount.add(onGoingQueuedRedeemAmount),\\r\\n            \\\"Not enough to cancel redeem\\\"\\r\\n        );\\r\\n        if (_amountToRedeemToCancel <= expiredQueuedRedeemAmount) {\\r\\n            state.expiredQueuedRedeemAmount = uint128(\\r\\n                expiredQueuedRedeemAmount.sub(_amountToRedeemToCancel)\\r\\n            );\\r\\n            _vault.expired.queuedRedeemAmount = uint128(\\r\\n                uint256(_vault.expired.queuedRedeemAmount).sub(\\r\\n                    _amountToRedeemToCancel\\r\\n                )\\r\\n            );\\r\\n            return;\\r\\n        }\\r\\n        state.expiredQueuedRedeemAmount = 0;\\r\\n        _vault.expired.queuedRedeemAmount = uint128(\\r\\n            uint256(_vault.expired.queuedRedeemAmount).sub(\\r\\n                expiredQueuedRedeemAmount\\r\\n            )\\r\\n        );\\r\\n        uint256 onGoingQueuedRedeeemAmountToCancel =\\r\\n            _amountToRedeemToCancel.sub(expiredQueuedRedeemAmount);\\r\\n        state.onGoingQueuedRedeemAmount = uint128(\\r\\n            onGoingQueuedRedeemAmount.sub(onGoingQueuedRedeeemAmountToCancel)\\r\\n        );\\r\\n        _vault.onGoing.queuedRedeemAmount = uint128(\\r\\n            uint256(_vault.onGoing.queuedRedeemAmount).sub(\\r\\n                onGoingQueuedRedeeemAmountToCancel\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawStorage(\\r\\n        StructureData.VaultState storage _vaultState,\\r\\n        address _user,\\r\\n        uint256 _amount\\r\\n    ) external {\\r\\n        rollToNextRoundIfNeeded(_vaultState);\\r\\n\\r\\n        StructureData.UserState storage state = _vaultState.userStates[_user];\\r\\n        _vaultState.userStates[_user] = recalcState(\\r\\n            _vaultState,\\r\\n            state,\\r\\n            _vaultState.currentRound\\r\\n        );\\r\\n        state = _vaultState.userStates[_user];\\r\\n\\r\\n        uint256 redeemed = state.redeemed;\\r\\n        if (state.redeemed >= _amount) {\\r\\n            state.redeemed = uint128(redeemed.sub(_amount));\\r\\n            _vaultState.totalRedeemed = uint128(\\r\\n                uint256(_vaultState.totalRedeemed).sub(_amount)\\r\\n            );\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        //then withdraw the pending\\r\\n        uint256 pendingAmountToWithdraw = _amount.sub(redeemed);\\r\\n        require(\\r\\n            state.pending >= pendingAmountToWithdraw,\\r\\n            \\\"Not enough to withdraw\\\"\\r\\n        );\\r\\n        _vaultState.totalRedeemed = uint128(\\r\\n            uint256(_vaultState.totalRedeemed).sub(redeemed)\\r\\n        );\\r\\n        _vaultState.totalPending = uint128(\\r\\n            uint256(_vaultState.totalPending).sub(pendingAmountToWithdraw)\\r\\n        );\\r\\n        state.redeemed = 0;\\r\\n        state.pending = uint128(\\r\\n            uint256(state.pending).sub(pendingAmountToWithdraw)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //for deposit we need to check the cap\\r\\n    function depositFor(\\r\\n        StructureData.VaultState storage _vaultState,\\r\\n        address _user,\\r\\n        uint256 _amount\\r\\n    ) external {\\r\\n        rollToNextRoundIfNeeded(_vaultState);\\r\\n\\r\\n        StructureData.UserState storage state = _vaultState.userStates[_user];\\r\\n        _vaultState.userStates[_user] = recalcState(\\r\\n            _vaultState,\\r\\n            state,\\r\\n            _vaultState.currentRound\\r\\n        );\\r\\n        state = _vaultState.userStates[_user];\\r\\n\\r\\n        uint256 newTVL =\\r\\n            _amount\\r\\n                .add(_vaultState.totalPending)\\r\\n                .add(_vaultState.onGoing.amount)\\r\\n                .add(_vaultState.expired.amount)\\r\\n                .sub(_vaultState.expired.queuedRedeemAmount);\\r\\n        uint256 newUserPending = _amount.add(state.pending);\\r\\n        require(newTVL <= _vaultState.maxCapacity, \\\"Exceeds capacity\\\");\\r\\n        Utils.assertUint128(newUserPending);\\r\\n        state.pending = uint128(newUserPending);\\r\\n        uint256 newTotalPending = _amount.add(_vaultState.totalPending);\\r\\n        Utils.assertUint128(newTotalPending);\\r\\n        _vaultState.totalPending = uint128(newTotalPending);\\r\\n    }\\r\\n\\r\\n    function getRealRound(StructureData.VaultState storage _vaultState)\\r\\n        public\\r\\n        view\\r\\n        returns (uint32, uint16)\\r\\n    {\\r\\n        if (\\r\\n            _vaultState.cutOffAt > block.timestamp ||\\r\\n            _vaultState.currentRound == 0\\r\\n        ) {\\r\\n            return (_vaultState.cutOffAt, _vaultState.currentRound);\\r\\n        }\\r\\n        uint256 cutOffAt = _vaultState.cutOffAt;\\r\\n        uint256 currentRound = _vaultState.currentRound;\\r\\n        while (cutOffAt <= block.timestamp) {\\r\\n            if (_vaultState.environment == 0) {\\r\\n                //prod\\r\\n                cutOffAt = PERIOD.add(cutOffAt);\\r\\n            } else if (_vaultState.environment == 1) {\\r\\n                //qa\\r\\n                cutOffAt = PERIOD_QA.add(cutOffAt);\\r\\n            } else {\\r\\n                //test\\r\\n                cutOffAt = PERIOD_TEST.add(cutOffAt);\\r\\n            }\\r\\n            require(cutOffAt <= type(uint32).max, \\\"Overflow cutOffAt\\\");\\r\\n            currentRound++;\\r\\n        }\\r\\n        return (uint32(cutOffAt), uint16(currentRound));\\r\\n    }\\r\\n\\r\\n    function rollToNextRoundIfNeeded(\\r\\n        StructureData.VaultState storage _vaultState\\r\\n    ) public {\\r\\n        if (\\r\\n            _vaultState.cutOffAt > block.timestamp ||\\r\\n            _vaultState.currentRound == 0\\r\\n        ) {\\r\\n            return;\\r\\n        }\\r\\n        (uint32 cutOffAt, uint16 currentRound) = getRealRound(_vaultState);\\r\\n        uint256 lastUpdateRound = _vaultState.currentRound;\\r\\n        uint256 pending = _vaultState.totalPending;\\r\\n        _vaultState.totalPending = 0;\\r\\n        while (lastUpdateRound < currentRound) {\\r\\n            StructureData.OptionState memory onGoing = _vaultState.onGoing;\\r\\n\\r\\n            _vaultState.onGoing = StructureData.OptionState({\\r\\n                amount: uint128(pending),\\r\\n                queuedRedeemAmount: 0,\\r\\n                strike: 0,\\r\\n                premiumRate: 0,\\r\\n                buyerAddress: address(0)\\r\\n            });\\r\\n            pending = 0;\\r\\n            //premium not sent, simply bring it to next round\\r\\n            if (lastUpdateRound > 1 && _vaultState.expired.amount > 0) { \\r\\n                uint16 premiumRate = _vaultState.expired.buyerAddress == address(0) ? 0 : _vaultState.expired.premiumRate;\\r\\n                uint256 expiredAmount = uint256(_vaultState.expired.amount).withPremium(premiumRate);\\r\\n                uint256 expiredRedeemAmount = uint256(_vaultState.expired.queuedRedeemAmount).withPremium(premiumRate);\\r\\n                uint256 onGoingAmount =\\r\\n                    uint256(_vaultState.onGoing.amount)\\r\\n                        .add(expiredAmount)\\r\\n                        .sub(expiredRedeemAmount);\\r\\n                Utils.assertUint128(onGoingAmount);\\r\\n                _vaultState.onGoing.amount = uint128(onGoingAmount);\\r\\n                uint256 totalRedeemed =\\r\\n                    uint256(_vaultState.totalRedeemed).add(\\r\\n                       expiredRedeemAmount\\r\\n                    );\\r\\n                Utils.assertUint128(totalRedeemed);\\r\\n                _vaultState.totalRedeemed = uint128(totalRedeemed);\\r\\n                _vaultState.depositPriceAfterExpiryPerRound[\\r\\n                    uint16(lastUpdateRound - 1)\\r\\n                ] = 0; \\r\\n            }\\r\\n            _vaultState.expired = onGoing;\\r\\n            lastUpdateRound = lastUpdateRound + 1;\\r\\n        }\\r\\n\\r\\n        _vaultState.cutOffAt = cutOffAt;\\r\\n        _vaultState.currentRound = currentRound;\\r\\n    }\\r\\n\\r\\n    function recalcVault(StructureData.VaultState storage _vaultState)\\r\\n        external\\r\\n        view\\r\\n        returns (StructureData.VaultSnapShot memory)\\r\\n    {\\r\\n        StructureData.VaultSnapShot memory snapShot =\\r\\n            StructureData.VaultSnapShot({\\r\\n                totalPending: _vaultState.totalPending,\\r\\n                totalRedeemed: _vaultState.totalRedeemed,\\r\\n                cutOffAt: _vaultState.cutOffAt,\\r\\n                currentRound: _vaultState.currentRound,\\r\\n                maxCapacity: _vaultState.maxCapacity,\\r\\n                onGoing: _vaultState.onGoing,\\r\\n                expired: _vaultState.expired\\r\\n            });\\r\\n        if (\\r\\n            _vaultState.cutOffAt > block.timestamp ||\\r\\n            _vaultState.currentRound == 0\\r\\n        ) {\\r\\n            return snapShot;\\r\\n        }\\r\\n\\r\\n        (uint32 cutOffAt, uint16 currentRound) = getRealRound(_vaultState);\\r\\n        uint256 lastUpdateRound = _vaultState.currentRound;\\r\\n        while (lastUpdateRound < currentRound) {\\r\\n            StructureData.OptionState memory onGoing = snapShot.onGoing;\\r\\n            snapShot.onGoing = StructureData.OptionState({\\r\\n                amount: snapShot.totalPending,\\r\\n                queuedRedeemAmount: 0,\\r\\n                strike: 0,\\r\\n                premiumRate: 0,\\r\\n                buyerAddress: address(0)\\r\\n            });\\r\\n\\r\\n            //premium not sent, simply bring it to next round\\r\\n            if (\\r\\n                lastUpdateRound > 1 &&\\r\\n                snapShot.expired.amount > 0\\r\\n            ) {\\r\\n\\r\\n                uint16 premiumRate = snapShot.expired.buyerAddress == address(0) ? 0 : snapShot.expired.premiumRate;\\r\\n                uint256 expiredAmount = uint256(snapShot.expired.amount).withPremium(premiumRate);\\r\\n                uint256 expiredRedeemAmount = uint256(snapShot.expired.queuedRedeemAmount).withPremium(premiumRate);\\r\\n\\r\\n                uint256 onGoingAmount =\\r\\n                    uint256(snapShot.onGoing.amount)\\r\\n                        .add(expiredAmount)\\r\\n                        .sub(expiredRedeemAmount);\\r\\n                Utils.assertUint128(onGoingAmount);\\r\\n                snapShot.onGoing.amount = uint128(onGoingAmount);\\r\\n                uint256 totalRedeemed =\\r\\n                    uint256(snapShot.totalRedeemed).add(\\r\\n                        expiredRedeemAmount\\r\\n                    );\\r\\n                Utils.assertUint128(totalRedeemed);\\r\\n                snapShot.totalRedeemed = uint128(totalRedeemed);\\r\\n            }\\r\\n            snapShot.expired = onGoing;\\r\\n            snapShot.totalPending = 0;\\r\\n            lastUpdateRound = lastUpdateRound + 1;\\r\\n        }\\r\\n\\r\\n        snapShot.totalPending = 0;\\r\\n        snapShot.cutOffAt = cutOffAt;\\r\\n        snapShot.currentRound = currentRound;\\r\\n        return snapShot;\\r\\n    }\\r\\n\\r\\n    function recalcState(\\r\\n        StructureData.VaultState storage _vaultState,\\r\\n        StructureData.UserState storage _userState,\\r\\n        uint16 _currentRound\\r\\n    ) public view returns (StructureData.UserState memory) {\\r\\n        //first recalc to the state before expiry\\r\\n        uint256 onGoingAmount = _userState.onGoingAmount;\\r\\n        uint256 expiredAmount = _userState.expiredAmount;\\r\\n        uint256 expiredQueuedRedeemAmount =\\r\\n            _userState.expiredQueuedRedeemAmount;\\r\\n        uint256 onGoingQueuedRedeemAmount =\\r\\n            _userState.onGoingQueuedRedeemAmount;\\r\\n        uint256 lastUpdateRound = _userState.lastUpdateRound;\\r\\n        uint256 pendingAmount = _userState.pending;\\r\\n        uint256 redeemed = _userState.redeemed;\\r\\n        while (lastUpdateRound < _currentRound) {\\r\\n            uint256 oldonGoingAmount = onGoingAmount;\\r\\n            onGoingAmount = 0;\\r\\n            if (expiredAmount > 0) {\\r\\n                uint256 price =\\r\\n                    _vaultState.depositPriceAfterExpiryPerRound[\\r\\n                        uint16(lastUpdateRound - 2)\\r\\n                    ];\\r\\n                if (price > 0) {\\r\\n                    expiredAmount = expiredAmount.mul(price).div(\\r\\n                        10**ROUND_PRICE_DECIMALS\\r\\n                    );\\r\\n                    if (expiredQueuedRedeemAmount > 0) {\\r\\n                        expiredQueuedRedeemAmount = expiredQueuedRedeemAmount\\r\\n                            .mul(price)\\r\\n                            .div(10**ROUND_PRICE_DECIMALS);\\r\\n                    }\\r\\n                }\\r\\n                redeemed = redeemed.add(expiredQueuedRedeemAmount);\\r\\n                onGoingAmount = expiredAmount.sub(expiredQueuedRedeemAmount);\\r\\n                expiredQueuedRedeemAmount = 0;\\r\\n            }\\r\\n\\r\\n            if (pendingAmount > 0) {\\r\\n                onGoingAmount = onGoingAmount.add(pendingAmount);\\r\\n                pendingAmount = 0;\\r\\n            }\\r\\n            if (oldonGoingAmount > 0) {\\r\\n                expiredAmount = oldonGoingAmount;\\r\\n                expiredQueuedRedeemAmount = onGoingQueuedRedeemAmount;\\r\\n                onGoingQueuedRedeemAmount = 0;\\r\\n            } else {\\r\\n                expiredAmount = 0;\\r\\n                expiredQueuedRedeemAmount = 0;\\r\\n            }\\r\\n\\r\\n            lastUpdateRound = lastUpdateRound + 1;\\r\\n        }\\r\\n\\r\\n        //then check if the expiry level is specified\\r\\n        if (expiredAmount > 0) {\\r\\n            uint256 price =\\r\\n                _vaultState.depositPriceAfterExpiryPerRound[\\r\\n                    uint16(lastUpdateRound - 2)\\r\\n                ];\\r\\n            if (price > 0) {\\r\\n                expiredAmount = expiredAmount.mul(price).div(\\r\\n                    10**ROUND_PRICE_DECIMALS\\r\\n                );\\r\\n                if (expiredQueuedRedeemAmount > 0) {\\r\\n                    expiredQueuedRedeemAmount = expiredQueuedRedeemAmount\\r\\n                        .mul(price)\\r\\n                        .div(10**ROUND_PRICE_DECIMALS);\\r\\n                }\\r\\n\\r\\n                onGoingAmount = onGoingAmount.add(expiredAmount).sub(\\r\\n                    expiredQueuedRedeemAmount\\r\\n                );\\r\\n                expiredAmount = 0;\\r\\n                if (expiredQueuedRedeemAmount > 0) {\\r\\n                    redeemed = redeemed.add(expiredQueuedRedeemAmount);\\r\\n                    expiredQueuedRedeemAmount = 0;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        Utils.assertUint128(pendingAmount);\\r\\n        Utils.assertUint128(redeemed);\\r\\n        Utils.assertUint128(expiredAmount);\\r\\n        Utils.assertUint128(expiredQueuedRedeemAmount);\\r\\n        Utils.assertUint128(onGoingAmount);\\r\\n        Utils.assertUint128(onGoingQueuedRedeemAmount);\\r\\n        StructureData.UserState memory updatedUserState =\\r\\n            StructureData.UserState({\\r\\n                lastUpdateRound: _currentRound,\\r\\n                pending: uint128(pendingAmount),\\r\\n                redeemed: uint128(redeemed),\\r\\n                expiredAmount: uint128(expiredAmount),\\r\\n                expiredQueuedRedeemAmount: uint128(expiredQueuedRedeemAmount),\\r\\n                onGoingAmount: uint128(onGoingAmount),\\r\\n                onGoingQueuedRedeemAmount: uint128(onGoingQueuedRedeemAmount)\\r\\n            });\\r\\n        return updatedUserState;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3d5af36e29616096501902e0e55dd69438be1014b6c6a48f8e64bf6e60770e22\",\"license\":\"MIT\"},\"contracts/libraries/StructureData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary StructureData {\\r\\n    bytes32 public constant OPTION_ROLE = keccak256(\\\"OPTION_ROLE\\\");\\r\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\r\\n   \\r\\n\\r\\n    //struct kick off parameters \\r\\n    struct KickOffOptionParameters { \\r\\n        uint8 vaultId; \\r\\n        uint128 maxCapacity;  \\r\\n        uint8 environment;\\r\\n    }\\r\\n\\r\\n    //parameters for cutoff option\\r\\n    struct OnGoingOptionParameters {  \\r\\n        uint128 strike; // strike price \\r\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\r\\n        uint8 vaultId; \\r\\n    }\\r\\n\\r\\n    //parameters for expired option \\r\\n    struct ExpiredOptionParameters{\\r\\n        uint128 expiryLevel;\\r\\n        uint8 vaultId; \\r\\n    }\\r\\n\\r\\n    struct CapacityParameters {\\r\\n        uint8 vaultId;\\r\\n        uint128 maxCapacity;\\r\\n    }\\r\\n    //information that won't change\\r\\n    struct VaultDefinition {\\r\\n        uint8 vaultId; \\r\\n        uint8 assetAmountDecimals; \\r\\n        address asset;\\r\\n        address underlying;\\r\\n        bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral; \\r\\n    } \\r\\n\\r\\n    struct OptionState {\\r\\n        uint128 amount;\\r\\n        uint128 queuedRedeemAmount;\\r\\n        uint128 strike;\\r\\n        uint16 premiumRate;\\r\\n        address buyerAddress; \\r\\n    }\\r\\n \\r\\n    struct VaultState { \\r\\n        uint128 totalPending; \\r\\n        uint128 totalRedeemed;\\r\\n        uint32 cutOffAt;  \\r\\n        uint16 currentRound;\\r\\n        uint128 maxCapacity;   \\r\\n        uint8 environment;\\r\\n        StructureData.OptionState onGoing;\\r\\n        StructureData.OptionState expired; \\r\\n        mapping(uint16 => uint128) depositPriceAfterExpiryPerRound; \\r\\n        mapping(address=>StructureData.UserState) userStates;\\r\\n    }\\r\\n\\r\\n    struct OptionBuyerState {\\r\\n       mapping(address=>uint256) optionValueToCollect;  \\r\\n    } \\r\\n\\r\\n    struct UserState {\\r\\n        uint128 pending;\\r\\n        uint128 redeemed;\\r\\n        uint128 expiredAmount;\\r\\n        uint128 expiredQueuedRedeemAmount;\\r\\n        uint128 onGoingAmount;\\r\\n        uint128 onGoingQueuedRedeemAmount;\\r\\n        uint16 lastUpdateRound;\\r\\n    }\\r\\n \\r\\n    struct VaultSnapShot {\\r\\n        uint128 totalPending; \\r\\n        uint128 totalRedeemed;\\r\\n        uint32 cutOffAt;  \\r\\n        uint16 currentRound;\\r\\n        uint128 maxCapacity;   \\r\\n        StructureData.OptionState onGoing;\\r\\n        StructureData.OptionState expired;\\r\\n    \\r\\n    }\\r\\n\\r\\n\\r\\n    struct SoldVaultState {\\r\\n        uint128 amount;\\r\\n        uint128 strike;\\r\\n        uint128 expiryLevel; //set when setting expiry level\\r\\n        uint128 optionHolderValue; //set when setting expiry level \\r\\n        uint16 premiumRate;\\r\\n        address buyerAddress;\\r\\n    }\\r\\n    struct ExpiredVaultState {\\r\\n        uint128 amount;\\r\\n        uint128 strike;\\r\\n        uint128 expiryLevel;\\r\\n        uint128 optionHolderValue; \\r\\n        uint16 round; \\r\\n        uint16 premiumRate;\\r\\n        uint8 vaultId;  \\r\\n    }\\r\\n    struct CollectableValue {\\r\\n       address asset;\\r\\n       uint256 amount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5305c381ed51c37c7e90d98cf48f8410f02d9658b512bebd246ce00a6aa70bcb\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nlibrary Utils { \\r\\n     \\r\\n    uint256 public constant RATIOMULTIPLIER = 10000;\\r\\n \\r\\n     using SafeMath for uint256;\\r\\n      function StringConcat(bytes memory _base, bytes memory _value) internal pure returns (string memory) {\\r\\n        string memory _tmpValue = new string(_base.length + _value.length);\\r\\n        bytes memory _newValue = bytes(_tmpValue);\\r\\n\\r\\n        uint i;\\r\\n        uint j;\\r\\n\\r\\n        for(i=0; i<_base.length; i++) {\\r\\n            _newValue[j++] = _base[i];\\r\\n        }\\r\\n\\r\\n        for(i=0; i<_value.length; i++) {\\r\\n            _newValue[j++] = _value[i++];\\r\\n        }\\r\\n\\r\\n        return string(_newValue);\\r\\n    }\\r\\n\\r\\n    function Uint8Sub(uint8 a, uint8 b) internal pure returns (uint8) {\\r\\n        require(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n    \\r\\n \\r\\n    function getAmountToTerminate(uint256 _maturedAmount, uint256 _assetToTerminate, uint256 _assetAmount) \\r\\n    internal pure returns(uint256) {\\r\\n       if (_assetToTerminate == 0 || _assetAmount == 0 || _maturedAmount == 0) return 0;\\r\\n       return _assetToTerminate >= _assetAmount ?  _maturedAmount  : _maturedAmount.mul(_assetToTerminate).div(_assetAmount);\\r\\n   }\\r\\n\\r\\n   function withPremium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\r\\n       return  _baseAmount.mul(RATIOMULTIPLIER + _premimumRate).div(RATIOMULTIPLIER);\\r\\n   }\\r\\n   \\r\\n   function premium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\r\\n       return   _baseAmount.mul(_premimumRate).div(RATIOMULTIPLIER);\\r\\n   }\\r\\n   \\r\\n   function subOrZero(uint256 _base, uint256 _substractor) internal pure returns (uint256) {\\r\\n       return _base >= _substractor ? _base - _substractor : 0;\\r\\n   }\\r\\n  \\r\\n    function assertUint104(uint256 num) internal pure {\\r\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\r\\n    }\\r\\n\\r\\n    function assertUint128(uint256 num) internal pure {\\r\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x0ea02b2bd9f676ef78567458314f05839349670fdf2d81574133d6a4172680b9\",\"license\":\"MIT\"},\"contracts/storage/OptionVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\"; \\r\\nabstract contract OptionVaultStorageV1 { \\r\\n    uint256 internal locked;\\r\\n    address public managerRoleAddress;\\r\\n    uint8 public vaultCount;  \\r\\n    uint8 internal assetCount;\\r\\n \\r\\n    mapping(uint8 => StructureData.VaultDefinition) public vaultDefinitions;\\r\\n    mapping(uint8 => address) internal assets;\\r\\n  \\r\\n    mapping(uint8 => StructureData.VaultState) internal vaultStates;\\r\\n    mapping(uint8 => mapping(uint16 => StructureData.SoldVaultState)) internal soldVaultStates;\\r\\n\\r\\n    mapping(address => StructureData.OptionBuyerState) internal buyerStates;\\r\\n \\r\\n     \\r\\n}\\r\\n\\r\\nabstract contract OptionVaultStorage is OptionVaultStorageV1 {\\r\\n    mapping(address=>bool) internal whitelist;\\r\\n    mapping(uint8 => address) internal traders;\\r\\n    uint8 internal traderCount;\\r\\n}\",\"keccak256\":\"0xa9952b55dcc5aff291b6bcc6765a3f430a73314375ed3390714ec9569c59b967\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506146af806100206000396000f3fe60806040526004361061019c5760003560e01c806396721fbf116100ec578063d0ebdbe71161008a578063f4d4c9d711610064578063f4d4c9d71461058a578063f6316859146105aa578063fc382695146105bd578063fc9b0333146105dd57600080fd5b8063d0ebdbe7146104ae578063d5da2bab146104ce578063f2fde38b1461056a57600080fd5b8063ad70c3c7116100c6578063ad70c3c71461042a578063c4173ba91461044a578063c62f673b1461046c578063ca0502a41461048e57600080fd5b806396721fbf146103b7578063a7c6a100146103d7578063ac4b8a641461040a57600080fd5b80632e862d2911610159578063715018a611610133578063715018a6146103305780637332655b146103455780637f649783146103655780638da5cb5b1461038557600080fd5b80632e862d29146102d05780633f489914146102f0578063548db1741461031057600080fd5b806306a45d3f146101a157806315dc9bd8146101d75780631b358049146101f9578063222f6b831461020e578063256d43d71461022e57806326161ec614610241575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004613f84565b6105ff565b6040516101ce919061428e565b60405180910390f35b3480156101e357600080fd5b506101f76101f2366004613a03565b6106e0565b005b34801561020557600080fd5b506101f7610851565b34801561021a57600080fd5b506101f7610229366004613f9e565b6109c4565b6101f761023c366004613f84565b610ad7565b34801561024d57600080fd5b5061026161025c366004613f84565b610cd5565b6040516101ce9190600060e0820190506001600160801b038084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401525061ffff60c08401511660c083015292915050565b3480156102dc57600080fd5b506101f76102eb366004613d11565b610e8b565b3480156102fc57600080fd5b506101f761030b366004613f9e565b610ec1565b34801561031c57600080fd5b506101f761032b366004613968565b61108f565b34801561033c57600080fd5b506101f761112f565b34801561035157600080fd5b506101f7610360366004613f9e565b611165565b34801561037157600080fd5b506101f7610380366004613968565b61126f565b34801561039157600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016101ce565b3480156103c357600080fd5b506101f76103d2366004613c47565b6113ee565b3480156103e357600080fd5b506066546103f890600160a01b900460ff1681565b60405160ff90911681526020016101ce565b34801561041657600080fd5b5060665461039f906001600160a01b031681565b34801561043657600080fd5b506101f7610445366004613aba565b611645565b34801561045657600080fd5b5061045f611c3e565b6040516101ce919061402d565b34801561047857600080fd5b50610481611de1565b6040516101ce91906140d2565b34801561049a57600080fd5b506101f76104a9366004613b71565b6122d3565b3480156104ba57600080fd5b506101f76104c93660046138ed565b6124d3565b3480156104da57600080fd5b5061052f6104e9366004613f84565b6067602052600090815260409020805460019091015460ff8083169261010081048216926001600160a01b036201000090920482169291811691600160a01b9091041685565b6040805160ff96871681529590941660208601526001600160a01b03928316938501939093521660608301521515608082015260a0016101ce565b34801561057657600080fd5b506101f76105853660046138ed565b612506565b34801561059657600080fd5b506101f76105a5366004613f9e565b61259e565b6101f76105b8366004613d43565b6127af565b3480156105c957600080fd5b506101f76105d8366004613909565b612d34565b3480156105e957600080fd5b506105f2612dde565b6040516101ce919061407a565b6106076136cc565b606654829060ff600160a01b9091048116908216106106415760405162461bcd60e51b815260040161063890614243565b60405180910390fd5b60ff8316600090815260696020526040908190209051630aaf5c2360e21b81526004810182905273910a349Bf558E1fc085305Bed81e2a377E9fA3c990632abd708c906024016101e06040518083038186803b1580156106a057600080fd5b505af41580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d89190613ea2565b949350505050565b6066546001600160a01b0316331461070a5760405162461bcd60e51b81526004016106389061426c565b60005b815181101561084d57600082828151811061073857634e487b7160e01b600052603260045260246000fd5b602090810291909101810151805160ff1660009081526069909252604082206005810154600282015482549395509193926107a1926001600160801b03600160801b840481169361079b9390821692610795929182169116612f96565b90612f96565b90612fab565b905082602001516001600160801b03168111156107f85760405162461bcd60e51b815260206004820152601560248201527413585e0810d85c081b195cdcc81d1a185b881d1d9b605a1b6044820152606401610638565b50602090910151600190910180546001600160801b0390921666010000000000000275ffffffffffffffffffffffffffffffff0000000000001990921691909117905580610845816145ca565b91505061070d565b5050565b336000908152606c602052604090205460ff1661089f5760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b6044820152606401610638565b606554156108bf5760405162461bcd60e51b815260040161063890614223565b6001606555336000908152606b60205260408120905b606654600160a81b900460ff168110156109bb5760ff81166000908152606860209081526040808320546001600160a01b0316808452918590529091205480156109a6576001600160a01b0382166000818152602086905260408082209190915551631a4ca37b60e21b815233600482015260248101839052604481019190915273910a349Bf558E1fc085305Bed81e2a377E9fA3c9906369328dec9060640160006040518083038186803b15801561098d57600080fd5b505af41580156109a1573d6000803e3d6000fd5b505050505b505080806109b3906145ca565b9150506108d5565b50506000606555565b606654829060ff600160a01b9091048116908216106109f55760405162461bcd60e51b815260040161063890614243565b60ff831660009081526069602052604090819020905163f6d4a19560e01b815273910a349Bf558E1fc085305Bed81e2a377E9fA3c99163f6d4a19591610a42919033908790600401614302565b60006040518083038186803b158015610a5a57600080fd5b505af4158015610a6e573d6000803e3d6000fd5b5050505060ff8316600081815260696020908152604091829020600101548251868152600160201b90910461ffff169181019190915233917f976af8ffc8ba84af26e20f5bd13068ffb019d76b69eadbc80bdb10ca255a8a6c91015b60405180910390a3505050565b606654819060ff600160a01b909104811690821610610b085760405162461bcd60e51b815260040161063890614243565b60655415610b285760405162461bcd60e51b815260040161063890614223565b600160655534610b635760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b6044820152606401610638565b60ff82166000908152606760205260409020546201000090046001600160a01b03168015610bbc5760405162461bcd60e51b8152600401610638906020808252600490820152630428aa8960e31b604082015260600190565b60ff83166000908152606960205260409020600181015463ffffffff16610c105760405162461bcd60e51b8152602060048201526008602482015267085cdd185c9d195960c21b6044820152606401610638565b604051633f7c9c6360e21b815273910a349Bf558E1fc085305Bed81e2a377E9fA3c99063fdf2718c90610c4b90849033903490600401614302565b60006040518083038186803b158015610c6357600080fd5b505af4158015610c77573d6000803e3d6000fd5b50505050600181015460408051348152600160201b90920461ffff16602083015260ff86169133917f4c1c19f358489633624c9165b2c2e2875b2505cee2b9bc935b4a057521996e69910160405180910390a3505060006065555050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152606654829060ff600160a01b909104811690821610610d3f5760405162461bcd60e51b815260040161063890614243565b60ff8316600090815260696020526040808220905163f38f29dd60e01b81526004810182905290919073910a349Bf558E1fc085305Bed81e2a377E9fA3c99063f38f29dd90602401604080518083038186803b158015610d9e57600080fd5b505af4158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd69190613f4e565b33600090815260098501602052604090819020905163a8a328e760e01b8152600481018690526024810182905261ffff83166044820152919350915073910a349Bf558E1fc085305Bed81e2a377E9fA3c99063a8a328e79060640160e06040518083038186803b158015610e4957600080fd5b505af4158015610e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e819190613dec565b9695505050505050565b6033546001600160a01b03163314610eb55760405162461bcd60e51b8152600401610638906141ee565b610ebe81612fb7565b50565b606654829060ff600160a01b909104811690821610610ef25760405162461bcd60e51b815260040161063890614243565b60655415610f125760405162461bcd60e51b815260040161063890614223565b600160655560ff8316600090815260696020526040908190209051631d48b99160e21b815273910a349Bf558E1fc085305Bed81e2a377E9fA3c991637522e64491610f64919033908790600401614302565b60006040518083038186803b158015610f7c57600080fd5b505af4158015610f90573d6000803e3d6000fd5b5050505060ff831660009081526067602052604090819020549051631a4ca37b60e21b815233600482015260248101849052620100009091046001600160a01b0316604482015273910a349Bf558E1fc085305Bed81e2a377E9fA3c9906369328dec9060640160006040518083038186803b15801561100e57600080fd5b505af4158015611022573d6000803e3d6000fd5b5050505060ff8316600081815260696020908152604091829020600101548251868152600160201b90910461ffff169181019190915233917f11a8f805dbb2d347640f80630c67f68b918ed132c5fdc99ab70311103f72dfcd910160405180910390a35050600060655550565b6066546001600160a01b031633146110b95760405162461bcd60e51b81526004016106389061426c565b60005b815181101561084d576000606c60008484815181106110eb57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611127816145ca565b9150506110bc565b6033546001600160a01b031633146111595760405162461bcd60e51b8152600401610638906141ee565b61116360006131b2565b565b606654829060ff600160a01b9091048116908216106111965760405162461bcd60e51b815260040161063890614243565b60ff83166000908152606960205260409081902090516347e5296160e01b815273910a349Bf558E1fc085305Bed81e2a377E9fA3c9916347e52961916111e3919033908790600401614302565b60006040518083038186803b1580156111fb57600080fd5b505af415801561120f573d6000803e3d6000fd5b5050505060ff8316600081815260696020908152604091829020600101548251868152600160201b90910461ffff169181019190915233917f7f229dfc7783085d0d6e51e0a77512fc68d788db5632cd042b76dc78f96cbecd9101610aca565b6066546001600160a01b031633146112995760405162461bcd60e51b81526004016106389061426c565b606e5460ff1660005b82518110156113d65760008382815181106112cd57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0381166000908152606c90925260409091205490915060ff166113c3576001600160a01b0381166000908152606c60205260408120805460ff19166001179055805b8460ff168160ff1610156113715760ff81166000908152606d60205260409020546001600160a01b038481169116141561135f5760019150611371565b80611369816145e5565b915050611322565b50806113c15781606d600086611386816145e5565b975060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b505b50806113ce816145ca565b9150506112a2565b50606e805460ff191660ff9290921691909117905550565b6066546001600160a01b031633146114185760405162461bcd60e51b81526004016106389061426c565b60005b815181101561084d57600082828151811061144657634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816020015161ffff16116114935760405162461bcd60e51b8152602060048201526008602482015267217072656d69756d60c01b6044820152606401610638565b80516001600160801b03166114d45760405162461bcd60e51b815260206004820152600760248201526621737472696b6560c81b6044820152606401610638565b60408181015160ff16600090815260696020528190209051631d319eb160e31b81526004810182905273910a349Bf558E1fc085305Bed81e2a377E9fA3c99063e98cf5889060240160006040518083038186803b15801561153457600080fd5b505af4158015611548573d6000803e3d6000fd5b50505050600181810154600160201b900461ffff161161159d5760405162461bcd60e51b815260206004820152601060248201526f139bc81cd95b1b1a5b99c81c9bdd5b9960821b6044820152606401610638565b600481015460028201906001600160a01b0316156115ec5760405162461bcd60e51b815260206004820152600c60248201526b105b1c9958591e481cdbdb1960a21b6044820152606401610638565b82516001909101805460209094015161ffff16600160801b0271ffffffffffffffffffffffffffffffffffff199094166001600160801b039092169190911792909217909155508061163d816145ca565b91505061141b565b6066546001600160a01b0316331461166f5760405162461bcd60e51b81526004016106389061426c565b60005b815181101561084d57600082828151811061169d57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600081600001516001600160801b0316116116f35760405162461bcd60e51b815260206004820152600c60248201526b08595e1c1a5c9e53195d995b60a21b6044820152606401610638565b60208181015160ff16600090815260699091526040908190209051631d319eb160e31b81526004810182905273910a349Bf558E1fc085305Bed81e2a377E9fA3c99063e98cf5889060240160006040518083038186803b15801561175657600080fd5b505af415801561176a573d6000803e3d6000fd5b5050505060018101546002600160201b90910461ffff16116117c15760405162461bcd60e51b815260206004820152601060248201526f139bc8195e1c1a5c9959081c9bdd5b9960821b6044820152606401610638565b6005810180546001600160801b031615806117e7575060028101546001600160a01b0316155b156117f457505050611c2c565b60018101546001600160801b03166118385760405162461bcd60e51b815260206004820152600760248201526621737472696b6560c81b6044820152606401610638565b6020838101805160ff90811660009081526067909352604080842054925182168452832060010154620100009092046001600160a01b03169291600160a01b9004166118bd57845160018401546001600160801b0391821691161161189e5760006118f7565b845160018401546118b891906001600160801b0316614522565b6118f7565b600183015485516001600160801b039182169116116118dd5760006118f7565b600183015485516118f7916001600160801b031690614522565b60028401546001600160a01b03166000908152606b602090815260408083208983015160ff90811685526067909352908320600101546001600160801b039490941694509261198391600160a01b909104166119605760018601546001600160801b0316611963565b87515b86546001600160801b039182169161197d91879116613204565b90613210565b905061198e8161321c565b6001600160a01b0384166000908152602083905260409020546119b2908290612f96565b6001600160a01b0385166000908152602084815260408083206001600160801b03949094169093558981015160ff168252606a905290812060018801548290611a0890600290600160201b900461ffff1661454a565b61ffff9081168252602082019290925260400160002089516001600160801b03858116600160801b02911617600180830191909155890154909250611a5791600291600160201b90041661454a565b61ffff16886020015160ff167fca686c96009b7ca118d754ba35ac8459e4045891b4bef1a9f1224baa27134bb18a6000015185604051611aad9291906001600160801b0392831681529116602082015260400190565b60405180910390a360018601548654600091611ae391859161079b916001600160801b031690600160801b900461ffff16613266565b8754909150600090611b0e906001600160801b031661197d611b076008600a61445b565b8590613204565b9050611b198161321c565b8089600801600060028c60010160049054906101000a900461ffff16611b3f919061454a565b61ffff1681526020810191909152604001600090812080546001600160801b0319166001600160801b0393841617905589549091611b8f918082169161197d918791600160801b90910416613204565b8a54909150600090611bb2908390600160801b90046001600160801b0316612f96565b9050611bbd8161321c565b8a546001600160801b03908116600160801b83831602178c5560028c0154600091611bed91166107958786612fab565b9050611bf88161321c565b60029b909b0180546001600160801b0319166001600160801b03909c169b909b17909a555050600090965550505050505050505b80611c36816145ca565b915050611672565b606e5460609060ff16611c5e575060408051600081526020810190915290565b6000805b606e5460ff9081169082161015611cc35760ff8082166000908152606d60209081526040808320546001600160a01b03168352606c9091529020541615611cb15781611cad816145ca565b9250505b80611cbb816145e5565b915050611c62565b506000816001600160401b03811115611cec57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d15578160200160208202803683370190505b5090506000915060005b606e5460ff9081169082161015611dda5760ff8082166000908152606d60209081526040808320546001600160a01b03168352606c9091529020541615611dc85760ff81166000908152606d60205260409020546001600160a01b03168284611d87816145ca565b955081518110611da757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b80611dd2816145e5565b915050611d1f565b5092915050565b60606000805b60665460ff600160a01b90910481169082161015611f805760ff81166000908152606960205260408082209051630aaf5c2360e21b81526004810182905290919073910a349Bf558E1fc085305Bed81e2a377E9fA3c990632abd708c906024016101e06040518083038186803b158015611e6057600080fd5b505af4158015611e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e989190613ea2565b90506003816060015161ffff161015611eb2575050611f6e565b60015b60028260600151611ec6919061454a565b61ffff168161ffff1611611f6a5760ff84166000908152606a6020908152604080832061ffff85168452909152902060028101546201000090046001600160a01b031633148015611f44575060018101546001600160801b0316151580611f44575060028360600151611f39919061454a565b61ffff168261ffff16105b15611f575785611f53816145ca565b9650505b5080611f62816145a8565b915050611eb5565b5050505b80611f78816145e5565b915050611de7565b506000816001600160401b03811115611fa957634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561201057816020015b6040805160e08101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c08201528252600019909201910181611fc75790505b5090508161201e5792915050565b6000915060005b60665460ff600160a01b90910481169082161015611dda5760ff81166000908152606960205260408082209051630aaf5c2360e21b81526004810182905290919073910a349Bf558E1fc085305Bed81e2a377E9fA3c990632abd708c906024016101e06040518083038186803b15801561209e57600080fd5b505af41580156120b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d69190613ea2565b90506003816060015161ffff1610156120f05750506122c1565b60015b60028260600151612104919061454a565b61ffff168161ffff16116122bd5760ff84166000908152606a6020908152604080832061ffff858116855290835292819020815160c08101835281546001600160801b038082168352600160801b9182900481169583019590955260018301548086169483019490945290920490921660608201526002909101549182166080820152620100009091046001600160a01b031660a0820181905233146121aa57506122ab565b60408101516001600160801b03166121f657600283606001516121cd919061454a565b61ffff168261ffff1614156121e257506122ab565b60208101516001600160801b031660408201525b60006040518060e0016040528083600001516001600160801b0316815260200183602001516001600160801b0316815260200183604001516001600160801b0316815260200183606001516001600160801b031681526020018461ffff168152602001836080015161ffff1681526020018760ff1681525090508087898061227d906145ca565b9a508151811061229d57634e487b7160e01b600052603260045260246000fd5b602002602001018190525050505b806122b5816145a8565b9150506120f3565b5050505b806122cb816145e5565b915050612025565b6066546001600160a01b031633146122fd5760405162461bcd60e51b81526004016106389061426c565b60005b815181101561084d57600082828151811061232b57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151805160ff16600090815260699092526040909120600181015491925090600160201b900461ffff16156123a15760405162461bcd60e51b815260206004820152601260248201527130b63932b0b23c9035b4b1b5b2b21037b33360711b6044820152606401610638565b6000826040015160ff16600014156123c7576123c04262093a80612f96565b90506123f1565b826040015160ff16600114156123e3576123c042610e10612f96565b6123ee42603c612f96565b90505b63ffffffff8111156124395760405162461bcd60e51b81526020600482015260116024820152706375744f66664174204f766572666c6f7760781b6044820152606401610638565b60019091018054602084015160409094015165ffff000000001960ff909116600160b01b021676ff00000000000000000000000000000000ffff00000000196001600160801b0390951666010000000000000275ffffffffffffffffffffffffffffffff0000ffffffff1990921663ffffffff90941693909317179290921617600160201b179055806124cb816145ca565b915050612300565b6033546001600160a01b031633146124fd5760405162461bcd60e51b8152600401610638906141ee565b610ebe81613282565b6033546001600160a01b031633146125305760405162461bcd60e51b8152600401610638906141ee565b6001600160a01b0381166125955760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610638565b610ebe816131b2565b606654829060ff600160a01b9091048116908216106125cf5760405162461bcd60e51b815260040161063890614243565b606554156125ef5760405162461bcd60e51b815260040161063890614223565b60016065558161262b5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610638565b60ff83166000908152606760205260409020546201000090046001600160a01b0316806126805760405162461bcd60e51b815260206004820152600360248201526208aa8960eb1b6044820152606401610638565b60ff84166000908152606960205260409020600181015463ffffffff166126d45760405162461bcd60e51b8152602060048201526008602482015267085cdd185c9d195960c21b6044820152606401610638565b6126e96001600160a01b0383163330876132ca565b604051633f7c9c6360e21b815273910a349Bf558E1fc085305Bed81e2a377E9fA3c99063fdf2718c9061272490849033908990600401614302565b60006040518083038186803b15801561273c57600080fd5b505af4158015612750573d6000803e3d6000fd5b50505050600181015460408051868152600160201b90920461ffff16602083015260ff87169133917f4c1c19f358489633624c9165b2c2e2875b2505cee2b9bc935b4a057521996e69910160405180910390a350506000606555505050565b336000908152606c602052604090205460ff166127fd5760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b6044820152606401610638565b6065541561281d5760405162461bcd60e51b815260040161063890614223565b60016065556000805b8251811015612caa57600083828151811061285157634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160ff8116600090815260699092526040918290209151631d319eb160e31b81526004810183905290925073910a349Bf558E1fc085305Bed81e2a377E9fA3c99063e98cf5889060240160006040518083038186803b1580156128be57600080fd5b505af41580156128d2573d6000803e3d6000fd5b505050506002810180546001600160801b03166129235760405162461bcd60e51b815260206004820152600f60248201526e139bdd1a1a5b99c81d1bc81cd95b1b608a1b6044820152606401610638565b60028101546001600160a01b03161561296d5760405162461bcd60e51b815260206004820152600c60248201526b105b1c9958591e481cdbdb1960a21b6044820152606401610638565b60078201546001600160a01b0316158015906129b3575060058201546000906129a8906001600160801b03600160801b820481169116614522565b6001600160801b0316115b15612a4a57600082600801600060028560010160049054906101000a900461ffff166129df919061454a565b61ffff1681526020810191909152604001600020546001600160801b031611612a4a5760405162461bcd60e51b815260206004820152601e60248201527f457870697279206c6576656c206e6f74207370656369666965642079657400006044820152606401610638565b60058201548154600091612a77916001600160801b03600160801b830481169261079b9282169116612f96565b9050612a828161321c565b6001820154600090612aa0908390600160801b900461ffff16613324565b60ff8616600081815260676020908152604080832054815160c0810183526001600160801b03898116825260018b8101549182168387015282850187905260608301879052600160801b90910461ffff90811660808401523360a0840152968652606a9094529184208a840154969750620100009091046001600160a01b0316959194859491939192612b3c9291600160201b9091041661454a565b61ffff908116825260208083019390935260409182016000208451938501516001600160801b03908116600160801b9081029582169590951782559285015160608601518416909402939092169290921760018083019190915560808401516002909201805460a0909501516001600160a01b031662010000026001600160b01b031990951692841692909217939093179055878201543392612be8929091600160201b90041661454a565b6001870154604080518881526001600160801b0383166020820152600160801b90920461ffff90811683830152905192169160ff8b16917fe63c13304e199580820f96b805a705285639ae20c637c6e55ea633cb33a983bd919081900360600190a46001600160a01b038216612c6957612c628984612f96565b9850612c7e565b612c7e6001600160a01b0383163330866132ca565b5050505060020180546001600160a01b0319163317905550819050612ca2816145ca565b915050612826565b5034811015612cec5760405162461bcd60e51b815260206004820152600e60248201526d09cdee840cadcdeeaced040cae8d60931b6044820152606401610638565b348111156109bb57336108fc612d023484614565565b6040518115909202916000818181858888f19350505050158015612d2a573d6000803e3d6000fd5b5050506000606555565b600054610100900460ff1680612d4d575060005460ff16155b612d695760405162461bcd60e51b8152600401610638906141a0565b600054610100900460ff16158015612d8b576000805461ffff19166101011790555b6001600160a01b038416612d9e57600080fd5b6000606555612dab613336565b612db484612506565b612dbd83613282565b612dc682612fb7565b8015612dd8576000805461ff00191690555b50505050565b336000908152606b60205260408120606091805b606654600160a81b900460ff16811015612e595760ff81166000908152606860209081526040808320546001600160a01b031680845291869052909120548015612e445783612e40816145ca565b9450505b50508080612e51906145ca565b915050612df2565b506000816001600160401b03811115612e8257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612ec757816020015b6040805180820190915260008082526020820152815260200190600190039081612ea05790505b50905081612ed6579392505050565b6000915060005b606654600160a81b900460ff16811015612f8e5760ff81166000908152606860209081526040808320546001600160a01b031680845291879052909120548015612f79576040518060400160405280836001600160a01b0316815260200182815250848681518110612f5f57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508480612f75906145ca565b9550505b50508080612f86906145ca565b915050612edd565b509392505050565b6000612fa282846143e0565b90505b92915050565b6000612fa28284614565565b805160665460ff600160a01b8204811691600160a81b90041660005b8381101561317b576000858281518110612ffd57634e487b7160e01b600052603260045260246000fd5b602090810291909101015160ff85168152905080606760008661301f816145e5565b60ff9182168352602080840194909452604092830160009081208651815496880151958801516001600160a01b03908116620100000262010000600160b01b03199787166101000261ffff19909916929096169190911796909617949094169290921783556060850151600190930180546080909601511515600160a01b026001600160a81b03199096169390941692909217939093179091559450805b8460ff168160ff1610156131125760408084015160ff83166000908152606860205291909120546001600160a01b03908116911614156131005760019150613112565b8061310a816145e5565b9150506130bd565b5080613166576040820151606860008661312b816145e5565b975060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b50508080613173906145ca565b915050612fd3565b506066805461ffff60a01b1916600160a01b60ff9485160260ff60a81b191617600160a81b92909316919091029190911790555050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612fa28284614503565b6000612fa282846143f8565b6001600160801b03811115610ebe5760405162461bcd60e51b815260206004820152601060248201526f09eeccae4ccd8deee40ead2dce86264760831b6044820152606401610638565b6000612fa261271061197d61327b85836143e0565b8690613204565b6001600160a01b0381166132a85760405162461bcd60e51b81526004016106389061426c565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612dd89085906133b1565b6000612fa261271061197d8585613204565b600054610100900460ff168061334f575060005460ff16155b61336b5760405162461bcd60e51b8152600401610638906141a0565b600054610100900460ff1615801561338d576000805461ffff19166101011790555b613395613488565b61339d6134f2565b8015610ebe576000805461ff001916905550565b6000613406826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166135529092919063ffffffff16565b80519091501561348357808060200190518101906134249190613dd0565b6134835760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610638565b505050565b600054610100900460ff16806134a1575060005460ff16155b6134bd5760405162461bcd60e51b8152600401610638906141a0565b600054610100900460ff1615801561339d576000805461ffff19166101011790558015610ebe576000805461ff001916905550565b600054610100900460ff168061350b575060005460ff16155b6135275760405162461bcd60e51b8152600401610638906141a0565b600054610100900460ff16158015613549576000805461ffff19166101011790555b61339d336131b2565b6060613561848460008561356b565b90505b9392505050565b6060824710156135cc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610638565b843b61361a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610638565b600080866001600160a01b031685876040516136369190614011565b60006040518083038185875af1925050503d8060008114613673576040519150601f19603f3d011682016040523d82523d6000602084013e613678565b606091505b5091509150613688828286613693565b979650505050505050565b606083156136a2575081613564565b8251156136b25782518084602001fd5b8160405162461bcd60e51b8152600401610638919061416d565b6040805160e08101825260008082526020820181905291810182905260608101829052608081019190915260a0810161372c6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b81526040805160a0810182526000808252602082810182905292820181905260608201819052608082015291015290565b600082601f83011261376d578081fd5b8135602061378261377d836143bd565b61438d565b8281528181019085830160a0808602880185018910156137a0578687fd5b865b868110156138255781838b0312156137b8578788fd5b6137c0614321565b6137c9846138dc565b81526137d68785016138dc565b878201526040808501356137e981614631565b908201526060848101356137fc81614631565b9082015260808481013561380f81614646565b90820152855293850193918101916001016137a2565b509198975050505050505050565b600060a08284031215613844578081fd5b61384c614321565b9050815161385981614654565b8152602082015161386981614654565b6020820152604082015161387c81614654565b6040820152606082015161388f81614669565b606082015260808201516138a281614631565b608082015292915050565b80516138b881614654565b919050565b80516138b881614669565b805163ffffffff811681146138b857600080fd5b803560ff811681146138b857600080fd5b6000602082840312156138fe578081fd5b813561356481614631565b60008060006060848603121561391d578182fd5b833561392881614631565b9250602084013561393881614631565b915060408401356001600160401b03811115613952578182fd5b61395e8682870161375d565b9150509250925092565b6000602080838503121561397a578182fd5b82356001600160401b0381111561398f578283fd5b8301601f8101851361399f578283fd5b80356139ad61377d826143bd565b80828252848201915084840188868560051b87010111156139cc578687fd5b8694505b838510156139f75780356139e381614631565b8352600194909401939185019185016139d0565b50979650505050505050565b60006020808385031215613a15578182fd5b82356001600160401b03811115613a2a578283fd5b8301601f81018513613a3a578283fd5b8035613a4861377d826143bd565b80828252848201915084840188868560061b8701011115613a67578687fd5b8694505b838510156139f757604080828b031215613a83578788fd5b613a8b614349565b613a94836138dc565b815287830135613aa381614654565b818901528452600195909501949286019201613a6b565b60006020808385031215613acc578182fd5b82356001600160401b03811115613ae1578283fd5b8301601f81018513613af1578283fd5b8035613aff61377d826143bd565b80828252848201915084840188868560061b8701011115613b1e578687fd5b8694505b838510156139f757604080828b031215613b3a578788fd5b613b42614349565b8235613b4d81614654565b8152613b5a8389016138dc565b818901528452600195909501949286019201613b22565b60006020808385031215613b83578182fd5b82356001600160401b03811115613b98578283fd5b8301601f81018513613ba8578283fd5b8035613bb661377d826143bd565b818152838101908385016060808502860187018a1015613bd4578788fd5b8795505b84861015613c395780828b031215613bee578788fd5b613bf661436b565b613bff836138dc565b815287830135613c0e81614654565b818901526040613c1f8482016138dc565b908201528452600195909501949286019290810190613bd8565b509098975050505050505050565b60006020808385031215613c59578182fd5b82356001600160401b03811115613c6e578283fd5b8301601f81018513613c7e578283fd5b8035613c8c61377d826143bd565b818152838101908385016060808502860187018a1015613caa578788fd5b8795505b84861015613c395780828b031215613cc4578788fd5b613ccc61436b565b8235613cd781614654565b815282880135613ce681614669565b818901526040613cf78482016138dc565b908201528452600195909501949286019290810190613cae565b600060208284031215613d22578081fd5b81356001600160401b03811115613d37578182fd5b6106d88482850161375d565b60006020808385031215613d55578182fd5b82356001600160401b03811115613d6a578283fd5b8301601f81018513613d7a578283fd5b8035613d8861377d826143bd565b80828252848201915084840188868560051b8701011115613da7578687fd5b8694505b838510156139f757613dbc816138dc565b835260019490940193918501918501613dab565b600060208284031215613de1578081fd5b815161356481614646565b600060e08284031215613dfd578081fd5b60405160e081018181106001600160401b0382111715613e1f57613e1f61461b565b6040528251613e2d81614654565b81526020830151613e3d81614654565b60208201526040830151613e5081614654565b60408201526060830151613e6381614654565b6060820152613e74608084016138ad565b6080820152613e8560a084016138ad565b60a0820152613e9660c084016138bd565b60c08201529392505050565b60006101e08284031215613eb4578081fd5b60405160e081018181106001600160401b0382111715613ed657613ed661461b565b6040528251613ee481614654565b81526020830151613ef481614654565b6020820152613f05604084016138c8565b60408201526060830151613f1881614669565b6060820152613f29608084016138ad565b6080820152613f3b8460a08501613833565b60a0820152613e96846101408501613833565b60008060408385031215613f60578182fd5b613f69836138c8565b91506020830151613f7981614669565b809150509250929050565b600060208284031215613f95578081fd5b612fa2826138dc565b60008060408385031215613fb0578182fd5b613fb9836138dc565b946020939093013593505050565b80516001600160801b0390811683526020808301518216908401526040808301519091169083015260608082015161ffff16908301526080908101516001600160a01b0316910152565b6000825161402381846020870161457c565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561406e5783516001600160a01b031683529284019291840191600101614049565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156140c557815180516001600160a01b03168552860151868501529284019290850190600101614097565b5091979650505050505050565b602080825282518282018190526000919060409081850190868401855b828110156140c557815180516001600160801b03908116865287820151811688870152868201518116878701526060808301519091169086015260808082015161ffff169086015260a08082015161414c8288018261ffff169052565b505060c09081015160ff169085015260e090930192908501906001016140ef565b602081526000825180602084015261418c81604085016020870161457c565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600690820152651b1bd8dad95960d21b604082015260600190565b6020808252600f908201526e125b9d985b1a59081d985d5b1d1259608a1b604082015260600190565b60208082526008908201526710b6b0b730b3b2b960c11b604082015260600190565b60006101e0820190506001600160801b0380845116835280602085015116602084015263ffffffff604085015116604084015261ffff60608501511660608401528060808501511660808401525060a08301516142ee60a0840182613fc7565b5060c0830151611dda610140840182613fc7565b9283526001600160a01b03919091166020830152604082015260600190565b60405160a081016001600160401b03811182821017156143435761434361461b565b60405290565b604080519081016001600160401b03811182821017156143435761434361461b565b604051606081016001600160401b03811182821017156143435761434361461b565b604051601f8201601f191681016001600160401b03811182821017156143b5576143b561461b565b604052919050565b60006001600160401b038211156143d6576143d661461b565b5060051b60200190565b600082198211156143f3576143f3614605565b500190565b60008261441357634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561445357816000190482111561443957614439614605565b8085161561444657918102915b93841c939080029061441d565b509250929050565b6000612fa2838360008261447157506001612fa5565b8161447e57506000612fa5565b8160018114614494576002811461449e576144ba565b6001915050612fa5565b60ff8411156144af576144af614605565b50506001821b612fa5565b5060208310610133831016604e8410600b84101617156144dd575081810a612fa5565b6144e78383614418565b80600019048211156144fb576144fb614605565b029392505050565b600081600019048311821515161561451d5761451d614605565b500290565b60006001600160801b038381169083168181101561454257614542614605565b039392505050565b600061ffff8381169083168181101561454257614542614605565b60008282101561457757614577614605565b500390565b60005b8381101561459757818101518382015260200161457f565b83811115612dd85750506000910152565b600061ffff808316818114156145c0576145c0614605565b6001019392505050565b60006000198214156145de576145de614605565b5060010190565b600060ff821660ff8114156145fc576145fc614605565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ebe57600080fd5b8015158114610ebe57600080fd5b6001600160801b0381168114610ebe57600080fd5b61ffff81168114610ebe57600080fdfea2646970667358221220577d5fce97ad056582211bfa358215c711d62520401cbd01587fed1aa8522dcb64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c806396721fbf116100ec578063d0ebdbe71161008a578063f4d4c9d711610064578063f4d4c9d71461058a578063f6316859146105aa578063fc382695146105bd578063fc9b0333146105dd57600080fd5b8063d0ebdbe7146104ae578063d5da2bab146104ce578063f2fde38b1461056a57600080fd5b8063ad70c3c7116100c6578063ad70c3c71461042a578063c4173ba91461044a578063c62f673b1461046c578063ca0502a41461048e57600080fd5b806396721fbf146103b7578063a7c6a100146103d7578063ac4b8a641461040a57600080fd5b80632e862d2911610159578063715018a611610133578063715018a6146103305780637332655b146103455780637f649783146103655780638da5cb5b1461038557600080fd5b80632e862d29146102d05780633f489914146102f0578063548db1741461031057600080fd5b806306a45d3f146101a157806315dc9bd8146101d75780631b358049146101f9578063222f6b831461020e578063256d43d71461022e57806326161ec614610241575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004613f84565b6105ff565b6040516101ce919061428e565b60405180910390f35b3480156101e357600080fd5b506101f76101f2366004613a03565b6106e0565b005b34801561020557600080fd5b506101f7610851565b34801561021a57600080fd5b506101f7610229366004613f9e565b6109c4565b6101f761023c366004613f84565b610ad7565b34801561024d57600080fd5b5061026161025c366004613f84565b610cd5565b6040516101ce9190600060e0820190506001600160801b038084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401525061ffff60c08401511660c083015292915050565b3480156102dc57600080fd5b506101f76102eb366004613d11565b610e8b565b3480156102fc57600080fd5b506101f761030b366004613f9e565b610ec1565b34801561031c57600080fd5b506101f761032b366004613968565b61108f565b34801561033c57600080fd5b506101f761112f565b34801561035157600080fd5b506101f7610360366004613f9e565b611165565b34801561037157600080fd5b506101f7610380366004613968565b61126f565b34801561039157600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016101ce565b3480156103c357600080fd5b506101f76103d2366004613c47565b6113ee565b3480156103e357600080fd5b506066546103f890600160a01b900460ff1681565b60405160ff90911681526020016101ce565b34801561041657600080fd5b5060665461039f906001600160a01b031681565b34801561043657600080fd5b506101f7610445366004613aba565b611645565b34801561045657600080fd5b5061045f611c3e565b6040516101ce919061402d565b34801561047857600080fd5b50610481611de1565b6040516101ce91906140d2565b34801561049a57600080fd5b506101f76104a9366004613b71565b6122d3565b3480156104ba57600080fd5b506101f76104c93660046138ed565b6124d3565b3480156104da57600080fd5b5061052f6104e9366004613f84565b6067602052600090815260409020805460019091015460ff8083169261010081048216926001600160a01b036201000090920482169291811691600160a01b9091041685565b6040805160ff96871681529590941660208601526001600160a01b03928316938501939093521660608301521515608082015260a0016101ce565b34801561057657600080fd5b506101f76105853660046138ed565b612506565b34801561059657600080fd5b506101f76105a5366004613f9e565b61259e565b6101f76105b8366004613d43565b6127af565b3480156105c957600080fd5b506101f76105d8366004613909565b612d34565b3480156105e957600080fd5b506105f2612dde565b6040516101ce919061407a565b6106076136cc565b606654829060ff600160a01b9091048116908216106106415760405162461bcd60e51b815260040161063890614243565b60405180910390fd5b60ff8316600090815260696020526040908190209051630aaf5c2360e21b81526004810182905273__$e36f5330ef2566ea8a183e1e27b10de643$__90632abd708c906024016101e06040518083038186803b1580156106a057600080fd5b505af41580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d89190613ea2565b949350505050565b6066546001600160a01b0316331461070a5760405162461bcd60e51b81526004016106389061426c565b60005b815181101561084d57600082828151811061073857634e487b7160e01b600052603260045260246000fd5b602090810291909101810151805160ff1660009081526069909252604082206005810154600282015482549395509193926107a1926001600160801b03600160801b840481169361079b9390821692610795929182169116612f96565b90612f96565b90612fab565b905082602001516001600160801b03168111156107f85760405162461bcd60e51b815260206004820152601560248201527413585e0810d85c081b195cdcc81d1a185b881d1d9b605a1b6044820152606401610638565b50602090910151600190910180546001600160801b0390921666010000000000000275ffffffffffffffffffffffffffffffff0000000000001990921691909117905580610845816145ca565b91505061070d565b5050565b336000908152606c602052604090205460ff1661089f5760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b6044820152606401610638565b606554156108bf5760405162461bcd60e51b815260040161063890614223565b6001606555336000908152606b60205260408120905b606654600160a81b900460ff168110156109bb5760ff81166000908152606860209081526040808320546001600160a01b0316808452918590529091205480156109a6576001600160a01b0382166000818152602086905260408082209190915551631a4ca37b60e21b815233600482015260248101839052604481019190915273__$e36f5330ef2566ea8a183e1e27b10de643$__906369328dec9060640160006040518083038186803b15801561098d57600080fd5b505af41580156109a1573d6000803e3d6000fd5b505050505b505080806109b3906145ca565b9150506108d5565b50506000606555565b606654829060ff600160a01b9091048116908216106109f55760405162461bcd60e51b815260040161063890614243565b60ff831660009081526069602052604090819020905163f6d4a19560e01b815273__$e36f5330ef2566ea8a183e1e27b10de643$__9163f6d4a19591610a42919033908790600401614302565b60006040518083038186803b158015610a5a57600080fd5b505af4158015610a6e573d6000803e3d6000fd5b5050505060ff8316600081815260696020908152604091829020600101548251868152600160201b90910461ffff169181019190915233917f976af8ffc8ba84af26e20f5bd13068ffb019d76b69eadbc80bdb10ca255a8a6c91015b60405180910390a3505050565b606654819060ff600160a01b909104811690821610610b085760405162461bcd60e51b815260040161063890614243565b60655415610b285760405162461bcd60e51b815260040161063890614223565b600160655534610b635760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b6044820152606401610638565b60ff82166000908152606760205260409020546201000090046001600160a01b03168015610bbc5760405162461bcd60e51b8152600401610638906020808252600490820152630428aa8960e31b604082015260600190565b60ff83166000908152606960205260409020600181015463ffffffff16610c105760405162461bcd60e51b8152602060048201526008602482015267085cdd185c9d195960c21b6044820152606401610638565b604051633f7c9c6360e21b815273__$e36f5330ef2566ea8a183e1e27b10de643$__9063fdf2718c90610c4b90849033903490600401614302565b60006040518083038186803b158015610c6357600080fd5b505af4158015610c77573d6000803e3d6000fd5b50505050600181015460408051348152600160201b90920461ffff16602083015260ff86169133917f4c1c19f358489633624c9165b2c2e2875b2505cee2b9bc935b4a057521996e69910160405180910390a3505060006065555050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152606654829060ff600160a01b909104811690821610610d3f5760405162461bcd60e51b815260040161063890614243565b60ff8316600090815260696020526040808220905163f38f29dd60e01b81526004810182905290919073__$e36f5330ef2566ea8a183e1e27b10de643$__9063f38f29dd90602401604080518083038186803b158015610d9e57600080fd5b505af4158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd69190613f4e565b33600090815260098501602052604090819020905163a8a328e760e01b8152600481018690526024810182905261ffff83166044820152919350915073__$e36f5330ef2566ea8a183e1e27b10de643$__9063a8a328e79060640160e06040518083038186803b158015610e4957600080fd5b505af4158015610e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e819190613dec565b9695505050505050565b6033546001600160a01b03163314610eb55760405162461bcd60e51b8152600401610638906141ee565b610ebe81612fb7565b50565b606654829060ff600160a01b909104811690821610610ef25760405162461bcd60e51b815260040161063890614243565b60655415610f125760405162461bcd60e51b815260040161063890614223565b600160655560ff8316600090815260696020526040908190209051631d48b99160e21b815273__$e36f5330ef2566ea8a183e1e27b10de643$__91637522e64491610f64919033908790600401614302565b60006040518083038186803b158015610f7c57600080fd5b505af4158015610f90573d6000803e3d6000fd5b5050505060ff831660009081526067602052604090819020549051631a4ca37b60e21b815233600482015260248101849052620100009091046001600160a01b0316604482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906369328dec9060640160006040518083038186803b15801561100e57600080fd5b505af4158015611022573d6000803e3d6000fd5b5050505060ff8316600081815260696020908152604091829020600101548251868152600160201b90910461ffff169181019190915233917f11a8f805dbb2d347640f80630c67f68b918ed132c5fdc99ab70311103f72dfcd910160405180910390a35050600060655550565b6066546001600160a01b031633146110b95760405162461bcd60e51b81526004016106389061426c565b60005b815181101561084d576000606c60008484815181106110eb57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611127816145ca565b9150506110bc565b6033546001600160a01b031633146111595760405162461bcd60e51b8152600401610638906141ee565b61116360006131b2565b565b606654829060ff600160a01b9091048116908216106111965760405162461bcd60e51b815260040161063890614243565b60ff83166000908152606960205260409081902090516347e5296160e01b815273__$e36f5330ef2566ea8a183e1e27b10de643$__916347e52961916111e3919033908790600401614302565b60006040518083038186803b1580156111fb57600080fd5b505af415801561120f573d6000803e3d6000fd5b5050505060ff8316600081815260696020908152604091829020600101548251868152600160201b90910461ffff169181019190915233917f7f229dfc7783085d0d6e51e0a77512fc68d788db5632cd042b76dc78f96cbecd9101610aca565b6066546001600160a01b031633146112995760405162461bcd60e51b81526004016106389061426c565b606e5460ff1660005b82518110156113d65760008382815181106112cd57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0381166000908152606c90925260409091205490915060ff166113c3576001600160a01b0381166000908152606c60205260408120805460ff19166001179055805b8460ff168160ff1610156113715760ff81166000908152606d60205260409020546001600160a01b038481169116141561135f5760019150611371565b80611369816145e5565b915050611322565b50806113c15781606d600086611386816145e5565b975060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b505b50806113ce816145ca565b9150506112a2565b50606e805460ff191660ff9290921691909117905550565b6066546001600160a01b031633146114185760405162461bcd60e51b81526004016106389061426c565b60005b815181101561084d57600082828151811061144657634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816020015161ffff16116114935760405162461bcd60e51b8152602060048201526008602482015267217072656d69756d60c01b6044820152606401610638565b80516001600160801b03166114d45760405162461bcd60e51b815260206004820152600760248201526621737472696b6560c81b6044820152606401610638565b60408181015160ff16600090815260696020528190209051631d319eb160e31b81526004810182905273__$e36f5330ef2566ea8a183e1e27b10de643$__9063e98cf5889060240160006040518083038186803b15801561153457600080fd5b505af4158015611548573d6000803e3d6000fd5b50505050600181810154600160201b900461ffff161161159d5760405162461bcd60e51b815260206004820152601060248201526f139bc81cd95b1b1a5b99c81c9bdd5b9960821b6044820152606401610638565b600481015460028201906001600160a01b0316156115ec5760405162461bcd60e51b815260206004820152600c60248201526b105b1c9958591e481cdbdb1960a21b6044820152606401610638565b82516001909101805460209094015161ffff16600160801b0271ffffffffffffffffffffffffffffffffffff199094166001600160801b039092169190911792909217909155508061163d816145ca565b91505061141b565b6066546001600160a01b0316331461166f5760405162461bcd60e51b81526004016106389061426c565b60005b815181101561084d57600082828151811061169d57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600081600001516001600160801b0316116116f35760405162461bcd60e51b815260206004820152600c60248201526b08595e1c1a5c9e53195d995b60a21b6044820152606401610638565b60208181015160ff16600090815260699091526040908190209051631d319eb160e31b81526004810182905273__$e36f5330ef2566ea8a183e1e27b10de643$__9063e98cf5889060240160006040518083038186803b15801561175657600080fd5b505af415801561176a573d6000803e3d6000fd5b5050505060018101546002600160201b90910461ffff16116117c15760405162461bcd60e51b815260206004820152601060248201526f139bc8195e1c1a5c9959081c9bdd5b9960821b6044820152606401610638565b6005810180546001600160801b031615806117e7575060028101546001600160a01b0316155b156117f457505050611c2c565b60018101546001600160801b03166118385760405162461bcd60e51b815260206004820152600760248201526621737472696b6560c81b6044820152606401610638565b6020838101805160ff90811660009081526067909352604080842054925182168452832060010154620100009092046001600160a01b03169291600160a01b9004166118bd57845160018401546001600160801b0391821691161161189e5760006118f7565b845160018401546118b891906001600160801b0316614522565b6118f7565b600183015485516001600160801b039182169116116118dd5760006118f7565b600183015485516118f7916001600160801b031690614522565b60028401546001600160a01b03166000908152606b602090815260408083208983015160ff90811685526067909352908320600101546001600160801b039490941694509261198391600160a01b909104166119605760018601546001600160801b0316611963565b87515b86546001600160801b039182169161197d91879116613204565b90613210565b905061198e8161321c565b6001600160a01b0384166000908152602083905260409020546119b2908290612f96565b6001600160a01b0385166000908152602084815260408083206001600160801b03949094169093558981015160ff168252606a905290812060018801548290611a0890600290600160201b900461ffff1661454a565b61ffff9081168252602082019290925260400160002089516001600160801b03858116600160801b02911617600180830191909155890154909250611a5791600291600160201b90041661454a565b61ffff16886020015160ff167fca686c96009b7ca118d754ba35ac8459e4045891b4bef1a9f1224baa27134bb18a6000015185604051611aad9291906001600160801b0392831681529116602082015260400190565b60405180910390a360018601548654600091611ae391859161079b916001600160801b031690600160801b900461ffff16613266565b8754909150600090611b0e906001600160801b031661197d611b076008600a61445b565b8590613204565b9050611b198161321c565b8089600801600060028c60010160049054906101000a900461ffff16611b3f919061454a565b61ffff1681526020810191909152604001600090812080546001600160801b0319166001600160801b0393841617905589549091611b8f918082169161197d918791600160801b90910416613204565b8a54909150600090611bb2908390600160801b90046001600160801b0316612f96565b9050611bbd8161321c565b8a546001600160801b03908116600160801b83831602178c5560028c0154600091611bed91166107958786612fab565b9050611bf88161321c565b60029b909b0180546001600160801b0319166001600160801b03909c169b909b17909a555050600090965550505050505050505b80611c36816145ca565b915050611672565b606e5460609060ff16611c5e575060408051600081526020810190915290565b6000805b606e5460ff9081169082161015611cc35760ff8082166000908152606d60209081526040808320546001600160a01b03168352606c9091529020541615611cb15781611cad816145ca565b9250505b80611cbb816145e5565b915050611c62565b506000816001600160401b03811115611cec57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d15578160200160208202803683370190505b5090506000915060005b606e5460ff9081169082161015611dda5760ff8082166000908152606d60209081526040808320546001600160a01b03168352606c9091529020541615611dc85760ff81166000908152606d60205260409020546001600160a01b03168284611d87816145ca565b955081518110611da757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b80611dd2816145e5565b915050611d1f565b5092915050565b60606000805b60665460ff600160a01b90910481169082161015611f805760ff81166000908152606960205260408082209051630aaf5c2360e21b81526004810182905290919073__$e36f5330ef2566ea8a183e1e27b10de643$__90632abd708c906024016101e06040518083038186803b158015611e6057600080fd5b505af4158015611e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e989190613ea2565b90506003816060015161ffff161015611eb2575050611f6e565b60015b60028260600151611ec6919061454a565b61ffff168161ffff1611611f6a5760ff84166000908152606a6020908152604080832061ffff85168452909152902060028101546201000090046001600160a01b031633148015611f44575060018101546001600160801b0316151580611f44575060028360600151611f39919061454a565b61ffff168261ffff16105b15611f575785611f53816145ca565b9650505b5080611f62816145a8565b915050611eb5565b5050505b80611f78816145e5565b915050611de7565b506000816001600160401b03811115611fa957634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561201057816020015b6040805160e08101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c08201528252600019909201910181611fc75790505b5090508161201e5792915050565b6000915060005b60665460ff600160a01b90910481169082161015611dda5760ff81166000908152606960205260408082209051630aaf5c2360e21b81526004810182905290919073__$e36f5330ef2566ea8a183e1e27b10de643$__90632abd708c906024016101e06040518083038186803b15801561209e57600080fd5b505af41580156120b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d69190613ea2565b90506003816060015161ffff1610156120f05750506122c1565b60015b60028260600151612104919061454a565b61ffff168161ffff16116122bd5760ff84166000908152606a6020908152604080832061ffff858116855290835292819020815160c08101835281546001600160801b038082168352600160801b9182900481169583019590955260018301548086169483019490945290920490921660608201526002909101549182166080820152620100009091046001600160a01b031660a0820181905233146121aa57506122ab565b60408101516001600160801b03166121f657600283606001516121cd919061454a565b61ffff168261ffff1614156121e257506122ab565b60208101516001600160801b031660408201525b60006040518060e0016040528083600001516001600160801b0316815260200183602001516001600160801b0316815260200183604001516001600160801b0316815260200183606001516001600160801b031681526020018461ffff168152602001836080015161ffff1681526020018760ff1681525090508087898061227d906145ca565b9a508151811061229d57634e487b7160e01b600052603260045260246000fd5b602002602001018190525050505b806122b5816145a8565b9150506120f3565b5050505b806122cb816145e5565b915050612025565b6066546001600160a01b031633146122fd5760405162461bcd60e51b81526004016106389061426c565b60005b815181101561084d57600082828151811061232b57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151805160ff16600090815260699092526040909120600181015491925090600160201b900461ffff16156123a15760405162461bcd60e51b815260206004820152601260248201527130b63932b0b23c9035b4b1b5b2b21037b33360711b6044820152606401610638565b6000826040015160ff16600014156123c7576123c04262093a80612f96565b90506123f1565b826040015160ff16600114156123e3576123c042610e10612f96565b6123ee42603c612f96565b90505b63ffffffff8111156124395760405162461bcd60e51b81526020600482015260116024820152706375744f66664174204f766572666c6f7760781b6044820152606401610638565b60019091018054602084015160409094015165ffff000000001960ff909116600160b01b021676ff00000000000000000000000000000000ffff00000000196001600160801b0390951666010000000000000275ffffffffffffffffffffffffffffffff0000ffffffff1990921663ffffffff90941693909317179290921617600160201b179055806124cb816145ca565b915050612300565b6033546001600160a01b031633146124fd5760405162461bcd60e51b8152600401610638906141ee565b610ebe81613282565b6033546001600160a01b031633146125305760405162461bcd60e51b8152600401610638906141ee565b6001600160a01b0381166125955760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610638565b610ebe816131b2565b606654829060ff600160a01b9091048116908216106125cf5760405162461bcd60e51b815260040161063890614243565b606554156125ef5760405162461bcd60e51b815260040161063890614223565b60016065558161262b5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610638565b60ff83166000908152606760205260409020546201000090046001600160a01b0316806126805760405162461bcd60e51b815260206004820152600360248201526208aa8960eb1b6044820152606401610638565b60ff84166000908152606960205260409020600181015463ffffffff166126d45760405162461bcd60e51b8152602060048201526008602482015267085cdd185c9d195960c21b6044820152606401610638565b6126e96001600160a01b0383163330876132ca565b604051633f7c9c6360e21b815273__$e36f5330ef2566ea8a183e1e27b10de643$__9063fdf2718c9061272490849033908990600401614302565b60006040518083038186803b15801561273c57600080fd5b505af4158015612750573d6000803e3d6000fd5b50505050600181015460408051868152600160201b90920461ffff16602083015260ff87169133917f4c1c19f358489633624c9165b2c2e2875b2505cee2b9bc935b4a057521996e69910160405180910390a350506000606555505050565b336000908152606c602052604090205460ff166127fd5760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b6044820152606401610638565b6065541561281d5760405162461bcd60e51b815260040161063890614223565b60016065556000805b8251811015612caa57600083828151811061285157634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160ff8116600090815260699092526040918290209151631d319eb160e31b81526004810183905290925073__$e36f5330ef2566ea8a183e1e27b10de643$",
  "libraries": {
    "OptionLifecycle": "0x910a349Bf558E1fc085305Bed81e2a377E9fA3c9"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 213,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6939,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "locked",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 6941,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "managerRoleAddress",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 6943,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "vaultCount",
        "offset": 20,
        "slot": "102",
        "type": "t_uint8"
      },
      {
        "astId": 6945,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "assetCount",
        "offset": 21,
        "slot": "102",
        "type": "t_uint8"
      },
      {
        "astId": 6950,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "vaultDefinitions",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint8,t_struct(VaultDefinition)6535_storage)"
      },
      {
        "astId": 6954,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "assets",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_uint8,t_address)"
      },
      {
        "astId": 6959,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "vaultStates",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint8,t_struct(VaultState)6574_storage)"
      },
      {
        "astId": 6966,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "soldVaultStates",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint8,t_mapping(t_uint16,t_struct(SoldVaultState)6624_storage))"
      },
      {
        "astId": 6971,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "buyerStates",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_struct(OptionBuyerState)6579_storage)"
      },
      {
        "astId": 6978,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "whitelist",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6982,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "traders",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_uint8,t_address)"
      },
      {
        "astId": 6984,
        "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
        "label": "traderCount",
        "offset": 0,
        "slot": "110",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(OptionBuyerState)6579_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.OptionBuyerState)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionBuyerState)6579_storage"
      },
      "t_mapping(t_address,t_struct(UserState)6594_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)6594_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_struct(SoldVaultState)6624_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct StructureData.SoldVaultState)",
        "numberOfBytes": "32",
        "value": "t_struct(SoldVaultState)6624_storage"
      },
      "t_mapping(t_uint16,t_uint128)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint8,t_mapping(t_uint16,t_struct(SoldVaultState)6624_storage))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(uint16 => struct StructureData.SoldVaultState))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_struct(SoldVaultState)6624_storage)"
      },
      "t_mapping(t_uint8,t_struct(VaultDefinition)6535_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StructureData.VaultDefinition)",
        "numberOfBytes": "32",
        "value": "t_struct(VaultDefinition)6535_storage"
      },
      "t_mapping(t_uint8,t_struct(VaultState)6574_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StructureData.VaultState)",
        "numberOfBytes": "32",
        "value": "t_struct(VaultState)6574_storage"
      },
      "t_struct(OptionBuyerState)6579_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionBuyerState",
        "members": [
          {
            "astId": 6578,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "optionValueToCollect",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(OptionState)6546_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionState",
        "members": [
          {
            "astId": 6537,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6539,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "queuedRedeemAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6541,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "strike",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6543,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "premiumRate",
            "offset": 16,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 6545,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "buyerAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(SoldVaultState)6624_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.SoldVaultState",
        "members": [
          {
            "astId": 6613,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6615,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "strike",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6617,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "expiryLevel",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6619,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "optionHolderValue",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6621,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "premiumRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 6623,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "buyerAddress",
            "offset": 2,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserState)6594_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.UserState",
        "members": [
          {
            "astId": 6581,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "pending",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6583,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "redeemed",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6585,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "expiredAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6587,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "expiredQueuedRedeemAmount",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6589,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "onGoingAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6591,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "onGoingQueuedRedeemAmount",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6593,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "lastUpdateRound",
            "offset": 0,
            "slot": "3",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(VaultDefinition)6535_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.VaultDefinition",
        "members": [
          {
            "astId": 6526,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "vaultId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6528,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "assetAmountDecimals",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6530,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "asset",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6532,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "underlying",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6534,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "callOrPut",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultState)6574_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.VaultState",
        "members": [
          {
            "astId": 6548,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "totalPending",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6550,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "totalRedeemed",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6552,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "cutOffAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 6554,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "currentRound",
            "offset": 4,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 6556,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "maxCapacity",
            "offset": 6,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6558,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "environment",
            "offset": 22,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 6561,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "onGoing",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(OptionState)6546_storage"
          },
          {
            "astId": 6564,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "expired",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(OptionState)6546_storage"
          },
          {
            "astId": 6568,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "depositPriceAfterExpiryPerRound",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint16,t_uint128)"
          },
          {
            "astId": 6573,
            "contract": "contracts/SingleDirectionOptionUpgradeable.sol:SingleDirectionOptionUpgradeable",
            "label": "userStates",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_struct(UserState)6594_storage)"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}