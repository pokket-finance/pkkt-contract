{
  "address": "0x87aF61d9cABe914e7b623924Ac51d0159A918d22",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "totalAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalTerminate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "strikePrice",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "round",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callOrPut",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionState",
          "name": "_optionState",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_callOrPut",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "_depositAssetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_counterPartyAssetAmountDecimals",
          "type": "uint8"
        }
      ],
      "name": "calculateMaturity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "releasedDepositAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedDepositAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedDepositAssetAmountWithPremium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releasedCounterPartyAssetAmountWithPremium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollDepositAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollDepositAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollDepositAssetAmountWithPremium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollCounterPartyAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollCounterPartyAssetPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "autoRollCounterPartyAssetAmountWithPremium",
              "type": "uint256"
            }
          ],
          "internalType": "struct StructureData.MaturedState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_source",
          "type": "address"
        }
      ],
      "name": "getAvailableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ecfa6ae085669022f891abe5123c2648fbb24a1755c271a700c41972573d57a",
  "receipt": {
    "to": null,
    "from": "0x7BC55d94EEC38E15fE84c90Bf2B10BF4Eabd1189",
    "contractAddress": "0x87aF61d9cABe914e7b623924Ac51d0159A918d22",
    "transactionIndex": 0,
    "gasUsed": "2388075",
    "logsBloom": "0x
    "blockHash": "0xabf9b9c50f97e06b361989ec075721b058dc823f77248bc015d32bc7a89b729e",
    "transactionHash": "0x4ecfa6ae085669022f891abe5123c2648fbb24a1755c271a700c41972573d57a",
    "logs": [],
    "blockNumber": 17780288,
    "cumulativeGasUsed": "2388075",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cd2abd3f6a7a8f355acbfd0c9c135aeb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"totalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalTerminate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"strikePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionState\",\"name\":\"_optionState\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_callOrPut\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_counterPartyAssetAmountDecimals\",\"type\":\"uint8\"}],\"name\":\"calculateMaturity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"releasedDepositAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedDepositAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedDepositAssetAmountWithPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCounterPartyAssetAmountWithPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollDepositAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollDepositAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollDepositAssetAmountWithPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollCounterPartyAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollCounterPartyAssetPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoRollCounterPartyAssetAmountWithPremium\",\"type\":\"uint256\"}],\"internalType\":\"struct StructureData.MaturedState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_source\",\"type\":\"address\"}],\"name\":\"getAvailableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/OptionLifecycle.sol\":\"OptionLifecycle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/libraries/OptionLifecycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./StructureData.sol\\\";\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary OptionLifecycle {\\n    using SafeERC20 for IERC20;\\n    using Utils for uint128;\\n    using Utils for uint256;\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using StructureData for StructureData.UserState;\\n\\n    function deriveVirtualLocked(\\n        StructureData.UserState memory userState,\\n        uint16 premiumRate\\n    ) internal pure returns (uint256) {\\n        uint256 onGoing = uint256(userState.ongoingAsset);\\n        if (onGoing == 0) {\\n            return uint256(userState.tempLocked);\\n        }\\n        onGoing = (onGoing.sub(userState.assetToTerminate)).withPremium(\\n            premiumRate\\n        );\\n        if (userState.tempLocked == 0) {\\n            return onGoing;\\n        }\\n        return uint256(userState.tempLocked).add(onGoing);\\n    }\\n\\n    function getAvailableBalance(address _asset, address _source)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (_asset != address(0)) {\\n            return IERC20(_asset).balanceOf(_source);\\n        } else {\\n            return _source.balance;\\n        }\\n    }\\n\\n    function withdraw(\\n        address _target,\\n        uint256 _amount,\\n        address _contractAddress\\n    ) external {\\n        require(_amount > 0, \\\"!amt\\\");\\n        if (_contractAddress == address(0)) {\\n            payable(_target).transfer(_amount);\\n        } else {\\n            IERC20(_contractAddress).safeTransfer(_target, _amount);\\n        }\\n    }\\n\\n    function calculateMaturity(\\n        bool _execute,\\n        StructureData.OptionState memory _optionState,\\n        bool _callOrPut,\\n        uint8 _depositAssetAmountDecimals,\\n        uint8 _counterPartyAssetAmountDecimals\\n    ) public pure returns (StructureData.MaturedState memory) {\\n        StructureData.MaturedState memory state = StructureData.MaturedState({\\n            releasedDepositAssetAmount: 0,\\n            releasedDepositAssetPremiumAmount: 0,\\n            releasedDepositAssetAmountWithPremium: 0,\\n            autoRollDepositAssetAmount: 0,\\n            autoRollDepositAssetPremiumAmount: 0,\\n            autoRollDepositAssetAmountWithPremium: 0,\\n            releasedCounterPartyAssetAmount: 0,\\n            releasedCounterPartyAssetPremiumAmount: 0,\\n            releasedCounterPartyAssetAmountWithPremium: 0,\\n            autoRollCounterPartyAssetAmount: 0,\\n            autoRollCounterPartyAssetPremiumAmount: 0,\\n            autoRollCounterPartyAssetAmountWithPremium: 0\\n        });\\n        if (_execute) {\\n            uint256 maturedCounterPartyAssetAmount = \\n                _callOrPut\\n                    ? uint256(_optionState.totalAmount)\\n                        .mul(_optionState.strikePrice)\\n                        .mul(10**_counterPartyAssetAmountDecimals)\\n                        .div(\\n                            10 **\\n                                (StructureData.PRICE_PRECISION +\\n                                    _depositAssetAmountDecimals)\\n                        )\\n                    : uint256(_optionState.totalAmount)\\n                        .mul(\\n                            10 **\\n                                (StructureData.PRICE_PRECISION +\\n                                    _counterPartyAssetAmountDecimals)\\n                        )\\n                        .div(_optionState.strikePrice)\\n                        .div(10**_depositAssetAmountDecimals);\\n\\n            uint256 maturedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetAmount\\n                    .premium(_optionState.premiumRate);\\n            if (_optionState.totalTerminate > 0) {\\n                state\\n                    .releasedCounterPartyAssetAmount = maturedCounterPartyAssetAmount\\n                    .getAmountToTerminate(\\n                        _optionState.totalTerminate,\\n                        _optionState.totalAmount\\n                    );\\n                state\\n                    .releasedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetPremiumAmount\\n                    .getAmountToTerminate(\\n                        _optionState.totalTerminate,\\n                        _optionState.totalAmount\\n                    );\\n                state.releasedCounterPartyAssetAmountWithPremium =\\n                    state.releasedCounterPartyAssetAmount.add(\\n                    state.releasedCounterPartyAssetPremiumAmount);\\n            }\\n            state.autoRollCounterPartyAssetAmount =\\n                maturedCounterPartyAssetAmount.sub(\\n                state.releasedCounterPartyAssetAmount);\\n            state.autoRollCounterPartyAssetPremiumAmount =\\n                maturedCounterPartyAssetPremiumAmount.sub(\\n                state.releasedCounterPartyAssetPremiumAmount);\\n            state.autoRollCounterPartyAssetAmountWithPremium =\\n                state.autoRollCounterPartyAssetAmount.add(\\n                state.autoRollCounterPartyAssetPremiumAmount);\\n        } else {\\n            uint256 maturedDepositAssetAmount = uint256(_optionState.totalAmount);\\n            uint256 maturedDepositAssetPremiumAmount = maturedDepositAssetAmount\\n                .premium(_optionState.premiumRate);\\n            if (_optionState.totalTerminate > 0) {\\n                state.releasedDepositAssetAmount = maturedDepositAssetAmount\\n                    .getAmountToTerminate(\\n                        _optionState.totalTerminate,\\n                        _optionState.totalAmount\\n                    );\\n                state\\n                    .releasedDepositAssetPremiumAmount = maturedDepositAssetPremiumAmount\\n                    .getAmountToTerminate(\\n                        _optionState.totalTerminate,\\n                        _optionState.totalAmount\\n                    );\\n                state.releasedDepositAssetAmountWithPremium =\\n                    state.releasedDepositAssetAmount.add(\\n                    state.releasedDepositAssetPremiumAmount);\\n            }\\n            state.autoRollDepositAssetAmount =\\n                maturedDepositAssetAmount.sub(\\n                state.releasedDepositAssetAmount);\\n            state.autoRollDepositAssetPremiumAmount =\\n                maturedDepositAssetPremiumAmount.sub(\\n                state.releasedDepositAssetPremiumAmount);\\n            state.autoRollDepositAssetAmountWithPremium =\\n                state.autoRollDepositAssetAmount.add(\\n                state.autoRollDepositAssetPremiumAmount);\\n        }\\n        return state;\\n    }\\n\\n    function commitByOption(\\n        StructureData.OptionData storage _option,\\n        uint16 _roundToCommit\\n    ) external {\\n        uint256 userCount = _option.usersInvolved.length;\\n        for (uint256 i = 0; i < userCount; i++) {\\n            StructureData.UserState storage userState = _option.userStates[\\n                _option.usersInvolved[i]\\n            ];\\n            if (userState.assetToTerminateForNextRound != 0) {\\n                userState.assetToTerminate = userState\\n                    .assetToTerminateForNextRound;\\n                userState.assetToTerminateForNextRound = 0;\\n            } else if (userState.assetToTerminate != 0) {\\n                userState.assetToTerminate = 0;\\n            }\\n            if (userState.tempLocked == 0) {\\n                userState.ongoingAsset = 0;\\n                continue;\\n            }\\n            userState.ongoingAsset = userState.tempLocked;\\n            userState.tempLocked = 0;\\n        } \\n        _option.optionStates[_roundToCommit].totalTerminate = uint256(_option\\n            .optionStates[_roundToCommit]\\n            .totalTerminate)\\n            .add(_option.assetToTerminateForNextRound).toUint128();\\n        _option.assetToTerminateForNextRound = 0;\\n    }\\n\\n    function rollToNextByOption(\\n        StructureData.OptionData storage _option,\\n        uint16 _currentRound,\\n        bool _callOrPut\\n    ) external returns (uint128 _pendingAmount) { \\n        StructureData.OptionState memory currentOption = StructureData\\n            .OptionState({\\n                round: _currentRound,\\n                totalAmount: 0,\\n                totalTerminate: 0,\\n                premiumRate: 0,\\n                strikePrice: 0,\\n                executed: false,\\n                callOrPut: _callOrPut\\n            });\\n        _option.optionStates[_currentRound] = currentOption;\\n        if (_currentRound > 1) {\\n            uint256 userCount = _option.usersInvolved.length;\\n            for (uint256 i = 0; i < userCount; i++) {\\n                StructureData.UserState storage userState = _option.userStates[\\n                    _option.usersInvolved[i]\\n                ];\\n                if (userState.pendingAsset != 0) {\\n                    userState.tempLocked = userState.pendingAsset;\\n                }\\n                userState.pendingAsset = 0;\\n            }\\n        } \\n        return\\n            _currentRound > 1\\n                ? _option.optionStates[_currentRound - 1].totalAmount\\n                : 0;\\n    }\\n\\n    function dryRunSettlementByOption(\\n        StructureData.OptionData storage _option,\\n        bool _isCall,\\n        uint8 _depositAssetAmountDecimals,\\n        uint8 _counterPartyAssetAmountDecimals,\\n        uint16 _currentRound,\\n        bool _execute\\n    )\\n        external\\n        view\\n        returns (StructureData.SettlementAccountingResult memory _result)\\n    {\\n        StructureData.SettlementAccountingResult memory result = StructureData\\n            .SettlementAccountingResult({ \\n                depositAmount: _option\\n                    .optionStates[_currentRound - 1]\\n                    .totalAmount,\\n                executed: _execute,\\n                autoRollAmount: 0,\\n                autoRollPremium: 0,\\n                releasedAmount: 0,\\n                releasedPremium: 0,\\n                autoRollCounterPartyAmount: 0,\\n                autoRollCounterPartyPremium: 0,\\n                releasedCounterPartyAmount: 0,\\n                releasedCounterPartyPremium: 0\\n            });\\n        if (_currentRound > 2) {\\n            StructureData.OptionState storage previousOptionState = _option\\n                .optionStates[_currentRound - 2];\\n            if (previousOptionState.totalAmount == 0) {\\n                return result;\\n            }\\n            StructureData.MaturedState memory maturedState = calculateMaturity(\\n                _execute,\\n                previousOptionState,\\n                _isCall,\\n                _depositAssetAmountDecimals,\\n                _counterPartyAssetAmountDecimals\\n            );\\n            if (_execute) {\\n                result.autoRollCounterPartyAmount = maturedState\\n                    .autoRollCounterPartyAssetAmount.toUint128();\\n                result.autoRollCounterPartyPremium = maturedState\\n                    .autoRollCounterPartyAssetPremiumAmount.toUint128();\\n                result.releasedCounterPartyAmount = maturedState\\n                    .releasedCounterPartyAssetAmount.toUint128();\\n                result.releasedCounterPartyPremium = maturedState\\n                    .releasedCounterPartyAssetPremiumAmount.toUint128();\\n            } else {\\n                result.autoRollAmount = maturedState.autoRollDepositAssetAmount.toUint128();\\n                result.autoRollPremium = maturedState\\n                    .autoRollDepositAssetPremiumAmount.toUint128();\\n                result.releasedAmount = maturedState.releasedDepositAssetAmount.toUint128();\\n                result.releasedPremium = maturedState\\n                    .releasedDepositAssetPremiumAmount.toUint128();\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function closePreviousByOption(\\n        StructureData.OptionData storage _option,\\n        StructureData.OptionState storage previousOptionState,\\n        bool _isCall,\\n        uint8 _depositAssetAmountDecimals,\\n        uint8 _counterPartyAssetAmountDecimals,\\n        bool _execute\\n    ) external returns (StructureData.MaturedState memory _maturedState) {\\n        //uint16 maturedRound = currentRound - 2;\\n        StructureData.MaturedState memory maturedState = calculateMaturity(\\n            _execute,\\n            previousOptionState,\\n            _isCall,\\n            _depositAssetAmountDecimals,\\n            _counterPartyAssetAmountDecimals\\n        );\\n        previousOptionState.executed = _execute;\\n\\n        if (_execute) {\\n            _option.totalReleasedCounterPartyAssetAmount =uint256(_option\\n                .totalReleasedCounterPartyAssetAmount)\\n                .add(maturedState.releasedCounterPartyAssetAmountWithPremium).toUint128();\\n        } else {\\n            _option.totalReleasedDepositAssetAmount = uint256(_option\\n                .totalReleasedDepositAssetAmount)\\n                .add(maturedState.releasedDepositAssetAmountWithPremium).toUint128();\\n        }\\n        return maturedState;\\n    }\\n    /*\\n        struct OptionParameters { \\n        uint128 strikePrice; // strike price if executed\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n    }\\n*/\\n    function setOptionParameters(uint256 _parameters, StructureData.OptionState storage _optionState) external {\\n \\n        require(_optionState.strikePrice == 0); \\n        _optionState.strikePrice = uint128(_parameters >> 16);\\n        _optionState.premiumRate = uint16(_parameters & 0xffff);     \\n    }\\n    function getAccountBalance(\\n        StructureData.OptionData storage _option,\\n        address _user,\\n        bool _underSettlement,\\n        uint16 _currentRound\\n    ) external view returns (StructureData.UserBalance memory) {\\n        StructureData.UserState storage userState = _option.userStates[_user];\\n\\n        StructureData.UserBalance memory result = StructureData.UserBalance({\\n            pendingDepositAssetAmount: userState.pendingAsset,\\n            releasedDepositAssetAmount: userState.releasedDepositAssetAmount,\\n            releasedCounterPartyAssetAmount: userState\\n                .releasedCounterPartyAssetAmount,\\n            lockedDepositAssetAmount: 0,\\n            terminatingDepositAssetAmount: 0,\\n            toTerminateDepositAssetAmount: 0\\n        });\\n        if (_underSettlement) {\\n            if (_currentRound > 2) {\\n                //when there are maturing round waiting for settlement, it becomes complex\\n                uint16 premiumRate = _option\\n                    .optionStates[_currentRound - 2]\\n                    .premiumRate;\\n                result.lockedDepositAssetAmount = deriveVirtualLocked(\\n                    userState,\\n                    premiumRate\\n                ).toUint128();\\n                result.terminatingDepositAssetAmount = uint256(userState\\n                    .assetToTerminate)\\n                    .withPremium(premiumRate).toUint128();\\n            } else {\\n                result.lockedDepositAssetAmount = userState.tempLocked;\\n            }\\n            result.toTerminateDepositAssetAmount = userState\\n                    .assetToTerminateForNextRound;\\n        } else {\\n            result.lockedDepositAssetAmount = userState.ongoingAsset;\\n            result.toTerminateDepositAssetAmount = userState.assetToTerminate;\\n        }\\n        return result;\\n    }\\n\\n    function getOptionSnapShot(\\n        StructureData.OptionData storage _option,\\n        bool _underSettlement,\\n        uint16 _currentRound\\n    ) external view returns (StructureData.OptionSnapshot memory) {\\n        StructureData.OptionState memory lockedOption;\\n        StructureData.OptionState memory onGoingOption;\\n        StructureData.OptionSnapshot memory result = StructureData\\n            .OptionSnapshot({\\n                totalPending: _option.optionStates[_currentRound].totalAmount,\\n                totalReleasedDeposit: _option.totalReleasedDepositAssetAmount,\\n                totalReleasedCounterParty: _option\\n                    .totalReleasedCounterPartyAssetAmount,\\n                totalLocked: 0,\\n                totalTerminating: 0,\\n                totalToTerminate: 0\\n            });\\n        if (_underSettlement) {\\n            lockedOption = _option.optionStates[_currentRound - 1];\\n            result.totalToTerminate = _option.assetToTerminateForNextRound;\\n            if (_currentRound > 2) {\\n                //when there are maturing round waiting for settlement, it becomes complex\\n                onGoingOption = _option.optionStates[_currentRound - 2];\\n                result.totalTerminating = uint256(onGoingOption\\n                    .totalTerminate)\\n                    .withPremium(onGoingOption.premiumRate).toUint128();\\n                result.totalLocked = uint256(lockedOption\\n                    .totalAmount)\\n                    .add(\\n                        onGoingOption.totalAmount.withPremium(\\n                            onGoingOption.premiumRate\\n                        )\\n                    )\\n                    .sub(result.totalTerminating).toUint128();\\n            } else {\\n                result.totalLocked = lockedOption.totalAmount;\\n            }\\n        } else if (_currentRound > 1) {\\n            onGoingOption = _option.optionStates[_currentRound - 1];\\n            result.totalLocked = onGoingOption.totalAmount;\\n            result.totalToTerminate = onGoingOption.totalTerminate;\\n        }\\n        return result;\\n    }\\n\\n    function initiateWithrawStorage(\\n        StructureData.OptionData storage _option,\\n        address _user,\\n        uint256 _assetToTerminate,\\n        bool _underSettlement,\\n        uint16 _currentRound\\n    ) external {\\n        StructureData.UserState storage userState = _option.userStates[_user];\\n        if (_underSettlement) {\\n            uint256 newAssetToTerminate = uint256(userState\\n                .assetToTerminateForNextRound)\\n                .add(_assetToTerminate);\\n            if (_currentRound == 2) {\\n                require(newAssetToTerminate <= userState.tempLocked);\\n                StructureData.OptionState storage previousOption = _option\\n                    .optionStates[_currentRound - 1];\\n                previousOption.totalTerminate = uint256(previousOption\\n                    .totalTerminate)\\n                    .add(_assetToTerminate).toUint128();\\n            } else {\\n                StructureData.OptionState storage onGoingOption = _option\\n                    .optionStates[_currentRound - 2];\\n                uint256 totalLocked = deriveVirtualLocked(\\n                    userState,\\n                    onGoingOption.premiumRate\\n                );\\n                require(newAssetToTerminate <= totalLocked);\\n                //store temporarily\\n                _option.assetToTerminateForNextRound = uint256(_option\\n                    .assetToTerminateForNextRound)\\n                    .add(_assetToTerminate).toUint128();\\n            }\\n            userState.assetToTerminateForNextRound = newAssetToTerminate.toUint128();\\n        } else {\\n            uint256 newAssetToTerminate = uint256(userState.assetToTerminate).add(\\n                _assetToTerminate\\n            );\\n            require(newAssetToTerminate <= userState.ongoingAsset);\\n            userState.assetToTerminate = newAssetToTerminate.toUint128();\\n            StructureData.OptionState storage previousOption = _option\\n                .optionStates[_currentRound - 1];\\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).add(\\n                _assetToTerminate\\n            ).toUint128();\\n        }\\n    }\\n\\n    function cancelWithdrawStorage(\\n        StructureData.OptionData storage _option,\\n        address _user,\\n        uint256 _assetToTerminate,\\n        bool _underSettlement,\\n        uint16 _currentRound\\n    ) external {\\n        StructureData.UserState storage userState = _option.userStates[_user];\\n        if (_underSettlement) {\\n            userState.assetToTerminateForNextRound = uint256(userState\\n                .assetToTerminateForNextRound)\\n                .sub(_assetToTerminate).toUint128();\\n            if (_currentRound == 2) {\\n                StructureData.OptionState storage previousOption = _option\\n                    .optionStates[_currentRound - 1];\\n                previousOption.totalTerminate = uint256(previousOption\\n                    .totalTerminate)\\n                    .sub(_assetToTerminate).toUint128();\\n            } else {\\n                //store temporarily\\n                _option.assetToTerminateForNextRound = uint256(_option\\n                    .assetToTerminateForNextRound)\\n                    .sub(_assetToTerminate).toUint128();\\n            }\\n        } else {\\n            userState.assetToTerminate = uint256(userState.assetToTerminate).sub(\\n                _assetToTerminate\\n            ).toUint128();\\n            StructureData.OptionState storage previousOption = _option\\n                .optionStates[_currentRound - 1];\\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).sub(\\n                _assetToTerminate\\n            ).toUint128();\\n        }\\n    }\\n\\n    function withdrawStorage(\\n        StructureData.OptionData storage _option,\\n        address _user,\\n        uint256 _amount,\\n        uint16 _currentRound,\\n        bool _isDeposit\\n    ) external {\\n        //require(_amount > 0, \\\"!amount\\\");\\n        StructureData.UserState storage userState = _option.userStates[_user];\\n        if (_isDeposit) {\\n            //todo: 0 out released amount if missing balance from trader\\n            uint256 releasedAmount = uint256(userState.releasedDepositAssetAmount);\\n            if (releasedAmount <= _amount) {\\n                uint256 redeemAmount = _amount.sub(releasedAmount);\\n                userState.pendingAsset = uint256(userState.pendingAsset).sub(\\n                    redeemAmount\\n                ).toUint128();\\n                userState.releasedDepositAssetAmount = 0;\\n                _option.totalReleasedDepositAssetAmount = uint256(_option\\n                    .totalReleasedDepositAssetAmount)\\n                    .sub(releasedAmount).toUint128();\\n                StructureData.OptionState storage optionState = _option\\n                    .optionStates[_currentRound];\\n                optionState.totalAmount = uint256(optionState.totalAmount).sub(\\n                    redeemAmount\\n                ).toUint128();\\n            } else {\\n                userState.releasedDepositAssetAmount = releasedAmount.sub(\\n                    _amount\\n                ).toUint128();\\n                _option.totalReleasedDepositAssetAmount = uint256(_option\\n                    .totalReleasedDepositAssetAmount)\\n                    .sub(_amount).toUint128();\\n            }\\n        } else {\\n            //same result as completeWithdraw\\n            userState.releasedCounterPartyAssetAmount = uint256(userState\\n                .releasedCounterPartyAssetAmount)\\n                .sub(_amount).toUint128();\\n            _option.totalReleasedCounterPartyAssetAmount = uint256(_option\\n                .totalReleasedCounterPartyAssetAmount)\\n                .sub(_amount).toUint128();\\n        }\\n    }\\n\\n    function depositFor(\\n        StructureData.OptionData storage _option,\\n        address _userAddress,\\n        uint256 _amount,\\n        uint256 _toTerminate,\\n        uint16 _round,\\n        bool _isOpenRound\\n    ) external {\\n        //require(optionState.totalAmount + (_amount) <= quota[_optionId], \\\"Not enough quota\\\");\\n\\n        StructureData.OptionState storage optionState = _option.optionStates[\\n            _round\\n        ];\\n        StructureData.UserState storage userState = _option.userStates[\\n            _userAddress\\n        ];\\n        //first time added\\n        if (!userState.hasState) {\\n            userState.hasState = true;\\n            _option.usersInvolved.push(_userAddress);\\n        }\\n        if (!_isOpenRound) {\\n            userState.tempLocked = uint256(userState.tempLocked).add(_amount).toUint128();\\n            if (_toTerminate > 0) {\\n                userState.assetToTerminateForNextRound = uint256(userState\\n                    .assetToTerminateForNextRound)\\n                    .add(_toTerminate).toUint128();\\n                _option.assetToTerminateForNextRound = uint256(_option\\n                    .assetToTerminateForNextRound)\\n                    .add(_toTerminate).toUint128();\\n            }\\n        } else {\\n            userState.pendingAsset = uint256(userState.pendingAsset).add(_amount).toUint128();\\n        }\\n        optionState.totalAmount = uint256(optionState.totalAmount).add(_amount).toUint128();\\n    }\\n}\\n\",\"keccak256\":\"0x504a1220ad518cc592449db834b6f4254b6b39b6bf737abee3166df993ababf3\",\"license\":\"MIT\"},\"contracts/libraries/StructureData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary StructureData {\\n    bytes32 public constant OPTION_ROLE = keccak256(\\\"OPTION_ROLE\\\");\\n    bytes32 public constant SETTLER_ROLE = keccak256(\\\"SETTLER_ROLE\\\");\\n    uint8 public constant MATUREROUND = 1; //7 for daily settlement, 1 for daily settlement\\n    uint8 public constant PRICE_PRECISION = 4;\\n    struct OptionParameters { \\n        uint128 strikePrice; // strike price if executed\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n    }\\n\\n    struct OptionState {\\n        uint128 totalAmount;\\n        uint128 totalTerminate;\\n        uint128 strikePrice;\\n        uint16 round;\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n        bool executed;\\n        bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral;\\n    }\\n\\n    struct MaturedState {\\n        uint256 releasedDepositAssetAmount;\\n        uint256 releasedDepositAssetPremiumAmount;\\n        uint256 releasedDepositAssetAmountWithPremium;\\n        uint256 releasedCounterPartyAssetAmount;\\n        uint256 releasedCounterPartyAssetPremiumAmount;\\n        uint256 releasedCounterPartyAssetAmountWithPremium;\\n        uint256 autoRollDepositAssetAmount;\\n        uint256 autoRollDepositAssetPremiumAmount;\\n        uint256 autoRollDepositAssetAmountWithPremium;\\n        uint256 autoRollCounterPartyAssetAmount;\\n        uint256 autoRollCounterPartyAssetPremiumAmount;\\n        uint256 autoRollCounterPartyAssetAmountWithPremium;\\n    }\\n\\n    struct AssetData {\\n        uint128 releasedAmount; //debit\\n        uint128 depositAmount; //credit\\n        int128 leftOverAmount; //history balance\\n        /*\\n         *  actual balance perspective\\n         *  withdrawable = redeemable + released\\n         *  balance = withdrawable + leftOver\\n         */\\n        uint128 balanceAfterSettle;\\n        uint128 withdrawableAfterSettle;\\n        uint128 traderWithdrawn;\\n    }\\n\\n    struct OptionData {\\n        uint128 totalReleasedDepositAssetAmount;\\n        uint128 totalReleasedCounterPartyAssetAmount;\\n        uint128 assetToTerminateForNextRound;\\n        mapping(uint16 => StructureData.OptionState) optionStates;\\n        address[] usersInvolved;\\n        mapping(address => StructureData.UserState) userStates;\\n    }\\n\\n    struct UserState {\\n        uint128 pendingAsset; //for current round\\n        uint128 tempLocked; //asset not sent to trader yet, but closed for deposit\\n        uint128 ongoingAsset;\\n        uint128 assetToTerminate;\\n        uint128 assetToTerminateForNextRound;\\n        uint128 releasedDepositAssetAmount;\\n        uint128 releasedCounterPartyAssetAmount;\\n        bool hasState;\\n    }\\n\\n    struct OptionSnapshot {\\n        uint128 totalPending;\\n        //total tvl = totalLocked + totalTerminating\\n        uint128 totalLocked;\\n        //only set during settlement\\n        uint128 totalTerminating;\\n        //amount to terminate in next round,  totalToTerminate <= totalLocked\\n        uint128 totalToTerminate;\\n        uint128 totalReleasedDeposit;\\n        uint128 totalReleasedCounterParty;\\n    }\\n\\n    struct UserBalance {\\n        uint128 pendingDepositAssetAmount;\\n        //tvl = lockedDepositAssetAmount + terminatingDepositAssetAmount\\n        uint128 lockedDepositAssetAmount;\\n        //only set during settlement\\n        uint128 terminatingDepositAssetAmount;\\n        //amount to terminate in next round, toTerminateDepositAssetAmount <= lockedDepositAssetAmount\\n        uint128 toTerminateDepositAssetAmount;\\n        uint128 releasedDepositAssetAmount;\\n        uint128 releasedCounterPartyAssetAmount;\\n    }\\n    struct OptionPairDefinition {\\n        uint8 callOptionId;\\n        uint8 putOptionId;\\n        uint8 depositAssetAmountDecimals;\\n        uint8 counterPartyAssetAmountDecimals;\\n        address depositAsset;\\n        address counterPartyAsset;\\n        bool manualDepositDisabled;\\n    }\\n    struct SettlementAccountingResult {\\n        uint128 depositAmount;\\n        uint128 autoRollAmount; //T-1 Carried (filled only when not executed)\\n        uint128 autoRollPremium; //Premium (filled only when not executed)\\n        //maturedAmount+maturedPremium = requested withdrawal for deposit asset(filled only when not executed and with withdraw request)\\n        uint128 releasedAmount;\\n        uint128 releasedPremium;\\n        //autoRollCounterPartyAmount + autoRollCounterPartyPremium = Execution rolled-out for deposit asset (Execution roll-in for counter party option)\\n        //filled only when executed\\n        uint128 autoRollCounterPartyAmount;\\n        uint128 autoRollCounterPartyPremium;\\n        //maturedCounterPartyAmount+maturedCounterPartyPremium= requested withdrawal for couter party asset(filled only when executed and with withdraw request)\\n        uint128 releasedCounterPartyAmount;\\n        uint128 releasedCounterPartyPremium;  \\n        bool executed;\\n    }\\n\\n    enum OptionExecution {\\n        NoExecution,\\n        ExecuteCall,\\n        ExecutePut\\n    }\\n\\n    struct OptionPairExecutionAccountingResult {\\n        SettlementAccountingResult callOptionResult;\\n        SettlementAccountingResult putOptionResult;\\n        OptionExecution execute;\\n    }\\n\\n    struct SettlementCashflowResult {\\n        uint128 newDepositAmount;\\n        uint128 newReleasedAmount;\\n        int128 leftOverAmount; //positive, if trader didn't withdraw last time; negative, if trader failed to send back last time;\\n        address contractAddress; //0 for eth\\n    }\\n}\\n\",\"keccak256\":\"0x72a19f2e13ed93e50af73e5a197eb2a39419d2e9a535171b688428a3ed1ac7da\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nlibrary Utils { \\n     \\n    uint256 public constant RATIOMULTIPLIER = 10000;\\n \\n     using SafeMath for uint256;\\n      function StringConcat(bytes memory _base, bytes memory _value) internal pure returns (string memory) {\\n        string memory _tmpValue = new string(_base.length + _value.length);\\n        bytes memory _newValue = bytes(_tmpValue);\\n\\n        uint i;\\n        uint j;\\n\\n        for(i=0; i<_base.length; i++) {\\n            _newValue[j++] = _base[i];\\n        }\\n\\n        for(i=0; i<_value.length; i++) {\\n            _newValue[j++] = _value[i++];\\n        }\\n\\n        return string(_newValue);\\n    }\\n\\n    function Uint8Sub(uint8 a, uint8 b) internal pure returns (uint8) {\\n        require(b <= a);\\n        return a - b;\\n    }\\n    \\n \\n    function getAmountToTerminate(uint256 _maturedAmount, uint256 _assetToTerminate, uint256 _assetAmount) \\n    internal pure returns(uint256) {\\n       if (_assetToTerminate == 0 || _assetAmount == 0 || _maturedAmount == 0) return 0;\\n       return _assetToTerminate >= _assetAmount ?  _maturedAmount  : _maturedAmount.mul(_assetToTerminate).div(_assetAmount);\\n   }\\n\\n   function withPremium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\n       return  _baseAmount.mul(RATIOMULTIPLIER + _premimumRate).div(RATIOMULTIPLIER);\\n   }\\n   \\n   function premium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\n       return   _baseAmount.mul(_premimumRate).div(RATIOMULTIPLIER);\\n   }\\n   \\n   function subOrZero(uint256 _base, uint256 _substractor) internal pure returns (uint256) {\\n       return _base >= _substractor ? _base - _substractor : 0;\\n   }\\n  \\n    /*function assertUint104(uint256 num) internal pure {\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\n    }\\n\\n    function assertUint128(uint256 num) internal pure {\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\n    }*/\\n\\n}\",\"keccak256\":\"0x6277c7104f3569aebb54e17a5701db95d342ef407f03b64eca935e18ea5d5d2c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x612a3961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c80638a229a5711610096578063b2838a7311610070578063b2838a73146102d7578063c502f991146102f8578063c975707314610318578063ce37f8bc1461032b57600080fd5b80638a229a571461025f578063aab696331461027f578063b0eecba81461029f57600080fd5b806369328dec116100d257806369328dec146101645780637441e8bb146101845780637b40fc98146101a4578063862f70b8146101c457600080fd5b80631bb98a33146100f95780634ed14a7f1461012257806366aef26314610142575b600080fd5b61010c610107366004612518565b61034b565b60405161011991906126fa565b60405180910390f35b61013561013036600461238e565b6105fd565b60405161011991906126a2565b81801561014e57600080fd5b5061016261015d3660046125b9565b610811565b005b81801561017057600080fd5b5061016261017f366004612220565b6109d5565b81801561019057600080fd5b5061016261019f366004612428565b610a7a565b8180156101b057600080fd5b506101626101bf3660046123dc565b610c46565b6101d76101d2366004612277565b610f34565b6040516101199190815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e0808301519082015261010080830151908201526101208083015190820152610140808301519082015261016091820151918101919091526101800190565b81801561026b57600080fd5b5061016261027a3660046123dc565b611202565b81801561028b57600080fd5b506101d761029a36600461256c565b6113cd565b8180156102ab57600080fd5b506102bf6102ba3660046125db565b61150a565b6040516001600160801b039091168152602001610119565b6102ea6102e53660046121ee565b6116f7565b604051908152602001610119565b81801561030457600080fd5b50610162610313366004612482565b61179b565b6101356103263660046124e4565b61194f565b81801561033757600080fd5b50610162610346366004612632565b611cfa565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915260006040518061014001604052808960020160006001886103bd919061295b565b61ffff908116825260208083019390935260409182016000908120546001600160801b03168552928401839052908301829052606083018290526080830182905260a0830182905260c0830182905260e0830182905261010083019190915285151561012090920191909152909150600290851611156105f057600088600201600060028761044c919061295b565b61ffff168152602081019190915260400160002080549091506001600160801b031661047a575090506105f3565b6040805160e08101825282546001600160801b038082168352600160801b918290048116602084015260018501549081169383019390935261ffff90830481166060830152600160901b830416608082015260ff600160a01b83048116151560a0830152600160a81b909204909116151560c08201526000906105019086908b8b8b610f34565b9050841561058057610517816101200151611d54565b6001600160801b031660a084015261014081015161053490611d54565b6001600160801b031660c0840152606081015161055090611d54565b6001600160801b031660e0840152608081015161056c90611d54565b6001600160801b03166101008401526105ed565b61058d8160c00151611d54565b6001600160801b0316602084015260e08101516105a990611d54565b6001600160801b0316604084015280516105c290611d54565b6001600160801b0316606084015260208101516105de90611d54565b6001600160801b031660808401525b50505b90505b9695505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526001600160a01b03841660009081526004860160209081526040808320815160c08101835281546001600160801b03908116825293810185905291820184905260608201939093526002830154600160801b900482166080820152600383015490911660a082015284156107e45760028461ffff1611156107b45760008760020160006002876106bf919061295b565b61ffff9081168252602080830193909352604091820160002060019081015483516101008101855288546001600160801b038082168352600160801b918290048116978301979097529289015480871695820195909552938290048516606085015260028801548086166080860152829004851660a0850152600388015494851660c0850152930460ff16151560e0830152600160901b90920490911691506107719061076c9083611dc1565b611d54565b6001600160801b03908116602084015260018401546107a09161076c91600160801b90041661ffff8416611e59565b6001600160801b03166040830152506107cc565b8154600160801b90046001600160801b031660208201525b60028201546001600160801b031660608201526105f3565b60018201546001600160801b038082166020840152600160801b9091041660608201529695505050505050565b600382015460005b8181101561095257600084600401600086600301848154811061084c57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902060028101549091506001600160801b0316156108ba576002810180546001830180546001600160801b03908116908316600160801b021790556001600160801b03191690556108e6565b6001810154600160801b90046001600160801b0316156108e6576001810180546001600160801b031690555b8054600160801b90046001600160801b03166109125760010180546001600160801b0319169055610940565b80546001820180546001600160801b0319166001600160801b03600160801b84048116919091179091551690555b8061094a816129c1565b915050610819565b50600183015461ffff8316600090815260028501602052604090205461098f9161076c91600160801b90046001600160801b039081169116611e75565b61ffff9092166000908152600284016020526040902080546001600160801b03938416600160801b029316929092179091555060010180546001600160801b0319169055565b60008211610a175760405162461bcd60e51b8152600401610a0e9060208082526004908201526308585b5d60e21b604082015260600190565b60405180910390fd5b6001600160a01b038116610a61576040516001600160a01b0384169083156108fc029084906000818181858888f19350505050158015610a5b573d6000803e3d6000fd5b50505050565b610a756001600160a01b0382168484611e81565b505050565b6001600160a01b038416600090815260048601602052604090208115610bd3576002810154600160801b90046001600160801b0316848111610b76576000610ac28683611ed3565b8354909150610ade9061076c906001600160801b031683611ed3565b83546001600160801b0319166001600160801b03918216178455600284018054821690558854610b139161076c911684611ed3565b88546001600160801b0319166001600160801b0391821617895561ffff8616600090815260028a016020526040902080549091610b559161076c911684611ed3565b81546001600160801b0319166001600160801b039190911617905550610bcd565b610b8361076c8287611ed3565b6002830180546001600160801b03928316600160801b029083161790558754610bb19161076c911687611ed3565b87546001600160801b0319166001600160801b03919091161787555b50610c3e565b6003810154610bef9061076c906001600160801b031686611ed3565b6003820180546001600160801b0319166001600160801b039283161790558654610c259161076c91600160801b90041686611ed3565b86546001600160801b03918216600160801b0291161786555b505050505050565b6001600160a01b038416600090815260048601602052604090208215610e57576002810154600090610c81906001600160801b031686611e75565b90508261ffff1660021415610d14578154600160801b90046001600160801b0316811115610cae57600080fd5b60006002880181610cc060018761295b565b61ffff16815260208101919091526040016000208054909150610cf79061076c90600160801b90046001600160801b031688611e75565b81546001600160801b03918216600160801b029116179055610e26565b6000876002016000600286610d29919061295b565b61ffff90811682526020808301939093526040918201600090812083516101008101855288546001600160801b038082168352600160801b918290048116978301979097526001808b015480891697840197909752958190048716606083015260028a01548088166080840152819004871660a083015260038a015496871660c083015290950460ff16151560e08601529283015492945092610dd6929091600160901b90910416611dc1565b905080831115610de557600080fd5b6001890154610e019061076c906001600160801b031689611e75565b60018a0180546001600160801b0319166001600160801b039290921691909117905550505b610e2f81611d54565b6002830180546001600160801b0319166001600160801b039290921691909117905550610c3e565b6001810154600090610e7990600160801b90046001600160801b031686611e75565b60018301549091506001600160801b0316811115610e9657600080fd5b610e9f81611d54565b8260010160106101000a8154816001600160801b0302191690836001600160801b031602179055506000876002016000600186610edc919061295b565b61ffff16815260208101919091526040016000208054909150610f139061076c90600160801b90046001600160801b031688611e75565b81546001600160801b03918216600160801b02911617905550505050505050565b610f3c61212c565b6000604051806101800160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152509050861561112657600085610ffe57610ff9610fb986600a612891565b6040890151610ff3906001600160801b031681610fd7896004612809565b610fe290600a612891565b8c516001600160801b031690611edf565b90611eeb565b611048565b61104861100c866004612809565b61101790600a612891565b610ff361102587600a612891565b60408b01518b51611042916001600160801b039182169116611edf565b90611edf565b90506000611067886080015161ffff1683611ef790919063ffffffff16565b60208901519091506001600160801b0316156110db576020880151885161109c9184916001600160801b039182169116611f09565b6060840152602088015188516110c09183916001600160801b039182169116611f09565b6080840181905260608401516110d591611e75565b60a08401525b60608301516110eb908390611ed3565b6101208401526080830151611101908290611ed3565b610140840181905261012084015161111891611e75565b610160840152506105f39050565b855160808701516001600160801b039091169060009061114b90839061ffff16611ef7565b60208901519091506001600160801b0316156111b957602088015188516111809184916001600160801b039182169116611f09565b8352602088015188516111a19183916001600160801b039182169116611f09565b6020840181905283516111b391611e75565b60408401525b82516111c6908390611ed3565b60c084015260208301516111db908290611ed3565b60e0840181905260c08401516111f091611e75565b61010084015250509695505050505050565b6001600160a01b03841660009081526004860160205260409020821561131657600281015461123e9061076c906001600160801b031686611ed3565b600282810180546001600160801b0319166001600160801b03939093169290921790915561ffff831614156112d3576000600287018161127f60018661295b565b61ffff168152602081019190915260400160002080549091506112b69061076c90600160801b90046001600160801b031687611ed3565b81546001600160801b03918216600160801b029116179055610c3e565b60018601546112ef9061076c906001600160801b031686611ed3565b6001870180546001600160801b0319166001600160801b0392909216919091179055610c3e565b60018101546113399061076c90600160801b90046001600160801b031686611ed3565b8160010160106101000a8154816001600160801b0302191690836001600160801b031602179055506000866002016000600185611376919061295b565b61ffff168152602081019190915260400160002080549091506113ad9061076c90600160801b90046001600160801b031687611ed3565b81546001600160801b03918216600160801b029116179055505050505050565b6113d561212c565b6040805160e08101825287546001600160801b038082168352600160801b918290048116602084015260018a01549081169383019390935261ffff90830481166060830152600160901b830416608082015260ff600160a01b83048116151560a0830152600160a81b909204909116151560c082015260009061145c908490888888610f34565b60018801805485158015600160a01b0260ff60a01b19909216919091179091559091506114c55760a081015188546114a89161076c91600160801b90046001600160801b031690611e75565b88546001600160801b03918216600160801b0291161788556105f0565b604081015188546114e39161076c916001600160801b031690611e75565b88546001600160801b0319166001600160801b039190911617909755509495945050505050565b6040805160e0810182526000808252602080830182815283850183815261ffff808916606087018181526080880187815260a089018881528b151560c08b01908152848a5260028f01909852998820895196516001600160801b03908116600160801b908102988216989098178255955160019182018054945193519c5199511515600160a81b0260ff60a81b199a1515600160a01b0260ff60a01b199e8916600160901b029e909e1662ffffff60901b199590981690990271ffffffffffffffffffffffffffffffffffff1990951691909716179290921716929092179790971793909316919091179055909211156116a957600385015460005b818110156116a657600087600401600089600301848154811061163957634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902080549091506001600160801b0316156116865780546001600160801b0316600160801b81021781555b80546001600160801b03191690558061169e816129c1565b915050611606565b50505b60018461ffff16116116bc5760006116ec565b6002850160006116cd60018761295b565b61ffff1681526020810191909152604001600020546001600160801b03165b9150505b9392505050565b60006001600160a01b03831615611788576040516370a0823160e01b81526001600160a01b0383811660048301528416906370a082319060240160206040518083038186803b15801561174957600080fd5b505afa15801561175d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611781919061261a565b9050611795565b506001600160a01b038116315b92915050565b61ffff8216600090815260028701602090815260408083206001600160a01b038916845260048a019092529091206003810154600160801b900460ff16611823576003808201805460ff60801b1916600160801b17905588018054600181018255600091825260209091200180546001600160a01b0389166001600160a01b03199091161790555b826118dc5780546118489061076c90600160801b90046001600160801b031688611e75565b81546001600160801b03918216600160801b02911617815584156118d75760028101546118829061076c906001600160801b031687611e75565b6002820180546001600160801b0319166001600160801b0392831617905560018901546118b49161076c911687611e75565b6001890180546001600160801b0319166001600160801b03929092169190911790555b611911565b80546118f59061076c906001600160801b031688611e75565b81546001600160801b0319166001600160801b03919091161781555b815461192a9061076c906001600160801b031688611e75565b82546001600160801b0319166001600160801b03919091161790915550505050505050565b6040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a0808701859052875160e081018952858152938401859052968301849052908201839052810182905293840181905290830152906040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091526040805160c08101825261ffff86166000908152600289016020908152838220546001600160801b039081168452908301829052928201819052606082015287548083166080830152600160801b900490911660a08201528515611c2e57600287016000611a5a60018861295b565b61ffff90811682526020808301939093526040918201600020825160e08101845281546001600160801b038082168352600160801b918290048116968301969096526001928301548087169583019590955284048316606080830191909152600160901b85048416608083015260ff600160a01b86048116151560a0840152600160a81b909504909416151560c0820152908b01549093169184019190915290935060029086161115611c1957866002016000600287611b1a919061295b565b61ffff90811682526020808301939093526040918201600020825160e08101845281546001600160801b038082168352600160801b9182900481169683018790526001909301549283169482019490945292810482166060840152600160901b81049091166080830181905260ff600160a01b83048116151560a0850152600160a81b909204909116151560c0830152909350611bba9161076c91611e59565b6001600160801b039081166040830181905260808401518451611c069361076c9392611c0092611bef92169061ffff16611e59565b87516001600160801b031690611e75565b90611ed3565b6001600160801b031660208201526105f3565b82516001600160801b031660208201526105f3565b60018561ffff1611156105f357600287016000611c4c60018861295b565b61ffff90811682526020808301939093526040918201600020825160e08101845281546001600160801b03808216808452600160801b928390048216848901908152600190950154808316978501979097529186048516606080850191909152600160901b8704909516608084015260ff600160a01b87048116151560a0850152600160a81b909604909516151560c083015294860194909452519091169083015291509695505050505050565b60018101546001600160801b031615611d1257600080fd5b6001018054601083901c6001600160801b031673ffff0000ffffffffffffffffffffffffffffffff199091161761ffff92909216600160901b02919091179055565b60006001600160801b03821115611dbd5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610a0e565b5090565b60408201516000906001600160801b031680611dec57505060208201516001600160801b0316611795565b611e1a8361ffff16611e1486606001516001600160801b031684611ed390919063ffffffff16565b90611e59565b905083602001516001600160801b031660001415611e39579050611795565b6020840151611e51906001600160801b031682611e75565b949350505050565b60006116f0612710610ff3611e6e85836127f1565b8690611edf565b60006116f082846127f1565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a75908490611f4f565b60006116f0828461297e565b60006116f0828461293c565b60006116f0828461282e565b60006116f0612710610ff38585611edf565b6000821580611f16575081155b80611f1f575083155b15611f2c575060006116f0565b81831015611f4757611f4282610ff38686611edf565b611e51565b509192915050565b6000611fa4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120219092919063ffffffff16565b805190915015610a755780806020019051810190611fc2919061225b565b610a755760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a0e565b6060611e51848460008585843b61207a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a0e565b600080866001600160a01b031685876040516120969190612653565b60006040518083038185875af1925050503d80600081146120d3576040519150601f19603f3d011682016040523d82523d6000602084013e6120d8565b606091505b50915091506120e88282866120f3565b979650505050505050565b606083156121025750816116f0565b8251156121125782518084602001fd5b8160405162461bcd60e51b8152600401610a0e919061266f565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b03811681146121a457600080fd5b919050565b80356121a4816129f2565b80356001600160801b03811681146121a457600080fd5b803561ffff811681146121a457600080fd5b803560ff811681146121a457600080fd5b60008060408385031215612200578182fd5b6122098361218d565b91506122176020840161218d565b90509250929050565b600080600060608486031215612234578081fd5b61223d8461218d565b9250602084013591506122526040850161218d565b90509250925092565b60006020828403121561226c578081fd5b81516116f0816129f2565b6000806000806000858703610160811215612290578182fd5b863561229b816129f2565b955060e0601f19820112156122ae578182fd5b5060405160e0810181811067ffffffffffffffff821117156122de57634e487b7160e01b83526041600452602483fd5b6040526122ed602088016121b4565b81526122fb604088016121b4565b602082015261230c606088016121b4565b604082015261231d608088016121cb565b606082015261232e60a088016121cb565b608082015261233f60c088016121a9565b60a082015261235060e088016121a9565b60c0820152935061236461010087016121a9565b925061237361012087016121dd565b915061238261014087016121dd565b90509295509295909350565b600080600080608085870312156123a3578384fd5b843593506123b36020860161218d565b925060408501356123c3816129f2565b91506123d1606086016121cb565b905092959194509250565b600080600080600060a086880312156123f3578081fd5b853594506124036020870161218d565b935060408601359250606086013561241a816129f2565b9150612382608087016121cb565b600080600080600060a0868803121561243f578081fd5b8535945061244f6020870161218d565b935060408601359250612464606087016121cb565b91506080860135612474816129f2565b809150509295509295909350565b60008060008060008060c0878903121561249a578081fd5b863595506124aa6020880161218d565b945060408701359350606087013592506124c6608088016121cb565b915060a08701356124d6816129f2565b809150509295509295509295565b6000806000606084860312156124f8578081fd5b83359250602084013561250a816129f2565b9150612252604085016121cb565b60008060008060008060c08789031215612530578384fd5b863595506020870135612542816129f2565b9450612550604088016121dd565b935061255e606088016121dd565b92506124c6608088016121cb565b60008060008060008060c08789031215612584578384fd5b8635955060208701359450604087013561259d816129f2565b93506125ab606088016121dd565b92506124c6608088016121dd565b600080604083850312156125cb578182fd5b82359150612217602084016121cb565b6000806000606084860312156125ef578081fd5b833592506125ff602085016121cb565b9150604084013561260f816129f2565b809150509250925092565b60006020828403121561262b578081fd5b5051919050565b60008060408385031215612644578182fd5b50508035926020909101359150565b60008251612665818460208701612995565b9190910192915050565b602081526000825180602084015261268e816040850160208701612995565b601f01601f19169190910160400192915050565b60c0810161179582846001600160801b038082511683528060208301511660208401528060408301511660408401528060608301511660608401528060808301511660808401528060a08301511660a0840152505050565b81516001600160801b031681526101408101602083015161272660208401826001600160801b03169052565b50604083015161274160408401826001600160801b03169052565b50606083015161275c60608401826001600160801b03169052565b50608083015161277760808401826001600160801b03169052565b5060a083015161279260a08401826001600160801b03169052565b5060c08301516127ad60c08401826001600160801b03169052565b5060e08301516127c860e08401826001600160801b03169052565b50610100838101516001600160801b031690830152610120928301511515929091019190915290565b60008219821115612804576128046129dc565b500190565b600060ff821660ff84168060ff03821115612826576128266129dc565b019392505050565b60008261284957634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561288957816000190482111561286f5761286f6129dc565b8085161561287c57918102915b93841c9390800290612853565b509250929050565b60006116f060ff8416836000826128aa57506001611795565b816128b757506000611795565b81600181146128cd57600281146128d7576128f3565b6001915050611795565b60ff8411156128e8576128e86129dc565b50506001821b611795565b5060208310610133831016604e8410600b8410161715612916575081810a611795565b612920838361284e565b8060001904821115612934576129346129dc565b029392505050565b6000816000190483118215151615612956576129566129dc565b500290565b600061ffff83811690831681811015612976576129766129dc565b039392505050565b600082821015612990576129906129dc565b500390565b60005b838110156129b0578181015183820152602001612998565b83811115610a5b5750506000910152565b60006000198214156129d5576129d56129dc565b5060010190565b634e487b7160e01b600052601160045260246000fd5b8015158114612a0057600080fd5b5056fea26469706673582212207f1920bfa95bd1426a154ccdc62397aea641dfb99c3c7f7a6229dbe0ad3319cb64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}