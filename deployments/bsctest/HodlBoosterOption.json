{
  "address": "0x881efB06901C96C9eA81BcF3eE4bc4f6Ed9E7Af9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "optionId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSettler",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSettler",
          "type": "address"
        }
      ],
      "name": "SettlerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "optionId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "callOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "putOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "depositAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "counterPartyAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterPartyAsset",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "manualDepositDisabled",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionPairDefinition[]",
          "name": "_optionPairDefinitions",
          "type": "tuple[]"
        }
      ],
      "name": "addOptionPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "balanceEnough",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        }
      ],
      "name": "batchWithdrawAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_assetToTerminate",
          "type": "uint256"
        }
      ],
      "name": "cancelWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        }
      ],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "executionAccountingResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "depositAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.SettlementAccountingResult",
          "name": "callOptionResult",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "depositAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.SettlementAccountingResult",
          "name": "putOptionResult",
          "type": "tuple"
        },
        {
          "internalType": "enum StructureData.OptionExecution",
          "name": "execute",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        }
      ],
      "name": "getAccountBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "pendingDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lockedDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "terminatingDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "toTerminateDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyAssetAmount",
              "type": "uint128"
            }
          ],
          "internalType": "struct StructureData.UserBalance",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        }
      ],
      "name": "getOptionSnapShot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "totalPending",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalLocked",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalTerminating",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalToTerminate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalReleasedDeposit",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalReleasedCounterParty",
              "type": "uint128"
            }
          ],
          "internalType": "struct StructureData.OptionSnapshot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "_round",
          "type": "uint16"
        }
      ],
      "name": "getOptionStateByRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "totalAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalTerminate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "strikePrice",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "round",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callOrPut",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_settler",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "callOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "putOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "depositAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "counterPartyAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterPartyAsset",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "manualDepositDisabled",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionPairDefinition[]",
          "name": "_optionPairDefinitions",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initiateSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_assetToTerminate",
          "type": "uint256"
        }
      ],
      "name": "initiateWithraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionPairCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "optionPairs",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "callOptionId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "putOptionId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "depositAssetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "counterPartyAssetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "depositAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "counterPartyAsset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "manualDepositDisabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_parameters",
          "type": "uint256[]"
        }
      ],
      "name": "setOptionParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_settler",
          "type": "address"
        }
      ],
      "name": "setSettler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StructureData.OptionExecution[]",
          "name": "_execution",
          "type": "uint8[]"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "settlementCashflowResult",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "newDepositAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "newReleasedAmount",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "leftOverAmount",
          "type": "int128"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairId",
          "type": "uint8"
        }
      ],
      "name": "toggleOptionPairDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underSettlement",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdrawAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfcce6c9020c42338482670500ff0bc554e0a54d080fa39c3b8bbab64be4982d5",
  "receipt": {
    "to": null,
    "from": "0x7BC55d94EEC38E15fE84c90Bf2B10BF4Eabd1189",
    "contractAddress": "0x881efB06901C96C9eA81BcF3eE4bc4f6Ed9E7Af9",
    "transactionIndex": 0,
    "gasUsed": "4505289",
    "logsBloom": "0x
    "blockHash": "0x75a7e4aefd6f92b041716ed78f89f75eeac54d181d0ee68361800dcae7098a5b",
    "transactionHash": "0xfcce6c9020c42338482670500ff0bc554e0a54d080fa39c3b8bbab64be4982d5",
    "logs": [],
    "blockNumber": 17772881,
    "cumulativeGasUsed": "4505289",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "aac2ed398ebce81fca39ffb6b265d974",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"optionId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSettler\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSettler\",\"type\":\"address\"}],\"name\":\"SettlerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"optionId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"callOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"putOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"counterPartyAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterPartyAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"manualDepositDisabled\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionPairDefinition[]\",\"name\":\"_optionPairDefinitions\",\"type\":\"tuple[]\"}],\"name\":\"addOptionPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"balanceEnough\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"batchWithdrawAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_assetToTerminate\",\"type\":\"uint256\"}],\"name\":\"cancelWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"executionAccountingResult\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"depositAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.SettlementAccountingResult\",\"name\":\"callOptionResult\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"depositAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.SettlementAccountingResult\",\"name\":\"putOptionResult\",\"type\":\"tuple\"},{\"internalType\":\"enum StructureData.OptionExecution\",\"name\":\"execute\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"}],\"name\":\"getAccountBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"pendingDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockedDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"terminatingDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"toTerminateDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyAssetAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct StructureData.UserBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"}],\"name\":\"getOptionSnapShot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"totalPending\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalLocked\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalTerminating\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalToTerminate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalReleasedDeposit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalReleasedCounterParty\",\"type\":\"uint128\"}],\"internalType\":\"struct StructureData.OptionSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_round\",\"type\":\"uint16\"}],\"name\":\"getOptionStateByRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"totalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalTerminate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"strikePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_settler\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"callOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"putOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"counterPartyAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterPartyAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"manualDepositDisabled\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionPairDefinition[]\",\"name\":\"_optionPairDefinitions\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_assetToTerminate\",\"type\":\"uint256\"}],\"name\":\"initiateWithraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionPairCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"optionPairs\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"callOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"putOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"counterPartyAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterPartyAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"manualDepositDisabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_parameters\",\"type\":\"uint256[]\"}],\"name\":\"setOptionParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_settler\",\"type\":\"address\"}],\"name\":\"setSettler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StructureData.OptionExecution[]\",\"name\":\"_execution\",\"type\":\"uint8[]\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"settlementCashflowResult\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"newDepositAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"newReleasedAmount\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"leftOverAmount\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairId\",\"type\":\"uint8\"}],\"name\":\"toggleOptionPairDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underSettlement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HodlBoosterOptionUpgradeable.sol\":\"HodlBoosterOptionUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/HodlBoosterOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";\\r\\nimport {Utils} from \\\"./libraries/Utils.sol\\\";\\r\\nimport {OptionLifecycle} from \\\"./libraries/OptionLifecycle.sol\\\";\\r\\nimport \\\"./interfaces/IPKKTStructureOption.sol\\\";\\r\\nimport \\\"./OptionVaultBase.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract HodlBoosterOption is OptionVaultBase, IPKKTStructureOption {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeCast for uint256;\\r\\n    using SafeMath for uint256;\\r\\n    using Utils for uint256;\\r\\n    using OptionLifecycle for StructureData.UserState;\\r\\n \\r\\n  \\r\\n\\r\\n    function validateOptionById(uint8 _optionId) private view {\\r\\n        require(_optionId != 0 && _optionId <= optionPairCount * 2);\\r\\n    }\\r\\n\\r\\n    function getAccountBalance(uint8 _optionId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (StructureData.UserBalance memory)\\r\\n    {\\r\\n        return\\r\\n            OptionLifecycle.getAccountBalance(\\r\\n                optionData[_optionId],\\r\\n                msg.sender,\\r\\n                underSettlement,\\r\\n                currentRound\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getOptionSnapShot(uint8 _optionId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (StructureData.OptionSnapshot memory)\\r\\n    {\\r\\n        return\\r\\n            OptionLifecycle.getOptionSnapShot(\\r\\n                optionData[_optionId],\\r\\n                underSettlement,\\r\\n                currentRound\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function initiateWithraw(uint8 _optionId, uint256 _assetToTerminate)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        //require(_assetToTerminate > 0 , \\\"!_assetToTerminate\\\");\\r\\n        //require(currentRound > 1, \\\"No on going\\\");\\r\\n        validateOptionById(_optionId);\\r\\n        OptionLifecycle.initiateWithrawStorage(\\r\\n            optionData[_optionId],\\r\\n            msg.sender,\\r\\n            _assetToTerminate,\\r\\n            underSettlement,\\r\\n            currentRound\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function cancelWithdraw(uint8 _optionId, uint256 _assetToTerminate)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        //require(_assetToTerminate > 0 , \\\"!_assetToTerminate\\\");\\r\\n        //require(currentRound > 1, \\\"No on going\\\");\\r\\n        validateOptionById(_optionId);\\r\\n\\r\\n        OptionLifecycle.cancelWithdrawStorage(\\r\\n            optionData[_optionId],\\r\\n            msg.sender,\\r\\n            _assetToTerminate,\\r\\n            underSettlement,\\r\\n            currentRound\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        uint8 _optionId,\\r\\n        uint256 _amount,\\r\\n        address _asset\\r\\n    ) external override {\\r\\n        //require(_amount > 0, \\\"!amount\\\");\\r\\n\\r\\n        validateOptionById(_optionId);\\r\\n        StructureData.OptionPairDefinition storage pair = optionPairs[\\r\\n            (_optionId - 1) / 2\\r\\n        ];\\r\\n        //require(_asset == pair.depositAsset || _asset == pair.counterPartyAsset, \\\"!asset\\\");\\r\\n        OptionLifecycle.withdrawStorage(\\r\\n            optionData[_optionId],\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            currentRound,\\r\\n            (_optionId == pair.callOptionId && _asset == pair.depositAsset) ||\\r\\n            (_optionId == pair.putOptionId && _asset == pair.counterPartyAsset)\\r\\n        );\\r\\n        clientWithdraw(msg.sender, _amount, _asset, false);\\r\\n        emit Withdraw(_optionId, msg.sender, _asset, _amount);\\r\\n    }\\r\\n\\r\\n    //deposit eth\\r\\n    function depositETH(uint8 _optionId) external payable override {\\r\\n        require(currentRound > 0, \\\"!Started\\\");\\r\\n        require(msg.value > 0, \\\"no value\\\");\\r\\n\\r\\n        validateOptionById(_optionId);\\r\\n        StructureData.OptionPairDefinition storage pair = optionPairs[\\r\\n            (_optionId - 1) / 2\\r\\n        ];\\r\\n        require(!pair.manualDepositDisabled, \\\"DepositDisabled\\\");  \\r\\n        address depositAsset = pair.callOptionId == _optionId\\r\\n            ? pair.depositAsset\\r\\n            : pair.counterPartyAsset;\\r\\n        require(depositAsset == address(0));\\r\\n\\r\\n        //todo: convert to weth\\r\\n        OptionLifecycle.depositFor(\\r\\n            optionData[_optionId],\\r\\n            msg.sender,\\r\\n            msg.value,\\r\\n            0,\\r\\n            currentRound,\\r\\n            true\\r\\n        );\\r\\n\\r\\n        emit Deposit(_optionId, msg.sender, currentRound, msg.value);\\r\\n        //payable(vaultAddress()).transfer(msg.value);\\r\\n    }\\r\\n\\r\\n    //deposit other erc20 coin, take wbtc\\r\\n    function deposit(uint8 _optionId, uint256 _amount) external override {\\r\\n        require(currentRound > 0, \\\"!Started\\\");\\r\\n        require(_amount > 0, \\\"!amount\\\");\\r\\n        validateOptionById(_optionId);\\r\\n        StructureData.OptionPairDefinition storage pair = optionPairs[\\r\\n            (_optionId - 1) / 2\\r\\n        ];\\r\\n        require(!pair.manualDepositDisabled, \\\"DepositDisabled\\\");  \\r\\n        address depositAsset = pair.callOptionId == _optionId\\r\\n            ? pair.depositAsset\\r\\n            : pair.counterPartyAsset;\\r\\n        require(depositAsset != address(0));\\r\\n\\r\\n        OptionLifecycle.depositFor(\\r\\n            optionData[_optionId],\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            0,\\r\\n            currentRound,\\r\\n            true\\r\\n        );\\r\\n        emit Deposit(_optionId, msg.sender, currentRound, _amount);\\r\\n        IERC20(depositAsset).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n    }\\r\\n \\r\\n\\r\\n    //used to render the history at client side, reading the minting transactions of a specific address,\\r\\n    //for each transaction, read the blockheight and call this method to get the result\\r\\n    //the blockheight is the the height when the round is committed\\r\\n    //function getRoundData(uint8 _optionId, uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\\r\\n    //    return optionStates[_optionId][optionHeights[_blockHeight]];\\r\\n    //}\\r\\n\\r\\n    /*function getRoundDataByBlock(uint8 _optionId, uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\\r\\n        return optionData[_optionId].optionStates[optionHeights[_blockHeight]];\\r\\n    }*/\\r\\n\\r\\n    function getOptionStateByRound(uint8 _optionId, uint16 _round)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (StructureData.OptionState memory)\\r\\n    {\\r\\n        return optionData[_optionId].optionStates[_round];\\r\\n    }\\r\\n\\r\\n    function autoRollToCounterPartyByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        StructureData.OptionState storage _optionState,\\r\\n        StructureData.OptionData storage _counterPartyOption,\\r\\n        uint8 _counterPartyOptionId,\\r\\n        uint256 _totalReleased,\\r\\n        uint256 _totalAutoRoll\\r\\n    ) internal override {\\r\\n        uint256 totalAutoRollBase = uint256(_optionState.totalAmount).sub(\\r\\n            _optionState.totalTerminate\\r\\n        );\\r\\n        if (_option.assetToTerminateForNextRound > 0 && _totalAutoRoll > 0) {\\r\\n            _option.assetToTerminateForNextRound = uint256(_option\\r\\n                .assetToTerminateForNextRound)\\r\\n                .subOrZero(\\r\\n                    totalAutoRollBase.withPremium(_optionState.premiumRate)\\r\\n                ).toUint128();\\r\\n        }\\r\\n        uint256 userCount = _option.usersInvolved.length;\\r\\n        for (uint256 i = 0; i < userCount; i++) {\\r\\n            address userAddress = _option.usersInvolved[i];\\r\\n            StructureData.UserState storage userState = _option.userStates[\\r\\n                userAddress\\r\\n            ];\\r\\n\\r\\n            if (userState.ongoingAsset == 0) {\\r\\n                continue;\\r\\n            }\\r\\n            uint256 amountToTerminate = Utils.getAmountToTerminate(\\r\\n                _totalReleased,\\r\\n                userState.assetToTerminate,\\r\\n                _optionState.totalTerminate\\r\\n            );\\r\\n            if (amountToTerminate > 0) {\\r\\n                userState.releasedCounterPartyAssetAmount = uint256(userState\\r\\n                    .releasedCounterPartyAssetAmount)\\r\\n                    .add(amountToTerminate).toUint128();\\r\\n            }\\r\\n            uint256 onGoing = uint256(userState.ongoingAsset).sub(\\r\\n                userState.assetToTerminate\\r\\n            );\\r\\n            uint256 remainingAmount = Utils.getAmountToTerminate(\\r\\n                _totalAutoRoll,\\r\\n                onGoing,\\r\\n                totalAutoRollBase\\r\\n            );\\r\\n            if (remainingAmount > 0) {\\r\\n                uint256 onGoingTerminate = 0;\\r\\n                uint256 virtualOnGoing = onGoing.withPremium(\\r\\n                    _optionState.premiumRate\\r\\n                );\\r\\n                if (userState.assetToTerminateForNextRound <= virtualOnGoing) {\\r\\n                    onGoingTerminate = Utils.getAmountToTerminate(\\r\\n                        remainingAmount,\\r\\n                        userState.assetToTerminateForNextRound,\\r\\n                        virtualOnGoing\\r\\n                    );\\r\\n                } else {\\r\\n                    onGoingTerminate = remainingAmount;\\r\\n                }\\r\\n                OptionLifecycle.depositFor(\\r\\n                    _counterPartyOption,\\r\\n                    userAddress,\\r\\n                    remainingAmount,\\r\\n                    onGoingTerminate,\\r\\n                    currentRound - 1,\\r\\n                    false\\r\\n                );\\r\\n                emit Deposit(\\r\\n                    _counterPartyOptionId,\\r\\n                    userAddress,\\r\\n                    currentRound - 1,\\r\\n                    remainingAmount\\r\\n                );\\r\\n            }\\r\\n            userState.assetToTerminate = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function autoRollByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        uint8 _optionId,\\r\\n        StructureData.OptionState storage _optionState,\\r\\n        uint256 _totalReleased,\\r\\n        uint256 _totalAutoRoll\\r\\n    ) internal override {\\r\\n        //uint256 lockedRound = currentRound - 1;\\r\\n\\r\\n        uint256 totalAutoRollBase = uint256(_optionState.totalAmount).sub(\\r\\n            _optionState.totalTerminate\\r\\n        );\\r\\n        uint256 userCount = _option.usersInvolved.length;\\r\\n        for (uint256 i = 0; i < userCount; i++) {\\r\\n            address userAddress = _option.usersInvolved[i];\\r\\n            StructureData.UserState storage userState = _option.userStates[\\r\\n                userAddress\\r\\n            ];\\r\\n            if (userState.ongoingAsset == 0) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 amountToTerminate = Utils.getAmountToTerminate(\\r\\n                _totalReleased,\\r\\n                userState.assetToTerminate,\\r\\n                _optionState.totalTerminate\\r\\n            );\\r\\n            if (amountToTerminate > 0) {\\r\\n                userState.releasedDepositAssetAmount = uint256(userState\\r\\n                    .releasedDepositAssetAmount)\\r\\n                    .add(amountToTerminate).toUint128();\\r\\n            }\\r\\n            uint256 remainingAmount = Utils.getAmountToTerminate(\\r\\n                _totalAutoRoll,\\r\\n                uint256(userState.ongoingAsset).sub(userState.assetToTerminate),\\r\\n                totalAutoRollBase\\r\\n            );\\r\\n            if (remainingAmount > 0) {\\r\\n                OptionLifecycle.depositFor(\\r\\n                    _option,\\r\\n                    userAddress,\\r\\n                    remainingAmount,\\r\\n                    0,\\r\\n                    currentRound - 1,\\r\\n                    false\\r\\n                );\\r\\n                emit Deposit(\\r\\n                    _optionId,\\r\\n                    userAddress,\\r\\n                    currentRound - 1,\\r\\n                    remainingAmount\\r\\n                );\\r\\n            }\\r\\n\\r\\n            userState.assetToTerminate = 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x605ee0bf673eefb29b0fbb49789158cf997b92d7b01951d2bc5865c024223b0c\",\"license\":\"MIT\"},\"contracts/HodlBoosterOptionUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\nimport {\\r\\n    OwnableUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport {HodlBoosterOption} from \\\"./HodlBoosterOption.sol\\\";\\r\\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";\\r\\ncontract HodlBoosterOptionUpgradeable is OwnableUpgradeable, HodlBoosterOption {\\r\\n    function initialize(\\r\\n        address _owner,\\r\\n        address _settler,\\r\\n         StructureData.OptionPairDefinition[] memory _optionPairDefinitions\\r\\n    ) external initializer { \\r\\n \\r\\n        locked = 0;\\r\\n        __Ownable_init();\\r\\n        \\r\\n        require(_owner != address(0));\\r\\n        require(_settler != address(0));\\r\\n        transferOwnership(_owner);\\r\\n        settlerRoleAddress = _settler;\\r\\n        addOptionPairsInternal(_optionPairDefinitions);  \\r\\n    }\\r\\n\\r\\n    function setSettler(address _settler) external onlyOwner{\\r\\n        setSettlerInternal(_settler);\\r\\n    }  \\r\\n    function addOptionPairs(StructureData.OptionPairDefinition[] memory _optionPairDefinitions) external onlyOwner{\\r\\n        addOptionPairsInternal(_optionPairDefinitions);\\r\\n    }\\r\\n}\\r\\n \",\"keccak256\":\"0xaae30eac0d4c7b6e851e5b4e5ee68f1f949da3ef1d2e49d9e33eb503f0be3fc1\",\"license\":\"MIT\"},\"contracts/OptionVaultBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\"; \\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";\\r\\nimport {Utils} from \\\"./libraries/Utils.sol\\\";\\r\\nimport {OptionLifecycle} from \\\"./libraries/OptionLifecycle.sol\\\";\\r\\nimport {OptionVaultStorage} from \\\"./storage/OptionVaultStorage.sol\\\";\\r\\nimport \\\"./interfaces/ISettlementAggregator.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\n\\r\\nabstract contract OptionVaultBase is\\r\\n    OptionVaultStorage, \\r\\n    ISettlementAggregator\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n    using Utils for uint256;\\r\\n    using SafeCast for uint256;\\r\\n    using SafeCast for int256;\\r\\n\\r\\n    event SettlerChanged(address indexed previousSettler, address indexed newSettler); \\r\\n\\r\\n\\r\\n    function clientWithdraw(\\r\\n        address _target,\\r\\n        uint256 _amount,\\r\\n        address _contractAddress,\\r\\n        bool _redeem\\r\\n    ) internal lock {\\r\\n        if (!_redeem) {\\r\\n            require(balanceEnough(_contractAddress));\\r\\n        }\\r\\n        OptionLifecycle.withdraw(_target, _amount, _contractAddress);\\r\\n    }\\r\\n    function setSettlerInternal(address _settler) internal {\\r\\n        address oldSettlerAddress = settlerRoleAddress;\\r\\n        settlerRoleAddress = _settler;\\r\\n        emit SettlerChanged(oldSettlerAddress, _settler);\\r\\n    }  \\r\\n    function addOptionPairsInternal(\\r\\n        StructureData.OptionPairDefinition[] memory _optionPairDefinitions\\r\\n    ) internal { \\r\\n        uint256 length = _optionPairDefinitions.length;\\r\\n        uint8 optionPairCount_ = optionPairCount;\\r\\n        uint8 assetCount_ = assetCount;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            StructureData.OptionPairDefinition\\r\\n                memory pair = _optionPairDefinitions[i];\\r\\n            pair.callOptionId = optionPairCount_ * 2 + 1;\\r\\n            pair.putOptionId = pair.callOptionId + 1;\\r\\n            optionPairs[optionPairCount_++] = pair;\\r\\n            if (assetCount_ == 0) {\\r\\n                asset[assetCount_++] = pair.depositAsset;\\r\\n                asset[assetCount_++] = pair.counterPartyAsset;\\r\\n            } else {\\r\\n                bool callAdded = false;\\r\\n                bool putAdded = false;\\r\\n                for (uint8 j = 0; j < assetCount_; j++) {\\r\\n                    if (asset[j] == pair.depositAsset) {\\r\\n                        callAdded = true;\\r\\n                    }\\r\\n                    if (asset[j] == pair.counterPartyAsset) {\\r\\n                        putAdded = true;\\r\\n                    }\\r\\n                }\\r\\n                if (!callAdded) {\\r\\n                    asset[assetCount_++] = pair.depositAsset;\\r\\n                }\\r\\n                if (!putAdded) {\\r\\n                    asset[assetCount_++] = pair.counterPartyAsset;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        optionPairCount = optionPairCount_;\\r\\n        assetCount = assetCount_;\\r\\n    }\\r\\n\\r\\n\\r\\n    function toggleOptionPairDeposit(uint8 _pairId) external override settlerOnly {\\r\\n        StructureData.OptionPairDefinition storage pair = optionPairs[_pairId];\\r\\n        pair.manualDepositDisabled = !pair.manualDepositDisabled;\\r\\n    }\\r\\n    \\r\\n    function initiateSettlement() external override settlerOnly { \\r\\n        require(!underSettlement);\\r\\n        currentRound = currentRound + 1;\\r\\n        underSettlement = true;\\r\\n        for (uint8 i = 0; i < optionPairCount; i++) {\\r\\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\\r\\n            StructureData.OptionData storage callOption = optionData[\\r\\n                pair.callOptionId\\r\\n            ];\\r\\n            uint128 pending1 = OptionLifecycle.rollToNextByOption(\\r\\n                callOption,\\r\\n                currentRound,\\r\\n                true\\r\\n            );\\r\\n            StructureData.OptionData storage putOption = optionData[\\r\\n                pair.putOptionId\\r\\n            ];\\r\\n            uint128 pending2 = OptionLifecycle.rollToNextByOption(\\r\\n                putOption,\\r\\n                currentRound,\\r\\n                false\\r\\n            );\\r\\n            if (pending1 > 0) {\\r\\n                assetData[pair.depositAsset].depositAmount = uint256(assetData[\\r\\n                    pair.depositAsset\\r\\n                ].depositAmount).add(pending1).toUint128();\\r\\n            }\\r\\n            if (pending2 > 0) {\\r\\n                assetData[pair.counterPartyAsset].depositAmount = uint256(assetData[\\r\\n                    pair.counterPartyAsset\\r\\n                ].depositAmount).add(pending2).toUint128();\\r\\n            }\\r\\n            if (currentRound <= 2) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            StructureData.SettlementAccountingResult\\r\\n                memory noneExecuteCallOption = OptionLifecycle\\r\\n                    .dryRunSettlementByOption(\\r\\n                        callOption, \\r\\n                        true,\\r\\n                        pair.depositAssetAmountDecimals,\\r\\n                        pair.counterPartyAssetAmountDecimals,\\r\\n                        currentRound,\\r\\n                        false\\r\\n                    );\\r\\n            StructureData.SettlementAccountingResult\\r\\n                memory noneExecutePutOption = OptionLifecycle\\r\\n                    .dryRunSettlementByOption(\\r\\n                        putOption, \\r\\n                        false,\\r\\n                        pair.counterPartyAssetAmountDecimals,\\r\\n                        pair.depositAssetAmountDecimals,\\r\\n                        currentRound,\\r\\n                        false\\r\\n                    );\\r\\n\\r\\n            StructureData.OptionPairExecutionAccountingResult\\r\\n                memory pairResult = StructureData\\r\\n                    .OptionPairExecutionAccountingResult({\\r\\n                        execute: StructureData.OptionExecution.NoExecution,\\r\\n                        callOptionResult: noneExecuteCallOption,\\r\\n                        putOptionResult: noneExecutePutOption\\r\\n                    });\\r\\n            executionAccountingResult[i * 3] = pairResult;\\r\\n            StructureData.SettlementAccountingResult\\r\\n                memory executeCallOption = OptionLifecycle\\r\\n                    .dryRunSettlementByOption(\\r\\n                        callOption, \\r\\n                        true,\\r\\n                        pair.depositAssetAmountDecimals,\\r\\n                        pair.counterPartyAssetAmountDecimals,\\r\\n                        currentRound,\\r\\n                        true\\r\\n                    );\\r\\n            pairResult = StructureData.OptionPairExecutionAccountingResult({\\r\\n                execute: StructureData.OptionExecution.ExecuteCall,\\r\\n                callOptionResult: executeCallOption,\\r\\n                putOptionResult: noneExecutePutOption\\r\\n            });\\r\\n            executionAccountingResult[i * 3 + 1] = pairResult;\\r\\n\\r\\n            StructureData.SettlementAccountingResult\\r\\n                memory executePutOption = OptionLifecycle\\r\\n                    .dryRunSettlementByOption(\\r\\n                        putOption, \\r\\n                        false,\\r\\n                        pair.counterPartyAssetAmountDecimals,\\r\\n                        pair.depositAssetAmountDecimals,\\r\\n                        currentRound,\\r\\n                        true\\r\\n                    );\\r\\n            pairResult = StructureData.OptionPairExecutionAccountingResult({\\r\\n                execute: StructureData.OptionExecution.ExecutePut,\\r\\n                callOptionResult: noneExecuteCallOption,\\r\\n                putOptionResult: executePutOption\\r\\n            });\\r\\n            executionAccountingResult[i * 3 + 2] = pairResult;\\r\\n        }\\r\\n\\r\\n        if (currentRound == 1) {\\r\\n            underSettlement = false;\\r\\n            return;\\r\\n        }\\r\\n        if (currentRound == 2) {\\r\\n            for(uint8 i = 1; i <= optionPairCount * 2; i++) { \\r\\n                OptionLifecycle.commitByOption(optionData[i], 1); \\r\\n            }            \\r\\n            updateAsset();\\r\\n            underSettlement = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function settle(StructureData.OptionExecution[] memory _execution)\\r\\n        external\\r\\n        override \\r\\n        settlerOnly\\r\\n    { \\r\\n        require(underSettlement);\\r\\n        uint256 count = _execution.length;\\r\\n        require(count == optionPairCount);\\r\\n        uint16 previousRound = currentRound - 1;\\r\\n        for (uint8 i = 0; i < count; i++) {\\r\\n            StructureData.OptionExecution execution = _execution[i];\\r\\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\\r\\n\\r\\n            StructureData.OptionData storage callOption = optionData[\\r\\n                pair.callOptionId\\r\\n            ];\\r\\n            StructureData.OptionData storage putOption = optionData[\\r\\n                pair.putOptionId\\r\\n            ];\\r\\n            StructureData.MaturedState memory maturedState;\\r\\n            StructureData.OptionState\\r\\n                storage previousCallOptionState = callOption.optionStates[\\r\\n                    previousRound - 1\\r\\n                ];\\r\\n            if (previousCallOptionState.totalAmount > 0) { \\r\\n                maturedState = OptionLifecycle.closePreviousByOption(\\r\\n                    callOption,\\r\\n                    previousCallOptionState,\\r\\n                    true,\\r\\n                    pair.depositAssetAmountDecimals,\\r\\n                    pair.counterPartyAssetAmountDecimals,\\r\\n                    execution == StructureData.OptionExecution.ExecuteCall\\r\\n                );\\r\\n                if (maturedState.releasedDepositAssetAmount > 0) {\\r\\n                    assetData[pair.depositAsset].releasedAmount = uint256(assetData[\\r\\n                        pair.depositAsset\\r\\n                    ].releasedAmount).add(\\r\\n                            maturedState.releasedDepositAssetAmountWithPremium\\r\\n                        ).toUint128();\\r\\n                } else if (maturedState.releasedCounterPartyAssetAmount > 0) {\\r\\n                    assetData[pair.counterPartyAsset]\\r\\n                        .releasedAmount = uint256(assetData[pair.counterPartyAsset]\\r\\n                        .releasedAmount)\\r\\n                        .add(\\r\\n                            maturedState\\r\\n                                .releasedCounterPartyAssetAmountWithPremium\\r\\n                        ).toUint128();\\r\\n                }\\r\\n                if (execution == StructureData.OptionExecution.ExecuteCall) {\\r\\n                    autoRollToCounterPartyByOption(\\r\\n                        callOption,\\r\\n                        previousCallOptionState,\\r\\n                        putOption,\\r\\n                        pair.putOptionId,\\r\\n                        maturedState.releasedCounterPartyAssetAmountWithPremium,\\r\\n                        maturedState.autoRollCounterPartyAssetAmountWithPremium\\r\\n                    );\\r\\n                } else {\\r\\n                    autoRollByOption(\\r\\n                        callOption,\\r\\n                        pair.callOptionId,\\r\\n                        previousCallOptionState,\\r\\n                        maturedState.releasedDepositAssetAmountWithPremium,\\r\\n                        maturedState.autoRollDepositAssetAmountWithPremium\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n\\r\\n            StructureData.OptionState storage previousPutOptionState = putOption\\r\\n                .optionStates[previousRound - 1];\\r\\n\\r\\n            if (previousPutOptionState.totalAmount > 0) { \\r\\n                maturedState = OptionLifecycle.closePreviousByOption(\\r\\n                    putOption,\\r\\n                    previousPutOptionState,\\r\\n                    false,\\r\\n                    pair.counterPartyAssetAmountDecimals,\\r\\n                    pair.depositAssetAmountDecimals,\\r\\n                    execution == StructureData.OptionExecution.ExecutePut\\r\\n                );\\r\\n                if (maturedState.releasedDepositAssetAmount > 0) {\\r\\n                    assetData[pair.counterPartyAsset]\\r\\n                        .releasedAmount = uint256(assetData[pair.counterPartyAsset]\\r\\n                        .releasedAmount)\\r\\n                        .add(\\r\\n                            maturedState.releasedDepositAssetAmountWithPremium\\r\\n                        ).toUint128();\\r\\n                } else if (maturedState.releasedCounterPartyAssetAmount > 0) {\\r\\n                    assetData[pair.depositAsset].releasedAmount = uint256(assetData[\\r\\n                        pair.depositAsset\\r\\n                    ].releasedAmount).add(\\r\\n                            maturedState\\r\\n                                .releasedCounterPartyAssetAmountWithPremium\\r\\n                        ).toUint128();\\r\\n                }\\r\\n                if (execution == StructureData.OptionExecution.ExecutePut) {\\r\\n                    autoRollToCounterPartyByOption(\\r\\n                        putOption,\\r\\n                        previousPutOptionState,\\r\\n                        callOption,\\r\\n                        pair.callOptionId,\\r\\n                        maturedState.releasedCounterPartyAssetAmountWithPremium,\\r\\n                        maturedState.autoRollCounterPartyAssetAmountWithPremium\\r\\n                    );\\r\\n                } else {\\r\\n                    autoRollByOption(\\r\\n                        putOption,\\r\\n                        pair.putOptionId,\\r\\n                        previousPutOptionState,\\r\\n                        maturedState.releasedDepositAssetAmountWithPremium,\\r\\n                        maturedState.autoRollDepositAssetAmountWithPremium\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n            OptionLifecycle.commitByOption(callOption, previousRound);\\r\\n            OptionLifecycle.commitByOption(putOption, previousRound);\\r\\n        }\\r\\n\\r\\n        updateAsset();\\r\\n        underSettlement = false;\\r\\n    }\\r\\n\\r\\n    function updateAsset() private {\\r\\n        for (uint8 i = 0; i < assetCount; i++) {\\r\\n            address assetAddress = asset[i];\\r\\n            StructureData.AssetData storage assetSubData = assetData[\\r\\n                assetAddress\\r\\n            ];\\r\\n            //no snaphot previously, so, no balance change\\r\\n            //todo: room for gas improvement\\r\\n            int128 leftOver = assetSubData.leftOverAmount +\\r\\n                (\\r\\n                    currentRound == 2\\r\\n                        ? int128(0)\\r\\n                        : (int128(getBalanceChange(assetAddress)) -\\r\\n                            int128(assetSubData.depositAmount) +\\r\\n                            int128(assetSubData.releasedAmount))\\r\\n                );\\r\\n\\r\\n            assetSubData.traderWithdrawn = 0;\\r\\n            assetSubData.balanceAfterSettle = OptionLifecycle.getAvailableBalance(assetAddress, address(this)).toUint128();\\r\\n            assetSubData.withdrawableAfterSettle = collectWithdrawable(\\r\\n                assetAddress\\r\\n            ).toUint128();\\r\\n            StructureData.SettlementCashflowResult\\r\\n                memory instruction = StructureData.SettlementCashflowResult({\\r\\n                    newReleasedAmount: assetSubData.releasedAmount,\\r\\n                    newDepositAmount: assetSubData.depositAmount,\\r\\n                    leftOverAmount: leftOver,\\r\\n                    contractAddress: assetAddress\\r\\n                });\\r\\n            settlementCashflowResult[assetAddress] = instruction;\\r\\n            //todo: check overflow\\r\\n            assetSubData.leftOverAmount =\\r\\n                int128(leftOver +\\r\\n                int128(assetSubData.depositAmount) -\\r\\n                int128(assetSubData.releasedAmount));\\r\\n            assetSubData.depositAmount = 0;\\r\\n            assetSubData.releasedAmount = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setOptionParameters(\\r\\n        uint256[] memory _parameters\\r\\n    ) external override settlerOnly { \\r\\n        uint256 count = _parameters.length; \\r\\n        require(!underSettlement);\\r\\n        require(currentRound > 1);\\r\\n        require(count == optionPairCount*2);\\r\\n        for (uint8 i = 0; i < count; i++) {\\r\\n            uint256 parameter = _parameters[i];\\r\\n            StructureData.OptionState storage optionState = optionData[i+1].optionStates[currentRound - 1];\\r\\n            OptionLifecycle.setOptionParameters(parameter, optionState); \\r\\n        }\\r\\n    }\\r\\n\\r\\n    //todo: whitelist\\r\\n    function withdrawAsset(address _trader, address _asset) external override lock settlerOnly { \\r\\n        StructureData.AssetData storage assetSubData = assetData[_asset];\\r\\n        require(assetSubData.leftOverAmount > 0); \\r\\n        uint128 balance = uint128(assetSubData.leftOverAmount);\\r\\n        OptionLifecycle.withdraw(_trader, uint256(balance), _asset);\\r\\n        assetSubData.traderWithdrawn = balance;\\r\\n        assetSubData.leftOverAmount = 0;\\r\\n    }\\r\\n\\r\\n    function batchWithdrawAssets(address _trader, address[] memory _assets) external override lock settlerOnly{ \\r\\n        uint256 count = _assets.length;\\r\\n        for(uint256 i = 0; i < count; i++) {\\r\\n            StructureData.AssetData storage assetSubData = assetData[_assets[i]];\\r\\n            require(assetSubData.leftOverAmount > 0); \\r\\n            uint128 balance = uint128(assetSubData.leftOverAmount);\\r\\n            OptionLifecycle.withdraw(_trader, uint256(balance), _assets[i]);\\r\\n            assetSubData.traderWithdrawn = balance;\\r\\n            assetSubData.leftOverAmount = 0;\\r\\n        }  \\r\\n    }\\r\\n\\r\\n    function balanceEnough(address _asset) public view override returns (bool) {\\r\\n        StructureData.AssetData storage assetSubData = assetData[_asset];\\r\\n        int128 balance = assetSubData.leftOverAmount;\\r\\n        if (balance >= 0) {\\r\\n            return true;\\r\\n        }\\r\\n        if (OptionLifecycle.getAvailableBalance(_asset, address(this)) == 0) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        return balance >= -getBalanceChange(_asset);\\r\\n    }\\r\\n\\r\\n    function getBalanceChange(address _asset) private view returns (int256) {\\r\\n        StructureData.AssetData storage assetSubData = assetData[_asset];\\r\\n        // int128 leastBalance = int128(assetSubData.balanceAfterSettle + collectWithdrawable(_asset) - assetSubData.withdrawableAfterSettle);\\r\\n        //return  int128(uint128(getAvailableBalance(_asset))) - leastBalance + int128(assetSubData.traderWithdrawn);\\r\\n        return\\r\\n            int256(\\r\\n                OptionLifecycle.getAvailableBalance(_asset, address(this))\\r\\n                .add(assetSubData.traderWithdrawn).add(assetSubData.withdrawableAfterSettle)\\r\\n            ) -\\r\\n            int256(\\r\\n                uint256(assetSubData.balanceAfterSettle).add(collectWithdrawable(_asset))\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function collectWithdrawable(address _asset)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 total = 0;\\r\\n        for (uint8 i = 0; i < optionPairCount; i++) {\\r\\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\\r\\n            if (\\r\\n                pair.depositAsset == _asset || pair.counterPartyAsset == _asset\\r\\n            ) {\\r\\n                StructureData.OptionData storage callOption = optionData[\\r\\n                    pair.callOptionId\\r\\n                ];\\r\\n                total = total.add(\\r\\n                    pair.depositAsset == _asset\\r\\n                        ? uint256(callOption.optionStates[currentRound].totalAmount).add(\\r\\n                            callOption.totalReleasedDepositAssetAmount\\r\\n                        )\\r\\n                        : callOption.totalReleasedCounterPartyAssetAmount\\r\\n                );\\r\\n\\r\\n                StructureData.OptionData storage putOption = optionData[\\r\\n                    pair.putOptionId\\r\\n                ];\\r\\n                total = total.add(\\r\\n                    pair.counterPartyAsset == _asset\\r\\n                        ? uint256(putOption.optionStates[currentRound].totalAmount).add(\\r\\n                            putOption.totalReleasedDepositAssetAmount\\r\\n                        )\\r\\n                        : putOption.totalReleasedCounterPartyAssetAmount\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    modifier lock {\\r\\n        require(locked == 0, \\\"locked\\\");\\r\\n        locked = 1;\\r\\n        _;\\r\\n        locked = 0;\\r\\n    }\\r\\n    modifier settlerOnly() {\\r\\n         require(settlerRoleAddress == msg.sender, \\\"!settler\\\"); \\r\\n         _;\\r\\n    }\\r\\n    function autoRollToCounterPartyByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        StructureData.OptionState storage _optionState,\\r\\n        StructureData.OptionData storage _counterPartyOption,\\r\\n        uint8 _counterPartyOptionId,\\r\\n        uint256 _totalReleased,\\r\\n        uint256 _totalAutoRoll\\r\\n    ) internal virtual;\\r\\n\\r\\n    function autoRollByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        uint8 _optionId,\\r\\n        StructureData.OptionState storage _optionState,\\r\\n        uint256 _totalReleased,\\r\\n        uint256 _totalAutoRoll\\r\\n    ) internal virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0xcc4531eb956f6ea2843c8ecf36e26e9bc1c0238d528c80aed6849d08dfc4b9c3\",\"license\":\"MIT\"},\"contracts/interfaces/IPKKTStructureOption.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity =0.8.4;\\r\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";\\r\\n \\r\\ninterface IPKKTStructureOption {\\r\\n \\r\\n     event Deposit(uint8 indexed optionId, address indexed account, uint16 indexed round, uint256 amount);\\r\\n     event Withdraw(uint8 indexed optionId, address indexed account, address indexed asset, uint256 amount);\\r\\n     //event CloseOption(uint8 indexed optionId, uint16 indexed round);\\r\\n     //event CommitOption(uint8 indexed optionId, uint16 indexed round);\\r\\n     //event OpenOption(uint8 indexed optionId, uint16 indexed round);\\r\\n     //event OptionCreated(uint8 indexed optionId, string name);\\r\\n     //event OptionTransfer(uint8 indexed optionId, address indexed account, uint16 premium, uint16 round);\\r\\n\\r\\n    function getAccountBalance(uint8 _optionId) external view returns (StructureData.UserBalance memory); \\r\\n\\r\\n    //ISettlementAggregator.balanceEnough needs to be called if there is any release amount\\r\\n    function getOptionSnapShot(uint8 _optionId) external view returns(StructureData.OptionSnapshot memory); \\r\\n\\r\\n    //deposit eth\\r\\n    function depositETH(uint8 _optionId) external payable;\\r\\n\\r\\n    //deposit other erc20 coin, take wbtc or stable coin\\r\\n    function deposit(uint8 _optionId, uint256 _amount) external;\\r\\n\\r\\n    //complete withdraw happens on the option vault\\r\\n    function initiateWithraw(uint8 _optionId, uint256 _assetToTerminate) external; \\r\\n\\r\\n    function cancelWithdraw(uint8 _optionId, uint256 _assetToTerminate) external;\\r\\n \\r\\n    \\r\\n    function withdraw(uint8 _optionId, uint256 _amount, address _asset) external; \\r\\n \\r\\n \\r\\n\\r\\n    //used to render the history at client side, reading the minting transactions of a specific address,\\r\\n    //for each transaction, read the blockheight and call this method to get the result\\r\\n    //the blockheight is the the height when the round is committed \\r\\n    //function getRoundDataByBlock(uint8 _optionId, uint256 _blockHeight) external view returns(StructureData.OptionState memory);\\r\\n\\r\\n    function getOptionStateByRound(uint8 _optionId, uint16 _round) external view returns(StructureData.OptionState memory);\\r\\n \\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x5a6076a3a5952903c066f1c9405095937952e83c251c4b165455b7c226982ed8\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISettlementAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity =0.8.4;\\r\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";  \\r\\n\\r\\ninterface ISettlementAggregator {\\r\\n         \\r\\n    \\r\\n    function toggleOptionPairDeposit(uint8 _pairId) external; \\r\\n    \\r\\n    //rollToNext + dryRunSettlement\\r\\n    //todo: specifying quota\\r\\n    function initiateSettlement() external; \\r\\n\\r\\n    //closePrevious + calculate cash flow \\r\\n    function settle(StructureData.OptionExecution[] memory _execution) external;\\r\\n\\r\\n    function setOptionParameters(uint256[] memory _paramters) external;\\r\\n\\r\\n    function withdrawAsset(address _trader, address _asset) external;\\r\\n\\r\\n    function batchWithdrawAssets(address _trader, address[] memory _assets) external;\\r\\n\\r\\n    function balanceEnough(address _asset) external view returns(bool); \\r\\n}\",\"keccak256\":\"0x0c5058a34468c07a08652bbe9a33122a48db22bc2f5f70b7903be8a4e6f0ac4c\",\"license\":\"UNLICENSED\"},\"contracts/libraries/OptionLifecycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./Utils.sol\\\";\\r\\nimport \\\"./StructureData.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\n\\r\\nlibrary OptionLifecycle {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Utils for uint128;\\r\\n    using Utils for uint256;\\r\\n    using SafeMath for uint256;\\r\\n    using SafeCast for uint256;\\r\\n    using StructureData for StructureData.UserState;\\r\\n\\r\\n    function deriveVirtualLocked(\\r\\n        StructureData.UserState memory userState,\\r\\n        uint16 premiumRate\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 onGoing = uint256(userState.ongoingAsset);\\r\\n        if (onGoing == 0) {\\r\\n            return uint256(userState.tempLocked);\\r\\n        }\\r\\n        onGoing = (onGoing.sub(userState.assetToTerminate)).withPremium(\\r\\n            premiumRate\\r\\n        );\\r\\n        if (userState.tempLocked == 0) {\\r\\n            return onGoing;\\r\\n        }\\r\\n        return uint256(userState.tempLocked).add(onGoing);\\r\\n    }\\r\\n\\r\\n    function getAvailableBalance(address _asset, address _source)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (_asset != address(0)) {\\r\\n            return IERC20(_asset).balanceOf(_source);\\r\\n        } else {\\r\\n            return _source.balance;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        address _target,\\r\\n        uint256 _amount,\\r\\n        address _contractAddress\\r\\n    ) external {\\r\\n        require(_amount > 0);\\r\\n        if (_contractAddress == address(0)) {\\r\\n            payable(_target).transfer(_amount);\\r\\n        } else {\\r\\n            IERC20(_contractAddress).safeTransfer(_target, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateMaturity(\\r\\n        bool _execute,\\r\\n        StructureData.OptionState memory _optionState,\\r\\n        bool _callOrPut,\\r\\n        uint8 _depositAssetAmountDecimals,\\r\\n        uint8 _counterPartyAssetAmountDecimals\\r\\n    ) public pure returns (StructureData.MaturedState memory) {\\r\\n        StructureData.MaturedState memory state = StructureData.MaturedState({\\r\\n            releasedDepositAssetAmount: 0,\\r\\n            releasedDepositAssetPremiumAmount: 0,\\r\\n            releasedDepositAssetAmountWithPremium: 0,\\r\\n            autoRollDepositAssetAmount: 0,\\r\\n            autoRollDepositAssetPremiumAmount: 0,\\r\\n            autoRollDepositAssetAmountWithPremium: 0,\\r\\n            releasedCounterPartyAssetAmount: 0,\\r\\n            releasedCounterPartyAssetPremiumAmount: 0,\\r\\n            releasedCounterPartyAssetAmountWithPremium: 0,\\r\\n            autoRollCounterPartyAssetAmount: 0,\\r\\n            autoRollCounterPartyAssetPremiumAmount: 0,\\r\\n            autoRollCounterPartyAssetAmountWithPremium: 0\\r\\n        });\\r\\n        if (_execute) {\\r\\n            uint256 maturedCounterPartyAssetAmount = \\r\\n                _callOrPut\\r\\n                    ? uint256(_optionState.totalAmount)\\r\\n                        .mul(_optionState.strikePrice)\\r\\n                        .mul(10**_counterPartyAssetAmountDecimals)\\r\\n                        .div(\\r\\n                            10 **\\r\\n                                (StructureData.PRICE_PRECISION +\\r\\n                                    _depositAssetAmountDecimals)\\r\\n                        )\\r\\n                    : uint256(_optionState.totalAmount)\\r\\n                        .mul(\\r\\n                            10 **\\r\\n                                (StructureData.PRICE_PRECISION +\\r\\n                                    _counterPartyAssetAmountDecimals)\\r\\n                        )\\r\\n                        .div(_optionState.strikePrice)\\r\\n                        .div(10**_depositAssetAmountDecimals);\\r\\n\\r\\n            uint256 maturedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetAmount\\r\\n                    .premium(_optionState.premiumRate);\\r\\n            if (_optionState.totalTerminate > 0) {\\r\\n                state\\r\\n                    .releasedCounterPartyAssetAmount = maturedCounterPartyAssetAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state\\r\\n                    .releasedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetPremiumAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state.releasedCounterPartyAssetAmountWithPremium =\\r\\n                    state.releasedCounterPartyAssetAmount.add(\\r\\n                    state.releasedCounterPartyAssetPremiumAmount);\\r\\n            }\\r\\n            state.autoRollCounterPartyAssetAmount =\\r\\n                maturedCounterPartyAssetAmount.sub(\\r\\n                state.releasedCounterPartyAssetAmount);\\r\\n            state.autoRollCounterPartyAssetPremiumAmount =\\r\\n                maturedCounterPartyAssetPremiumAmount.sub(\\r\\n                state.releasedCounterPartyAssetPremiumAmount);\\r\\n            state.autoRollCounterPartyAssetAmountWithPremium =\\r\\n                state.autoRollCounterPartyAssetAmount.add(\\r\\n                state.autoRollCounterPartyAssetPremiumAmount);\\r\\n        } else {\\r\\n            uint256 maturedDepositAssetAmount = uint256(_optionState.totalAmount);\\r\\n            uint256 maturedDepositAssetPremiumAmount = maturedDepositAssetAmount\\r\\n                .premium(_optionState.premiumRate);\\r\\n            if (_optionState.totalTerminate > 0) {\\r\\n                state.releasedDepositAssetAmount = maturedDepositAssetAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state\\r\\n                    .releasedDepositAssetPremiumAmount = maturedDepositAssetPremiumAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state.releasedDepositAssetAmountWithPremium =\\r\\n                    state.releasedDepositAssetAmount.add(\\r\\n                    state.releasedDepositAssetPremiumAmount);\\r\\n            }\\r\\n            state.autoRollDepositAssetAmount =\\r\\n                maturedDepositAssetAmount.sub(\\r\\n                state.releasedDepositAssetAmount);\\r\\n            state.autoRollDepositAssetPremiumAmount =\\r\\n                maturedDepositAssetPremiumAmount.sub(\\r\\n                state.releasedDepositAssetPremiumAmount);\\r\\n            state.autoRollDepositAssetAmountWithPremium =\\r\\n                state.autoRollDepositAssetAmount.add(\\r\\n                state.autoRollDepositAssetPremiumAmount);\\r\\n        }\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function commitByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        uint16 _roundToCommit\\r\\n    ) external {\\r\\n        uint256 userCount = _option.usersInvolved.length;\\r\\n        for (uint256 i = 0; i < userCount; i++) {\\r\\n            StructureData.UserState storage userState = _option.userStates[\\r\\n                _option.usersInvolved[i]\\r\\n            ];\\r\\n            if (userState.assetToTerminateForNextRound != 0) {\\r\\n                userState.assetToTerminate = userState\\r\\n                    .assetToTerminateForNextRound;\\r\\n                userState.assetToTerminateForNextRound = 0;\\r\\n            } else if (userState.assetToTerminate != 0) {\\r\\n                userState.assetToTerminate = 0;\\r\\n            }\\r\\n            if (userState.tempLocked == 0) {\\r\\n                userState.ongoingAsset = 0;\\r\\n                continue;\\r\\n            }\\r\\n            userState.ongoingAsset = userState.tempLocked;\\r\\n            userState.tempLocked = 0;\\r\\n        } \\r\\n        _option.optionStates[_roundToCommit].totalTerminate = uint256(_option\\r\\n            .optionStates[_roundToCommit]\\r\\n            .totalTerminate)\\r\\n            .add(_option.assetToTerminateForNextRound).toUint128();\\r\\n        _option.assetToTerminateForNextRound = 0;\\r\\n    }\\r\\n\\r\\n    function rollToNextByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        uint16 _currentRound,\\r\\n        bool _callOrPut\\r\\n    ) external returns (uint128 _pendingAmount) { \\r\\n        StructureData.OptionState memory currentOption = StructureData\\r\\n            .OptionState({\\r\\n                round: _currentRound,\\r\\n                totalAmount: 0,\\r\\n                totalTerminate: 0,\\r\\n                premiumRate: 0,\\r\\n                strikePrice: 0,\\r\\n                executed: false,\\r\\n                callOrPut: _callOrPut\\r\\n            });\\r\\n        _option.optionStates[_currentRound] = currentOption;\\r\\n        if (_currentRound > 1) {\\r\\n            uint256 userCount = _option.usersInvolved.length;\\r\\n            for (uint256 i = 0; i < userCount; i++) {\\r\\n                StructureData.UserState storage userState = _option.userStates[\\r\\n                    _option.usersInvolved[i]\\r\\n                ];\\r\\n                if (userState.pendingAsset != 0) {\\r\\n                    userState.tempLocked = userState.pendingAsset;\\r\\n                }\\r\\n                userState.pendingAsset = 0;\\r\\n            }\\r\\n        } \\r\\n        return\\r\\n            _currentRound > 1\\r\\n                ? _option.optionStates[_currentRound - 1].totalAmount\\r\\n                : 0;\\r\\n    }\\r\\n\\r\\n    function dryRunSettlementByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        bool _isCall,\\r\\n        uint8 _depositAssetAmountDecimals,\\r\\n        uint8 _counterPartyAssetAmountDecimals,\\r\\n        uint16 _currentRound,\\r\\n        bool _execute\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (StructureData.SettlementAccountingResult memory _result)\\r\\n    {\\r\\n        StructureData.SettlementAccountingResult memory result = StructureData\\r\\n            .SettlementAccountingResult({ \\r\\n                depositAmount: _option\\r\\n                    .optionStates[_currentRound - 1]\\r\\n                    .totalAmount,\\r\\n                executed: _execute,\\r\\n                autoRollAmount: 0,\\r\\n                autoRollPremium: 0,\\r\\n                releasedAmount: 0,\\r\\n                releasedPremium: 0,\\r\\n                autoRollCounterPartyAmount: 0,\\r\\n                autoRollCounterPartyPremium: 0,\\r\\n                releasedCounterPartyAmount: 0,\\r\\n                releasedCounterPartyPremium: 0\\r\\n            });\\r\\n        if (_currentRound > 2) {\\r\\n            StructureData.OptionState storage previousOptionState = _option\\r\\n                .optionStates[_currentRound - 2];\\r\\n            if (previousOptionState.totalAmount == 0) {\\r\\n                return result;\\r\\n            }\\r\\n            StructureData.MaturedState memory maturedState = calculateMaturity(\\r\\n                _execute,\\r\\n                previousOptionState,\\r\\n                _isCall,\\r\\n                _depositAssetAmountDecimals,\\r\\n                _counterPartyAssetAmountDecimals\\r\\n            );\\r\\n            if (_execute) {\\r\\n                result.autoRollCounterPartyAmount = maturedState\\r\\n                    .autoRollCounterPartyAssetAmount.toUint128();\\r\\n                result.autoRollCounterPartyPremium = maturedState\\r\\n                    .autoRollCounterPartyAssetPremiumAmount.toUint128();\\r\\n                result.releasedCounterPartyAmount = maturedState\\r\\n                    .releasedCounterPartyAssetAmount.toUint128();\\r\\n                result.releasedCounterPartyPremium = maturedState\\r\\n                    .releasedCounterPartyAssetPremiumAmount.toUint128();\\r\\n            } else {\\r\\n                result.autoRollAmount = maturedState.autoRollDepositAssetAmount.toUint128();\\r\\n                result.autoRollPremium = maturedState\\r\\n                    .autoRollDepositAssetPremiumAmount.toUint128();\\r\\n                result.releasedAmount = maturedState.releasedDepositAssetAmount.toUint128();\\r\\n                result.releasedPremium = maturedState\\r\\n                    .releasedDepositAssetPremiumAmount.toUint128();\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function closePreviousByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        StructureData.OptionState storage previousOptionState,\\r\\n        bool _isCall,\\r\\n        uint8 _depositAssetAmountDecimals,\\r\\n        uint8 _counterPartyAssetAmountDecimals,\\r\\n        bool _execute\\r\\n    ) external returns (StructureData.MaturedState memory _maturedState) {\\r\\n        //uint16 maturedRound = currentRound - 2;\\r\\n        StructureData.MaturedState memory maturedState = calculateMaturity(\\r\\n            _execute,\\r\\n            previousOptionState,\\r\\n            _isCall,\\r\\n            _depositAssetAmountDecimals,\\r\\n            _counterPartyAssetAmountDecimals\\r\\n        );\\r\\n        previousOptionState.executed = _execute;\\r\\n\\r\\n        if (_execute) {\\r\\n            _option.totalReleasedCounterPartyAssetAmount =uint256(_option\\r\\n                .totalReleasedCounterPartyAssetAmount)\\r\\n                .add(maturedState.releasedCounterPartyAssetAmountWithPremium).toUint128();\\r\\n        } else {\\r\\n            _option.totalReleasedDepositAssetAmount = uint256(_option\\r\\n                .totalReleasedDepositAssetAmount)\\r\\n                .add(maturedState.releasedDepositAssetAmountWithPremium).toUint128();\\r\\n        }\\r\\n        return maturedState;\\r\\n    }\\r\\n    /*\\r\\n        struct OptionParameters { \\r\\n        uint128 strikePrice; // strike price if executed\\r\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\r\\n    }\\r\\n*/\\r\\n    function setOptionParameters(uint256 _parameters, StructureData.OptionState storage _optionState) external {\\r\\n \\r\\n        require(_optionState.strikePrice == 0); \\r\\n        _optionState.strikePrice = uint128(_parameters >> 16);\\r\\n        _optionState.premiumRate = uint16(_parameters & 0xffff);     \\r\\n    }\\r\\n    function getAccountBalance(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external view returns (StructureData.UserBalance memory) {\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n\\r\\n        StructureData.UserBalance memory result = StructureData.UserBalance({\\r\\n            pendingDepositAssetAmount: userState.pendingAsset,\\r\\n            releasedDepositAssetAmount: userState.releasedDepositAssetAmount,\\r\\n            releasedCounterPartyAssetAmount: userState\\r\\n                .releasedCounterPartyAssetAmount,\\r\\n            lockedDepositAssetAmount: 0,\\r\\n            terminatingDepositAssetAmount: 0,\\r\\n            toTerminateDepositAssetAmount: 0\\r\\n        });\\r\\n        if (_underSettlement) {\\r\\n            if (_currentRound > 2) {\\r\\n                //when there are maturing round waiting for settlement, it becomes complex\\r\\n                uint16 premiumRate = _option\\r\\n                    .optionStates[_currentRound - 2]\\r\\n                    .premiumRate;\\r\\n                result.lockedDepositAssetAmount = deriveVirtualLocked(\\r\\n                    userState,\\r\\n                    premiumRate\\r\\n                ).toUint128();\\r\\n                result.terminatingDepositAssetAmount = uint256(userState\\r\\n                    .assetToTerminate)\\r\\n                    .withPremium(premiumRate).toUint128();\\r\\n            } else {\\r\\n                result.lockedDepositAssetAmount = userState.tempLocked;\\r\\n            }\\r\\n            result.toTerminateDepositAssetAmount = userState\\r\\n                    .assetToTerminateForNextRound;\\r\\n        } else {\\r\\n            result.lockedDepositAssetAmount = userState.ongoingAsset;\\r\\n            result.toTerminateDepositAssetAmount = userState.assetToTerminate;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function getOptionSnapShot(\\r\\n        StructureData.OptionData storage _option,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external view returns (StructureData.OptionSnapshot memory) {\\r\\n        StructureData.OptionState memory lockedOption;\\r\\n        StructureData.OptionState memory onGoingOption;\\r\\n        StructureData.OptionSnapshot memory result = StructureData\\r\\n            .OptionSnapshot({\\r\\n                totalPending: _option.optionStates[_currentRound].totalAmount,\\r\\n                totalReleasedDeposit: _option.totalReleasedDepositAssetAmount,\\r\\n                totalReleasedCounterParty: _option\\r\\n                    .totalReleasedCounterPartyAssetAmount,\\r\\n                totalLocked: 0,\\r\\n                totalTerminating: 0,\\r\\n                totalToTerminate: 0\\r\\n            });\\r\\n        if (_underSettlement) {\\r\\n            lockedOption = _option.optionStates[_currentRound - 1];\\r\\n            result.totalToTerminate = _option.assetToTerminateForNextRound;\\r\\n            if (_currentRound > 2) {\\r\\n                //when there are maturing round waiting for settlement, it becomes complex\\r\\n                onGoingOption = _option.optionStates[_currentRound - 2];\\r\\n                result.totalTerminating = uint256(onGoingOption\\r\\n                    .totalTerminate)\\r\\n                    .withPremium(onGoingOption.premiumRate).toUint128();\\r\\n                result.totalLocked = uint256(lockedOption\\r\\n                    .totalAmount)\\r\\n                    .add(\\r\\n                        onGoingOption.totalAmount.withPremium(\\r\\n                            onGoingOption.premiumRate\\r\\n                        )\\r\\n                    )\\r\\n                    .sub(result.totalTerminating).toUint128();\\r\\n            } else {\\r\\n                result.totalLocked = lockedOption.totalAmount;\\r\\n            }\\r\\n        } else if (_currentRound > 1) {\\r\\n            onGoingOption = _option.optionStates[_currentRound - 1];\\r\\n            result.totalLocked = onGoingOption.totalAmount;\\r\\n            result.totalToTerminate = onGoingOption.totalTerminate;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function initiateWithrawStorage(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        uint256 _assetToTerminate,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external {\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n        if (_underSettlement) {\\r\\n            uint256 newAssetToTerminate = uint256(userState\\r\\n                .assetToTerminateForNextRound)\\r\\n                .add(_assetToTerminate);\\r\\n            if (_currentRound == 2) {\\r\\n                require(newAssetToTerminate <= userState.tempLocked);\\r\\n                StructureData.OptionState storage previousOption = _option\\r\\n                    .optionStates[_currentRound - 1];\\r\\n                previousOption.totalTerminate = uint256(previousOption\\r\\n                    .totalTerminate)\\r\\n                    .add(_assetToTerminate).toUint128();\\r\\n            } else {\\r\\n                StructureData.OptionState storage onGoingOption = _option\\r\\n                    .optionStates[_currentRound - 2];\\r\\n                uint256 totalLocked = deriveVirtualLocked(\\r\\n                    userState,\\r\\n                    onGoingOption.premiumRate\\r\\n                );\\r\\n                require(newAssetToTerminate <= totalLocked);\\r\\n                //store temporarily\\r\\n                _option.assetToTerminateForNextRound = uint256(_option\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .add(_assetToTerminate).toUint128();\\r\\n            }\\r\\n            userState.assetToTerminateForNextRound = newAssetToTerminate.toUint128();\\r\\n        } else {\\r\\n            uint256 newAssetToTerminate = uint256(userState.assetToTerminate).add(\\r\\n                _assetToTerminate\\r\\n            );\\r\\n            require(newAssetToTerminate <= userState.ongoingAsset);\\r\\n            userState.assetToTerminate = newAssetToTerminate.toUint128();\\r\\n            StructureData.OptionState storage previousOption = _option\\r\\n                .optionStates[_currentRound - 1];\\r\\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).add(\\r\\n                _assetToTerminate\\r\\n            ).toUint128();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function cancelWithdrawStorage(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        uint256 _assetToTerminate,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external {\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n        if (_underSettlement) {\\r\\n            userState.assetToTerminateForNextRound = uint256(userState\\r\\n                .assetToTerminateForNextRound)\\r\\n                .sub(_assetToTerminate).toUint128();\\r\\n            if (_currentRound == 2) {\\r\\n                StructureData.OptionState storage previousOption = _option\\r\\n                    .optionStates[_currentRound - 1];\\r\\n                previousOption.totalTerminate = uint256(previousOption\\r\\n                    .totalTerminate)\\r\\n                    .sub(_assetToTerminate).toUint128();\\r\\n            } else {\\r\\n                //store temporarily\\r\\n                _option.assetToTerminateForNextRound = uint256(_option\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .sub(_assetToTerminate).toUint128();\\r\\n            }\\r\\n        } else {\\r\\n            userState.assetToTerminate = uint256(userState.assetToTerminate).sub(\\r\\n                _assetToTerminate\\r\\n            ).toUint128();\\r\\n            StructureData.OptionState storage previousOption = _option\\r\\n                .optionStates[_currentRound - 1];\\r\\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).sub(\\r\\n                _assetToTerminate\\r\\n            ).toUint128();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawStorage(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        uint256 _amount,\\r\\n        uint16 _currentRound,\\r\\n        bool _isDeposit\\r\\n    ) external {\\r\\n        //require(_amount > 0, \\\"!amount\\\");\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n        if (_isDeposit) {\\r\\n            //todo: 0 out released amount if missing balance from trader\\r\\n            uint256 releasedAmount = uint256(userState.releasedDepositAssetAmount);\\r\\n            if (releasedAmount <= _amount) {\\r\\n                uint256 redeemAmount = _amount.sub(releasedAmount);\\r\\n                userState.pendingAsset = uint256(userState.pendingAsset).sub(\\r\\n                    redeemAmount\\r\\n                ).toUint128();\\r\\n                userState.releasedDepositAssetAmount = 0;\\r\\n                _option.totalReleasedDepositAssetAmount = uint256(_option\\r\\n                    .totalReleasedDepositAssetAmount)\\r\\n                    .sub(releasedAmount).toUint128();\\r\\n                StructureData.OptionState storage optionState = _option\\r\\n                    .optionStates[_currentRound];\\r\\n                optionState.totalAmount = uint256(optionState.totalAmount).sub(\\r\\n                    redeemAmount\\r\\n                ).toUint128();\\r\\n            } else {\\r\\n                userState.releasedDepositAssetAmount = releasedAmount.sub(\\r\\n                    _amount\\r\\n                ).toUint128();\\r\\n                _option.totalReleasedDepositAssetAmount = uint256(_option\\r\\n                    .totalReleasedDepositAssetAmount)\\r\\n                    .sub(_amount).toUint128();\\r\\n            }\\r\\n        } else {\\r\\n            //same result as completeWithdraw\\r\\n            userState.releasedCounterPartyAssetAmount = uint256(userState\\r\\n                .releasedCounterPartyAssetAmount)\\r\\n                .sub(_amount).toUint128();\\r\\n            _option.totalReleasedCounterPartyAssetAmount = uint256(_option\\r\\n                .totalReleasedCounterPartyAssetAmount)\\r\\n                .sub(_amount).toUint128();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function depositFor(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _userAddress,\\r\\n        uint256 _amount,\\r\\n        uint256 _toTerminate,\\r\\n        uint16 _round,\\r\\n        bool _isOpenRound\\r\\n    ) external {\\r\\n        //require(optionState.totalAmount + (_amount) <= quota[_optionId], \\\"Not enough quota\\\");\\r\\n\\r\\n        StructureData.OptionState storage optionState = _option.optionStates[\\r\\n            _round\\r\\n        ];\\r\\n        StructureData.UserState storage userState = _option.userStates[\\r\\n            _userAddress\\r\\n        ];\\r\\n        //first time added\\r\\n        if (!userState.hasState) {\\r\\n            userState.hasState = true;\\r\\n            _option.usersInvolved.push(_userAddress);\\r\\n        }\\r\\n        if (!_isOpenRound) {\\r\\n            userState.tempLocked = uint256(userState.tempLocked).add(_amount).toUint128();\\r\\n            if (_toTerminate > 0) {\\r\\n                userState.assetToTerminateForNextRound = uint256(userState\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .add(_toTerminate).toUint128();\\r\\n                _option.assetToTerminateForNextRound = uint256(_option\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .add(_toTerminate).toUint128();\\r\\n            }\\r\\n        } else {\\r\\n            userState.pendingAsset = uint256(userState.pendingAsset).add(_amount).toUint128();\\r\\n        }\\r\\n        optionState.totalAmount = uint256(optionState.totalAmount).add(_amount).toUint128();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1c6b499d9ea5fb9302b14f7a0ff8aeb43e3ce53dec01763f76acf9aa8d02ddaa\",\"license\":\"MIT\"},\"contracts/libraries/StructureData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary StructureData {\\r\\n    bytes32 public constant OPTION_ROLE = keccak256(\\\"OPTION_ROLE\\\");\\r\\n    bytes32 public constant SETTLER_ROLE = keccak256(\\\"SETTLER_ROLE\\\");\\r\\n    uint8 public constant MATUREROUND = 1; //7 for daily settlement, 1 for daily settlement\\r\\n    uint8 public constant PRICE_PRECISION = 4;\\r\\n    struct OptionParameters { \\r\\n        uint128 strikePrice; // strike price if executed\\r\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\r\\n    }\\r\\n\\r\\n    struct OptionState {\\r\\n        uint128 totalAmount;\\r\\n        uint128 totalTerminate;\\r\\n        uint128 strikePrice;\\r\\n        uint16 round;\\r\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\r\\n        bool executed;\\r\\n        bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral;\\r\\n    }\\r\\n\\r\\n    struct MaturedState {\\r\\n        uint256 releasedDepositAssetAmount;\\r\\n        uint256 releasedDepositAssetPremiumAmount;\\r\\n        uint256 releasedDepositAssetAmountWithPremium;\\r\\n        uint256 releasedCounterPartyAssetAmount;\\r\\n        uint256 releasedCounterPartyAssetPremiumAmount;\\r\\n        uint256 releasedCounterPartyAssetAmountWithPremium;\\r\\n        uint256 autoRollDepositAssetAmount;\\r\\n        uint256 autoRollDepositAssetPremiumAmount;\\r\\n        uint256 autoRollDepositAssetAmountWithPremium;\\r\\n        uint256 autoRollCounterPartyAssetAmount;\\r\\n        uint256 autoRollCounterPartyAssetPremiumAmount;\\r\\n        uint256 autoRollCounterPartyAssetAmountWithPremium;\\r\\n    }\\r\\n\\r\\n    struct AssetData {\\r\\n        uint128 releasedAmount; //debit\\r\\n        uint128 depositAmount; //credit\\r\\n        int128 leftOverAmount; //history balance\\r\\n        /*\\r\\n         *  actual balance perspective\\r\\n         *  withdrawable = redeemable + released\\r\\n         *  balance = withdrawable + leftOver\\r\\n         */\\r\\n        uint128 balanceAfterSettle;\\r\\n        uint128 withdrawableAfterSettle;\\r\\n        uint128 traderWithdrawn;\\r\\n    }\\r\\n\\r\\n    struct OptionData {\\r\\n        uint128 totalReleasedDepositAssetAmount;\\r\\n        uint128 totalReleasedCounterPartyAssetAmount;\\r\\n        uint128 assetToTerminateForNextRound;\\r\\n        mapping(uint16 => StructureData.OptionState) optionStates;\\r\\n        address[] usersInvolved;\\r\\n        mapping(address => StructureData.UserState) userStates;\\r\\n    }\\r\\n\\r\\n    struct UserState {\\r\\n        uint128 pendingAsset; //for current round\\r\\n        uint128 tempLocked; //asset not sent to trader yet, but closed for deposit\\r\\n        uint128 ongoingAsset;\\r\\n        uint128 assetToTerminate;\\r\\n        uint128 assetToTerminateForNextRound;\\r\\n        uint128 releasedDepositAssetAmount;\\r\\n        uint128 releasedCounterPartyAssetAmount;\\r\\n        bool hasState;\\r\\n    }\\r\\n\\r\\n    struct OptionSnapshot {\\r\\n        uint128 totalPending;\\r\\n        //total tvl = totalLocked + totalTerminating\\r\\n        uint128 totalLocked;\\r\\n        //only set during settlement\\r\\n        uint128 totalTerminating;\\r\\n        //amount to terminate in next round,  totalToTerminate <= totalLocked\\r\\n        uint128 totalToTerminate;\\r\\n        uint128 totalReleasedDeposit;\\r\\n        uint128 totalReleasedCounterParty;\\r\\n    }\\r\\n\\r\\n    struct UserBalance {\\r\\n        uint128 pendingDepositAssetAmount;\\r\\n        //tvl = lockedDepositAssetAmount + terminatingDepositAssetAmount\\r\\n        uint128 lockedDepositAssetAmount;\\r\\n        //only set during settlement\\r\\n        uint128 terminatingDepositAssetAmount;\\r\\n        //amount to terminate in next round, toTerminateDepositAssetAmount <= lockedDepositAssetAmount\\r\\n        uint128 toTerminateDepositAssetAmount;\\r\\n        uint128 releasedDepositAssetAmount;\\r\\n        uint128 releasedCounterPartyAssetAmount;\\r\\n    }\\r\\n    struct OptionPairDefinition {\\r\\n        uint8 callOptionId;\\r\\n        uint8 putOptionId;\\r\\n        uint8 depositAssetAmountDecimals;\\r\\n        uint8 counterPartyAssetAmountDecimals;\\r\\n        address depositAsset;\\r\\n        address counterPartyAsset;\\r\\n        bool manualDepositDisabled;\\r\\n    }\\r\\n    struct SettlementAccountingResult {\\r\\n        uint128 depositAmount;\\r\\n        uint128 autoRollAmount; //T-1 Carried (filled only when not executed)\\r\\n        uint128 autoRollPremium; //Premium (filled only when not executed)\\r\\n        //maturedAmount+maturedPremium = requested withdrawal for deposit asset(filled only when not executed and with withdraw request)\\r\\n        uint128 releasedAmount;\\r\\n        uint128 releasedPremium;\\r\\n        //autoRollCounterPartyAmount + autoRollCounterPartyPremium = Execution rolled-out for deposit asset (Execution roll-in for counter party option)\\r\\n        //filled only when executed\\r\\n        uint128 autoRollCounterPartyAmount;\\r\\n        uint128 autoRollCounterPartyPremium;\\r\\n        //maturedCounterPartyAmount+maturedCounterPartyPremium= requested withdrawal for couter party asset(filled only when executed and with withdraw request)\\r\\n        uint128 releasedCounterPartyAmount;\\r\\n        uint128 releasedCounterPartyPremium;  \\r\\n        bool executed;\\r\\n    }\\r\\n\\r\\n    enum OptionExecution {\\r\\n        NoExecution,\\r\\n        ExecuteCall,\\r\\n        ExecutePut\\r\\n    }\\r\\n\\r\\n    struct OptionPairExecutionAccountingResult {\\r\\n        SettlementAccountingResult callOptionResult;\\r\\n        SettlementAccountingResult putOptionResult;\\r\\n        OptionExecution execute;\\r\\n    }\\r\\n\\r\\n    struct SettlementCashflowResult {\\r\\n        uint128 newDepositAmount;\\r\\n        uint128 newReleasedAmount;\\r\\n        int128 leftOverAmount; //positive, if trader didn't withdraw last time; negative, if trader failed to send back last time;\\r\\n        address contractAddress; //0 for eth\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x35d8f54b267786a5f5942365ebc38c9e7f987f117076912ab8ed4dd470f406c5\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nlibrary Utils { \\r\\n     \\r\\n    uint256 public constant RATIOMULTIPLIER = 10000;\\r\\n \\r\\n     using SafeMath for uint256;\\r\\n      function StringConcat(bytes memory _base, bytes memory _value) internal pure returns (string memory) {\\r\\n        string memory _tmpValue = new string(_base.length + _value.length);\\r\\n        bytes memory _newValue = bytes(_tmpValue);\\r\\n\\r\\n        uint i;\\r\\n        uint j;\\r\\n\\r\\n        for(i=0; i<_base.length; i++) {\\r\\n            _newValue[j++] = _base[i];\\r\\n        }\\r\\n\\r\\n        for(i=0; i<_value.length; i++) {\\r\\n            _newValue[j++] = _value[i++];\\r\\n        }\\r\\n\\r\\n        return string(_newValue);\\r\\n    }\\r\\n\\r\\n    function Uint8Sub(uint8 a, uint8 b) internal pure returns (uint8) {\\r\\n        require(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n    \\r\\n \\r\\n    function getAmountToTerminate(uint256 _maturedAmount, uint256 _assetToTerminate, uint256 _assetAmount) \\r\\n    internal pure returns(uint256) {\\r\\n       if (_assetToTerminate == 0 || _assetAmount == 0 || _maturedAmount == 0) return 0;\\r\\n       return _assetToTerminate >= _assetAmount ?  _maturedAmount  : _maturedAmount.mul(_assetToTerminate).div(_assetAmount);\\r\\n   }\\r\\n\\r\\n   function withPremium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\r\\n       return  _baseAmount.mul(RATIOMULTIPLIER + _premimumRate).div(RATIOMULTIPLIER);\\r\\n   }\\r\\n   \\r\\n   function premium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\r\\n       return   _baseAmount.mul(_premimumRate).div(RATIOMULTIPLIER);\\r\\n   }\\r\\n   \\r\\n   function subOrZero(uint256 _base, uint256 _substractor) internal pure returns (uint256) {\\r\\n       return _base >= _substractor ? _base - _substractor : 0;\\r\\n   }\\r\\n  \\r\\n    /*function assertUint104(uint256 num) internal pure {\\r\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\r\\n    }\\r\\n\\r\\n    function assertUint128(uint256 num) internal pure {\\r\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\r\\n    }*/\\r\\n\\r\\n}\",\"keccak256\":\"0x9afd557d360e741555f7ed355c95ffb0ab1e49452c8ca249f21af3a371444409\",\"license\":\"MIT\"},\"contracts/storage/OptionVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\"; \\r\\nabstract contract OptionVaultStorageV1 { \\r\\n    uint16 public currentRound;\\r\\n    bool public underSettlement;\\r\\n    uint8 public optionPairCount;\\r\\n    uint8 internal assetCount;\\r\\n    address internal settlerRoleAddress;\\r\\n    uint256 internal locked;\\r\\n\\r\\n    mapping(address => StructureData.SettlementCashflowResult)\\r\\n        public settlementCashflowResult;\\r\\n\\r\\n    mapping(uint8 => StructureData.OptionPairDefinition) public optionPairs;\\r\\n\\r\\n    mapping(uint8 => StructureData.OptionPairExecutionAccountingResult)\\r\\n        public executionAccountingResult;\\r\\n\\r\\n    mapping(uint8 => StructureData.OptionData) internal optionData;\\r\\n    mapping(uint8 => address) internal asset;\\r\\n    mapping(address => StructureData.AssetData) internal assetData;\\r\\n    \\r\\n}\\r\\n\\r\\nabstract contract OptionVaultStorage is OptionVaultStorageV1 {\\r\\n\\r\\n}\",\"keccak256\":\"0x7117a6f97571830bceab9a3a6f95229682cb581413cbb16c16be3b3686b61a6d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061508c806100206000396000f3fe6080604052600436106101a05760003560e01c80636386bcc4116100ec5780638a19c8bc1161008a578063c78b432e11610064578063c78b432e14610869578063ddd024751461087e578063f2fde38b146108b1578063f4d4c9d7146108d157600080fd5b80638a19c8bc146106aa5780638da5cb5b146106d8578063c5cfc5be1461070057600080fd5b806371018682116100c657806371018682146105bc578063715018a6146105dc5780637332655b146105f157806383eb772e1461061157600080fd5b80636386bcc4146104ac578063644d41ed1461056f5780636b37e4e31461058f57600080fd5b806326b516991161015957806351fe669e1161013357806351fe669e146102d657806355bf621f1461044c5780635d3e0e4d1461046c5780635edae4db1461048c57600080fd5b806326b516991461027657806332b76e86146102965780634dd96f86146102b657600080fd5b806302c178d7146101ac5780630748248f146101ce57806307f19eba1461020357806310a1f8b414610223578063222f6b8314610243578063256d43d71461026357600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101cc6101c7366004614459565b6108f1565b005b3480156101da57600080fd5b506065546101ee9062010000900460ff1681565b60405190151581526020015b60405180910390f35b34801561020f57600080fd5b506101cc61021e36600461443f565b610a49565b34801561022f57600080fd5b506101cc61023e36600461448b565b610a7f565b34801561024f57600080fd5b506101cc61025e366004614911565b610b59565b6101cc6102713660046148bb565b610c08565b34801561028257600080fd5b506101cc6102913660046144e7565b610e19565b3480156102a257600080fd5b506101cc6102b1366004614594565b61100a565b3480156102c257600080fd5b506101cc6102d1366004614666565b6117b2565b3480156102e257600080fd5b5061043d6102f13660046148bb565b6069602090815260009182526040918290208251610140808201855282546001600160801b038082168452600160801b918290048116848701526001850154808216858901528290048116606080860191909152600286015480831660808088019190915290849004831660a080880191909152600388015480851660c0808a019190915290869004851660e0808a019190915260048a0154808716610100808c01919091529088900460ff9081161515610120808d01919091528e519a8b018f5260058d0154808a168c528a900489169d8b019d909d5260068c01548089169e8b019e909e529c88900487169589019590955260078a01548087169489019490945292869004851691870191909152600888015480851691870191909152849004831690850152600986015491821690840152048516151593810193909352600a9091015490921683565b6040516101fa93929190614c3b565b34801561045857600080fd5b506101cc61046736600461493a565b611951565b34801561047857600080fd5b506101cc6104873660046148bb565b611afa565b34801561049857600080fd5b506101cc6104a7366004614633565b611b61565b3480156104b857600080fd5b506105216104c73660046148bb565b6068602052600090815260409020805460019091015460ff808316926101008104821692620100008204831692630100000083048116926001600160a01b03600160201b90910481169290811691600160a01b9091041687565b6040805160ff98891681529688166020880152948716948601949094529490911660608401526001600160a01b03908116608084015290921660a082015290151560c082015260e0016101fa565b34801561057b57600080fd5b506101ee61058a36600461443f565b611b94565b34801561059b57600080fd5b506105af6105aa3660046148bb565b611c8a565b6040516101fa9190614be3565b3480156105c857600080fd5b506105af6105d73660046148bb565b611d77565b3480156105e857600080fd5b506101cc611e18565b3480156105fd57600080fd5b506101cc61060c366004614911565b611e4e565b34801561061d57600080fd5b5061066d61062c36600461443f565b6067602052600090815260409020805460018201546002909201546001600160801b0380831693600160801b9093041691600f0b906001600160a01b031684565b604080516001600160801b039586168152949093166020850152600f9190910b918301919091526001600160a01b031660608201526080016101fa565b3480156106b657600080fd5b506065546106c59061ffff1681565b60405161ffff90911681526020016101fa565b3480156106e457600080fd5b506033546040516001600160a01b0390911681526020016101fa565b34801561070c57600080fd5b506107f661071b3660046148d5565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060ff8083166000908152606a6020908152604080832061ffff80871685526002909101835292819020815160e08101835281546001600160801b038082168352600160801b9182900481169583019590955260019092015493841692810192909252820483166060820152600160901b82049092166080830152600160a01b81048316151560a0830152600160a81b9004909116151560c082015292915050565b6040516101fa9190600060e0820190506001600160801b0380845116835280602085015116602084015280604085015116604084015250606083015161ffff8082166060850152806080860151166080850152505060a0830151151560a083015260c0830151151560c083015292915050565b34801561087557600080fd5b506101cc611ecd565b34801561088a57600080fd5b5060655461089f906301000000900460ff1681565b60405160ff90911681526020016101fa565b3480156108bd57600080fd5b506101cc6108cc36600461443f565b612b3a565b3480156108dd57600080fd5b506101cc6108ec366004614911565b612bd2565b6066541561091a5760405162461bcd60e51b815260040161091190614b5a565b60405180910390fd5b6001606655606554600160281b90046001600160a01b031633146109505760405162461bcd60e51b815260040161091190614ab5565b6001600160a01b0381166000908152606c6020526040812060018101549091600f91820b90910b1361098157600080fd5b6001810154604051631a4ca37b60e21b81526001600160a01b0380861660048301526001600160801b03600f9390930b928316602483015284166044820152734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A906369328dec9060640160006040518083038186803b1580156109f757600080fd5b505af4158015610a0b573d6000803e3d6000fd5b5050506002830180546001600160801b03938416600160801b029316929092179091555060010180546001600160801b031916905550506000606655565b6033546001600160a01b03163314610a735760405162461bcd60e51b815260040161091190614b25565b610a7c81612df1565b50565b600054610100900460ff1680610a98575060005460ff16155b610ab45760405162461bcd60e51b815260040161091190614ad7565b600054610100900460ff16158015610ad6576000805461ffff19166101011790555b6000606655610ae3612e51565b6001600160a01b038416610af657600080fd5b6001600160a01b038316610b0957600080fd5b610b1284612b3a565b6065805465010000000000600160c81b031916600160281b6001600160a01b03861602179055610b4182612ecc565b8015610b53576000805461ff00191690555b50505050565b610b6282613249565b60ff8281166000908152606a6020526040908190206065549151638a229a5760e01b81526004810191909152336024820152604481018490526201000082049092161515606483015261ffff166084820152734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A90638a229a579060a4015b60006040518083038186803b158015610bec57600080fd5b505af4158015610c00573d6000803e3d6000fd5b505050505050565b60655461ffff16610c465760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610911565b60003411610c815760405162461bcd60e51b81526020600482015260086024820152676e6f2076616c756560c01b6044820152606401610911565b610c8a81613249565b60006068816002610c9c600186614f42565b610ca69190614e10565b60ff908116825260208201929092526040016000206001810154909250600160a01b90041615610d0a5760405162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d111a5cd8589b1959608a1b6044820152606401610911565b805460009060ff848116911614610d2e5760018201546001600160a01b0316610d41565b8154600160201b90046001600160a01b03165b90506001600160a01b03811615610d5757600080fd5b60ff83166000908152606a6020526040808220606554915163c502f99160e01b8152734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A9363c502f99193610db2939233923492909161ffff90911690600190600401614b7a565b60006040518083038186803b158015610dca57600080fd5b505af4158015610dde573d6000803e3d6000fd5b505060655460405134815261ffff909116925033915060ff8616906000805160206150378339815191529060200160405180910390a4505050565b60665415610e395760405162461bcd60e51b815260040161091190614b5a565b6001606655606554600160281b90046001600160a01b03163314610e6f5760405162461bcd60e51b815260040161091190614ab5565b805160005b81811015610fff576000606c6000858481518110610ea257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905060008160010160009054906101000a9004600f0b600f0b13610eed57600080fd5b60008160010160009054906101000a9004600f0b9050734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A6369328dec87836001600160801b0316888781518110610f4857634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401610f8c939291906001600160a01b0393841681526020810192909252909116604082015260600190565b60006040518083038186803b158015610fa457600080fd5b505af4158015610fb8573d6000803e3d6000fd5b5050506002830180546001600160801b03938416600160801b029316929092179091555060010180546001600160801b031916905580610ff781614f91565b915050610e74565b505060006066555050565b606554600160281b90046001600160a01b0316331461103b5760405162461bcd60e51b815260040161091190614ab5565b60655462010000900460ff1661105057600080fd5b80516065546301000000900460ff16811461106a57600080fd5b6065546000906110809060019061ffff16614f08565b905060005b828160ff161015611798576000848260ff16815181106110b557634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160ff808516600090815260688452604080822080548085168452606a8752828420610100918290049095168452828420835161018081018552858152978801859052928701849052606087018490526080870184905260a0870184905260c0870184905260e08701849052860183905261012086018390526101408601839052610160860192909252929450929091906000600284018161116360018b614f08565b61ffff168152602081019190915260400160002080549091506001600160801b0316156113fd578454734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A9063aab69633908690849060019060ff6201000082048116916301000000900416828d60028111156111e357634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b15801561124157600080fd5b505af4158015611255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112799190614709565b805190925015611309576040828101518654600160201b90046001600160a01b03166000908152606c60205291909120546112c6916112c1916001600160801b031690613281565b613294565b8554600160201b90046001600160a01b03166000908152606c6020526040902080546001600160801b0319166001600160801b0392909216919091179055611387565b6060820151156113875760a082015160018601546001600160a01b03166000908152606c602052604090205461134c916112c1916001600160801b031690613281565b60018601546001600160a01b03166000908152606c6020526040902080546001600160801b0319166001600160801b03929092169190911790555b60018660028111156113a957634e487b7160e01b600052602160045260246000fd5b14156113dc576113d78482858860000160019054906101000a900460ff168660a00151876101600151613301565b6113fd565b845460408301516101008401516113fd92879260ff90911691859190613635565b6000600284018161140f60018c614f08565b61ffff168152602081019190915260400160002080549091506001600160801b0316156116a4578554734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A9063aab69633908690849060009060ff630100000082048116916201000090041660028e600281111561149057634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b1580156114ee57600080fd5b505af4158015611502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115269190614709565b8051909350156115a95760408084015160018801546001600160a01b03166000908152606c602052919091205461156a916112c1916001600160801b031690613281565b60018701546001600160a01b03166000908152606c6020526040902080546001600160801b0319166001600160801b039290921691909117905561162f565b60608301511561162f5760a08301518654600160201b90046001600160a01b03166000908152606c60205260409020546115f0916112c1916001600160801b031690613281565b8654600160201b90046001600160a01b03166000908152606c6020526040902080546001600160801b0319166001600160801b03929092169190911790555b600287600281111561165157634e487b7160e01b600052602160045260246000fd5b141561167d57855460a084015161016085015161167892879285928a9260ff169190613301565b6116a4565b6116a4848760000160019054906101000a900460ff16838660400151876101000151613635565b6040516366aef26360e01b81526004810186905261ffff8a166024820152734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A906366aef2639060440160006040518083038186803b1580156116f957600080fd5b505af415801561170d573d6000803e3d6000fd5b50506040516366aef26360e01b81526004810187905261ffff8c166024820152734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A92506366aef263915060440160006040518083038186803b15801561176657600080fd5b505af415801561177a573d6000803e3d6000fd5b5050505050505050505050808061179090614fac565b915050611085565b506117a161388c565b50506065805462ff00001916905550565b606554600160281b90046001600160a01b031633146117e35760405162461bcd60e51b815260040161091190614ab5565b805160655462010000900460ff16156117fb57600080fd5b606554600161ffff9091161161181057600080fd5b606554611828906301000000900460ff166002614e51565b60ff16811461183657600080fd5b60005b818160ff16101561194c576000838260ff168151811061186957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000606a60008460016118869190614dd7565b60ff16815260208101919091526040016000908120606554600290910191906118b59060019061ffff16614f08565b61ffff16815260208101919091526040908101600020905163338dfe2f60e21b81526004810184905260248101829052909150734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A9063ce37f8bc9060440160006040518083038186803b15801561191f57600080fd5b505af4158015611933573d6000803e3d6000fd5b505050505050808061194490614fac565b915050611839565b505050565b61195a83613249565b6000606881600261196c600188614f42565b6119769190614e10565b60ff908116825260208083019390935260409182016000908120888316808352606a9095529290206065548354939550734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A94637441e8bb94929333938a9361ffff169291161480156119ef575086546001600160a01b03898116600160201b90920416145b80611a1f5750865460ff8b811661010090920416148015611a1f575060018701546001600160a01b038981169116145b6040516001600160e01b031960e088901b16815260048101959095526001600160a01b039093166024850152604484019190915261ffff1660648301521515608482015260a40160006040518083038186803b158015611a7e57600080fd5b505af4158015611a92573d6000803e3d6000fd5b50505050611aa33384846000613b11565b816001600160a01b0316336001600160a01b03168560ff167f9ac0ff79dc491174b021e6532a2fc734e82751bba8672e9183a76cb994a5f65a86604051611aec91815260200190565b60405180910390a450505050565b606554600160281b90046001600160a01b03163314611b2b5760405162461bcd60e51b815260040161091190614ab5565b60ff9081166000908152606860205260409020600101805460ff60a01b198116600160a01b918290049093161502919091179055565b6033546001600160a01b03163314611b8b5760405162461bcd60e51b815260040161091190614b25565b610a7c81612ecc565b6001600160a01b0381166000908152606c602052604081206001810154600f90810b9081900b8313611bca575060019392505050565b60405163b2838a7360e01b81526001600160a01b0385166004820152306024820152734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A9063b2838a739060440160206040518083038186803b158015611c2357600080fd5b505af4158015611c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5b91906148a3565b611c69575060009392505050565b611c7284613bd2565b611c7b90614fcc565b81600f0b121592505050919050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff8281166000908152606a602052604090819020606554915163c975707360e01b815260048101919091526201000082049092161515602483015261ffff166044820152734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A9063c9757073906064015b60c06040518083038186803b158015611d3957600080fd5b505af4158015611d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7191906147a7565b92915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff8281166000908152606a6020526040908190206065549151634ed14a7f60e01b815260048101919091523360248201526201000082049092161515604483015261ffff166064820152734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A90634ed14a7f90608401611d21565b6033546001600160a01b03163314611e425760405162461bcd60e51b815260040161091190614b25565b611e4c6000613cd6565b565b611e5782613249565b60ff8281166000908152606a6020526040908190206065549151630f681f9360e31b81526004810191909152336024820152604481018490526201000082049092161515606483015261ffff166084820152734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A90637b40fc989060a401610bd4565b606554600160281b90046001600160a01b03163314611efe5760405162461bcd60e51b815260040161091190614ab5565b60655462010000900460ff1615611f1457600080fd5b606554611f269061ffff166001614d99565b6065805462ffffff191661ffff92909216919091176201000017905560005b60655460ff630100000090910481169082161015612a3e5760ff818116600090815260686020908152604080832080549094168352606a909152808220606554915163161dd97560e31b81526004810182905261ffff9092166024830152600160448301529190734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A9063b0eecba89060640160206040518083038186803b158015611fe357600080fd5b505af4158015611ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201b9190614889565b8354610100900460ff166000908152606a6020526040808220606554915163161dd97560e31b81526004810182905261ffff909216602483015260448201839052929350734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A9063b0eecba89060640160206040518083038186803b15801561209657600080fd5b505af41580156120aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ce9190614889565b90506001600160801b0383161561215f578454600160201b90046001600160a01b03166000908152606c6020526040902054612122906112c1906001600160801b03600160801b9091048116908616613281565b85546001600160a01b03600160201b909104166000908152606c6020526040902080546001600160801b03928316600160801b0292169190911790555b6001600160801b038116156121e55760018501546001600160a01b03166000908152606c60205260409020546121ad906112c190600160801b90046001600160801b03908116908416613281565b60018601546001600160a01b03166000908152606c6020526040902080546001600160801b03928316600160801b0292169190911790555b606554600261ffff909116116121ff575050505050612a2c565b8454606554604051631bb98a3360e01b8152600092734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A92631bb98a339261225c928a9260019260ff62010000840481169363010000009004169161ffff16908990600401614bb1565b6101406040518083038186803b15801561227557600080fd5b505af4158015612289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ad91906147c2565b8654606554604051631bb98a3360e01b8152929350600092734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A92631bb98a339261230f928992879260ff6301000000830481169362010000909304169161ffff909116908490600401614bb1565b6101406040518083038186803b15801561232857600080fd5b505af415801561233c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236091906147c2565b9050600060405180606001604052808481526020018381526020016000600281111561239c57634e487b7160e01b600052602160045260246000fd5b9052905080606960006123b08c6003614e51565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff19169190849081111561253257634e487b7160e01b600052602160045260246000fd5b0217905550508854606554604051631bb98a3360e01b815260009350734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A92631bb98a3392612599928d9260019260ff6201000083048116936301000000909304169161ffff909116908490600401614bb1565b6101406040518083038186803b1580156125b257600080fd5b505af41580156125c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ea91906147c2565b6040805160608101825282815260208101869052919250810160019052915081606960006126198d6003614e51565b612624906001614dd7565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff1916919084908111156127a657634e487b7160e01b600052602160045260246000fd5b0217905550508954606554604051631bb98a3360e01b815260009350734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A92631bb98a339261280d928c92879260ff6301000000830481169362010000909304169161ffff90911690600190600401614bb1565b6101406040518083038186803b15801561282657600080fd5b505af415801561283a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285e91906147c2565b60408051606081018252878152602081018390529192508101600290529250826069600061288d8e6003614e51565b612898906002614dd7565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff191691908490811115612a1a57634e487b7160e01b600052602160045260246000fd5b02179055505050505050505050505050505b80612a3681614fac565b915050611f45565b5060655461ffff1660011415612a5c576065805462ff000019169055565b60655461ffff1660021415611e4c5760015b606554612a86906301000000900460ff166002614e51565b60ff168160ff1611612b235760ff81166000908152606a60205260409081902090516366aef26360e01b8152600481019190915260016024820152734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A906366aef2639060440160006040518083038186803b158015612af857600080fd5b505af4158015612b0c573d6000803e3d6000fd5b505050508080612b1b90614fac565b915050612a6e565b50612b2c61388c565b6065805462ff000019169055565b6033546001600160a01b03163314612b645760405162461bcd60e51b815260040161091190614b25565b6001600160a01b038116612bc95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610911565b610a7c81613cd6565b60655461ffff16612c105760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610911565b60008111612c4a5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610911565b612c5382613249565b60006068816002612c65600187614f42565b612c6f9190614e10565b60ff908116825260208201929092526040016000206001810154909250600160a01b90041615612cd35760405162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d111a5cd8589b1959608a1b6044820152606401610911565b805460009060ff858116911614612cf75760018201546001600160a01b0316612d0a565b8154600160201b90046001600160a01b03165b90506001600160a01b038116612d1f57600080fd5b60ff84166000908152606a6020526040808220606554915163c502f99160e01b8152734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A9363c502f99193612d7a939233928a92909161ffff90911690600190600401614b7a565b60006040518083038186803b158015612d9257600080fd5b505af4158015612da6573d6000803e3d6000fd5b505060655460405186815261ffff909116925033915060ff8716906000805160206150378339815191529060200160405180910390a4610b536001600160a01b038216333086613d28565b606580546001600160a01b03838116600160281b81810265010000000000600160c81b031985161790945560405193909204169182907f57e8def7e592578c5fbf9abfe6d3897d7daf10cf7e179f320d944cf71a76493e90600090a35050565b600054610100900460ff1680612e6a575060005460ff16155b612e865760405162461bcd60e51b815260040161091190614ad7565b600054610100900460ff16158015612ea8576000805461ffff19166101011790555b612eb0613d82565b612eb8613dec565b8015610a7c576000805461ff001916905550565b805160655460ff63010000008204811691600160201b90041660005b83811015613211576000858281518110612f1257634e487b7160e01b600052603260045260246000fd5b60200260200101519050836002612f299190614e51565b612f34906001614dd7565b60ff16808252612f45906001614dd7565b60ff166020820152806068600086612f5c81614fac565b60ff91821683526020808401949094526040928301600020855181549587015194870151606088015160808901516001600160a01b03908116600160201b02640100000000600160c01b031992881663010000000263ff0000001994891662010000029490941663ffff0000199989166101000261ffff19909b1695891695909517999099179790971692909217171694909417845560a08501516001909401805460c0909601511515600160a01b026001600160a81b03199096169490931693909317939093179055945083166130ce576080810151606b60008561304181614fac565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060a00151606b6000858061308f90614fac565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506131fe565b60008060005b8560ff168160ff16101561315457608084015160ff82166000908152606b60205260409020546001600160a01b039081169116141561311257600192505b60a084015160ff82166000908152606b60205260409020546001600160a01b039081169116141561314257600191505b8061314c81614fac565b9150506130d4565b50816131a8576080830151606b60008761316d81614fac565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b806131fb5760a0830151606b6000876131c081614fac565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b50505b508061320981614f91565b915050612ee8565b506065805464ffff0000001916630100000060ff9485160264ff00000000191617600160201b92909316919091029190911790555050565b60ff811615801590613278575060655461326e906301000000900460ff166002614e51565b60ff168160ff1611155b610a7c57600080fd5b600061328d8284614dbf565b9392505050565b60006001600160801b038211156132fd5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610911565b5090565b8454600090613323906001600160801b0380821691600160801b900416613e4c565b60018801549091506001600160801b0316158015906133425750600082115b156133a157600186015461337e906112c19061336a908490600160901b900461ffff16613e58565b60018a01546001600160801b031690613e7a565b6001880180546001600160801b0319166001600160801b03929092169190911790555b600387015460005b8181101561362a5760008960030182815481106133d657634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048d0190915260409091206001810154919250906001600160801b0316613419575050613618565b60018101548a54600091613447918a916001600160801b03600160801b918290048116929190910416613e95565b9050801561348e57600382015461346b906112c1906001600160801b031683613281565b6003830180546001600160801b0319166001600160801b03929092169190911790555b60018201546000906134b3906001600160801b0380821691600160801b900416613e4c565b905060006134c289838a613e95565b905080156136035760018d015460009081906134ea908590600160901b900461ffff16613e58565b60028701549091506001600160801b0316811061352257600286015461351b9084906001600160801b031683613e95565b9150613526565b8291505b734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A63c502f9918f8986866001606560009054906101000a900461ffff166135619190614f08565b60006040518763ffffffff1660e01b815260040161358496959493929190614b7a565b60006040518083038186803b15801561359c57600080fd5b505af41580156135b0573d6000803e3d6000fd5b50506065546135c792506001915061ffff16614f08565b61ffff16876001600160a01b03168e60ff16600080516020615037833981519152866040516135f891815260200190565b60405180910390a450505b50505060010180546001600160801b03169055505b8061362281614f91565b9150506133a9565b505050505050505050565b8254600090613657906001600160801b0380821691600160801b900416613e4c565b600387015490915060005b8181101561388257600088600301828154811061368f57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048c0190915260409091206001810154919250906001600160801b03166136d2575050613870565b60018101548854600091613700918a916001600160801b03600160801b918290048116929190910416613e95565b9050801561374b57600282015461372b906112c190600160801b90046001600160801b031683613281565b6002830180546001600160801b03928316600160801b0292169190911790555b600182015460009061377c908990613776906001600160801b0380821691600160801b900416613e4c565b89613e95565b9050801561385c57606554734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A9063c502f991908e90879085906000906137bc9060019061ffff16614f08565b60006040518763ffffffff1660e01b81526004016137df96959493929190614b7a565b60006040518083038186803b1580156137f757600080fd5b505af415801561380b573d6000803e3d6000fd5b505060655461382292506001915061ffff16614f08565b61ffff16846001600160a01b03168c60ff166000805160206150378339815191528460405161385391815260200190565b60405180910390a45b505060010180546001600160801b03169055505b8061387a81614f91565b915050613662565b5050505050505050565b60005b60655460ff600160201b90910481169082161015610a7c5760ff81166000908152606b60209081526040808320546001600160a01b0316808452606c90925282206065549192909161ffff1660021461391a5781546001600160801b0380821691600160801b90041661390185613bd2565b61390b9190614e7a565b6139159190614d4b565b61391d565b60005b600183015461392f9190600f0b614d4b565b6002830180546001600160801b0316905560405163b2838a7360e01b81526001600160a01b03851660048201523060248201529091506139d890734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A9063b2838a739060440160206040518083038186803b1580156139a057600080fd5b505af41580156139b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c191906148a3565b6001830180546001600160801b03928316600160801b029216919091179055613a036112c184613edd565b600283810180546001600160801b03199081166001600160801b0394851617909155604080516080810182528654600160801b808204871683529086166020808401918252600f89810b8587019081526001600160a01b038d811660608801818152600091825260679095529790972086519451948b16948b16860294909417845551600184018054909816910b89161790955593519390940180546001600160a01b031916939092169290921790558454909281811692613ac792041684614d4b565b613ad19190614e7a565b600184018054600f9290920b6001600160801b03166001600160801b03199092169190911790555050600090555080613b0981614fac565b91505061388f565b60665415613b315760405162461bcd60e51b815260040161091190614b5a565b600160665580613b4d57613b4482611b94565b613b4d57600080fd5b604051631a4ca37b60e21b81526001600160a01b0380861660048301526024820185905283166044820152734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A906369328dec9060640160006040518083038186803b158015613baf57600080fd5b505af4158015613bc3573d6000803e3d6000fd5b50506000606655505050505050565b6001600160a01b0381166000908152606c60205260408120613c11613bf684613edd565b6001830154600160801b90046001600160801b031690613281565b600282015460405163b2838a7360e01b81526001600160a01b0386166004820152306024820152613ccc916001600160801b0380821692613cc692600160801b900490911690734C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A9063b2838a739060440160206040518083038186803b158015613c8e57600080fd5b505af4158015613ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cc691906148a3565b90613281565b61328d9190614ec9565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610b53908590614066565b600054610100900460ff1680613d9b575060005460ff16155b613db75760405162461bcd60e51b815260040161091190614ad7565b600054610100900460ff16158015612eb8576000805461ffff19166101011790558015610a7c576000805461ff001916905550565b600054610100900460ff1680613e05575060005460ff16155b613e215760405162461bcd60e51b815260040161091190614ad7565b600054610100900460ff16158015613e43576000805461ffff19166101011790555b612eb833613cd6565b600061328d8284614f2b565b600061328d612710613e74613e6d8583614dbf565b8690614138565b90614144565b600081831015613e8b57600061328d565b61328d8284614f2b565b6000821580613ea2575081155b80613eab575083155b15613eb85750600061328d565b81831015613ed357613ece82613e748686614138565b613ed5565b835b949350505050565b600080805b60655460ff63010000009091048116908216101561405f5760ff8116600090815260686020526040902080546001600160a01b03868116600160201b909204161480613f3d575060018101546001600160a01b038681169116145b1561404c57805460ff81166000908152606a6020526040902090613fc2906001600160a01b03888116600160201b9092041614613f8b578154600160801b90046001600160801b0316613fbb565b815460655461ffff166000908152600284016020526040902054613fbb916001600160801b039182169116613281565b8590613281565b8254610100900460ff166000908152606a60205260409020600184015491955090614047906001600160a01b03898116911614614010578154600160801b90046001600160801b0316614040565b815460655461ffff166000908152600284016020526040902054614040916001600160801b039182169116613281565b8690613281565b945050505b508061405781614fac565b915050613ee2565b5092915050565b60006140bb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166141509092919063ffffffff16565b80519091501561194c57808060200190518101906140d991906146ed565b61194c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610911565b600061328d8284614e32565b600061328d8284614dfc565b6060613ed5848460008585843b6141a95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610911565b600080866001600160a01b031685876040516141c59190614a66565b60006040518083038185875af1925050503d8060008114614202576040519150601f19603f3d011682016040523d82523d6000602084013e614207565b606091505b5091509150614217828286614222565b979650505050505050565b6060831561423157508161328d565b8251156142415782518084602001fd5b8160405162461bcd60e51b81526004016109119190614a82565b80356001600160a01b038116811461427257600080fd5b919050565b600082601f830112614287578081fd5b8135602061429c61429783614d27565b614cf6565b8281528181019085830160e0808602880185018910156142ba578687fd5b865b8681101561435d5781838b0312156142d2578788fd5b6142da614c85565b6142e38461442e565b81526142f087850161442e565b87820152604061430181860161442e565b90820152606061431285820161442e565b90820152608061432385820161425b565b9082015260a061433485820161425b565b9082015260c08481013561434781615028565b90820152855293850193918101916001016142bc565b509198975050505050505050565b805161427281615028565b600060c08284031215614387578081fd5b60405160c0810181811067ffffffffffffffff821117156143aa576143aa615012565b6040529050806143b983614417565b81526143c760208401614417565b60208201526143d860408401614417565b60408201526143e960608401614417565b60608201526143fa60808401614417565b608082015261440b60a08401614417565b60a08201525092915050565b80516001600160801b038116811461427257600080fd5b803560ff8116811461427257600080fd5b600060208284031215614450578081fd5b61328d8261425b565b6000806040838503121561446b578081fd5b6144748361425b565b91506144826020840161425b565b90509250929050565b60008060006060848603121561449f578081fd5b6144a88461425b565b92506144b66020850161425b565b9150604084013567ffffffffffffffff8111156144d1578182fd5b6144dd86828701614277565b9150509250925092565b600080604083850312156144f9578182fd5b6145028361425b565b915060208084013567ffffffffffffffff81111561451e578283fd5b8401601f8101861361452e578283fd5b803561453c61429782614d27565b80828252848201915084840189868560051b870101111561455b578687fd5b8694505b83851015614584576145708161425b565b83526001949094019391850191850161455f565b5080955050505050509250929050565b600060208083850312156145a6578182fd5b823567ffffffffffffffff8111156145bc578283fd5b8301601f810185136145cc578283fd5b80356145da61429782614d27565b80828252848201915084840188868560051b87010111156145f9578687fd5b8694505b8385101561462757803560038110614613578788fd5b8352600194909401939185019185016145fd565b50979650505050505050565b600060208284031215614644578081fd5b813567ffffffffffffffff81111561465a578182fd5b613ed584828501614277565b60006020808385031215614678578182fd5b823567ffffffffffffffff81111561468e578283fd5b8301601f8101851361469e578283fd5b80356146ac61429782614d27565b80828252848201915084840188868560051b87010111156146cb578687fd5b8694505b838510156146275780358352600194909401939185019185016146cf565b6000602082840312156146fe578081fd5b815161328d81615028565b6000610180828403121561471b578081fd5b614723614cae565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101608084015181830152508091505092915050565b600060c082840312156147b8578081fd5b61328d8383614376565b600061014082840312156147d4578081fd5b6147dc614cd2565b6147e583614417565b81526147f360208401614417565b602082015261480460408401614417565b604082015261481560608401614417565b606082015261482660808401614417565b608082015261483760a08401614417565b60a082015261484860c08401614417565b60c082015261485960e08401614417565b60e082015261010061486c818501614417565b9082015261012061487e84820161436b565b908201529392505050565b60006020828403121561489a578081fd5b61328d82614417565b6000602082840312156148b4578081fd5b5051919050565b6000602082840312156148cc578081fd5b61328d8261442e565b600080604083850312156148e7578182fd5b6148f08361442e565b9150602083013561ffff81168114614906578182fd5b809150509250929050565b60008060408385031215614923578182fd5b61492c8361442e565b946020939093013593505050565b60008060006060848603121561494e578081fd5b6149578461442e565b92506020840135915061496c6040850161425b565b90509250925092565b80516001600160801b03168252602081015161499c60208401826001600160801b03169052565b5060408101516149b760408401826001600160801b03169052565b5060608101516149d260608401826001600160801b03169052565b5060808101516149ed60808401826001600160801b03169052565b5060a0810151614a0860a08401826001600160801b03169052565b5060c0810151614a2360c08401826001600160801b03169052565b5060e0810151614a3e60e08401826001600160801b03169052565b50610100818101516001600160801b0316908301526101208082015180151582850152610b53565b60008251614a78818460208701614f65565b9190910192915050565b6020815260008251806020840152614aa1816040850160208701614f65565b601f01601f19169190910160400192915050565b60208082526008908201526710b9b2ba3a3632b960c11b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600690820152651b1bd8dad95960d21b604082015260600190565b9586526001600160a01b039490941660208601526040850192909252606084015261ffff166080830152151560a082015260c00190565b958652931515602086015260ff92831660408601529116606084015261ffff166080830152151560a082015260c00190565b60c08101611d7182846001600160801b038082511683528060208301511660208401528060408301511660408401528060608301511660608401528060808301511660808401528060a08301511660a0840152505050565b6102a08101614c4a8286614975565b614c58610140830185614975565b60038310614c7657634e487b7160e01b600052602160045260246000fd5b82610280830152949350505050565b60405160e0810167ffffffffffffffff81118282101715614ca857614ca8615012565b60405290565b604051610180810167ffffffffffffffff81118282101715614ca857614ca8615012565b604051610140810167ffffffffffffffff81118282101715614ca857614ca8615012565b604051601f8201601f1916810167ffffffffffffffff81118282101715614d1f57614d1f615012565b604052919050565b600067ffffffffffffffff821115614d4157614d41615012565b5060051b60200190565b600081600f0b83600f0b8282128260016001607f1b0303821381151615614d7457614d74614fe6565b8260016001607f1b0319038212811615614d9057614d90614fe6565b50019392505050565b600061ffff808316818516808303821115614db657614db6614fe6565b01949350505050565b60008219821115614dd257614dd2614fe6565b500190565b600060ff821660ff84168060ff03821115614df457614df4614fe6565b019392505050565b600082614e0b57614e0b614ffc565b500490565b600060ff831680614e2357614e23614ffc565b8060ff84160491505092915050565b6000816000190483118215151615614e4c57614e4c614fe6565b500290565b600060ff821660ff84168160ff0481118215151615614e7257614e72614fe6565b029392505050565b600081600f0b83600f0b8281128160016001607f1b031901831281151615614ea457614ea4614fe6565b8160016001607f1b03018313811615614ebf57614ebf614fe6565b5090039392505050565b60008083128015600160ff1b850184121615614ee757614ee7614fe6565b6001600160ff1b0384018313811615614f0257614f02614fe6565b50500390565b600061ffff83811690831681811015614f2357614f23614fe6565b039392505050565b600082821015614f3d57614f3d614fe6565b500390565b600060ff821660ff841680821015614f5c57614f5c614fe6565b90039392505050565b60005b83811015614f80578181015183820152602001614f68565b83811115610b535750506000910152565b6000600019821415614fa557614fa5614fe6565b5060010190565b600060ff821660ff811415614fc357614fc3614fe6565b60010192915050565b6000600160ff1b821415614fe257614fe2614fe6565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610a7c57600080fdfee963a73e630cb9812a026653bfb6b1e14ffa92f8c38b79f318f2637557ea9f12a264697066735822122038b0879137377718e1d0ccd39aa2cf98ef2751ff3ce37cced2d9beb17f2c2bbe64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c80636386bcc4116100ec5780638a19c8bc1161008a578063c78b432e11610064578063c78b432e14610869578063ddd024751461087e578063f2fde38b146108b1578063f4d4c9d7146108d157600080fd5b80638a19c8bc146106aa5780638da5cb5b146106d8578063c5cfc5be1461070057600080fd5b806371018682116100c657806371018682146105bc578063715018a6146105dc5780637332655b146105f157806383eb772e1461061157600080fd5b80636386bcc4146104ac578063644d41ed1461056f5780636b37e4e31461058f57600080fd5b806326b516991161015957806351fe669e1161013357806351fe669e146102d657806355bf621f1461044c5780635d3e0e4d1461046c5780635edae4db1461048c57600080fd5b806326b516991461027657806332b76e86146102965780634dd96f86146102b657600080fd5b806302c178d7146101ac5780630748248f146101ce57806307f19eba1461020357806310a1f8b414610223578063222f6b8314610243578063256d43d71461026357600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101cc6101c7366004614459565b6108f1565b005b3480156101da57600080fd5b506065546101ee9062010000900460ff1681565b60405190151581526020015b60405180910390f35b34801561020f57600080fd5b506101cc61021e36600461443f565b610a49565b34801561022f57600080fd5b506101cc61023e36600461448b565b610a7f565b34801561024f57600080fd5b506101cc61025e366004614911565b610b59565b6101cc6102713660046148bb565b610c08565b34801561028257600080fd5b506101cc6102913660046144e7565b610e19565b3480156102a257600080fd5b506101cc6102b1366004614594565b61100a565b3480156102c257600080fd5b506101cc6102d1366004614666565b6117b2565b3480156102e257600080fd5b5061043d6102f13660046148bb565b6069602090815260009182526040918290208251610140808201855282546001600160801b038082168452600160801b918290048116848701526001850154808216858901528290048116606080860191909152600286015480831660808088019190915290849004831660a080880191909152600388015480851660c0808a019190915290869004851660e0808a019190915260048a0154808716610100808c01919091529088900460ff9081161515610120808d01919091528e519a8b018f5260058d0154808a168c528a900489169d8b019d909d5260068c01548089169e8b019e909e529c88900487169589019590955260078a01548087169489019490945292869004851691870191909152600888015480851691870191909152849004831690850152600986015491821690840152048516151593810193909352600a9091015490921683565b6040516101fa93929190614c3b565b34801561045857600080fd5b506101cc61046736600461493a565b611951565b34801561047857600080fd5b506101cc6104873660046148bb565b611afa565b34801561049857600080fd5b506101cc6104a7366004614633565b611b61565b3480156104b857600080fd5b506105216104c73660046148bb565b6068602052600090815260409020805460019091015460ff808316926101008104821692620100008204831692630100000083048116926001600160a01b03600160201b90910481169290811691600160a01b9091041687565b6040805160ff98891681529688166020880152948716948601949094529490911660608401526001600160a01b03908116608084015290921660a082015290151560c082015260e0016101fa565b34801561057b57600080fd5b506101ee61058a36600461443f565b611b94565b34801561059b57600080fd5b506105af6105aa3660046148bb565b611c8a565b6040516101fa9190614be3565b3480156105c857600080fd5b506105af6105d73660046148bb565b611d77565b3480156105e857600080fd5b506101cc611e18565b3480156105fd57600080fd5b506101cc61060c366004614911565b611e4e565b34801561061d57600080fd5b5061066d61062c36600461443f565b6067602052600090815260409020805460018201546002909201546001600160801b0380831693600160801b9093041691600f0b906001600160a01b031684565b604080516001600160801b039586168152949093166020850152600f9190910b918301919091526001600160a01b031660608201526080016101fa565b3480156106b657600080fd5b506065546106c59061ffff1681565b60405161ffff90911681526020016101fa565b3480156106e457600080fd5b506033546040516001600160a01b0390911681526020016101fa565b34801561070c57600080fd5b506107f661071b3660046148d5565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060ff8083166000908152606a6020908152604080832061ffff80871685526002909101835292819020815160e08101835281546001600160801b038082168352600160801b9182900481169583019590955260019092015493841692810192909252820483166060820152600160901b82049092166080830152600160a01b81048316151560a0830152600160a81b9004909116151560c082015292915050565b6040516101fa9190600060e0820190506001600160801b0380845116835280602085015116602084015280604085015116604084015250606083015161ffff8082166060850152806080860151166080850152505060a0830151151560a083015260c0830151151560c083015292915050565b34801561087557600080fd5b506101cc611ecd565b34801561088a57600080fd5b5060655461089f906301000000900460ff1681565b60405160ff90911681526020016101fa565b3480156108bd57600080fd5b506101cc6108cc36600461443f565b612b3a565b3480156108dd57600080fd5b506101cc6108ec366004614911565b612bd2565b6066541561091a5760405162461bcd60e51b815260040161091190614b5a565b60405180910390fd5b6001606655606554600160281b90046001600160a01b031633146109505760405162461bcd60e51b815260040161091190614ab5565b6001600160a01b0381166000908152606c6020526040812060018101549091600f91820b90910b1361098157600080fd5b6001810154604051631a4ca37b60e21b81526001600160a01b0380861660048301526001600160801b03600f9390930b92831660248301528416604482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906369328dec9060640160006040518083038186803b1580156109f757600080fd5b505af4158015610a0b573d6000803e3d6000fd5b5050506002830180546001600160801b03938416600160801b029316929092179091555060010180546001600160801b031916905550506000606655565b6033546001600160a01b03163314610a735760405162461bcd60e51b815260040161091190614b25565b610a7c81612df1565b50565b600054610100900460ff1680610a98575060005460ff16155b610ab45760405162461bcd60e51b815260040161091190614ad7565b600054610100900460ff16158015610ad6576000805461ffff19166101011790555b6000606655610ae3612e51565b6001600160a01b038416610af657600080fd5b6001600160a01b038316610b0957600080fd5b610b1284612b3a565b6065805465010000000000600160c81b031916600160281b6001600160a01b03861602179055610b4182612ecc565b8015610b53576000805461ff00191690555b50505050565b610b6282613249565b60ff8281166000908152606a6020526040908190206065549151638a229a5760e01b81526004810191909152336024820152604481018490526201000082049092161515606483015261ffff16608482015273__$e36f5330ef2566ea8a183e1e27b10de643$__90638a229a579060a4015b60006040518083038186803b158015610bec57600080fd5b505af4158015610c00573d6000803e3d6000fd5b505050505050565b60655461ffff16610c465760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610911565b60003411610c815760405162461bcd60e51b81526020600482015260086024820152676e6f2076616c756560c01b6044820152606401610911565b610c8a81613249565b60006068816002610c9c600186614f42565b610ca69190614e10565b60ff908116825260208201929092526040016000206001810154909250600160a01b90041615610d0a5760405162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d111a5cd8589b1959608a1b6044820152606401610911565b805460009060ff848116911614610d2e5760018201546001600160a01b0316610d41565b8154600160201b90046001600160a01b03165b90506001600160a01b03811615610d5757600080fd5b60ff83166000908152606a6020526040808220606554915163c502f99160e01b815273__$e36f5330ef2566ea8a183e1e27b10de643$__9363c502f99193610db2939233923492909161ffff90911690600190600401614b7a565b60006040518083038186803b158015610dca57600080fd5b505af4158015610dde573d6000803e3d6000fd5b505060655460405134815261ffff909116925033915060ff8616906000805160206150378339815191529060200160405180910390a4505050565b60665415610e395760405162461bcd60e51b815260040161091190614b5a565b6001606655606554600160281b90046001600160a01b03163314610e6f5760405162461bcd60e51b815260040161091190614ab5565b805160005b81811015610fff576000606c6000858481518110610ea257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905060008160010160009054906101000a9004600f0b600f0b13610eed57600080fd5b60008160010160009054906101000a9004600f0b905073__$e36f5330ef2566ea8a183e1e27b10de643$__6369328dec87836001600160801b0316888781518110610f4857634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401610f8c939291906001600160a01b0393841681526020810192909252909116604082015260600190565b60006040518083038186803b158015610fa457600080fd5b505af4158015610fb8573d6000803e3d6000fd5b5050506002830180546001600160801b03938416600160801b029316929092179091555060010180546001600160801b031916905580610ff781614f91565b915050610e74565b505060006066555050565b606554600160281b90046001600160a01b0316331461103b5760405162461bcd60e51b815260040161091190614ab5565b60655462010000900460ff1661105057600080fd5b80516065546301000000900460ff16811461106a57600080fd5b6065546000906110809060019061ffff16614f08565b905060005b828160ff161015611798576000848260ff16815181106110b557634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160ff808516600090815260688452604080822080548085168452606a8752828420610100918290049095168452828420835161018081018552858152978801859052928701849052606087018490526080870184905260a0870184905260c0870184905260e08701849052860183905261012086018390526101408601839052610160860192909252929450929091906000600284018161116360018b614f08565b61ffff168152602081019190915260400160002080549091506001600160801b0316156113fd57845473__$e36f5330ef2566ea8a183e1e27b10de643$__9063aab69633908690849060019060ff6201000082048116916301000000900416828d60028111156111e357634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b15801561124157600080fd5b505af4158015611255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112799190614709565b805190925015611309576040828101518654600160201b90046001600160a01b03166000908152606c60205291909120546112c6916112c1916001600160801b031690613281565b613294565b8554600160201b90046001600160a01b03166000908152606c6020526040902080546001600160801b0319166001600160801b0392909216919091179055611387565b6060820151156113875760a082015160018601546001600160a01b03166000908152606c602052604090205461134c916112c1916001600160801b031690613281565b60018601546001600160a01b03166000908152606c6020526040902080546001600160801b0319166001600160801b03929092169190911790555b60018660028111156113a957634e487b7160e01b600052602160045260246000fd5b14156113dc576113d78482858860000160019054906101000a900460ff168660a00151876101600151613301565b6113fd565b845460408301516101008401516113fd92879260ff90911691859190613635565b6000600284018161140f60018c614f08565b61ffff168152602081019190915260400160002080549091506001600160801b0316156116a457855473__$e36f5330ef2566ea8a183e1e27b10de643$__9063aab69633908690849060009060ff630100000082048116916201000090041660028e600281111561149057634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b1580156114ee57600080fd5b505af4158015611502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115269190614709565b8051909350156115a95760408084015160018801546001600160a01b03166000908152606c602052919091205461156a916112c1916001600160801b031690613281565b60018701546001600160a01b03166000908152606c6020526040902080546001600160801b0319166001600160801b039290921691909117905561162f565b60608301511561162f5760a08301518654600160201b90046001600160a01b03166000908152606c60205260409020546115f0916112c1916001600160801b031690613281565b8654600160201b90046001600160a01b03166000908152606c6020526040902080546001600160801b0319166001600160801b03929092169190911790555b600287600281111561165157634e487b7160e01b600052602160045260246000fd5b141561167d57855460a084015161016085015161167892879285928a9260ff169190613301565b6116a4565b6116a4848760000160019054906101000a900460ff16838660400151876101000151613635565b6040516366aef26360e01b81526004810186905261ffff8a16602482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906366aef2639060440160006040518083038186803b1580156116f957600080fd5b505af415801561170d573d6000803e3d6000fd5b50506040516366aef26360e01b81526004810187905261ffff8c16602482015273__$e36f5330ef2566ea8a183e1e27b10de643$__92506366aef263915060440160006040518083038186803b15801561176657600080fd5b505af415801561177a573d6000803e3d6000fd5b5050505050505050505050808061179090614fac565b915050611085565b506117a161388c565b50506065805462ff00001916905550565b606554600160281b90046001600160a01b031633146117e35760405162461bcd60e51b815260040161091190614ab5565b805160655462010000900460ff16156117fb57600080fd5b606554600161ffff9091161161181057600080fd5b606554611828906301000000900460ff166002614e51565b60ff16811461183657600080fd5b60005b818160ff16101561194c576000838260ff168151811061186957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000606a60008460016118869190614dd7565b60ff16815260208101919091526040016000908120606554600290910191906118b59060019061ffff16614f08565b61ffff16815260208101919091526040908101600020905163338dfe2f60e21b8152600481018490526024810182905290915073__$e36f5330ef2566ea8a183e1e27b10de643$__9063ce37f8bc9060440160006040518083038186803b15801561191f57600080fd5b505af4158015611933573d6000803e3d6000fd5b505050505050808061194490614fac565b915050611839565b505050565b61195a83613249565b6000606881600261196c600188614f42565b6119769190614e10565b60ff908116825260208083019390935260409182016000908120888316808352606a909552929020606554835493955073__$e36f5330ef2566ea8a183e1e27b10de643$__94637441e8bb94929333938a9361ffff169291161480156119ef575086546001600160a01b03898116600160201b90920416145b80611a1f5750865460ff8b811661010090920416148015611a1f575060018701546001600160a01b038981169116145b6040516001600160e01b031960e088901b16815260048101959095526001600160a01b039093166024850152604484019190915261ffff1660648301521515608482015260a40160006040518083038186803b158015611a7e57600080fd5b505af4158015611a92573d6000803e3d6000fd5b50505050611aa33384846000613b11565b816001600160a01b0316336001600160a01b03168560ff167f9ac0ff79dc491174b021e6532a2fc734e82751bba8672e9183a76cb994a5f65a86604051611aec91815260200190565b60405180910390a450505050565b606554600160281b90046001600160a01b03163314611b2b5760405162461bcd60e51b815260040161091190614ab5565b60ff9081166000908152606860205260409020600101805460ff60a01b198116600160a01b918290049093161502919091179055565b6033546001600160a01b03163314611b8b5760405162461bcd60e51b815260040161091190614b25565b610a7c81612ecc565b6001600160a01b0381166000908152606c602052604081206001810154600f90810b9081900b8313611bca575060019392505050565b60405163b2838a7360e01b81526001600160a01b038516600482015230602482015273__$e36f5330ef2566ea8a183e1e27b10de643$__9063b2838a739060440160206040518083038186803b158015611c2357600080fd5b505af4158015611c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5b91906148a3565b611c69575060009392505050565b611c7284613bd2565b611c7b90614fcc565b81600f0b121592505050919050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff8281166000908152606a602052604090819020606554915163c975707360e01b815260048101919091526201000082049092161515602483015261ffff16604482015273__$e36f5330ef2566ea8a183e1e27b10de643$__9063c9757073906064015b60c06040518083038186803b158015611d3957600080fd5b505af4158015611d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7191906147a7565b92915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff8281166000908152606a6020526040908190206065549151634ed14a7f60e01b815260048101919091523360248201526201000082049092161515604483015261ffff16606482015273__$e36f5330ef2566ea8a183e1e27b10de643$__90634ed14a7f90608401611d21565b6033546001600160a01b03163314611e425760405162461bcd60e51b815260040161091190614b25565b611e4c6000613cd6565b565b611e5782613249565b60ff8281166000908152606a6020526040908190206065549151630f681f9360e31b81526004810191909152336024820152604481018490526201000082049092161515606483015261ffff16608482015273__$e36f5330ef2566ea8a183e1e27b10de643$__90637b40fc989060a401610bd4565b606554600160281b90046001600160a01b03163314611efe5760405162461bcd60e51b815260040161091190614ab5565b60655462010000900460ff1615611f1457600080fd5b606554611f269061ffff166001614d99565b6065805462ffffff191661ffff92909216919091176201000017905560005b60655460ff630100000090910481169082161015612a3e5760ff818116600090815260686020908152604080832080549094168352606a909152808220606554915163161dd97560e31b81526004810182905261ffff909216602483015260016044830152919073__$e36f5330ef2566ea8a183e1e27b10de643$__9063b0eecba89060640160206040518083038186803b158015611fe357600080fd5b505af4158015611ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201b9190614889565b8354610100900460ff166000908152606a6020526040808220606554915163161dd97560e31b81526004810182905261ffff90921660248301526044820183905292935073__$e36f5330ef2566ea8a183e1e27b10de643$__9063b0eecba89060640160206040518083038186803b15801561209657600080fd5b505af41580156120aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ce9190614889565b90506001600160801b0383161561215f578454600160201b90046001600160a01b03166000908152606c6020526040902054612122906112c1906001600160801b03600160801b9091048116908616613281565b85546001600160a01b03600160201b909104166000908152606c6020526040902080546001600160801b03928316600160801b0292169190911790555b6001600160801b038116156121e55760018501546001600160a01b03166000908152606c60205260409020546121ad906112c190600160801b90046001600160801b03908116908416613281565b60018601546001600160a01b03166000908152606c6020526040902080546001600160801b03928316600160801b0292169190911790555b606554600261ffff909116116121ff575050505050612a2c565b8454606554604051631bb98a3360e01b815260009273__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a339261225c928a9260019260ff62010000840481169363010000009004169161ffff16908990600401614bb1565b6101406040518083038186803b15801561227557600080fd5b505af4158015612289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ad91906147c2565b8654606554604051631bb98a3360e01b815292935060009273__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a339261230f928992879260ff6301000000830481169362010000909304169161ffff909116908490600401614bb1565b6101406040518083038186803b15801561232857600080fd5b505af415801561233c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236091906147c2565b9050600060405180606001604052808481526020018381526020016000600281111561239c57634e487b7160e01b600052602160045260246000fd5b9052905080606960006123b08c6003614e51565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff19169190849081111561253257634e487b7160e01b600052602160045260246000fd5b0217905550508854606554604051631bb98a3360e01b81526000935073__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a3392612599928d9260019260ff6201000083048116936301000000909304169161ffff909116908490600401614bb1565b6101406040518083038186803b1580156125b257600080fd5b505af41580156125c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ea91906147c2565b6040805160608101825282815260208101869052919250810160019052915081606960006126198d6003614e51565b612624906001614dd7565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff1916919084908111156127a657634e487b7160e01b600052602160045260246000fd5b0217905550508954606554604051631bb98a3360e01b81526000935073__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a339261280d928c92879260ff6301000000830481169362010000909304169161ffff90911690600190600401614bb1565b6101406040518083038186803b15801561282657600080fd5b505af415801561283a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285e91906147c2565b60408051606081018252878152602081018390529192508101600290529250826069600061288d8e6003614e51565b612898906002614dd7565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff191691908490811115612a1a57634e487b7160e01b600052602160045260246000fd5b02179055505050505050505050505050505b80612a3681614fac565b915050611f45565b5060655461ffff1660011415612a5c576065805462ff000019169055565b60655461ffff1660021415611e4c5760015b606554612a86906301000000900460ff166002614e51565b60ff168160ff1611612b235760ff81166000908152606a60205260409081902090516366aef26360e01b815260048101919091526001602482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906366aef2639060440160006040518083038186803b158015612af857600080fd5b505af4158015612b0c573d6000803e3d6000fd5b505050508080612b1b90614fac565b915050612a6e565b50612b2c61388c565b6065805462ff000019169055565b6033546001600160a01b03163314612b645760405162461bcd60e51b815260040161091190614b25565b6001600160a01b038116612bc95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610911565b610a7c81613cd6565b60655461ffff16612c105760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610911565b60008111612c4a5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610911565b612c5382613249565b60006068816002612c65600187614f42565b612c6f9190614e10565b60ff908116825260208201929092526040016000206001810154909250600160a01b90041615612cd35760405162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d111a5cd8589b1959608a1b6044820152606401610911565b805460009060ff858116911614612cf75760018201546001600160a01b0316612d0a565b8154600160201b90046001600160a01b03165b90506001600160a01b038116612d1f57600080fd5b60ff84166000908152606a6020526040808220606554915163c502f99160e01b815273__$e36f5330ef2566ea8a183e1e27b10de643$__9363c502f99193612d7a939233928a92909161ffff90911690600190600401614b7a565b60006040518083038186803b158015612d9257600080fd5b505af4158015612da6573d6000803e3d6000fd5b505060655460405186815261ffff909116925033915060ff8716906000805160206150378339815191529060200160405180910390a4610b536001600160a01b038216333086613d28565b606580546001600160a01b03838116600160281b81810265010000000000600160c81b031985161790945560405193909204169182907f57e8def7e592578c5fbf9abfe6d3897d7daf10cf7e179f320d944cf71a76493e90600090a35050565b600054610100900460ff1680612e6a575060005460ff16155b612e865760405162461bcd60e51b815260040161091190614ad7565b600054610100900460ff16158015612ea8576000805461ffff19166101011790555b612eb0613d82565b612eb8613dec565b8015610a7c576000805461ff001916905550565b805160655460ff63010000008204811691600160201b90041660005b83811015613211576000858281518110612f1257634e487b7160e01b600052603260045260246000fd5b60200260200101519050836002612f299190614e51565b612f34906001614dd7565b60ff16808252612f45906001614dd7565b60ff166020820152806068600086612f5c81614fac565b60ff91821683526020808401949094526040928301600020855181549587015194870151606088015160808901516001600160a01b03908116600160201b02640100000000600160c01b031992881663010000000263ff0000001994891662010000029490941663ffff0000199989166101000261ffff19909b1695891695909517999099179790971692909217171694909417845560a08501516001909401805460c0909601511515600160a01b026001600160a81b03199096169490931693909317939093179055945083166130ce576080810151606b60008561304181614fac565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060a00151606b6000858061308f90614fac565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506131fe565b60008060005b8560ff168160ff16101561315457608084015160ff82166000908152606b60205260409020546001600160a01b039081169116141561311257600192505b60a084015160ff82166000908152606b60205260409020546001600160a01b039081169116141561314257600191505b8061314c81614fac565b9150506130d4565b50816131a8576080830151606b60008761316d81614fac565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b806131fb5760a0830151606b6000876131c081614fac565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b50505b508061320981614f91565b915050612ee8565b506065805464ffff0000001916630100000060ff9485160264ff00000000191617600160201b92909316919091029190911790555050565b60ff811615801590613278575060655461326e906301000000900460ff166002614e51565b60ff168160ff1611155b610a7c57600080fd5b600061328d8284614dbf565b9392505050565b60006001600160801b038211156132fd5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610911565b5090565b8454600090613323906001600160801b0380821691600160801b900416613e4c565b60018801549091506001600160801b0316158015906133425750600082115b156133a157600186015461337e906112c19061336a908490600160901b900461ffff16613e58565b60018a01546001600160801b031690613e7a565b6001880180546001600160801b0319166001600160801b03929092169190911790555b600387015460005b8181101561362a5760008960030182815481106133d657634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048d0190915260409091206001810154919250906001600160801b0316613419575050613618565b60018101548a54600091613447918a916001600160801b03600160801b918290048116929190910416613e95565b9050801561348e57600382015461346b906112c1906001600160801b031683613281565b6003830180546001600160801b0319166001600160801b03929092169190911790555b60018201546000906134b3906001600160801b0380821691600160801b900416613e4c565b905060006134c289838a613e95565b905080156136035760018d015460009081906134ea908590600160901b900461ffff16613e58565b60028701549091506001600160801b0316811061352257600286015461351b9084906001600160801b031683613e95565b9150613526565b8291505b73__$e36f5330ef2566ea8a183e1e27b10de643$__63c502f9918f8986866001606560009054906101000a900461ffff166135619190614f08565b60006040518763ffffffff1660e01b815260040161358496959493929190614b7a565b60006040518083038186803b15801561359c57600080fd5b505af41580156135b0573d6000803e3d6000fd5b50506065546135c792506001915061ffff16614f08565b61ffff16876001600160a01b03168e60ff16600080516020615037833981519152866040516135f891815260200190565b60405180910390a450505b50505060010180546001600160801b03169055505b8061362281614f91565b9150506133a9565b505050505050505050565b8254600090613657906001600160801b0380821691600160801b900416613e4c565b600387015490915060005b8181101561388257600088600301828154811061368f57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048c0190915260409091206001810154919250906001600160801b03166136d2575050613870565b60018101548854600091613700918a916001600160801b03600160801b918290048116929190910416613e95565b9050801561374b57600282015461372b906112c190600160801b90046001600160801b031683613281565b6002830180546001600160801b03928316600160801b0292169190911790555b600182015460009061377c908990613776906001600160801b0380821691600160801b900416613e4c565b89613e95565b9050801561385c5760655473__$e36f5330ef2566ea8a183e1e27b10de643$__9063c502f991908e90879085906000906137bc9060019061ffff16614f08565b60006040518763ffffffff1660e01b81526004016137df96959493929190614b7a565b60006040518083038186803b1580156137f757600080fd5b505af415801561380b573d6000803e3d6000fd5b505060655461382292506001915061ffff16614f08565b61ffff16846001600160a01b03168c60ff166000805160206150378339815191528460405161385391815260200190565b60405180910390a45b505060010180546001600160801b03169055505b8061387a81614f91565b915050613662565b5050505050505050565b60005b60655460ff600160201b90910481169082161015610a7c5760ff81166000908152606b60209081526040808320546001600160a01b0316808452606c90925282206065549192909161ffff1660021461391a5781546001600160801b0380821691600160801b90041661390185613bd2565b61390b9190614e7a565b6139159190614d4b565b61391d565b60005b600183015461392f9190600f0b614d4b565b6002830180546001600160801b0316905560405163b2838a7360e01b81526001600160a01b03851660048201523060248201529091506139d89073__$e36f5330ef2566ea8a183e1e27b10de643$__9063b2838a739060440160206040518083038186803b1580156139a057600080fd5b505af41580156139b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c191906148a3565b6001830180546001600160801b03928316600160801b029216919091179055613a036112c184613edd565b600283810180546001600160801b03199081166001600160801b0394851617909155604080516080810182528654600160801b808204871683529086166020808401918252600f89810b8587019081526001600160a01b038d811660608801818152600091825260679095529790972086519451948b16948b16860294909417845551600184018054909816910b89161790955593519390940180546001600160a01b031916939092169290921790558454909281811692613ac792041684614d4b565b613ad19190614e7a565b600184018054600f9290920b6001600160801b03166001600160801b03199092169190911790555050600090555080613b0981614fac565b91505061388f565b60665415613b315760405162461bcd60e51b815260040161091190614b5a565b600160665580613b4d57613b4482611b94565b613b4d57600080fd5b604051631a4ca37b60e21b81526001600160a01b038086166004830152602482018590528316604482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906369328dec9060640160006040518083038186803b158015613baf57600080fd5b505af4158015613bc3573d6000803e3d6000fd5b50506000606655505050505050565b6001600160a01b0381166000908152606c60205260408120613c11613bf684613edd565b6001830154600160801b90046001600160801b031690613281565b600282015460405163b2838a7360e01b81526001600160a01b0386166004820152306024820152613ccc916001600160801b0380821692613cc692600160801b90049091169073__$e36f5330ef2566ea8a183e1e27b10de643$",
  "libraries": {
    "OptionLifecycle": "0x4C56A6fe0B473D10bf99A5889BEDCF5958d8aC8A"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 213,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7280,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "currentRound",
        "offset": 0,
        "slot": "101",
        "type": "t_uint16"
      },
      {
        "astId": 7282,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "underSettlement",
        "offset": 2,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 7284,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "optionPairCount",
        "offset": 3,
        "slot": "101",
        "type": "t_uint8"
      },
      {
        "astId": 7286,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "assetCount",
        "offset": 4,
        "slot": "101",
        "type": "t_uint8"
      },
      {
        "astId": 7288,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "settlerRoleAddress",
        "offset": 5,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 7290,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "locked",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 7295,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "settlementCashflowResult",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_struct(SettlementCashflowResult)7019_storage)"
      },
      {
        "astId": 7300,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "optionPairs",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_uint8,t_struct(OptionPairDefinition)6975_storage)"
      },
      {
        "astId": 7305,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "executionAccountingResult",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint8,t_struct(OptionPairExecutionAccountingResult)7010_storage)"
      },
      {
        "astId": 7310,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "optionData",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint8,t_struct(OptionData)6917_storage)"
      },
      {
        "astId": 7314,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "asset",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint8,t_address)"
      },
      {
        "astId": 7319,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "assetData",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_struct(AssetData)6897_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(OptionExecution)7000": {
        "encoding": "inplace",
        "label": "enum StructureData.OptionExecution",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_struct(AssetData)6897_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.AssetData)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetData)6897_storage"
      },
      "t_mapping(t_address,t_struct(SettlementCashflowResult)7019_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.SettlementCashflowResult)",
        "numberOfBytes": "32",
        "value": "t_struct(SettlementCashflowResult)7019_storage"
      },
      "t_mapping(t_address,t_struct(UserState)6934_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)6934_storage"
      },
      "t_mapping(t_uint16,t_struct(OptionState)6859_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct StructureData.OptionState)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionState)6859_storage"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint8,t_struct(OptionData)6917_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StructureData.OptionData)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionData)6917_storage"
      },
      "t_mapping(t_uint8,t_struct(OptionPairDefinition)6975_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StructureData.OptionPairDefinition)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionPairDefinition)6975_storage"
      },
      "t_mapping(t_uint8,t_struct(OptionPairExecutionAccountingResult)7010_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StructureData.OptionPairExecutionAccountingResult)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionPairExecutionAccountingResult)7010_storage"
      },
      "t_struct(AssetData)6897_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.AssetData",
        "members": [
          {
            "astId": 6886,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6888,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "depositAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6890,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "leftOverAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_int128"
          },
          {
            "astId": 6892,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "balanceAfterSettle",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6894,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "withdrawableAfterSettle",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6896,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "traderWithdrawn",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(OptionData)6917_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionData",
        "members": [
          {
            "astId": 6899,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "totalReleasedDepositAssetAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6901,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "totalReleasedCounterPartyAssetAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6903,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "assetToTerminateForNextRound",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6908,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "optionStates",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint16,t_struct(OptionState)6859_storage)"
          },
          {
            "astId": 6911,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "usersInvolved",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 6916,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "userStates",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(UserState)6934_storage)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(OptionPairDefinition)6975_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionPairDefinition",
        "members": [
          {
            "astId": 6962,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "callOptionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6964,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "putOptionId",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6966,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "depositAssetAmountDecimals",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6968,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "counterPartyAssetAmountDecimals",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6970,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "depositAsset",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6972,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "counterPartyAsset",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6974,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "manualDepositDisabled",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OptionPairExecutionAccountingResult)7010_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionPairExecutionAccountingResult",
        "members": [
          {
            "astId": 7003,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "callOptionResult",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(SettlementAccountingResult)6996_storage"
          },
          {
            "astId": 7006,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "putOptionResult",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(SettlementAccountingResult)6996_storage"
          },
          {
            "astId": 7009,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "execute",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(OptionExecution)7000"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(OptionState)6859_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionState",
        "members": [
          {
            "astId": 6846,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6848,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "totalTerminate",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6850,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "strikePrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6852,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "round",
            "offset": 16,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 6854,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "premiumRate",
            "offset": 18,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 6856,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "executed",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 6858,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "callOrPut",
            "offset": 21,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SettlementAccountingResult)6996_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.SettlementAccountingResult",
        "members": [
          {
            "astId": 6977,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "depositAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6979,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "autoRollAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6981,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "autoRollPremium",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6983,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedAmount",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6985,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedPremium",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6987,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "autoRollCounterPartyAmount",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6989,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "autoRollCounterPartyPremium",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 6991,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedCounterPartyAmount",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 6993,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedCounterPartyPremium",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 6995,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "executed",
            "offset": 16,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(SettlementCashflowResult)7019_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.SettlementCashflowResult",
        "members": [
          {
            "astId": 7012,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "newDepositAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 7014,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "newReleasedAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 7016,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "leftOverAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_int128"
          },
          {
            "astId": 7018,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "contractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserState)6934_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.UserState",
        "members": [
          {
            "astId": 6919,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "pendingAsset",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6921,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "tempLocked",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6923,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "ongoingAsset",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6925,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "assetToTerminate",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6927,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "assetToTerminateForNextRound",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6929,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedDepositAssetAmount",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6931,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedCounterPartyAssetAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 6933,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "hasState",
            "offset": 16,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}