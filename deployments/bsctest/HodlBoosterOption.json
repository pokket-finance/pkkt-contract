{
  "address": "0x24e7a8eb101581C0dd6e184EeC82a16dcbf7F419",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "optionId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "ManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "optionId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "callOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "putOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "depositAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "counterPartyAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterPartyAsset",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "manualDepositDisabled",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionPairDefinition[]",
          "name": "_optionPairDefinitions",
          "type": "tuple[]"
        }
      ],
      "name": "addOptionPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminRoleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "balanceEnough",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_assetToTerminate",
          "type": "uint256"
        }
      ],
      "name": "cancelWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        }
      ],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "executionAccountingResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "depositAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.SettlementAccountingResult",
          "name": "callOptionResult",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "depositAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.SettlementAccountingResult",
          "name": "putOptionResult",
          "type": "tuple"
        },
        {
          "internalType": "enum StructureData.OptionExecution",
          "name": "execute",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        }
      ],
      "name": "getAccountBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "pendingDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lockedDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "terminatingDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "toTerminateDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyAssetAmount",
              "type": "uint128"
            }
          ],
          "internalType": "struct StructureData.UserBalance",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        }
      ],
      "name": "getOptionSnapShot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "totalPending",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalLocked",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalTerminating",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalToTerminate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalReleasedDeposit",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalReleasedCounterParty",
              "type": "uint128"
            }
          ],
          "internalType": "struct StructureData.OptionSnapshot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "_round",
          "type": "uint16"
        }
      ],
      "name": "getOptionStateByRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "totalAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalTerminate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "strikePrice",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "round",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callOrPut",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "callOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "putOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "depositAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "counterPartyAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterPartyAsset",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "manualDepositDisabled",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionPairDefinition[]",
          "name": "_optionPairDefinitions",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initiateSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_assetToTerminate",
          "type": "uint256"
        }
      ],
      "name": "initiateWithraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managerRoleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionPairCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "optionPairs",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "callOptionId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "putOptionId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "depositAssetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "counterPartyAssetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "depositAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "counterPartyAsset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "manualDepositDisabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendBackAssets",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_parameters",
          "type": "uint256[]"
        }
      ],
      "name": "setOptionParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StructureData.OptionExecution[]",
          "name": "_execution",
          "type": "uint8[]"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "settlementCashflowResult",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "newDepositAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "newReleasedAmount",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "leftOverAmount",
          "type": "int128"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairId",
          "type": "uint8"
        }
      ],
      "name": "toggleOptionPairDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underSettlement",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9b8f0e724129c24bb1e54c1d9feb1203ef47f81538e5ac1e55e141109063bb1c",
  "receipt": {
    "to": null,
    "from": "0x7BC55d94EEC38E15fE84c90Bf2B10BF4Eabd1189",
    "contractAddress": "0x24e7a8eb101581C0dd6e184EeC82a16dcbf7F419",
    "transactionIndex": 0,
    "gasUsed": "4359779",
    "logsBloom": "0x
    "blockHash": "0x51538f9668d00ccfafad8106da8d071826105ebfd8136766e62a215a74568050",
    "transactionHash": "0x9b8f0e724129c24bb1e54c1d9feb1203ef47f81538e5ac1e55e141109063bb1c",
    "logs": [],
    "blockNumber": 21217356,
    "cumulativeGasUsed": "4359779",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f2f2bc8059285ab9fff770d545de0fdb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"optionId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"optionId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"callOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"putOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"counterPartyAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterPartyAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"manualDepositDisabled\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionPairDefinition[]\",\"name\":\"_optionPairDefinitions\",\"type\":\"tuple[]\"}],\"name\":\"addOptionPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRoleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"balanceEnough\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_assetToTerminate\",\"type\":\"uint256\"}],\"name\":\"cancelWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"executionAccountingResult\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"depositAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.SettlementAccountingResult\",\"name\":\"callOptionResult\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"depositAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.SettlementAccountingResult\",\"name\":\"putOptionResult\",\"type\":\"tuple\"},{\"internalType\":\"enum StructureData.OptionExecution\",\"name\":\"execute\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"}],\"name\":\"getAccountBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"pendingDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockedDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"terminatingDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"toTerminateDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyAssetAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct StructureData.UserBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"}],\"name\":\"getOptionSnapShot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"totalPending\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalLocked\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalTerminating\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalToTerminate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalReleasedDeposit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalReleasedCounterParty\",\"type\":\"uint128\"}],\"internalType\":\"struct StructureData.OptionSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_round\",\"type\":\"uint16\"}],\"name\":\"getOptionStateByRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"totalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalTerminate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"strikePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"callOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"putOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"counterPartyAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterPartyAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"manualDepositDisabled\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionPairDefinition[]\",\"name\":\"_optionPairDefinitions\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_assetToTerminate\",\"type\":\"uint256\"}],\"name\":\"initiateWithraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerRoleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionPairCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"optionPairs\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"callOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"putOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"counterPartyAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterPartyAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"manualDepositDisabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendBackAssets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_parameters\",\"type\":\"uint256[]\"}],\"name\":\"setOptionParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StructureData.OptionExecution[]\",\"name\":\"_execution\",\"type\":\"uint8[]\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"settlementCashflowResult\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"newDepositAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"newReleasedAmount\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"leftOverAmount\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairId\",\"type\":\"uint8\"}],\"name\":\"toggleOptionPairDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underSettlement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HodlBoosterOptionUpgradeable.sol\":\"HodlBoosterOptionUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/HodlBoosterOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";\\r\\nimport {Utils} from \\\"./libraries/Utils.sol\\\";\\r\\nimport {OptionLifecycle} from \\\"./libraries/OptionLifecycle.sol\\\";\\r\\nimport \\\"./interfaces/IPKKTStructureOption.sol\\\";\\r\\nimport \\\"./OptionVaultBase.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract HodlBoosterOption is OptionVaultBase, IPKKTStructureOption {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeCast for uint256;\\r\\n    using SafeMath for uint256;\\r\\n    using Utils for uint256;\\r\\n    using OptionLifecycle for StructureData.UserState;\\r\\n \\r\\n\\r\\n    modifier validateOptionById(uint8 _optionId) {\\r\\n        require(_optionId != 0 && _optionId <= optionPairCount * 2);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getAccountBalance(uint8 _optionId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (StructureData.UserBalance memory)\\r\\n    {\\r\\n        return\\r\\n            OptionLifecycle.getAccountBalance(\\r\\n                optionData[_optionId],\\r\\n                msg.sender,\\r\\n                underSettlement,\\r\\n                currentRound\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getOptionSnapShot(uint8 _optionId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (StructureData.OptionSnapshot memory)\\r\\n    {\\r\\n        return\\r\\n            OptionLifecycle.getOptionSnapShot(\\r\\n                optionData[_optionId],\\r\\n                underSettlement,\\r\\n                currentRound\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function initiateWithraw(uint8 _optionId, uint256 _assetToTerminate)\\r\\n        external\\r\\n        override \\r\\n        validateOptionById(_optionId)\\r\\n    {\\r\\n        //require(_assetToTerminate > 0 , \\\"!_assetToTerminate\\\");\\r\\n        //require(currentRound > 1, \\\"No on going\\\"); \\r\\n        OptionLifecycle.initiateWithrawStorage(\\r\\n            optionData[_optionId],\\r\\n            msg.sender,\\r\\n            _assetToTerminate,\\r\\n            underSettlement,\\r\\n            currentRound\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function cancelWithdraw(uint8 _optionId, uint256 _assetToTerminate)\\r\\n        external\\r\\n        override\\r\\n        validateOptionById(_optionId)\\r\\n    {\\r\\n        //require(_assetToTerminate > 0 , \\\"!_assetToTerminate\\\");\\r\\n        //require(currentRound > 1, \\\"No on going\\\"); \\r\\n\\r\\n        OptionLifecycle.cancelWithdrawStorage(\\r\\n            optionData[_optionId],\\r\\n            msg.sender,\\r\\n            _assetToTerminate,\\r\\n            underSettlement,\\r\\n            currentRound\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        uint8 _optionId,\\r\\n        uint256 _amount,\\r\\n        address _asset\\r\\n    ) external override \\r\\n        validateOptionById(_optionId){\\r\\n        //require(_amount > 0, \\\"!amount\\\"); \\r\\n        StructureData.OptionPairDefinition storage pair = optionPairs[\\r\\n            (_optionId - 1) / 2\\r\\n        ];\\r\\n        //require(_asset == pair.depositAsset || _asset == pair.counterPartyAsset, \\\"!asset\\\");\\r\\n        OptionLifecycle.withdrawStorage(\\r\\n            optionData[_optionId],\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            currentRound,\\r\\n            (_optionId == pair.callOptionId && _asset == pair.depositAsset) ||\\r\\n            (_optionId == pair.putOptionId && _asset == pair.counterPartyAsset)\\r\\n        );\\r\\n        clientWithdraw(msg.sender, _amount, _asset, false);\\r\\n        emit Withdraw(_optionId, msg.sender, _asset, _amount);\\r\\n    }\\r\\n\\r\\n    //deposit eth\\r\\n    function depositETH(uint8 _optionId) external payable override \\r\\n        validateOptionById(_optionId){\\r\\n        require(currentRound > 0, \\\"!Started\\\");\\r\\n        require(msg.value > 0, \\\"no value\\\");\\r\\n \\r\\n        StructureData.OptionPairDefinition storage pair = optionPairs[\\r\\n            (_optionId - 1) / 2\\r\\n        ];\\r\\n        require(!pair.manualDepositDisabled, \\\"DepositDisabled\\\");  \\r\\n        address depositAsset = pair.callOptionId == _optionId\\r\\n            ? pair.depositAsset\\r\\n            : pair.counterPartyAsset;\\r\\n        require(depositAsset == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE));\\r\\n\\r\\n        //todo: convert to weth\\r\\n        OptionLifecycle.depositFor(\\r\\n            optionData[_optionId],\\r\\n            msg.sender,\\r\\n            msg.value,\\r\\n            0,\\r\\n            currentRound,\\r\\n            true\\r\\n        );\\r\\n\\r\\n        emit Deposit(_optionId, msg.sender, currentRound, msg.value);\\r\\n        //payable(vaultAddress()).transfer(msg.value);\\r\\n    }\\r\\n\\r\\n    //deposit other erc20 coin, take wbtc\\r\\n    function deposit(uint8 _optionId, uint256 _amount) external override \\r\\n        validateOptionById(_optionId){\\r\\n        require(currentRound > 0, \\\"!Started\\\");\\r\\n        require(_amount > 0, \\\"!amount\\\"); \\r\\n        StructureData.OptionPairDefinition storage pair = optionPairs[\\r\\n            (_optionId - 1) / 2\\r\\n        ];\\r\\n        require(!pair.manualDepositDisabled, \\\"DepositDisabled\\\");  \\r\\n        address depositAsset = pair.callOptionId == _optionId\\r\\n            ? pair.depositAsset\\r\\n            : pair.counterPartyAsset;\\r\\n        require(depositAsset != address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE));\\r\\n\\r\\n        OptionLifecycle.depositFor(\\r\\n            optionData[_optionId],\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            0,\\r\\n            currentRound,\\r\\n            true\\r\\n        );\\r\\n        emit Deposit(_optionId, msg.sender, currentRound, _amount);\\r\\n        IERC20(depositAsset).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n    }\\r\\n \\r\\n\\r\\n    //used to render the history at client side, reading the minting transactions of a specific address,\\r\\n    //for each transaction, read the blockheight and call this method to get the result\\r\\n    //the blockheight is the the height when the round is committed\\r\\n    //function getRoundData(uint8 _optionId, uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\\r\\n    //    return optionStates[_optionId][optionHeights[_blockHeight]];\\r\\n    //}\\r\\n\\r\\n    /*function getRoundDataByBlock(uint8 _optionId, uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\\r\\n        return optionData[_optionId].optionStates[optionHeights[_blockHeight]];\\r\\n    }*/\\r\\n\\r\\n    function getOptionStateByRound(uint8 _optionId, uint16 _round)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (StructureData.OptionState memory)\\r\\n    {\\r\\n        return optionData[_optionId].optionStates[_round];\\r\\n    }\\r\\n\\r\\n    function autoRollToCounterPartyByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        StructureData.OptionState storage _optionState,\\r\\n        StructureData.OptionData storage _counterPartyOption,\\r\\n        uint8 _counterPartyOptionId,\\r\\n        uint256 _totalReleased,\\r\\n        uint256 _totalAutoRoll\\r\\n    ) internal override {\\r\\n        uint256 totalAutoRollBase = uint256(_optionState.totalAmount).sub(\\r\\n            _optionState.totalTerminate\\r\\n        );\\r\\n        if (_option.assetToTerminateForNextRound > 0 && _totalAutoRoll > 0) {\\r\\n            _option.assetToTerminateForNextRound = uint256(_option\\r\\n                .assetToTerminateForNextRound)\\r\\n                .subOrZero(\\r\\n                    totalAutoRollBase.withPremium(_optionState.premiumRate)\\r\\n                ).toUint128();\\r\\n        }\\r\\n        uint256 userCount = _option.usersInvolved.length;\\r\\n        for (uint256 i = 0; i < userCount; i++) {\\r\\n            address userAddress = _option.usersInvolved[i];\\r\\n            StructureData.UserState storage userState = _option.userStates[\\r\\n                userAddress\\r\\n            ];\\r\\n\\r\\n            if (userState.ongoingAsset == 0) {\\r\\n                continue;\\r\\n            }\\r\\n            uint256 amountToTerminate = Utils.getAmountToTerminate(\\r\\n                _totalReleased,\\r\\n                userState.assetToTerminate,\\r\\n                _optionState.totalTerminate\\r\\n            );\\r\\n            if (amountToTerminate > 0) {\\r\\n                userState.releasedCounterPartyAssetAmount = uint256(userState\\r\\n                    .releasedCounterPartyAssetAmount)\\r\\n                    .add(amountToTerminate).toUint128();\\r\\n            }\\r\\n            uint256 onGoing = uint256(userState.ongoingAsset).sub(\\r\\n                userState.assetToTerminate\\r\\n            );\\r\\n            uint256 remainingAmount = Utils.getAmountToTerminate(\\r\\n                _totalAutoRoll,\\r\\n                onGoing,\\r\\n                totalAutoRollBase\\r\\n            );\\r\\n            if (remainingAmount > 0) {\\r\\n                uint256 onGoingTerminate = 0;\\r\\n                uint256 virtualOnGoing = onGoing.withPremium(\\r\\n                    _optionState.premiumRate\\r\\n                );\\r\\n                if (userState.assetToTerminateForNextRound <= virtualOnGoing) {\\r\\n                    onGoingTerminate = Utils.getAmountToTerminate(\\r\\n                        remainingAmount,\\r\\n                        userState.assetToTerminateForNextRound,\\r\\n                        virtualOnGoing\\r\\n                    );\\r\\n                } else {\\r\\n                    onGoingTerminate = remainingAmount;\\r\\n                }\\r\\n                OptionLifecycle.depositFor(\\r\\n                    _counterPartyOption,\\r\\n                    userAddress,\\r\\n                    remainingAmount,\\r\\n                    onGoingTerminate,\\r\\n                    currentRound - 1,\\r\\n                    false\\r\\n                );\\r\\n                emit Deposit(\\r\\n                    _counterPartyOptionId,\\r\\n                    userAddress,\\r\\n                    currentRound - 1,\\r\\n                    remainingAmount\\r\\n                );\\r\\n            }\\r\\n            userState.assetToTerminate = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function autoRollByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        uint8 _optionId,\\r\\n        StructureData.OptionState storage _optionState,\\r\\n        uint256 _totalReleased,\\r\\n        uint256 _totalAutoRoll\\r\\n    ) internal override {\\r\\n        //uint256 lockedRound = currentRound - 1;\\r\\n\\r\\n        uint256 totalAutoRollBase = uint256(_optionState.totalAmount).sub(\\r\\n            _optionState.totalTerminate\\r\\n        );\\r\\n        uint256 userCount = _option.usersInvolved.length;\\r\\n        for (uint256 i = 0; i < userCount; i++) {\\r\\n            address userAddress = _option.usersInvolved[i];\\r\\n            StructureData.UserState storage userState = _option.userStates[\\r\\n                userAddress\\r\\n            ];\\r\\n            if (userState.ongoingAsset == 0) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 amountToTerminate = Utils.getAmountToTerminate(\\r\\n                _totalReleased,\\r\\n                userState.assetToTerminate,\\r\\n                _optionState.totalTerminate\\r\\n            );\\r\\n            if (amountToTerminate > 0) {\\r\\n                userState.releasedDepositAssetAmount = uint256(userState\\r\\n                    .releasedDepositAssetAmount)\\r\\n                    .add(amountToTerminate).toUint128();\\r\\n            }\\r\\n            uint256 remainingAmount = Utils.getAmountToTerminate(\\r\\n                _totalAutoRoll,\\r\\n                uint256(userState.ongoingAsset).sub(userState.assetToTerminate),\\r\\n                totalAutoRollBase\\r\\n            );\\r\\n            if (remainingAmount > 0) {\\r\\n                OptionLifecycle.depositFor(\\r\\n                    _option,\\r\\n                    userAddress,\\r\\n                    remainingAmount,\\r\\n                    0,\\r\\n                    currentRound - 1,\\r\\n                    false\\r\\n                );\\r\\n                emit Deposit(\\r\\n                    _optionId,\\r\\n                    userAddress,\\r\\n                    currentRound - 1,\\r\\n                    remainingAmount\\r\\n                );\\r\\n            }\\r\\n\\r\\n            userState.assetToTerminate = 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcec0607a0a7518d523333d910958f16768f9ea0afa98dd4c937df8026ebca287\",\"license\":\"MIT\"},\"contracts/HodlBoosterOptionUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\nimport {\\r\\n    OwnableUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport {HodlBoosterOption} from \\\"./HodlBoosterOption.sol\\\";\\r\\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";\\r\\ncontract HodlBoosterOptionUpgradeable is OwnableUpgradeable, HodlBoosterOption {\\r\\n    function initialize( \\r\\n        address _owner,\\r\\n        address _admin,\\r\\n        address _manager,\\r\\n         StructureData.OptionPairDefinition[] memory _optionPairDefinitions\\r\\n    ) external initializer { \\r\\n \\r\\n        __Ownable_init();\\r\\n        \\r\\n        require(_owner != address(0));\\r\\n        require(_admin != address(0));\\r\\n        require(_manager != address(0));\\r\\n        transferOwnership(_owner);\\r\\n        adminRoleAddress = _admin;\\r\\n        managerRoleAddress = _manager;\\r\\n        locked = 0;\\r\\n        addOptionPairsInternal(_optionPairDefinitions);  \\r\\n    }\\r\\n    function setManager(address _manager) external onlyOwner{\\r\\n        setManagerInternal(_manager);\\r\\n    }  \\r\\n\\r\\n    function setAdmin(address _admin) external onlyOwner{\\r\\n        setAdminInternal(_admin);\\r\\n    }   \\r\\n    function addOptionPairs(StructureData.OptionPairDefinition[] memory _optionPairDefinitions) external onlyAdmin{\\r\\n        addOptionPairsInternal(_optionPairDefinitions);\\r\\n    }\\r\\n\\r\\n}\\r\\n \",\"keccak256\":\"0xfa5a13e3cf78bc577310c844d24abcc7048dd2f3592b77bd0703bb6ab2e0d285\",\"license\":\"MIT\"},\"contracts/OptionVaultBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\"; \\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";\\r\\nimport {Utils} from \\\"./libraries/Utils.sol\\\";\\r\\nimport {OptionLifecycle} from \\\"./libraries/OptionLifecycle.sol\\\";\\r\\nimport {OptionVaultStorage} from \\\"./storage/OptionVaultStorage.sol\\\";\\r\\nimport \\\"./interfaces/ISettlementAggregator.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\n\\r\\nabstract contract OptionVaultBase is\\r\\n    OptionVaultStorage, \\r\\n    ISettlementAggregator\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n    using Utils for uint256;\\r\\n    using SafeCast for uint256;\\r\\n    using SafeCast for int256;\\r\\n\\r\\n    event ManagerChanged(address indexed oldManager, address indexed newManager); \\r\\n\\r\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin); \\r\\n\\r\\n\\r\\n    function clientWithdraw(\\r\\n        address _target,\\r\\n        uint256 _amount,\\r\\n        address _contractAddress,\\r\\n        bool _redeem\\r\\n    ) internal lock {\\r\\n        if (!_redeem) {\\r\\n            require(balanceEnough(_contractAddress));\\r\\n        }\\r\\n        OptionLifecycle.withdraw(_target, _amount, _contractAddress);\\r\\n    }\\r\\n    function setAdminInternal(address _admin) internal {\\r\\n        address oldAdminAddress = adminRoleAddress;\\r\\n        adminRoleAddress = _admin;\\r\\n        emit AdminChanged(oldAdminAddress, _admin);\\r\\n    }  \\r\\n    function setManagerInternal(address _manager) internal {\\r\\n        address oldManagerAddress = managerRoleAddress;\\r\\n        managerRoleAddress = _manager;\\r\\n        emit ManagerChanged(oldManagerAddress, _manager);\\r\\n    }  \\r\\n    function addOptionPairsInternal(\\r\\n        StructureData.OptionPairDefinition[] memory _optionPairDefinitions\\r\\n    ) internal { \\r\\n        uint256 length = _optionPairDefinitions.length;\\r\\n        uint8 optionPairCount_ = optionPairCount;\\r\\n        uint8 assetCount_ = assetCount;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            StructureData.OptionPairDefinition\\r\\n                memory pair = _optionPairDefinitions[i];\\r\\n            pair.callOptionId = optionPairCount_ * 2 + 1;\\r\\n            pair.putOptionId = pair.callOptionId + 1;\\r\\n            optionPairs[optionPairCount_++] = pair;\\r\\n            if (assetCount_ == 0) {\\r\\n                asset[assetCount_++] = pair.depositAsset;\\r\\n                asset[assetCount_++] = pair.counterPartyAsset;\\r\\n            } else {\\r\\n                bool callAdded = false;\\r\\n                bool putAdded = false;\\r\\n                for (uint8 j = 0; j < assetCount_; j++) {\\r\\n                    if (asset[j] == pair.depositAsset) {\\r\\n                        callAdded = true;\\r\\n                    }\\r\\n                    if (asset[j] == pair.counterPartyAsset) {\\r\\n                        putAdded = true;\\r\\n                    }\\r\\n                }\\r\\n                if (!callAdded) {\\r\\n                    asset[assetCount_++] = pair.depositAsset;\\r\\n                }\\r\\n                if (!putAdded) {\\r\\n                    asset[assetCount_++] = pair.counterPartyAsset;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        optionPairCount = optionPairCount_;\\r\\n        assetCount = assetCount_;\\r\\n    }\\r\\n\\r\\n\\r\\n    function toggleOptionPairDeposit(uint8 _pairId) external override onlyAdmin {\\r\\n        StructureData.OptionPairDefinition storage pair = optionPairs[_pairId];\\r\\n        pair.manualDepositDisabled = !pair.manualDepositDisabled;\\r\\n    }\\r\\n    \\r\\n    function initiateSettlement() external override onlyAdmin { \\r\\n        require(!underSettlement);\\r\\n        currentRound = currentRound + 1;\\r\\n        underSettlement = true;\\r\\n        for (uint8 i = 0; i < optionPairCount; i++) {\\r\\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\\r\\n            StructureData.OptionData storage callOption = optionData[\\r\\n                pair.callOptionId\\r\\n            ];\\r\\n            uint128 pending1 = OptionLifecycle.rollToNextByOption(\\r\\n                callOption,\\r\\n                currentRound,\\r\\n                true\\r\\n            );\\r\\n            StructureData.OptionData storage putOption = optionData[\\r\\n                pair.putOptionId\\r\\n            ];\\r\\n            uint128 pending2 = OptionLifecycle.rollToNextByOption(\\r\\n                putOption,\\r\\n                currentRound,\\r\\n                false\\r\\n            );\\r\\n            if (pending1 > 0) {\\r\\n                assetData[pair.depositAsset].depositAmount = uint256(assetData[\\r\\n                    pair.depositAsset\\r\\n                ].depositAmount).add(pending1).toUint128();\\r\\n            }\\r\\n            if (pending2 > 0) {\\r\\n                assetData[pair.counterPartyAsset].depositAmount = uint256(assetData[\\r\\n                    pair.counterPartyAsset\\r\\n                ].depositAmount).add(pending2).toUint128();\\r\\n            }\\r\\n            if (currentRound <= 2) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            StructureData.SettlementAccountingResult\\r\\n                memory noneExecuteCallOption = OptionLifecycle\\r\\n                    .dryRunSettlementByOption(\\r\\n                        callOption, \\r\\n                        true,\\r\\n                        pair.depositAssetAmountDecimals,\\r\\n                        pair.counterPartyAssetAmountDecimals,\\r\\n                        currentRound,\\r\\n                        false\\r\\n                    );\\r\\n            StructureData.SettlementAccountingResult\\r\\n                memory noneExecutePutOption = OptionLifecycle\\r\\n                    .dryRunSettlementByOption(\\r\\n                        putOption, \\r\\n                        false,\\r\\n                        pair.counterPartyAssetAmountDecimals,\\r\\n                        pair.depositAssetAmountDecimals,\\r\\n                        currentRound,\\r\\n                        false\\r\\n                    );\\r\\n\\r\\n            StructureData.OptionPairExecutionAccountingResult\\r\\n                memory pairResult = StructureData\\r\\n                    .OptionPairExecutionAccountingResult({\\r\\n                        execute: StructureData.OptionExecution.NoExecution,\\r\\n                        callOptionResult: noneExecuteCallOption,\\r\\n                        putOptionResult: noneExecutePutOption\\r\\n                    });\\r\\n            executionAccountingResult[i * 3] = pairResult;\\r\\n            StructureData.SettlementAccountingResult\\r\\n                memory executeCallOption = OptionLifecycle\\r\\n                    .dryRunSettlementByOption(\\r\\n                        callOption, \\r\\n                        true,\\r\\n                        pair.depositAssetAmountDecimals,\\r\\n                        pair.counterPartyAssetAmountDecimals,\\r\\n                        currentRound,\\r\\n                        true\\r\\n                    );\\r\\n            pairResult = StructureData.OptionPairExecutionAccountingResult({\\r\\n                execute: StructureData.OptionExecution.ExecuteCall,\\r\\n                callOptionResult: executeCallOption,\\r\\n                putOptionResult: noneExecutePutOption\\r\\n            });\\r\\n            executionAccountingResult[i * 3 + 1] = pairResult;\\r\\n\\r\\n            StructureData.SettlementAccountingResult\\r\\n                memory executePutOption = OptionLifecycle\\r\\n                    .dryRunSettlementByOption(\\r\\n                        putOption, \\r\\n                        false,\\r\\n                        pair.counterPartyAssetAmountDecimals,\\r\\n                        pair.depositAssetAmountDecimals,\\r\\n                        currentRound,\\r\\n                        true\\r\\n                    );\\r\\n            pairResult = StructureData.OptionPairExecutionAccountingResult({\\r\\n                execute: StructureData.OptionExecution.ExecutePut,\\r\\n                callOptionResult: noneExecuteCallOption,\\r\\n                putOptionResult: executePutOption\\r\\n            });\\r\\n            executionAccountingResult[i * 3 + 2] = pairResult;\\r\\n        }\\r\\n\\r\\n        if (currentRound == 1) {\\r\\n            underSettlement = false;\\r\\n            return;\\r\\n        }\\r\\n        if (currentRound == 2) {\\r\\n            for(uint8 i = 1; i <= optionPairCount * 2; i++) { \\r\\n                OptionLifecycle.commitByOption(optionData[i], 1); \\r\\n            }            \\r\\n            updateAsset();\\r\\n            underSettlement = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function settle(StructureData.OptionExecution[] memory _execution)\\r\\n        external\\r\\n        override \\r\\n        onlyManager\\r\\n    { \\r\\n        require(underSettlement);\\r\\n        uint256 count = _execution.length;\\r\\n        require(count == optionPairCount);\\r\\n        uint16 previousRound = currentRound - 1;\\r\\n        for (uint8 i = 0; i < count; i++) {\\r\\n            StructureData.OptionExecution execution = _execution[i];\\r\\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\\r\\n\\r\\n            StructureData.OptionData storage callOption = optionData[\\r\\n                pair.callOptionId\\r\\n            ];\\r\\n            StructureData.OptionData storage putOption = optionData[\\r\\n                pair.putOptionId\\r\\n            ];\\r\\n            StructureData.MaturedState memory maturedState;\\r\\n            StructureData.OptionState\\r\\n                storage previousCallOptionState = callOption.optionStates[\\r\\n                    previousRound - 1\\r\\n                ];\\r\\n            if (previousCallOptionState.totalAmount > 0) { \\r\\n                maturedState = OptionLifecycle.closePreviousByOption(\\r\\n                    callOption,\\r\\n                    previousCallOptionState,\\r\\n                    true,\\r\\n                    pair.depositAssetAmountDecimals,\\r\\n                    pair.counterPartyAssetAmountDecimals,\\r\\n                    execution == StructureData.OptionExecution.ExecuteCall\\r\\n                );\\r\\n                if (maturedState.releasedDepositAssetAmount > 0) {\\r\\n                    assetData[pair.depositAsset].releasedAmount = uint256(assetData[\\r\\n                        pair.depositAsset\\r\\n                    ].releasedAmount).add(\\r\\n                            maturedState.releasedDepositAssetAmountWithPremium\\r\\n                        ).toUint128();\\r\\n                } else if (maturedState.releasedCounterPartyAssetAmount > 0) {\\r\\n                    assetData[pair.counterPartyAsset]\\r\\n                        .releasedAmount = uint256(assetData[pair.counterPartyAsset]\\r\\n                        .releasedAmount)\\r\\n                        .add(\\r\\n                            maturedState\\r\\n                                .releasedCounterPartyAssetAmountWithPremium\\r\\n                        ).toUint128();\\r\\n                }\\r\\n                if (execution == StructureData.OptionExecution.ExecuteCall) {\\r\\n                    autoRollToCounterPartyByOption(\\r\\n                        callOption,\\r\\n                        previousCallOptionState,\\r\\n                        putOption,\\r\\n                        pair.putOptionId,\\r\\n                        maturedState.releasedCounterPartyAssetAmountWithPremium,\\r\\n                        maturedState.autoRollCounterPartyAssetAmountWithPremium\\r\\n                    );\\r\\n                } else {\\r\\n                    autoRollByOption(\\r\\n                        callOption,\\r\\n                        pair.callOptionId,\\r\\n                        previousCallOptionState,\\r\\n                        maturedState.releasedDepositAssetAmountWithPremium,\\r\\n                        maturedState.autoRollDepositAssetAmountWithPremium\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n\\r\\n            StructureData.OptionState storage previousPutOptionState = putOption\\r\\n                .optionStates[previousRound - 1];\\r\\n\\r\\n            if (previousPutOptionState.totalAmount > 0) { \\r\\n                maturedState = OptionLifecycle.closePreviousByOption(\\r\\n                    putOption,\\r\\n                    previousPutOptionState,\\r\\n                    false,\\r\\n                    pair.counterPartyAssetAmountDecimals,\\r\\n                    pair.depositAssetAmountDecimals,\\r\\n                    execution == StructureData.OptionExecution.ExecutePut\\r\\n                );\\r\\n                if (maturedState.releasedDepositAssetAmount > 0) {\\r\\n                    assetData[pair.counterPartyAsset]\\r\\n                        .releasedAmount = uint256(assetData[pair.counterPartyAsset]\\r\\n                        .releasedAmount)\\r\\n                        .add(\\r\\n                            maturedState.releasedDepositAssetAmountWithPremium\\r\\n                        ).toUint128();\\r\\n                } else if (maturedState.releasedCounterPartyAssetAmount > 0) {\\r\\n                    assetData[pair.depositAsset].releasedAmount = uint256(assetData[\\r\\n                        pair.depositAsset\\r\\n                    ].releasedAmount).add(\\r\\n                            maturedState\\r\\n                                .releasedCounterPartyAssetAmountWithPremium\\r\\n                        ).toUint128();\\r\\n                }\\r\\n                if (execution == StructureData.OptionExecution.ExecutePut) {\\r\\n                    autoRollToCounterPartyByOption(\\r\\n                        putOption,\\r\\n                        previousPutOptionState,\\r\\n                        callOption,\\r\\n                        pair.callOptionId,\\r\\n                        maturedState.releasedCounterPartyAssetAmountWithPremium,\\r\\n                        maturedState.autoRollCounterPartyAssetAmountWithPremium\\r\\n                    );\\r\\n                } else {\\r\\n                    autoRollByOption(\\r\\n                        putOption,\\r\\n                        pair.putOptionId,\\r\\n                        previousPutOptionState,\\r\\n                        maturedState.releasedDepositAssetAmountWithPremium,\\r\\n                        maturedState.autoRollDepositAssetAmountWithPremium\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n            OptionLifecycle.commitByOption(callOption, previousRound);\\r\\n            OptionLifecycle.commitByOption(putOption, previousRound);\\r\\n        }\\r\\n\\r\\n        updateAsset();\\r\\n        underSettlement = false;\\r\\n    }\\r\\n\\r\\n    function updateAsset() private {\\r\\n        for (uint8 i = 0; i < assetCount; i++) {\\r\\n            address assetAddress = asset[i];\\r\\n            StructureData.AssetData storage assetSubData = assetData[\\r\\n                assetAddress\\r\\n            ];\\r\\n            //no snaphot previously, so, no balance change \\r\\n            StructureData.SettlementCashflowResult\\r\\n                memory instruction = StructureData.SettlementCashflowResult({\\r\\n                    newReleasedAmount: assetSubData.releasedAmount,\\r\\n                    newDepositAmount: assetSubData.depositAmount,\\r\\n                    leftOverAmount: assetSubData.leftOverAmount,\\r\\n                    contractAddress: assetAddress\\r\\n                });\\r\\n            settlementCashflowResult[assetAddress] = instruction;\\r\\n            //todo: check overflow\\r\\n            assetSubData.leftOverAmount =\\r\\n                int128(assetSubData.leftOverAmount +\\r\\n                int128(assetSubData.depositAmount) -\\r\\n                int128(assetSubData.releasedAmount));\\r\\n            assetSubData.depositAmount = 0;\\r\\n            assetSubData.releasedAmount = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setOptionParameters(\\r\\n        uint256[] memory _parameters\\r\\n    ) external override onlyAdmin { \\r\\n        uint256 count = _parameters.length; \\r\\n        require(!underSettlement);\\r\\n        require(currentRound > 1);\\r\\n        require(count == optionPairCount*2);\\r\\n        for (uint8 i = 0; i < count; i++) {\\r\\n            uint256 parameter = _parameters[i];\\r\\n            StructureData.OptionState storage optionState = optionData[i+1].optionStates[currentRound - 1];\\r\\n            OptionLifecycle.setOptionParameters(parameter, optionState); \\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    function withdrawAssets() external override lock onlyManager{  \\r\\n        for(uint8 i = 0; i < assetCount; i++) {\\r\\n            StructureData.AssetData storage assetSubData = assetData[asset[i]];\\r\\n            if (assetSubData.leftOverAmount <= 0) continue;\\r\\n            uint128 leftOver = uint128(assetSubData.leftOverAmount);\\r\\n            OptionLifecycle.withdraw(msg.sender, uint256(leftOver), asset[i]); \\r\\n            assetSubData.leftOverAmount = 0;\\r\\n        }  \\r\\n    }\\r\\n    \\r\\n    //todo: improve performance later\\r\\n    function sendBackAssets() external payable override lock onlyManager{  \\r\\n        for(uint8 i = 0; i < assetCount; i++) {\\r\\n            StructureData.AssetData storage assetSubData = assetData[asset[i]];  \\r\\n            if (assetSubData.leftOverAmount >= 0) continue;\\r\\n            uint128 needed = uint128(-assetSubData.leftOverAmount);\\r\\n\\r\\n            if (asset[i] == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\\r\\n                require(needed >= msg.value, \\\"Not enough eth\\\");\\r\\n                //transfer back extra\\r\\n                if (needed > msg.value) {\\r\\n                    payable(msg.sender).transfer(needed - msg.value);\\r\\n                }\\r\\n            } else {\\r\\n                IERC20(asset[i]).safeTransferFrom(\\r\\n                    msg.sender,\\r\\n                    address(this), \\r\\n                    needed\\r\\n                );\\r\\n            }  \\r\\n            assetSubData.leftOverAmount = 0;\\r\\n        } \\r\\n    }\\r\\n    \\r\\n\\r\\n    function balanceEnough(address _asset) public view override returns (bool) {\\r\\n        StructureData.AssetData storage assetSubData = assetData[_asset]; \\r\\n        return assetSubData.leftOverAmount >= 0;\\r\\n    }\\r\\n\\r\\n  \\r\\n    modifier lock {\\r\\n        require(locked == 0, \\\"locked\\\");\\r\\n        locked = 1;\\r\\n        _;\\r\\n        locked = 0;\\r\\n    }\\r\\n    modifier onlyManager() {\\r\\n         require(managerRoleAddress == msg.sender, \\\"!manager\\\"); \\r\\n         _;\\r\\n    }\\r\\n    modifier onlyAdmin() {\\r\\n         require(adminRoleAddress == msg.sender, \\\"!admin\\\"); \\r\\n         _;\\r\\n    }\\r\\n    function autoRollToCounterPartyByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        StructureData.OptionState storage _optionState,\\r\\n        StructureData.OptionData storage _counterPartyOption,\\r\\n        uint8 _counterPartyOptionId,\\r\\n        uint256 _totalReleased,\\r\\n        uint256 _totalAutoRoll\\r\\n    ) internal virtual;\\r\\n\\r\\n    function autoRollByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        uint8 _optionId,\\r\\n        StructureData.OptionState storage _optionState,\\r\\n        uint256 _totalReleased,\\r\\n        uint256 _totalAutoRoll\\r\\n    ) internal virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0xe87f3aac9186fc56318fb1ba8651f0998e64cdff123984a82521cbcdc175d1d1\",\"license\":\"MIT\"},\"contracts/interfaces/IPKKTStructureOption.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity =0.8.4;\\r\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";\\r\\n \\r\\ninterface IPKKTStructureOption {\\r\\n \\r\\n     event Deposit(uint8 indexed optionId, address indexed account, uint16 indexed round, uint256 amount);\\r\\n     event Withdraw(uint8 indexed optionId, address indexed account, address indexed asset, uint256 amount);\\r\\n     //event CloseOption(uint8 indexed optionId, uint16 indexed round);\\r\\n     //event CommitOption(uint8 indexed optionId, uint16 indexed round);\\r\\n     //event OpenOption(uint8 indexed optionId, uint16 indexed round);\\r\\n     //event OptionCreated(uint8 indexed optionId, string name);\\r\\n     //event OptionTransfer(uint8 indexed optionId, address indexed account, uint16 premium, uint16 round);\\r\\n\\r\\n    function getAccountBalance(uint8 _optionId) external view returns (StructureData.UserBalance memory); \\r\\n\\r\\n    //ISettlementAggregator.balanceEnough needs to be called if there is any release amount\\r\\n    function getOptionSnapShot(uint8 _optionId) external view returns(StructureData.OptionSnapshot memory); \\r\\n\\r\\n    //deposit eth\\r\\n    function depositETH(uint8 _optionId) external payable;\\r\\n\\r\\n    //deposit other erc20 coin, take wbtc or stable coin\\r\\n    function deposit(uint8 _optionId, uint256 _amount) external;\\r\\n\\r\\n    //complete withdraw happens on the option vault\\r\\n    function initiateWithraw(uint8 _optionId, uint256 _assetToTerminate) external; \\r\\n\\r\\n    function cancelWithdraw(uint8 _optionId, uint256 _assetToTerminate) external;\\r\\n \\r\\n    \\r\\n    function withdraw(uint8 _optionId, uint256 _amount, address _asset) external; \\r\\n \\r\\n \\r\\n\\r\\n    //used to render the history at client side, reading the minting transactions of a specific address,\\r\\n    //for each transaction, read the blockheight and call this method to get the result\\r\\n    //the blockheight is the the height when the round is committed \\r\\n    //function getRoundDataByBlock(uint8 _optionId, uint256 _blockHeight) external view returns(StructureData.OptionState memory);\\r\\n\\r\\n    function getOptionStateByRound(uint8 _optionId, uint16 _round) external view returns(StructureData.OptionState memory);\\r\\n \\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x5a6076a3a5952903c066f1c9405095937952e83c251c4b165455b7c226982ed8\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISettlementAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity =0.8.4;\\r\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";  \\r\\n\\r\\ninterface ISettlementAggregator {\\r\\n         \\r\\n    \\r\\n    function toggleOptionPairDeposit(uint8 _pairId) external; \\r\\n    \\r\\n    //rollToNext + dryRunSettlement\\r\\n    //todo: specifying quota\\r\\n    function initiateSettlement() external; \\r\\n\\r\\n    //closePrevious + calculate cash flow \\r\\n    function settle(StructureData.OptionExecution[] memory _execution) external;\\r\\n\\r\\n    function setOptionParameters(uint256[] memory _paramters) external;\\r\\n\\r\\n    function withdrawAssets() external;\\r\\n    \\r\\n    function sendBackAssets() payable external;\\r\\n\\r\\n    function balanceEnough(address _asset) external view returns(bool); \\r\\n}\",\"keccak256\":\"0xa86908c4acf69f3991425444eacb4d2a0a61d04c3e8e62d7af90fe0fac3de9ce\",\"license\":\"UNLICENSED\"},\"contracts/libraries/OptionLifecycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./Utils.sol\\\";\\r\\nimport \\\"./StructureData.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\n\\r\\nlibrary OptionLifecycle {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Utils for uint128;\\r\\n    using Utils for uint256;\\r\\n    using SafeMath for uint256;\\r\\n    using SafeCast for uint256;\\r\\n    using StructureData for StructureData.UserState;\\r\\n\\r\\n    function deriveVirtualLocked(\\r\\n        StructureData.UserState memory userState,\\r\\n        uint16 premiumRate\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 onGoing = uint256(userState.ongoingAsset);\\r\\n        if (onGoing == 0) {\\r\\n            return uint256(userState.tempLocked);\\r\\n        }\\r\\n        onGoing = (onGoing.sub(userState.assetToTerminate)).withPremium(\\r\\n            premiumRate\\r\\n        );\\r\\n        if (userState.tempLocked == 0) {\\r\\n            return onGoing;\\r\\n        }\\r\\n        return uint256(userState.tempLocked).add(onGoing);\\r\\n    }\\r\\n\\r\\n    function getAvailableBalance(address _asset, address _source)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (_asset != address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\\r\\n            return IERC20(_asset).balanceOf(_source);\\r\\n        } else {\\r\\n            return _source.balance;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        address _target,\\r\\n        uint256 _amount,\\r\\n        address _contractAddress\\r\\n    ) external {\\r\\n        require(_amount > 0, \\\"!amt\\\");\\r\\n        if (_contractAddress == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\\r\\n            payable(_target).transfer(_amount);\\r\\n        } else {\\r\\n            IERC20(_contractAddress).safeTransfer(_target, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateMaturity(\\r\\n        bool _execute,\\r\\n        StructureData.OptionState memory _optionState,\\r\\n        bool _callOrPut,\\r\\n        uint8 _depositAssetAmountDecimals,\\r\\n        uint8 _counterPartyAssetAmountDecimals\\r\\n    ) public pure returns (StructureData.MaturedState memory) {\\r\\n        StructureData.MaturedState memory state = StructureData.MaturedState({\\r\\n            releasedDepositAssetAmount: 0,\\r\\n            releasedDepositAssetPremiumAmount: 0,\\r\\n            releasedDepositAssetAmountWithPremium: 0,\\r\\n            autoRollDepositAssetAmount: 0,\\r\\n            autoRollDepositAssetPremiumAmount: 0,\\r\\n            autoRollDepositAssetAmountWithPremium: 0,\\r\\n            releasedCounterPartyAssetAmount: 0,\\r\\n            releasedCounterPartyAssetPremiumAmount: 0,\\r\\n            releasedCounterPartyAssetAmountWithPremium: 0,\\r\\n            autoRollCounterPartyAssetAmount: 0,\\r\\n            autoRollCounterPartyAssetPremiumAmount: 0,\\r\\n            autoRollCounterPartyAssetAmountWithPremium: 0\\r\\n        });\\r\\n        if (_execute) {\\r\\n            uint256 maturedCounterPartyAssetAmount = \\r\\n                _callOrPut\\r\\n                    ? uint256(_optionState.totalAmount)\\r\\n                        .mul(_optionState.strikePrice)\\r\\n                        .mul(10**_counterPartyAssetAmountDecimals)\\r\\n                        .div(\\r\\n                            10 **\\r\\n                                (StructureData.PRICE_PRECISION +\\r\\n                                    _depositAssetAmountDecimals)\\r\\n                        )\\r\\n                    : uint256(_optionState.totalAmount)\\r\\n                        .mul(\\r\\n                            10 **\\r\\n                                (StructureData.PRICE_PRECISION +\\r\\n                                    _counterPartyAssetAmountDecimals)\\r\\n                        )\\r\\n                        .div(_optionState.strikePrice)\\r\\n                        .div(10**_depositAssetAmountDecimals);\\r\\n\\r\\n            uint256 maturedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetAmount\\r\\n                    .premium(_optionState.premiumRate);\\r\\n            if (_optionState.totalTerminate > 0) {\\r\\n                state\\r\\n                    .releasedCounterPartyAssetAmount = maturedCounterPartyAssetAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state\\r\\n                    .releasedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetPremiumAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state.releasedCounterPartyAssetAmountWithPremium =\\r\\n                    state.releasedCounterPartyAssetAmount.add(\\r\\n                    state.releasedCounterPartyAssetPremiumAmount);\\r\\n            }\\r\\n            state.autoRollCounterPartyAssetAmount =\\r\\n                maturedCounterPartyAssetAmount.sub(\\r\\n                state.releasedCounterPartyAssetAmount);\\r\\n            state.autoRollCounterPartyAssetPremiumAmount =\\r\\n                maturedCounterPartyAssetPremiumAmount.sub(\\r\\n                state.releasedCounterPartyAssetPremiumAmount);\\r\\n            state.autoRollCounterPartyAssetAmountWithPremium =\\r\\n                state.autoRollCounterPartyAssetAmount.add(\\r\\n                state.autoRollCounterPartyAssetPremiumAmount);\\r\\n        } else {\\r\\n            uint256 maturedDepositAssetAmount = uint256(_optionState.totalAmount);\\r\\n            uint256 maturedDepositAssetPremiumAmount = maturedDepositAssetAmount\\r\\n                .premium(_optionState.premiumRate);\\r\\n            if (_optionState.totalTerminate > 0) {\\r\\n                state.releasedDepositAssetAmount = maturedDepositAssetAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state\\r\\n                    .releasedDepositAssetPremiumAmount = maturedDepositAssetPremiumAmount\\r\\n                    .getAmountToTerminate(\\r\\n                        _optionState.totalTerminate,\\r\\n                        _optionState.totalAmount\\r\\n                    );\\r\\n                state.releasedDepositAssetAmountWithPremium =\\r\\n                    state.releasedDepositAssetAmount.add(\\r\\n                    state.releasedDepositAssetPremiumAmount);\\r\\n            }\\r\\n            state.autoRollDepositAssetAmount =\\r\\n                maturedDepositAssetAmount.sub(\\r\\n                state.releasedDepositAssetAmount);\\r\\n            state.autoRollDepositAssetPremiumAmount =\\r\\n                maturedDepositAssetPremiumAmount.sub(\\r\\n                state.releasedDepositAssetPremiumAmount);\\r\\n            state.autoRollDepositAssetAmountWithPremium =\\r\\n                state.autoRollDepositAssetAmount.add(\\r\\n                state.autoRollDepositAssetPremiumAmount);\\r\\n        }\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function commitByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        uint16 _roundToCommit\\r\\n    ) external {\\r\\n        uint256 userCount = _option.usersInvolved.length;\\r\\n        for (uint256 i = 0; i < userCount; i++) {\\r\\n            StructureData.UserState storage userState = _option.userStates[\\r\\n                _option.usersInvolved[i]\\r\\n            ];\\r\\n            if (userState.assetToTerminateForNextRound != 0) {\\r\\n                userState.assetToTerminate = userState\\r\\n                    .assetToTerminateForNextRound;\\r\\n                userState.assetToTerminateForNextRound = 0;\\r\\n            } else if (userState.assetToTerminate != 0) {\\r\\n                userState.assetToTerminate = 0;\\r\\n            }\\r\\n            if (userState.tempLocked == 0) {\\r\\n                userState.ongoingAsset = 0;\\r\\n                continue;\\r\\n            }\\r\\n            userState.ongoingAsset = userState.tempLocked;\\r\\n            userState.tempLocked = 0;\\r\\n        } \\r\\n        _option.optionStates[_roundToCommit].totalTerminate = uint256(_option\\r\\n            .optionStates[_roundToCommit]\\r\\n            .totalTerminate)\\r\\n            .add(_option.assetToTerminateForNextRound).toUint128();\\r\\n        _option.assetToTerminateForNextRound = 0;\\r\\n    }\\r\\n\\r\\n    function rollToNextByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        uint16 _currentRound,\\r\\n        bool _callOrPut\\r\\n    ) external returns (uint128 _pendingAmount) { \\r\\n        StructureData.OptionState memory currentOption = StructureData\\r\\n            .OptionState({\\r\\n                round: _currentRound,\\r\\n                totalAmount: 0,\\r\\n                totalTerminate: 0,\\r\\n                premiumRate: 0,\\r\\n                strikePrice: 0,\\r\\n                executed: false,\\r\\n                callOrPut: _callOrPut\\r\\n            });\\r\\n        _option.optionStates[_currentRound] = currentOption;\\r\\n        if (_currentRound > 1) {\\r\\n            uint256 userCount = _option.usersInvolved.length;\\r\\n            for (uint256 i = 0; i < userCount; i++) {\\r\\n                StructureData.UserState storage userState = _option.userStates[\\r\\n                    _option.usersInvolved[i]\\r\\n                ];\\r\\n                if (userState.pendingAsset != 0) {\\r\\n                    userState.tempLocked = userState.pendingAsset;\\r\\n                }\\r\\n                userState.pendingAsset = 0;\\r\\n            }\\r\\n        } \\r\\n        return\\r\\n            _currentRound > 1\\r\\n                ? _option.optionStates[_currentRound - 1].totalAmount\\r\\n                : 0;\\r\\n    }\\r\\n\\r\\n    function dryRunSettlementByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        bool _isCall,\\r\\n        uint8 _depositAssetAmountDecimals,\\r\\n        uint8 _counterPartyAssetAmountDecimals,\\r\\n        uint16 _currentRound,\\r\\n        bool _execute\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (StructureData.SettlementAccountingResult memory _result)\\r\\n    {\\r\\n        StructureData.SettlementAccountingResult memory result = StructureData\\r\\n            .SettlementAccountingResult({ \\r\\n                depositAmount: _option\\r\\n                    .optionStates[_currentRound - 1]\\r\\n                    .totalAmount,\\r\\n                executed: _execute,\\r\\n                autoRollAmount: 0,\\r\\n                autoRollPremium: 0,\\r\\n                releasedAmount: 0,\\r\\n                releasedPremium: 0,\\r\\n                autoRollCounterPartyAmount: 0,\\r\\n                autoRollCounterPartyPremium: 0,\\r\\n                releasedCounterPartyAmount: 0,\\r\\n                releasedCounterPartyPremium: 0\\r\\n            });\\r\\n        if (_currentRound > 2) {\\r\\n            StructureData.OptionState storage previousOptionState = _option\\r\\n                .optionStates[_currentRound - 2];\\r\\n            if (previousOptionState.totalAmount == 0) {\\r\\n                return result;\\r\\n            }\\r\\n            StructureData.MaturedState memory maturedState = calculateMaturity(\\r\\n                _execute,\\r\\n                previousOptionState,\\r\\n                _isCall,\\r\\n                _depositAssetAmountDecimals,\\r\\n                _counterPartyAssetAmountDecimals\\r\\n            );\\r\\n            if (_execute) {\\r\\n                result.autoRollCounterPartyAmount = maturedState\\r\\n                    .autoRollCounterPartyAssetAmount.toUint128();\\r\\n                result.autoRollCounterPartyPremium = maturedState\\r\\n                    .autoRollCounterPartyAssetPremiumAmount.toUint128();\\r\\n                result.releasedCounterPartyAmount = maturedState\\r\\n                    .releasedCounterPartyAssetAmount.toUint128();\\r\\n                result.releasedCounterPartyPremium = maturedState\\r\\n                    .releasedCounterPartyAssetPremiumAmount.toUint128();\\r\\n            } else {\\r\\n                result.autoRollAmount = maturedState.autoRollDepositAssetAmount.toUint128();\\r\\n                result.autoRollPremium = maturedState\\r\\n                    .autoRollDepositAssetPremiumAmount.toUint128();\\r\\n                result.releasedAmount = maturedState.releasedDepositAssetAmount.toUint128();\\r\\n                result.releasedPremium = maturedState\\r\\n                    .releasedDepositAssetPremiumAmount.toUint128();\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function closePreviousByOption(\\r\\n        StructureData.OptionData storage _option,\\r\\n        StructureData.OptionState storage previousOptionState,\\r\\n        bool _isCall,\\r\\n        uint8 _depositAssetAmountDecimals,\\r\\n        uint8 _counterPartyAssetAmountDecimals,\\r\\n        bool _execute\\r\\n    ) external returns (StructureData.MaturedState memory _maturedState) {\\r\\n        //uint16 maturedRound = currentRound - 2;\\r\\n        StructureData.MaturedState memory maturedState = calculateMaturity(\\r\\n            _execute,\\r\\n            previousOptionState,\\r\\n            _isCall,\\r\\n            _depositAssetAmountDecimals,\\r\\n            _counterPartyAssetAmountDecimals\\r\\n        );\\r\\n        previousOptionState.executed = _execute;\\r\\n\\r\\n        if (_execute) {\\r\\n            _option.totalReleasedCounterPartyAssetAmount =uint256(_option\\r\\n                .totalReleasedCounterPartyAssetAmount)\\r\\n                .add(maturedState.releasedCounterPartyAssetAmountWithPremium).toUint128();\\r\\n        } else {\\r\\n            _option.totalReleasedDepositAssetAmount = uint256(_option\\r\\n                .totalReleasedDepositAssetAmount)\\r\\n                .add(maturedState.releasedDepositAssetAmountWithPremium).toUint128();\\r\\n        }\\r\\n        return maturedState;\\r\\n    }\\r\\n    /*\\r\\n        struct OptionParameters { \\r\\n        uint128 strikePrice; // strike price if executed\\r\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\r\\n    }\\r\\n*/\\r\\n    function setOptionParameters(uint256 _parameters, StructureData.OptionState storage _optionState) external {\\r\\n \\r\\n        require(_optionState.strikePrice == 0); \\r\\n        _optionState.strikePrice = uint128(_parameters >> 16);\\r\\n        _optionState.premiumRate = uint16(_parameters & 0xffff);     \\r\\n    }\\r\\n    function getAccountBalance(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external view returns (StructureData.UserBalance memory) {\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n\\r\\n        StructureData.UserBalance memory result = StructureData.UserBalance({\\r\\n            pendingDepositAssetAmount: userState.pendingAsset,\\r\\n            releasedDepositAssetAmount: userState.releasedDepositAssetAmount,\\r\\n            releasedCounterPartyAssetAmount: userState\\r\\n                .releasedCounterPartyAssetAmount,\\r\\n            lockedDepositAssetAmount: 0,\\r\\n            terminatingDepositAssetAmount: 0,\\r\\n            toTerminateDepositAssetAmount: 0\\r\\n        });\\r\\n        if (_underSettlement) {\\r\\n            if (_currentRound > 2) {\\r\\n                //when there are maturing round waiting for settlement, it becomes complex\\r\\n                uint16 premiumRate = _option\\r\\n                    .optionStates[_currentRound - 2]\\r\\n                    .premiumRate;\\r\\n                result.lockedDepositAssetAmount = deriveVirtualLocked(\\r\\n                    userState,\\r\\n                    premiumRate\\r\\n                ).toUint128();\\r\\n                result.terminatingDepositAssetAmount = uint256(userState\\r\\n                    .assetToTerminate)\\r\\n                    .withPremium(premiumRate).toUint128();\\r\\n            } else {\\r\\n                result.lockedDepositAssetAmount = userState.tempLocked;\\r\\n            }\\r\\n            result.toTerminateDepositAssetAmount = userState\\r\\n                    .assetToTerminateForNextRound;\\r\\n        } else {\\r\\n            result.lockedDepositAssetAmount = userState.ongoingAsset;\\r\\n            result.toTerminateDepositAssetAmount = userState.assetToTerminate;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function getOptionSnapShot(\\r\\n        StructureData.OptionData storage _option,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external view returns (StructureData.OptionSnapshot memory) {\\r\\n        StructureData.OptionState memory lockedOption;\\r\\n        StructureData.OptionState memory onGoingOption;\\r\\n        StructureData.OptionSnapshot memory result = StructureData\\r\\n            .OptionSnapshot({\\r\\n                totalPending: _option.optionStates[_currentRound].totalAmount,\\r\\n                totalReleasedDeposit: _option.totalReleasedDepositAssetAmount,\\r\\n                totalReleasedCounterParty: _option\\r\\n                    .totalReleasedCounterPartyAssetAmount,\\r\\n                totalLocked: 0,\\r\\n                totalTerminating: 0,\\r\\n                totalToTerminate: 0\\r\\n            });\\r\\n        if (_underSettlement) {\\r\\n            lockedOption = _option.optionStates[_currentRound - 1];\\r\\n            result.totalToTerminate = _option.assetToTerminateForNextRound;\\r\\n            if (_currentRound > 2) {\\r\\n                //when there are maturing round waiting for settlement, it becomes complex\\r\\n                onGoingOption = _option.optionStates[_currentRound - 2];\\r\\n                result.totalTerminating = uint256(onGoingOption\\r\\n                    .totalTerminate)\\r\\n                    .withPremium(onGoingOption.premiumRate).toUint128();\\r\\n                result.totalLocked = uint256(lockedOption\\r\\n                    .totalAmount)\\r\\n                    .add(\\r\\n                        onGoingOption.totalAmount.withPremium(\\r\\n                            onGoingOption.premiumRate\\r\\n                        )\\r\\n                    )\\r\\n                    .sub(result.totalTerminating).toUint128();\\r\\n            } else {\\r\\n                result.totalLocked = lockedOption.totalAmount;\\r\\n            }\\r\\n        } else if (_currentRound > 1) {\\r\\n            onGoingOption = _option.optionStates[_currentRound - 1];\\r\\n            result.totalLocked = onGoingOption.totalAmount;\\r\\n            result.totalToTerminate = onGoingOption.totalTerminate;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function initiateWithrawStorage(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        uint256 _assetToTerminate,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external {\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n        if (_underSettlement) {\\r\\n            uint256 newAssetToTerminate = uint256(userState\\r\\n                .assetToTerminateForNextRound)\\r\\n                .add(_assetToTerminate);\\r\\n            if (_currentRound == 2) {\\r\\n                require(newAssetToTerminate <= userState.tempLocked);\\r\\n                StructureData.OptionState storage previousOption = _option\\r\\n                    .optionStates[_currentRound - 1];\\r\\n                previousOption.totalTerminate = uint256(previousOption\\r\\n                    .totalTerminate)\\r\\n                    .add(_assetToTerminate).toUint128();\\r\\n            } else {\\r\\n                StructureData.OptionState storage onGoingOption = _option\\r\\n                    .optionStates[_currentRound - 2];\\r\\n                uint256 totalLocked = deriveVirtualLocked(\\r\\n                    userState,\\r\\n                    onGoingOption.premiumRate\\r\\n                );\\r\\n                require(newAssetToTerminate <= totalLocked);\\r\\n                //store temporarily\\r\\n                _option.assetToTerminateForNextRound = uint256(_option\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .add(_assetToTerminate).toUint128();\\r\\n            }\\r\\n            userState.assetToTerminateForNextRound = newAssetToTerminate.toUint128();\\r\\n        } else {\\r\\n            uint256 newAssetToTerminate = uint256(userState.assetToTerminate).add(\\r\\n                _assetToTerminate\\r\\n            );\\r\\n            require(newAssetToTerminate <= userState.ongoingAsset);\\r\\n            userState.assetToTerminate = newAssetToTerminate.toUint128();\\r\\n            StructureData.OptionState storage previousOption = _option\\r\\n                .optionStates[_currentRound - 1];\\r\\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).add(\\r\\n                _assetToTerminate\\r\\n            ).toUint128();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function cancelWithdrawStorage(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        uint256 _assetToTerminate,\\r\\n        bool _underSettlement,\\r\\n        uint16 _currentRound\\r\\n    ) external {\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n        if (_underSettlement) {\\r\\n            userState.assetToTerminateForNextRound = uint256(userState\\r\\n                .assetToTerminateForNextRound)\\r\\n                .sub(_assetToTerminate).toUint128();\\r\\n            if (_currentRound == 2) {\\r\\n                StructureData.OptionState storage previousOption = _option\\r\\n                    .optionStates[_currentRound - 1];\\r\\n                previousOption.totalTerminate = uint256(previousOption\\r\\n                    .totalTerminate)\\r\\n                    .sub(_assetToTerminate).toUint128();\\r\\n            } else {\\r\\n                //store temporarily\\r\\n                _option.assetToTerminateForNextRound = uint256(_option\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .sub(_assetToTerminate).toUint128();\\r\\n            }\\r\\n        } else {\\r\\n            userState.assetToTerminate = uint256(userState.assetToTerminate).sub(\\r\\n                _assetToTerminate\\r\\n            ).toUint128();\\r\\n            StructureData.OptionState storage previousOption = _option\\r\\n                .optionStates[_currentRound - 1];\\r\\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).sub(\\r\\n                _assetToTerminate\\r\\n            ).toUint128();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawStorage(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _user,\\r\\n        uint256 _amount,\\r\\n        uint16 _currentRound,\\r\\n        bool _isDeposit\\r\\n    ) external {\\r\\n        //require(_amount > 0, \\\"!amount\\\");\\r\\n        StructureData.UserState storage userState = _option.userStates[_user];\\r\\n        if (_isDeposit) {\\r\\n            //todo: 0 out released amount if missing balance from trader\\r\\n            uint256 releasedAmount = uint256(userState.releasedDepositAssetAmount);\\r\\n            if (releasedAmount <= _amount) {\\r\\n                uint256 redeemAmount = _amount.sub(releasedAmount);\\r\\n                userState.pendingAsset = uint256(userState.pendingAsset).sub(\\r\\n                    redeemAmount\\r\\n                ).toUint128();\\r\\n                userState.releasedDepositAssetAmount = 0;\\r\\n                _option.totalReleasedDepositAssetAmount = uint256(_option\\r\\n                    .totalReleasedDepositAssetAmount)\\r\\n                    .sub(releasedAmount).toUint128();\\r\\n                StructureData.OptionState storage optionState = _option\\r\\n                    .optionStates[_currentRound];\\r\\n                optionState.totalAmount = uint256(optionState.totalAmount).sub(\\r\\n                    redeemAmount\\r\\n                ).toUint128();\\r\\n            } else {\\r\\n                userState.releasedDepositAssetAmount = releasedAmount.sub(\\r\\n                    _amount\\r\\n                ).toUint128();\\r\\n                _option.totalReleasedDepositAssetAmount = uint256(_option\\r\\n                    .totalReleasedDepositAssetAmount)\\r\\n                    .sub(_amount).toUint128();\\r\\n            }\\r\\n        } else {\\r\\n            //same result as completeWithdraw\\r\\n            userState.releasedCounterPartyAssetAmount = uint256(userState\\r\\n                .releasedCounterPartyAssetAmount)\\r\\n                .sub(_amount).toUint128();\\r\\n            _option.totalReleasedCounterPartyAssetAmount = uint256(_option\\r\\n                .totalReleasedCounterPartyAssetAmount)\\r\\n                .sub(_amount).toUint128();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function depositFor(\\r\\n        StructureData.OptionData storage _option,\\r\\n        address _userAddress,\\r\\n        uint256 _amount,\\r\\n        uint256 _toTerminate,\\r\\n        uint16 _round,\\r\\n        bool _isOpenRound\\r\\n    ) external {\\r\\n        //require(optionState.totalAmount + (_amount) <= quota[_optionId], \\\"Not enough quota\\\");\\r\\n\\r\\n        StructureData.OptionState storage optionState = _option.optionStates[\\r\\n            _round\\r\\n        ];\\r\\n        StructureData.UserState storage userState = _option.userStates[\\r\\n            _userAddress\\r\\n        ];\\r\\n        //first time added\\r\\n        if (!userState.hasState) {\\r\\n            userState.hasState = true;\\r\\n            _option.usersInvolved.push(_userAddress);\\r\\n        }\\r\\n        if (!_isOpenRound) {\\r\\n            userState.tempLocked = uint256(userState.tempLocked).add(_amount).toUint128();\\r\\n            if (_toTerminate > 0) {\\r\\n                userState.assetToTerminateForNextRound = uint256(userState\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .add(_toTerminate).toUint128();\\r\\n                _option.assetToTerminateForNextRound = uint256(_option\\r\\n                    .assetToTerminateForNextRound)\\r\\n                    .add(_toTerminate).toUint128();\\r\\n            }\\r\\n        } else {\\r\\n            userState.pendingAsset = uint256(userState.pendingAsset).add(_amount).toUint128();\\r\\n        }\\r\\n        optionState.totalAmount = uint256(optionState.totalAmount).add(_amount).toUint128();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xedcef17019c99c1be36be19c9fd9a9ea5ac5b71c0ecd226d26c3a69f48d2d922\",\"license\":\"MIT\"},\"contracts/libraries/StructureData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary StructureData { \\r\\n    uint8 public constant MATUREROUND = 1; //7 for daily settlement, 1 for daily settlement\\r\\n    uint8 public constant PRICE_PRECISION = 4;\\r\\n    struct OptionParameters { \\r\\n        uint128 strikePrice; // strike price if executed\\r\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\r\\n    }\\r\\n\\r\\n    struct OptionState {\\r\\n        uint128 totalAmount;\\r\\n        uint128 totalTerminate;\\r\\n        uint128 strikePrice;\\r\\n        uint16 round;\\r\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\r\\n        bool executed;\\r\\n        bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral;\\r\\n    }\\r\\n\\r\\n    struct MaturedState {\\r\\n        uint256 releasedDepositAssetAmount;\\r\\n        uint256 releasedDepositAssetPremiumAmount;\\r\\n        uint256 releasedDepositAssetAmountWithPremium;\\r\\n        uint256 releasedCounterPartyAssetAmount;\\r\\n        uint256 releasedCounterPartyAssetPremiumAmount;\\r\\n        uint256 releasedCounterPartyAssetAmountWithPremium;\\r\\n        uint256 autoRollDepositAssetAmount;\\r\\n        uint256 autoRollDepositAssetPremiumAmount;\\r\\n        uint256 autoRollDepositAssetAmountWithPremium;\\r\\n        uint256 autoRollCounterPartyAssetAmount;\\r\\n        uint256 autoRollCounterPartyAssetPremiumAmount;\\r\\n        uint256 autoRollCounterPartyAssetAmountWithPremium;\\r\\n    }\\r\\n\\r\\n    struct AssetData {\\r\\n        uint128 releasedAmount; //debit\\r\\n        uint128 depositAmount; //credit\\r\\n        int128 leftOverAmount; //history balance \\r\\n    }\\r\\n\\r\\n    struct OptionData {\\r\\n        uint128 totalReleasedDepositAssetAmount;\\r\\n        uint128 totalReleasedCounterPartyAssetAmount;\\r\\n        uint128 assetToTerminateForNextRound;\\r\\n        mapping(uint16 => StructureData.OptionState) optionStates;\\r\\n        address[] usersInvolved;\\r\\n        mapping(address => StructureData.UserState) userStates;\\r\\n    }\\r\\n\\r\\n    struct UserState {\\r\\n        uint128 pendingAsset; //for current round\\r\\n        uint128 tempLocked; //asset not sent to trader yet, but closed for deposit\\r\\n        uint128 ongoingAsset;\\r\\n        uint128 assetToTerminate;\\r\\n        uint128 assetToTerminateForNextRound;\\r\\n        uint128 releasedDepositAssetAmount;\\r\\n        uint128 releasedCounterPartyAssetAmount;\\r\\n        bool hasState;\\r\\n    }\\r\\n\\r\\n    struct OptionSnapshot {\\r\\n        uint128 totalPending;\\r\\n        //total tvl = totalLocked + totalTerminating\\r\\n        uint128 totalLocked;\\r\\n        //only set during settlement\\r\\n        uint128 totalTerminating;\\r\\n        //amount to terminate in next round,  totalToTerminate <= totalLocked\\r\\n        uint128 totalToTerminate;\\r\\n        uint128 totalReleasedDeposit;\\r\\n        uint128 totalReleasedCounterParty;\\r\\n    }\\r\\n\\r\\n    struct UserBalance {\\r\\n        uint128 pendingDepositAssetAmount;\\r\\n        //tvl = lockedDepositAssetAmount + terminatingDepositAssetAmount\\r\\n        uint128 lockedDepositAssetAmount;\\r\\n        //only set during settlement\\r\\n        uint128 terminatingDepositAssetAmount;\\r\\n        //amount to terminate in next round, toTerminateDepositAssetAmount <= lockedDepositAssetAmount\\r\\n        uint128 toTerminateDepositAssetAmount;\\r\\n        uint128 releasedDepositAssetAmount;\\r\\n        uint128 releasedCounterPartyAssetAmount;\\r\\n    }\\r\\n    struct OptionPairDefinition {\\r\\n        uint8 callOptionId;\\r\\n        uint8 putOptionId;\\r\\n        uint8 depositAssetAmountDecimals;\\r\\n        uint8 counterPartyAssetAmountDecimals;\\r\\n        address depositAsset;\\r\\n        address counterPartyAsset;\\r\\n        bool manualDepositDisabled;\\r\\n    }\\r\\n    struct SettlementAccountingResult {\\r\\n        uint128 depositAmount;\\r\\n        uint128 autoRollAmount; //T-1 Carried (filled only when not executed)\\r\\n        uint128 autoRollPremium; //Premium (filled only when not executed)\\r\\n        //maturedAmount+maturedPremium = requested withdrawal for deposit asset(filled only when not executed and with withdraw request)\\r\\n        uint128 releasedAmount;\\r\\n        uint128 releasedPremium;\\r\\n        //autoRollCounterPartyAmount + autoRollCounterPartyPremium = Execution rolled-out for deposit asset (Execution roll-in for counter party option)\\r\\n        //filled only when executed\\r\\n        uint128 autoRollCounterPartyAmount;\\r\\n        uint128 autoRollCounterPartyPremium;\\r\\n        //maturedCounterPartyAmount+maturedCounterPartyPremium= requested withdrawal for couter party asset(filled only when executed and with withdraw request)\\r\\n        uint128 releasedCounterPartyAmount;\\r\\n        uint128 releasedCounterPartyPremium;  \\r\\n        bool executed;\\r\\n    }\\r\\n\\r\\n    enum OptionExecution {\\r\\n        NoExecution,\\r\\n        ExecuteCall,\\r\\n        ExecutePut\\r\\n    }\\r\\n\\r\\n    struct OptionPairExecutionAccountingResult {\\r\\n        SettlementAccountingResult callOptionResult;\\r\\n        SettlementAccountingResult putOptionResult;\\r\\n        OptionExecution execute;\\r\\n    }\\r\\n\\r\\n    struct SettlementCashflowResult {\\r\\n        uint128 newDepositAmount;\\r\\n        uint128 newReleasedAmount;\\r\\n        int128 leftOverAmount; //positive, if trader didn't withdraw last time; negative, if trader failed to send back last time;\\r\\n        address contractAddress; //0 for eth\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3e7c68ac105319da627340c84649e02cd2af9bf50763d698a003674cb2d8d931\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nlibrary Utils { \\r\\n     \\r\\n    uint256 public constant RATIOMULTIPLIER = 10000;\\r\\n \\r\\n     using SafeMath for uint256;\\r\\n      function StringConcat(bytes memory _base, bytes memory _value) internal pure returns (string memory) {\\r\\n        string memory _tmpValue = new string(_base.length + _value.length);\\r\\n        bytes memory _newValue = bytes(_tmpValue);\\r\\n\\r\\n        uint i;\\r\\n        uint j;\\r\\n\\r\\n        for(i=0; i<_base.length; i++) {\\r\\n            _newValue[j++] = _base[i];\\r\\n        }\\r\\n\\r\\n        for(i=0; i<_value.length; i++) {\\r\\n            _newValue[j++] = _value[i++];\\r\\n        }\\r\\n\\r\\n        return string(_newValue);\\r\\n    }\\r\\n\\r\\n    function Uint8Sub(uint8 a, uint8 b) internal pure returns (uint8) {\\r\\n        require(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n    \\r\\n \\r\\n    function getAmountToTerminate(uint256 _maturedAmount, uint256 _assetToTerminate, uint256 _assetAmount) \\r\\n    internal pure returns(uint256) {\\r\\n       if (_assetToTerminate == 0 || _assetAmount == 0 || _maturedAmount == 0) return 0;\\r\\n       return _assetToTerminate >= _assetAmount ?  _maturedAmount  : _maturedAmount.mul(_assetToTerminate).div(_assetAmount);\\r\\n   }\\r\\n\\r\\n   function withPremium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\r\\n       return  _baseAmount.mul(RATIOMULTIPLIER + _premimumRate).div(RATIOMULTIPLIER);\\r\\n   }\\r\\n   \\r\\n   function premium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\r\\n       return   _baseAmount.mul(_premimumRate).div(RATIOMULTIPLIER);\\r\\n   }\\r\\n   \\r\\n   function subOrZero(uint256 _base, uint256 _substractor) internal pure returns (uint256) {\\r\\n       return _base >= _substractor ? _base - _substractor : 0;\\r\\n   }\\r\\n  \\r\\n    /*function assertUint104(uint256 num) internal pure {\\r\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\r\\n    }\\r\\n\\r\\n    function assertUint128(uint256 num) internal pure {\\r\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\r\\n    }*/\\r\\n\\r\\n}\",\"keccak256\":\"0x9afd557d360e741555f7ed355c95ffb0ab1e49452c8ca249f21af3a371444409\",\"license\":\"MIT\"},\"contracts/storage/OptionVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\"; \\r\\nabstract contract OptionVaultStorageV1 { \\r\\n    uint256 internal locked;\\r\\n    address public managerRoleAddress;\\r\\n    address public adminRoleAddress;\\r\\n    uint8 public optionPairCount;\\r\\n    uint8 internal assetCount;\\r\\n    uint16 public currentRound;\\r\\n    bool public underSettlement;\\r\\n\\r\\n    mapping(address => StructureData.SettlementCashflowResult)\\r\\n        public settlementCashflowResult; \\r\\n    mapping(address => StructureData.AssetData) internal assetData;\\r\\n\\r\\n    mapping(uint8 => StructureData.OptionPairDefinition) public optionPairs;\\r\\n\\r\\n    mapping(uint8 => StructureData.OptionPairExecutionAccountingResult)\\r\\n        public executionAccountingResult; \\r\\n\\r\\n    mapping(uint8 => StructureData.OptionData) internal optionData;\\r\\n    mapping(uint8 => address) internal asset;\\r\\n    \\r\\n}\\r\\n\\r\\nabstract contract OptionVaultStorage is OptionVaultStorageV1 {\\r\\n\\r\\n}\",\"keccak256\":\"0x88765b8c4d9ce64cccbffc94dbe94cb349bfdf049a49906e5ab3c58568ebaaf2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614de6806100206000396000f3fe6080604052600436106101cd5760003560e01c8063715018a6116100f7578063ac4b8a6411610095578063d0ebdbe711610064578063d0ebdbe7146108f5578063ddd0247514610915578063f2fde38b14610948578063f4d4c9d71461096857600080fd5b8063ac4b8a6414610737578063c42f3f9414610757578063c5cfc5be14610777578063c78b432e146108e057600080fd5b806383eb772e116100d157806383eb772e1461062f5780638a19c8bc146106c85780638da5cb5b146106fd5780639e3dce861461072f57600080fd5b8063715018a6146105da5780637332655b146105ef578063748d188b1461060f57600080fd5b806355bf621f1161016f578063644d41ed1161013e578063644d41ed1461052b5780636b37e4e31461056d578063704b6c021461059a57806371018682146105ba57600080fd5b806355bf621f146104085780635d3e0e4d146104285780635edae4db146104485780636386bcc41461046857600080fd5b806332b76e86116101ab57806332b76e861461023d57806336687e0f1461025d5780634dd96f861461027257806351fe669e1461029257600080fd5b80630748248f146101d2578063222f6b8314610208578063256d43d71461022a575b600080fd5b3480156101de57600080fd5b506067546101f390600160c01b900460ff1681565b60405190151581526020015b60405180910390f35b34801561021457600080fd5b5061022861022336600461467f565b610988565b005b610228610238366004614629565b610a70565b34801561024957600080fd5b5061022861025836600461431a565b610cdf565b34801561026957600080fd5b50610228611489565b34801561027e57600080fd5b5061022861028d3660046143ec565b611605565b34801561029e57600080fd5b506103f96102ad366004614629565b606b602090815260009182526040918290208251610140808201855282546001600160801b038082168452600160801b918290048116848701526001850154808216858901528290048116606080860191909152600286015480831660808088019190915290849004831660a080880191909152600388015480851660c0808a019190915290869004851660e0808a019190915260048a0154808716610100808c01919091529088900460ff9081161515610120808d01919091528e519a8b018f5260058d0154808a168c528a900489169d8b019d909d5260068c01548089169e8b019e909e529c88900487169589019590955260078a01548087169489019490945292869004851691870191909152600888015480851691870191909152849004831690850152600986015491821690840152048516151593810193909352600a9091015490921683565b6040516101ff939291906149c9565b34801561041457600080fd5b506102286104233660046146a8565b6117ab565b34801561043457600080fd5b50610228610443366004614629565b61198c565b34801561045457600080fd5b506102286104633660046143b9565b6119ec565b34801561047457600080fd5b506104dd610483366004614629565b606a602052600090815260409020805460019091015460ff808316926101008104821692620100008204831692630100000083048116926001600160a01b03600160201b90910481169290811691600160a01b9091041687565b6040805160ff98891681529688166020880152948716948601949094529490911660608401526001600160a01b03908116608084015290921660a082015290151560c082015260e0016101ff565b34801561053757600080fd5b506101f3610546366004614293565b6001600160a01b0316600090815260696020526040812060010154600f90810b900b121590565b34801561057957600080fd5b5061058d610588366004614629565b611a22565b6040516101ff9190614971565b3480156105a657600080fd5b506102286105b5366004614293565b611b17565b3480156105c657600080fd5b5061058d6105d5366004614629565b611b4a565b3480156105e657600080fd5b50610228611bf3565b3480156105fb57600080fd5b5061022861060a36600461467f565b611c29565b34801561061b57600080fd5b5061022861062a3660046142ad565b611ce0565b34801561063b57600080fd5b5061068b61064a366004614293565b6068602052600090815260409020805460018201546002909201546001600160801b0380831693600160801b9093041691600f0b906001600160a01b031684565b604080516001600160801b039586168152949093166020850152600f9190910b918301919091526001600160a01b031660608201526080016101ff565b3480156106d457600080fd5b506067546106ea90600160b01b900461ffff1681565b60405161ffff90911681526020016101ff565b34801561070957600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016101ff565b610228611dd8565b34801561074357600080fd5b50606654610717906001600160a01b031681565b34801561076357600080fd5b50606754610717906001600160a01b031681565b34801561078357600080fd5b5061086d610792366004614643565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060ff8083166000908152606c6020908152604080832061ffff80871685526002909101835292819020815160e08101835281546001600160801b038082168352600160801b9182900481169583019590955260019092015493841692810192909252820483166060820152600160901b82049092166080830152600160a01b81048316151560a0830152600160a81b9004909116151560c082015292915050565b6040516101ff9190600060e0820190506001600160801b0380845116835280602085015116602084015280604085015116604084015250606083015161ffff8082166060850152806080860151166080850152505060a0830151151560a083015260c0830151151560c083015292915050565b3480156108ec57600080fd5b50610228611fc9565b34801561090157600080fd5b50610228610910366004614293565b612c8c565b34801561092157600080fd5b5060675461093690600160a01b900460ff1681565b60405160ff90911681526020016101ff565b34801561095457600080fd5b50610228610963366004614293565b612cbf565b34801561097457600080fd5b5061022861098336600461467f565b612d57565b8160ff8116158015906109b857506067546109ae90600160a01b900460ff166002614bdf565b60ff168160ff1611155b6109c157600080fd5b60ff8381166000908152606c6020526040908190206067549151638a229a5760e01b8152600481019190915233602482015260448101859052600160c01b820490921615156064830152600160b01b900461ffff166084820152731EB69103a625085be89785Fe7555fC767d9F6D7F90638a229a579060a4015b60006040518083038186803b158015610a5357600080fd5b505af4158015610a67573d6000803e3d6000fd5b50505050505050565b8060ff811615801590610aa05750606754610a9690600160a01b900460ff166002614bdf565b60ff168160ff1611155b610aa957600080fd5b606754600160b01b900461ffff16610af35760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b60448201526064015b60405180910390fd5b60003411610b2e5760405162461bcd60e51b81526020600482015260086024820152676e6f2076616c756560c01b6044820152606401610aea565b6000606a816002610b40600187614c91565b610b4a9190614b9e565b60ff908116825260208201929092526040016000206001810154909250600160a01b90041615610bae5760405162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d111a5cd8589b1959608a1b6044820152606401610aea565b805460009060ff858116911614610bd25760018201546001600160a01b0316610be5565b8154600160201b90046001600160a01b03165b90506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610c1057600080fd5b60ff84166000908152606c6020526040808220606754915163c502f99160e01b8152731EB69103a625085be89785Fe7555fC767d9F6D7F9363c502f99193610c719392339234929091600160b01b90910461ffff1690600190600401614908565b60006040518083038186803b158015610c8957600080fd5b505af4158015610c9d573d6000803e3d6000fd5b5050606754604051348152600160b01b90910461ffff16925033915060ff871690600080516020614d918339815191529060200160405180910390a450505050565b6066546001600160a01b03163314610d095760405162461bcd60e51b8152600401610aea906148e6565b606754600160c01b900460ff16610d1f57600080fd5b8051606754600160a01b900460ff168114610d3957600080fd5b606754600090610d5690600190600160b01b900461ffff16614c57565b905060005b828160ff16101561146e576000848260ff1681518110610d8b57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160ff8085166000908152606a8452604080822080548085168452606c8752828420610100918290049095168452828420835161018081018552858152978801859052928701849052606087018490526080870184905260a0870184905260c0870184905260e087018490528601839052610120860183905261014086018390526101608601929092529294509290919060006002840181610e3960018b614c57565b61ffff168152602081019190915260400160002080549091506001600160801b0316156110d3578454731EB69103a625085be89785Fe7555fC767d9F6D7F9063aab69633908690849060019060ff6201000082048116916301000000900416828d6002811115610eb957634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b158015610f1757600080fd5b505af4158015610f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4f919061448f565b805190925015610fdf576040828101518654600160201b90046001600160a01b0316600090815260696020529190912054610f9c91610f97916001600160801b031690612fd0565b612fe3565b8554600160201b90046001600160a01b0316600090815260696020526040902080546001600160801b0319166001600160801b039290921691909117905561105d565b60608201511561105d5760a082015160018601546001600160a01b031660009081526069602052604090205461102291610f97916001600160801b031690612fd0565b60018601546001600160a01b0316600090815260696020526040902080546001600160801b0319166001600160801b03929092169190911790555b600186600281111561107f57634e487b7160e01b600052602160045260246000fd5b14156110b2576110ad8482858860000160019054906101000a900460ff168660a00151876101600151613050565b6110d3565b845460408301516101008401516110d392879260ff9091169185919061338b565b600060028401816110e560018c614c57565b61ffff168152602081019190915260400160002080549091506001600160801b03161561137a578554731EB69103a625085be89785Fe7555fC767d9F6D7F9063aab69633908690849060009060ff630100000082048116916201000090041660028e600281111561116657634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b1580156111c457600080fd5b505af41580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc919061448f565b80519093501561127f5760408084015160018801546001600160a01b031660009081526069602052919091205461124091610f97916001600160801b031690612fd0565b60018701546001600160a01b0316600090815260696020526040902080546001600160801b0319166001600160801b0392909216919091179055611305565b6060830151156113055760a08301518654600160201b90046001600160a01b03166000908152606960205260409020546112c691610f97916001600160801b031690612fd0565b8654600160201b90046001600160a01b0316600090815260696020526040902080546001600160801b0319166001600160801b03929092169190911790555b600287600281111561132757634e487b7160e01b600052602160045260246000fd5b141561135357855460a084015161016085015161134e92879285928a9260ff169190613050565b61137a565b61137a848760000160019054906101000a900460ff1683866040015187610100015161338b565b6040516366aef26360e01b81526004810186905261ffff8a166024820152731EB69103a625085be89785Fe7555fC767d9F6D7F906366aef2639060440160006040518083038186803b1580156113cf57600080fd5b505af41580156113e3573d6000803e3d6000fd5b50506040516366aef26360e01b81526004810187905261ffff8c166024820152731EB69103a625085be89785Fe7555fC767d9F6D7F92506366aef263915060440160006040518083038186803b15801561143c57600080fd5b505af4158015611450573d6000803e3d6000fd5b5050505050505050505050808061146690614cfb565b915050610d5b565b506114776135ed565b50506067805460ff60c01b1916905550565b606554156114a95760405162461bcd60e51b8152600401610aea906148c6565b60016065556066546001600160a01b031633146114d85760405162461bcd60e51b8152600401610aea906148e6565b60005b60675460ff600160a81b909104811690821610156115fd5760ff81166000908152606d60209081526040808320546001600160a01b031683526069909152812060018101549091600f91820b90910b1361153557506115eb565b600181015460ff83166000908152606d602052604090819020549051631a4ca37b60e21b81523360048201526001600160801b03600f9390930b92831660248201526001600160a01b039091166044820152731EB69103a625085be89785Fe7555fC767d9F6D7F906369328dec9060640160006040518083038186803b1580156115be57600080fd5b505af41580156115d2573d6000803e3d6000fd5b505050600190920180546001600160801b031916905550505b806115f581614cfb565b9150506114db565b506000606555565b6067546001600160a01b0316331461162f5760405162461bcd60e51b8152600401610aea90614823565b8051606754600160c01b900460ff161561164857600080fd5b6067546001600160b01b90910461ffff161161166357600080fd5b60675461167b90600160a01b900460ff166002614bdf565b60ff16811461168957600080fd5b60005b818160ff1610156117a6576000838260ff16815181106116bc57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000606c60008460016116d99190614b65565b60ff1660ff16815260200190815260200160002060020160006001606760169054906101000a900461ffff1661170f9190614c57565b61ffff16815260208101919091526040908101600020905163338dfe2f60e21b81526004810184905260248101829052909150731EB69103a625085be89785Fe7555fC767d9F6D7F9063ce37f8bc9060440160006040518083038186803b15801561177957600080fd5b505af415801561178d573d6000803e3d6000fd5b505050505050808061179e90614cfb565b91505061168c565b505050565b8260ff8116158015906117db57506067546117d190600160a01b900460ff166002614bdf565b60ff168160ff1611155b6117e457600080fd5b6000606a8160026117f6600189614c91565b6118009190614b9e565b60ff908116825260208083019390935260409182016000908120898316808352606c9095529290206067548354939550731EB69103a625085be89785Fe7555fC767d9F6D7F94637441e8bb94929333938b93600160b01b900461ffff16929116148015611880575086546001600160a01b038a8116600160201b90920416145b806118b05750865460ff8c8116610100909204161480156118b0575060018701546001600160a01b038a81169116145b6040516001600160e01b031960e088901b16815260048101959095526001600160a01b039093166024850152604484019190915261ffff1660648301521515608482015260a40160006040518083038186803b15801561190f57600080fd5b505af4158015611923573d6000803e3d6000fd5b505050506119343385856000613735565b826001600160a01b0316336001600160a01b03168660ff167f9ac0ff79dc491174b021e6532a2fc734e82751bba8672e9183a76cb994a5f65a8760405161197d91815260200190565b60405180910390a45050505050565b6067546001600160a01b031633146119b65760405162461bcd60e51b8152600401610aea90614823565b60ff9081166000908152606a60205260409020600101805460ff60a01b198116600160a01b918290049093161502919091179055565b6067546001600160a01b03163314611a165760405162461bcd60e51b8152600401610aea90614823565b611a1f81613812565b50565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff8281166000908152606c602052604090819020606754915163c975707360e01b81526004810191909152600160c01b820490921615156024830152600160b01b900461ffff166044820152731EB69103a625085be89785Fe7555fC767d9F6D7F9063c9757073906064015b60c06040518083038186803b158015611ad957600080fd5b505af4158015611aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b11919061452d565b92915050565b6033546001600160a01b03163314611b415760405162461bcd60e51b8152600401610aea90614891565b611a1f81613b8e565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff8281166000908152606c6020526040908190206067549151634ed14a7f60e01b81526004810191909152336024820152600160c01b820490921615156044830152600160b01b900461ffff166064820152731EB69103a625085be89785Fe7555fC767d9F6D7F90634ed14a7f90608401611ac1565b6033546001600160a01b03163314611c1d5760405162461bcd60e51b8152600401610aea90614891565b611c276000613be0565b565b8160ff811615801590611c595750606754611c4f90600160a01b900460ff166002614bdf565b60ff168160ff1611155b611c6257600080fd5b60ff8381166000908152606c6020526040908190206067549151630f681f9360e31b8152600481019190915233602482015260448101859052600160c01b820490921615156064830152600160b01b900461ffff166084820152731EB69103a625085be89785Fe7555fC767d9F6D7F90637b40fc989060a401610a3b565b600054610100900460ff1680611cf9575060005460ff16155b611d155760405162461bcd60e51b8152600401610aea90614843565b600054610100900460ff16158015611d37576000805461ffff19166101011790555b611d3f613c32565b6001600160a01b038516611d5257600080fd5b6001600160a01b038416611d6557600080fd5b6001600160a01b038316611d7857600080fd5b611d8185612cbf565b606780546001600160a01b038087166001600160a01b03199283161790925560668054928616929091169190911790556000606555611dbf82613812565b8015611dd1576000805461ff00191690555b5050505050565b60655415611df85760405162461bcd60e51b8152600401610aea906148c6565b60016065556066546001600160a01b03163314611e275760405162461bcd60e51b8152600401610aea906148e6565b60005b60675460ff600160a81b909104811690821610156115fd5760ff81166000908152606d60209081526040808320546001600160a01b031683526069909152812060018101549091600f91820b90910b12611e845750611fb7565b6001810154600090611e9890600f0b614d1b565b60ff84166000908152606d60205260409020549091506001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611f735734816001600160801b03161015611f1c5760405162461bcd60e51b815260206004820152600e60248201526d09cdee840cadcdeeaced040cae8d60931b6044820152606401610aea565b34816001600160801b03161115611f6e57336108fc611f44346001600160801b038516614c7a565b6040518115909202916000818181858888f19350505050158015611f6c573d6000803e3d6000fd5b505b611fa4565b60ff83166000908152606d6020526040902054611fa4906001600160a01b031633306001600160801b038516613cad565b5060010180546001600160801b03191690555b80611fc181614cfb565b915050611e2a565b6067546001600160a01b03163314611ff35760405162461bcd60e51b8152600401610aea90614823565b606754600160c01b900460ff161561200a57600080fd5b60675461202390600160b01b900461ffff166001614b27565b6067805460ff60c01b1961ffff93909316600160b01b029290921662ffffff60b01b1990921691909117600160c01b17905560005b60675460ff600160a01b90910481169082161015612b805760ff8181166000908152606a6020908152604080832080549094168352606c909152808220606754915163161dd97560e31b815260048101829052600160b01b90920461ffff166024830152600160448301529190731EB69103a625085be89785Fe7555fC767d9F6D7F9063b0eecba89060640160206040518083038186803b1580156120fc57600080fd5b505af4158015612110573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612134919061460f565b8354610100900460ff166000908152606c6020526040808220606754915163161dd97560e31b815260048101829052600160b01b90920461ffff16602483015260448201839052929350731EB69103a625085be89785Fe7555fC767d9F6D7F9063b0eecba89060640160206040518083038186803b1580156121b557600080fd5b505af41580156121c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ed919061460f565b90506001600160801b0383161561227e578454600160201b90046001600160a01b031660009081526069602052604090205461224190610f97906001600160801b03600160801b9091048116908616612fd0565b85546001600160a01b03600160201b90910416600090815260696020526040902080546001600160801b03928316600160801b0292169190911790555b6001600160801b038116156123045760018501546001600160a01b03166000908152606960205260409020546122cc90610f9790600160801b90046001600160801b03908116908416612fd0565b60018601546001600160a01b0316600090815260696020526040902080546001600160801b03928316600160801b0292169190911790555b6067546002600160b01b90910461ffff1611612324575050505050612b6e565b8454606754604051631bb98a3360e01b8152600092731EB69103a625085be89785Fe7555fC767d9F6D7F92631bb98a3392612389928a9260019260ff62010000840481169363010000009004169161ffff600160b01b9091041690899060040161493f565b6101406040518083038186803b1580156123a257600080fd5b505af41580156123b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123da9190614548565b8654606754604051631bb98a3360e01b8152929350600092731EB69103a625085be89785Fe7555fC767d9F6D7F92631bb98a339261244392899287926301000000820460ff90811693620100009093041691600160b01b90910461ffff1690849060040161493f565b6101406040518083038186803b15801561245c57600080fd5b505af4158015612470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124949190614548565b905060006040518060600160405280848152602001838152602001600060028111156124d057634e487b7160e01b600052602160045260246000fd5b9052905080606b60006124e48c6003614bdf565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff19169190849081111561266657634e487b7160e01b600052602160045260246000fd5b0217905550508854606754604051631bb98a3360e01b815260009350731EB69103a625085be89785Fe7555fC767d9F6D7F92631bb98a33926126d4928d9260019262010000820460ff9081169363010000009093041691600160b01b90910461ffff1690849060040161493f565b6101406040518083038186803b1580156126ed57600080fd5b505af4158015612701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127259190614548565b6040805160608101825282815260208101869052919250810160019052915081606b60006127548d6003614bdf565b61275f906001614b65565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff1916919084908111156128e157634e487b7160e01b600052602160045260246000fd5b0217905550508954606754604051631bb98a3360e01b815260009350731EB69103a625085be89785Fe7555fC767d9F6D7F92631bb98a339261294f928c9287926301000000820460ff90811693620100009093041691600160b01b90910461ffff169060019060040161493f565b6101406040518083038186803b15801561296857600080fd5b505af415801561297c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a09190614548565b6040805160608101825287815260208101839052919250810160029052925082606b60006129cf8e6003614bdf565b6129da906002614b65565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff191691908490811115612b5c57634e487b7160e01b600052602160045260246000fd5b02179055505050505050505050505050505b80612b7881614cfb565b915050612058565b50606754600160b01b900461ffff1660011415612ba6576067805460ff60c01b19169055565b606754600160b01b900461ffff1660021415611c275760015b606754612bd790600160a01b900460ff166002614bdf565b60ff168160ff1611612c745760ff81166000908152606c60205260409081902090516366aef26360e01b8152600481019190915260016024820152731EB69103a625085be89785Fe7555fC767d9F6D7F906366aef2639060440160006040518083038186803b158015612c4957600080fd5b505af4158015612c5d573d6000803e3d6000fd5b505050508080612c6c90614cfb565b915050612bbf565b50612c7d6135ed565b6067805460ff60c01b19169055565b6033546001600160a01b03163314612cb65760405162461bcd60e51b8152600401610aea90614891565b611a1f81613d0d565b6033546001600160a01b03163314612ce95760405162461bcd60e51b8152600401610aea90614891565b6001600160a01b038116612d4e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610aea565b611a1f81613be0565b8160ff811615801590612d875750606754612d7d90600160a01b900460ff166002614bdf565b60ff168160ff1611155b612d9057600080fd5b606754600160b01b900461ffff16612dd55760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610aea565b60008211612e0f5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610aea565b6000606a816002612e21600188614c91565b612e2b9190614b9e565b60ff908116825260208201929092526040016000206001810154909250600160a01b90041615612e8f5760405162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d111a5cd8589b1959608a1b6044820152606401610aea565b805460009060ff868116911614612eb35760018201546001600160a01b0316612ec6565b8154600160201b90046001600160a01b03165b90506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612ef257600080fd5b60ff85166000908152606c6020526040808220606754915163c502f99160e01b8152731EB69103a625085be89785Fe7555fC767d9F6D7F9363c502f99193612f53939233928b929091600160b01b90910461ffff1690600190600401614908565b60006040518083038186803b158015612f6b57600080fd5b505af4158015612f7f573d6000803e3d6000fd5b5050606754604051878152600160b01b90910461ffff16925033915060ff881690600080516020614d918339815191529060200160405180910390a4611dd16001600160a01b038216333087613cad565b6000612fdc8284614b4d565b9392505050565b60006001600160801b0382111561304c5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610aea565b5090565b8454600090613072906001600160801b0380821691600160801b900416613d5f565b60018801549091506001600160801b0316158015906130915750600082115b156130f05760018601546130cd90610f97906130b9908490600160901b900461ffff16613d6b565b60018a01546001600160801b031690613d8d565b6001880180546001600160801b0319166001600160801b03929092169190911790555b600387015460005b8181101561338057600089600301828154811061312557634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048d0190915260409091206001810154919250906001600160801b031661316857505061336e565b60018101548a54600091613196918a916001600160801b03600160801b918290048116929190910416613da8565b905080156131dd5760038201546131ba90610f97906001600160801b031683612fd0565b6003830180546001600160801b0319166001600160801b03929092169190911790555b6001820154600090613202906001600160801b0380821691600160801b900416613d5f565b9050600061321189838a613da8565b905080156133595760018d01546000908190613239908590600160901b900461ffff16613d6b565b60028701549091506001600160801b0316811061327157600286015461326a9084906001600160801b031683613da8565b9150613275565b8291505b731EB69103a625085be89785Fe7555fC767d9F6D7F63c502f9918f8986866001606760169054906101000a900461ffff166132b09190614c57565b60006040518763ffffffff1660e01b81526004016132d396959493929190614908565b60006040518083038186803b1580156132eb57600080fd5b505af41580156132ff573d6000803e3d6000fd5b505060675461331d925060019150600160b01b900461ffff16614c57565b61ffff16876001600160a01b03168e60ff16600080516020614d918339815191528660405161334e91815260200190565b60405180910390a450505b50505060010180546001600160801b03169055505b8061337881614ce0565b9150506130f8565b505050505050505050565b82546000906133ad906001600160801b0380821691600160801b900416613d5f565b600387015490915060005b818110156135e35760008860030182815481106133e557634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048c0190915260409091206001810154919250906001600160801b03166134285750506135d1565b60018101548854600091613456918a916001600160801b03600160801b918290048116929190910416613da8565b905080156134a157600282015461348190610f9790600160801b90046001600160801b031683612fd0565b6002830180546001600160801b03928316600160801b0292169190911790555b60018201546000906134d29089906134cc906001600160801b0380821691600160801b900416613d5f565b89613da8565b905080156135bd57731EB69103a625085be89785Fe7555fC767d9F6D7F63c502f9918d868460006001606760169054906101000a900461ffff166135169190614c57565b60006040518763ffffffff1660e01b815260040161353996959493929190614908565b60006040518083038186803b15801561355157600080fd5b505af4158015613565573d6000803e3d6000fd5b5050606754613583925060019150600160b01b900461ffff16614c57565b61ffff16846001600160a01b03168c60ff16600080516020614d91833981519152846040516135b491815260200190565b60405180910390a45b505060010180546001600160801b03169055505b806135db81614ce0565b9150506133b8565b5050505050505050565b60005b60675460ff600160a81b90910481169082161015611a1f5760ff81166000908152606d60209081526040808320546001600160a01b039081168085526069845282852083516080810185528154600160801b8082046001600160801b03908116845291821683890190815260018086018054600f90810b810b878c01908152606088018a81528a8f526068909d529a909c20865193519386169386168502939093178355985190820180546001600160801b031916918c0b85169190911790559751600290980180546001600160a01b031916989096169790971790945581549454929691959094808516946136ec949290910416910b614ad9565b6136f69190614c08565b600183018054600f9290920b6001600160801b03166001600160801b03199092169190911790555060009055508061372d81614cfb565b9150506135f0565b606554156137555760405162461bcd60e51b8152600401610aea906148c6565b60016065558061378d576001600160a01b038216600090815260696020526040812060010154600f90810b900b121561378d57600080fd5b604051631a4ca37b60e21b81526001600160a01b0380861660048301526024820185905283166044820152731EB69103a625085be89785Fe7555fC767d9F6D7F906369328dec9060640160006040518083038186803b1580156137ef57600080fd5b505af4158015613803573d6000803e3d6000fd5b50506000606555505050505050565b805160675460ff600160a01b8204811691600160a81b90041660005b83811015613b5757600085828151811061385857634e487b7160e01b600052603260045260246000fd5b6020026020010151905083600261386f9190614bdf565b61387a906001614b65565b60ff1680825261388b906001614b65565b60ff16602082015280606a6000866138a281614cfb565b60ff91821683526020808401949094526040928301600020855181549587015194870151606088015160808901516001600160a01b03908116600160201b02640100000000600160c01b031992881663010000000263ff0000001994891662010000029490941663ffff0000199989166101000261ffff19909b1695891695909517999099179790971692909217171694909417845560a08501516001909401805460c0909601511515600160a01b026001600160a81b0319909616949093169390931793909317905594508316613a14576080810151606d60008561398781614cfb565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060a00151606d600085806139d590614cfb565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550613b44565b60008060005b8560ff168160ff161015613a9a57608084015160ff82166000908152606d60205260409020546001600160a01b0390811691161415613a5857600192505b60a084015160ff82166000908152606d60205260409020546001600160a01b0390811691161415613a8857600191505b80613a9281614cfb565b915050613a1a565b5081613aee576080830151606d600087613ab381614cfb565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80613b415760a0830151606d600087613b0681614cfb565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b50505b5080613b4f81614ce0565b91505061382e565b506067805461ffff60a01b1916600160a01b60ff9485160260ff60a81b191617600160a81b92909316919091029190911790555050565b606780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f90600090a35050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680613c4b575060005460ff16155b613c675760405162461bcd60e51b8152600401610aea90614843565b600054610100900460ff16158015613c89576000805461ffff19166101011790555b613c91613df0565b613c99613e5a565b8015611a1f576000805461ff001916905550565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052613d07908590613eba565b50505050565b606680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435090600090a35050565b6000612fdc8284614c7a565b6000612fdc612710613d87613d808583614b4d565b8690613f8c565b90613f98565b600081831015613d9e576000612fdc565b612fdc8284614c7a565b6000821580613db5575081155b80613dbe575083155b15613dcb57506000612fdc565b81831015613de657613de182613d878686613f8c565b613de8565b835b949350505050565b600054610100900460ff1680613e09575060005460ff16155b613e255760405162461bcd60e51b8152600401610aea90614843565b600054610100900460ff16158015613c99576000805461ffff19166101011790558015611a1f576000805461ff001916905550565b600054610100900460ff1680613e73575060005460ff16155b613e8f5760405162461bcd60e51b8152600401610aea90614843565b600054610100900460ff16158015613eb1576000805461ffff19166101011790555b613c9933613be0565b6000613f0f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613fa49092919063ffffffff16565b8051909150156117a65780806020019051810190613f2d9190614473565b6117a65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610aea565b6000612fdc8284614bc0565b6000612fdc8284614b8a565b6060613de8848460008585843b613ffd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aea565b600080866001600160a01b0316858760405161401991906147d4565b60006040518083038185875af1925050503d8060008114614056576040519150601f19603f3d011682016040523d82523d6000602084013e61405b565b606091505b509150915061406b828286614076565b979650505050505050565b60608315614085575081612fdc565b8251156140955782518084602001fd5b8160405162461bcd60e51b8152600401610aea91906147f0565b80356001600160a01b03811681146140c657600080fd5b919050565b600082601f8301126140db578081fd5b813560206140f06140eb83614ab5565b614a84565b8281528181019085830160e08086028801850189101561410e578687fd5b865b868110156141b15781838b031215614126578788fd5b61412e614a13565b61413784614282565b8152614144878501614282565b878201526040614155818601614282565b908201526060614166858201614282565b9082015260806141778582016140af565b9082015260a06141888582016140af565b9082015260c08481013561419b81614d82565b9082015285529385019391810191600101614110565b509198975050505050505050565b80516140c681614d82565b600060c082840312156141db578081fd5b60405160c0810181811067ffffffffffffffff821117156141fe576141fe614d6c565b60405290508061420d8361426b565b815261421b6020840161426b565b602082015261422c6040840161426b565b604082015261423d6060840161426b565b606082015261424e6080840161426b565b608082015261425f60a0840161426b565b60a08201525092915050565b80516001600160801b03811681146140c657600080fd5b803560ff811681146140c657600080fd5b6000602082840312156142a4578081fd5b612fdc826140af565b600080600080608085870312156142c2578283fd5b6142cb856140af565b93506142d9602086016140af565b92506142e7604086016140af565b9150606085013567ffffffffffffffff811115614302578182fd5b61430e878288016140cb565b91505092959194509250565b6000602080838503121561432c578182fd5b823567ffffffffffffffff811115614342578283fd5b8301601f81018513614352578283fd5b80356143606140eb82614ab5565b80828252848201915084840188868560051b870101111561437f578687fd5b8694505b838510156143ad57803560038110614399578788fd5b835260019490940193918501918501614383565b50979650505050505050565b6000602082840312156143ca578081fd5b813567ffffffffffffffff8111156143e0578182fd5b613de8848285016140cb565b600060208083850312156143fe578182fd5b823567ffffffffffffffff811115614414578283fd5b8301601f81018513614424578283fd5b80356144326140eb82614ab5565b80828252848201915084840188868560051b8701011115614451578687fd5b8694505b838510156143ad578035835260019490940193918501918501614455565b600060208284031215614484578081fd5b8151612fdc81614d82565b600061018082840312156144a1578081fd5b6144a9614a3c565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101608084015181830152508091505092915050565b600060c0828403121561453e578081fd5b612fdc83836141ca565b6000610140828403121561455a578081fd5b614562614a60565b61456b8361426b565b81526145796020840161426b565b602082015261458a6040840161426b565b604082015261459b6060840161426b565b60608201526145ac6080840161426b565b60808201526145bd60a0840161426b565b60a08201526145ce60c0840161426b565b60c08201526145df60e0840161426b565b60e08201526101006145f281850161426b565b908201526101206146048482016141bf565b908201529392505050565b600060208284031215614620578081fd5b612fdc8261426b565b60006020828403121561463a578081fd5b612fdc82614282565b60008060408385031215614655578182fd5b61465e83614282565b9150602083013561ffff81168114614674578182fd5b809150509250929050565b60008060408385031215614691578182fd5b61469a83614282565b946020939093013593505050565b6000806000606084860312156146bc578081fd5b6146c584614282565b9250602084013591506146da604085016140af565b90509250925092565b80516001600160801b03168252602081015161470a60208401826001600160801b03169052565b50604081015161472560408401826001600160801b03169052565b50606081015161474060608401826001600160801b03169052565b50608081015161475b60808401826001600160801b03169052565b5060a081015161477660a08401826001600160801b03169052565b5060c081015161479160c08401826001600160801b03169052565b5060e08101516147ac60e08401826001600160801b03169052565b50610100818101516001600160801b0316908301526101208082015180151582850152613d07565b600082516147e6818460208701614cb4565b9190910192915050565b602081526000825180602084015261480f816040850160208701614cb4565b601f01601f19169190910160400192915050565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600690820152651b1bd8dad95960d21b604082015260600190565b60208082526008908201526710b6b0b730b3b2b960c11b604082015260600190565b9586526001600160a01b039490941660208601526040850192909252606084015261ffff166080830152151560a082015260c00190565b958652931515602086015260ff92831660408601529116606084015261ffff166080830152151560a082015260c00190565b60c08101611b1182846001600160801b038082511683528060208301511660208401528060408301511660408401528060608301511660608401528060808301511660808401528060a08301511660a0840152505050565b6102a081016149d882866146e3565b6149e66101408301856146e3565b60038310614a0457634e487b7160e01b600052602160045260246000fd5b82610280830152949350505050565b60405160e0810167ffffffffffffffff81118282101715614a3657614a36614d6c565b60405290565b604051610180810167ffffffffffffffff81118282101715614a3657614a36614d6c565b604051610140810167ffffffffffffffff81118282101715614a3657614a36614d6c565b604051601f8201601f1916810167ffffffffffffffff81118282101715614aad57614aad614d6c565b604052919050565b600067ffffffffffffffff821115614acf57614acf614d6c565b5060051b60200190565b600081600f0b83600f0b8282128260016001607f1b0303821381151615614b0257614b02614d40565b8260016001607f1b0319038212811615614b1e57614b1e614d40565b50019392505050565b600061ffff808316818516808303821115614b4457614b44614d40565b01949350505050565b60008219821115614b6057614b60614d40565b500190565b600060ff821660ff84168060ff03821115614b8257614b82614d40565b019392505050565b600082614b9957614b99614d56565b500490565b600060ff831680614bb157614bb1614d56565b8060ff84160491505092915050565b6000816000190483118215151615614bda57614bda614d40565b500290565b600060ff821660ff84168160ff0481118215151615614c0057614c00614d40565b029392505050565b600081600f0b83600f0b8281128160016001607f1b031901831281151615614c3257614c32614d40565b8160016001607f1b03018313811615614c4d57614c4d614d40565b5090039392505050565b600061ffff83811690831681811015614c7257614c72614d40565b039392505050565b600082821015614c8c57614c8c614d40565b500390565b600060ff821660ff841680821015614cab57614cab614d40565b90039392505050565b60005b83811015614ccf578181015183820152602001614cb7565b83811115613d075750506000910152565b6000600019821415614cf457614cf4614d40565b5060010190565b600060ff821660ff811415614d1257614d12614d40565b60010192915050565b600081600f0b60016001607f1b0319811415614d3957614d39614d40565b9003919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114611a1f57600080fdfee963a73e630cb9812a026653bfb6b1e14ffa92f8c38b79f318f2637557ea9f12a26469706673582212205a8cc729b5b992f65076db27274a962021fc1c651f1cc771db5d06c0b632372564736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c8063715018a6116100f7578063ac4b8a6411610095578063d0ebdbe711610064578063d0ebdbe7146108f5578063ddd0247514610915578063f2fde38b14610948578063f4d4c9d71461096857600080fd5b8063ac4b8a6414610737578063c42f3f9414610757578063c5cfc5be14610777578063c78b432e146108e057600080fd5b806383eb772e116100d157806383eb772e1461062f5780638a19c8bc146106c85780638da5cb5b146106fd5780639e3dce861461072f57600080fd5b8063715018a6146105da5780637332655b146105ef578063748d188b1461060f57600080fd5b806355bf621f1161016f578063644d41ed1161013e578063644d41ed1461052b5780636b37e4e31461056d578063704b6c021461059a57806371018682146105ba57600080fd5b806355bf621f146104085780635d3e0e4d146104285780635edae4db146104485780636386bcc41461046857600080fd5b806332b76e86116101ab57806332b76e861461023d57806336687e0f1461025d5780634dd96f861461027257806351fe669e1461029257600080fd5b80630748248f146101d2578063222f6b8314610208578063256d43d71461022a575b600080fd5b3480156101de57600080fd5b506067546101f390600160c01b900460ff1681565b60405190151581526020015b60405180910390f35b34801561021457600080fd5b5061022861022336600461467f565b610988565b005b610228610238366004614629565b610a70565b34801561024957600080fd5b5061022861025836600461431a565b610cdf565b34801561026957600080fd5b50610228611489565b34801561027e57600080fd5b5061022861028d3660046143ec565b611605565b34801561029e57600080fd5b506103f96102ad366004614629565b606b602090815260009182526040918290208251610140808201855282546001600160801b038082168452600160801b918290048116848701526001850154808216858901528290048116606080860191909152600286015480831660808088019190915290849004831660a080880191909152600388015480851660c0808a019190915290869004851660e0808a019190915260048a0154808716610100808c01919091529088900460ff9081161515610120808d01919091528e519a8b018f5260058d0154808a168c528a900489169d8b019d909d5260068c01548089169e8b019e909e529c88900487169589019590955260078a01548087169489019490945292869004851691870191909152600888015480851691870191909152849004831690850152600986015491821690840152048516151593810193909352600a9091015490921683565b6040516101ff939291906149c9565b34801561041457600080fd5b506102286104233660046146a8565b6117ab565b34801561043457600080fd5b50610228610443366004614629565b61198c565b34801561045457600080fd5b506102286104633660046143b9565b6119ec565b34801561047457600080fd5b506104dd610483366004614629565b606a602052600090815260409020805460019091015460ff808316926101008104821692620100008204831692630100000083048116926001600160a01b03600160201b90910481169290811691600160a01b9091041687565b6040805160ff98891681529688166020880152948716948601949094529490911660608401526001600160a01b03908116608084015290921660a082015290151560c082015260e0016101ff565b34801561053757600080fd5b506101f3610546366004614293565b6001600160a01b0316600090815260696020526040812060010154600f90810b900b121590565b34801561057957600080fd5b5061058d610588366004614629565b611a22565b6040516101ff9190614971565b3480156105a657600080fd5b506102286105b5366004614293565b611b17565b3480156105c657600080fd5b5061058d6105d5366004614629565b611b4a565b3480156105e657600080fd5b50610228611bf3565b3480156105fb57600080fd5b5061022861060a36600461467f565b611c29565b34801561061b57600080fd5b5061022861062a3660046142ad565b611ce0565b34801561063b57600080fd5b5061068b61064a366004614293565b6068602052600090815260409020805460018201546002909201546001600160801b0380831693600160801b9093041691600f0b906001600160a01b031684565b604080516001600160801b039586168152949093166020850152600f9190910b918301919091526001600160a01b031660608201526080016101ff565b3480156106d457600080fd5b506067546106ea90600160b01b900461ffff1681565b60405161ffff90911681526020016101ff565b34801561070957600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016101ff565b610228611dd8565b34801561074357600080fd5b50606654610717906001600160a01b031681565b34801561076357600080fd5b50606754610717906001600160a01b031681565b34801561078357600080fd5b5061086d610792366004614643565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060ff8083166000908152606c6020908152604080832061ffff80871685526002909101835292819020815160e08101835281546001600160801b038082168352600160801b9182900481169583019590955260019092015493841692810192909252820483166060820152600160901b82049092166080830152600160a01b81048316151560a0830152600160a81b9004909116151560c082015292915050565b6040516101ff9190600060e0820190506001600160801b0380845116835280602085015116602084015280604085015116604084015250606083015161ffff8082166060850152806080860151166080850152505060a0830151151560a083015260c0830151151560c083015292915050565b3480156108ec57600080fd5b50610228611fc9565b34801561090157600080fd5b50610228610910366004614293565b612c8c565b34801561092157600080fd5b5060675461093690600160a01b900460ff1681565b60405160ff90911681526020016101ff565b34801561095457600080fd5b50610228610963366004614293565b612cbf565b34801561097457600080fd5b5061022861098336600461467f565b612d57565b8160ff8116158015906109b857506067546109ae90600160a01b900460ff166002614bdf565b60ff168160ff1611155b6109c157600080fd5b60ff8381166000908152606c6020526040908190206067549151638a229a5760e01b8152600481019190915233602482015260448101859052600160c01b820490921615156064830152600160b01b900461ffff16608482015273__$e36f5330ef2566ea8a183e1e27b10de643$__90638a229a579060a4015b60006040518083038186803b158015610a5357600080fd5b505af4158015610a67573d6000803e3d6000fd5b50505050505050565b8060ff811615801590610aa05750606754610a9690600160a01b900460ff166002614bdf565b60ff168160ff1611155b610aa957600080fd5b606754600160b01b900461ffff16610af35760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b60448201526064015b60405180910390fd5b60003411610b2e5760405162461bcd60e51b81526020600482015260086024820152676e6f2076616c756560c01b6044820152606401610aea565b6000606a816002610b40600187614c91565b610b4a9190614b9e565b60ff908116825260208201929092526040016000206001810154909250600160a01b90041615610bae5760405162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d111a5cd8589b1959608a1b6044820152606401610aea565b805460009060ff858116911614610bd25760018201546001600160a01b0316610be5565b8154600160201b90046001600160a01b03165b90506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610c1057600080fd5b60ff84166000908152606c6020526040808220606754915163c502f99160e01b815273__$e36f5330ef2566ea8a183e1e27b10de643$__9363c502f99193610c719392339234929091600160b01b90910461ffff1690600190600401614908565b60006040518083038186803b158015610c8957600080fd5b505af4158015610c9d573d6000803e3d6000fd5b5050606754604051348152600160b01b90910461ffff16925033915060ff871690600080516020614d918339815191529060200160405180910390a450505050565b6066546001600160a01b03163314610d095760405162461bcd60e51b8152600401610aea906148e6565b606754600160c01b900460ff16610d1f57600080fd5b8051606754600160a01b900460ff168114610d3957600080fd5b606754600090610d5690600190600160b01b900461ffff16614c57565b905060005b828160ff16101561146e576000848260ff1681518110610d8b57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160ff8085166000908152606a8452604080822080548085168452606c8752828420610100918290049095168452828420835161018081018552858152978801859052928701849052606087018490526080870184905260a0870184905260c0870184905260e087018490528601839052610120860183905261014086018390526101608601929092529294509290919060006002840181610e3960018b614c57565b61ffff168152602081019190915260400160002080549091506001600160801b0316156110d357845473__$e36f5330ef2566ea8a183e1e27b10de643$__9063aab69633908690849060019060ff6201000082048116916301000000900416828d6002811115610eb957634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b158015610f1757600080fd5b505af4158015610f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4f919061448f565b805190925015610fdf576040828101518654600160201b90046001600160a01b0316600090815260696020529190912054610f9c91610f97916001600160801b031690612fd0565b612fe3565b8554600160201b90046001600160a01b0316600090815260696020526040902080546001600160801b0319166001600160801b039290921691909117905561105d565b60608201511561105d5760a082015160018601546001600160a01b031660009081526069602052604090205461102291610f97916001600160801b031690612fd0565b60018601546001600160a01b0316600090815260696020526040902080546001600160801b0319166001600160801b03929092169190911790555b600186600281111561107f57634e487b7160e01b600052602160045260246000fd5b14156110b2576110ad8482858860000160019054906101000a900460ff168660a00151876101600151613050565b6110d3565b845460408301516101008401516110d392879260ff9091169185919061338b565b600060028401816110e560018c614c57565b61ffff168152602081019190915260400160002080549091506001600160801b03161561137a57855473__$e36f5330ef2566ea8a183e1e27b10de643$__9063aab69633908690849060009060ff630100000082048116916201000090041660028e600281111561116657634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b1580156111c457600080fd5b505af41580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc919061448f565b80519093501561127f5760408084015160018801546001600160a01b031660009081526069602052919091205461124091610f97916001600160801b031690612fd0565b60018701546001600160a01b0316600090815260696020526040902080546001600160801b0319166001600160801b0392909216919091179055611305565b6060830151156113055760a08301518654600160201b90046001600160a01b03166000908152606960205260409020546112c691610f97916001600160801b031690612fd0565b8654600160201b90046001600160a01b0316600090815260696020526040902080546001600160801b0319166001600160801b03929092169190911790555b600287600281111561132757634e487b7160e01b600052602160045260246000fd5b141561135357855460a084015161016085015161134e92879285928a9260ff169190613050565b61137a565b61137a848760000160019054906101000a900460ff1683866040015187610100015161338b565b6040516366aef26360e01b81526004810186905261ffff8a16602482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906366aef2639060440160006040518083038186803b1580156113cf57600080fd5b505af41580156113e3573d6000803e3d6000fd5b50506040516366aef26360e01b81526004810187905261ffff8c16602482015273__$e36f5330ef2566ea8a183e1e27b10de643$__92506366aef263915060440160006040518083038186803b15801561143c57600080fd5b505af4158015611450573d6000803e3d6000fd5b5050505050505050505050808061146690614cfb565b915050610d5b565b506114776135ed565b50506067805460ff60c01b1916905550565b606554156114a95760405162461bcd60e51b8152600401610aea906148c6565b60016065556066546001600160a01b031633146114d85760405162461bcd60e51b8152600401610aea906148e6565b60005b60675460ff600160a81b909104811690821610156115fd5760ff81166000908152606d60209081526040808320546001600160a01b031683526069909152812060018101549091600f91820b90910b1361153557506115eb565b600181015460ff83166000908152606d602052604090819020549051631a4ca37b60e21b81523360048201526001600160801b03600f9390930b92831660248201526001600160a01b03909116604482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906369328dec9060640160006040518083038186803b1580156115be57600080fd5b505af41580156115d2573d6000803e3d6000fd5b505050600190920180546001600160801b031916905550505b806115f581614cfb565b9150506114db565b506000606555565b6067546001600160a01b0316331461162f5760405162461bcd60e51b8152600401610aea90614823565b8051606754600160c01b900460ff161561164857600080fd5b6067546001600160b01b90910461ffff161161166357600080fd5b60675461167b90600160a01b900460ff166002614bdf565b60ff16811461168957600080fd5b60005b818160ff1610156117a6576000838260ff16815181106116bc57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000606c60008460016116d99190614b65565b60ff1660ff16815260200190815260200160002060020160006001606760169054906101000a900461ffff1661170f9190614c57565b61ffff16815260208101919091526040908101600020905163338dfe2f60e21b8152600481018490526024810182905290915073__$e36f5330ef2566ea8a183e1e27b10de643$__9063ce37f8bc9060440160006040518083038186803b15801561177957600080fd5b505af415801561178d573d6000803e3d6000fd5b505050505050808061179e90614cfb565b91505061168c565b505050565b8260ff8116158015906117db57506067546117d190600160a01b900460ff166002614bdf565b60ff168160ff1611155b6117e457600080fd5b6000606a8160026117f6600189614c91565b6118009190614b9e565b60ff908116825260208083019390935260409182016000908120898316808352606c909552929020606754835493955073__$e36f5330ef2566ea8a183e1e27b10de643$__94637441e8bb94929333938b93600160b01b900461ffff16929116148015611880575086546001600160a01b038a8116600160201b90920416145b806118b05750865460ff8c8116610100909204161480156118b0575060018701546001600160a01b038a81169116145b6040516001600160e01b031960e088901b16815260048101959095526001600160a01b039093166024850152604484019190915261ffff1660648301521515608482015260a40160006040518083038186803b15801561190f57600080fd5b505af4158015611923573d6000803e3d6000fd5b505050506119343385856000613735565b826001600160a01b0316336001600160a01b03168660ff167f9ac0ff79dc491174b021e6532a2fc734e82751bba8672e9183a76cb994a5f65a8760405161197d91815260200190565b60405180910390a45050505050565b6067546001600160a01b031633146119b65760405162461bcd60e51b8152600401610aea90614823565b60ff9081166000908152606a60205260409020600101805460ff60a01b198116600160a01b918290049093161502919091179055565b6067546001600160a01b03163314611a165760405162461bcd60e51b8152600401610aea90614823565b611a1f81613812565b50565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff8281166000908152606c602052604090819020606754915163c975707360e01b81526004810191909152600160c01b820490921615156024830152600160b01b900461ffff16604482015273__$e36f5330ef2566ea8a183e1e27b10de643$__9063c9757073906064015b60c06040518083038186803b158015611ad957600080fd5b505af4158015611aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b11919061452d565b92915050565b6033546001600160a01b03163314611b415760405162461bcd60e51b8152600401610aea90614891565b611a1f81613b8e565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff8281166000908152606c6020526040908190206067549151634ed14a7f60e01b81526004810191909152336024820152600160c01b820490921615156044830152600160b01b900461ffff16606482015273__$e36f5330ef2566ea8a183e1e27b10de643$__90634ed14a7f90608401611ac1565b6033546001600160a01b03163314611c1d5760405162461bcd60e51b8152600401610aea90614891565b611c276000613be0565b565b8160ff811615801590611c595750606754611c4f90600160a01b900460ff166002614bdf565b60ff168160ff1611155b611c6257600080fd5b60ff8381166000908152606c6020526040908190206067549151630f681f9360e31b8152600481019190915233602482015260448101859052600160c01b820490921615156064830152600160b01b900461ffff16608482015273__$e36f5330ef2566ea8a183e1e27b10de643$__90637b40fc989060a401610a3b565b600054610100900460ff1680611cf9575060005460ff16155b611d155760405162461bcd60e51b8152600401610aea90614843565b600054610100900460ff16158015611d37576000805461ffff19166101011790555b611d3f613c32565b6001600160a01b038516611d5257600080fd5b6001600160a01b038416611d6557600080fd5b6001600160a01b038316611d7857600080fd5b611d8185612cbf565b606780546001600160a01b038087166001600160a01b03199283161790925560668054928616929091169190911790556000606555611dbf82613812565b8015611dd1576000805461ff00191690555b5050505050565b60655415611df85760405162461bcd60e51b8152600401610aea906148c6565b60016065556066546001600160a01b03163314611e275760405162461bcd60e51b8152600401610aea906148e6565b60005b60675460ff600160a81b909104811690821610156115fd5760ff81166000908152606d60209081526040808320546001600160a01b031683526069909152812060018101549091600f91820b90910b12611e845750611fb7565b6001810154600090611e9890600f0b614d1b565b60ff84166000908152606d60205260409020549091506001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611f735734816001600160801b03161015611f1c5760405162461bcd60e51b815260206004820152600e60248201526d09cdee840cadcdeeaced040cae8d60931b6044820152606401610aea565b34816001600160801b03161115611f6e57336108fc611f44346001600160801b038516614c7a565b6040518115909202916000818181858888f19350505050158015611f6c573d6000803e3d6000fd5b505b611fa4565b60ff83166000908152606d6020526040902054611fa4906001600160a01b031633306001600160801b038516613cad565b5060010180546001600160801b03191690555b80611fc181614cfb565b915050611e2a565b6067546001600160a01b03163314611ff35760405162461bcd60e51b8152600401610aea90614823565b606754600160c01b900460ff161561200a57600080fd5b60675461202390600160b01b900461ffff166001614b27565b6067805460ff60c01b1961ffff93909316600160b01b029290921662ffffff60b01b1990921691909117600160c01b17905560005b60675460ff600160a01b90910481169082161015612b805760ff8181166000908152606a6020908152604080832080549094168352606c909152808220606754915163161dd97560e31b815260048101829052600160b01b90920461ffff16602483015260016044830152919073__$e36f5330ef2566ea8a183e1e27b10de643$__9063b0eecba89060640160206040518083038186803b1580156120fc57600080fd5b505af4158015612110573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612134919061460f565b8354610100900460ff166000908152606c6020526040808220606754915163161dd97560e31b815260048101829052600160b01b90920461ffff1660248301526044820183905292935073__$e36f5330ef2566ea8a183e1e27b10de643$__9063b0eecba89060640160206040518083038186803b1580156121b557600080fd5b505af41580156121c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ed919061460f565b90506001600160801b0383161561227e578454600160201b90046001600160a01b031660009081526069602052604090205461224190610f97906001600160801b03600160801b9091048116908616612fd0565b85546001600160a01b03600160201b90910416600090815260696020526040902080546001600160801b03928316600160801b0292169190911790555b6001600160801b038116156123045760018501546001600160a01b03166000908152606960205260409020546122cc90610f9790600160801b90046001600160801b03908116908416612fd0565b60018601546001600160a01b0316600090815260696020526040902080546001600160801b03928316600160801b0292169190911790555b6067546002600160b01b90910461ffff1611612324575050505050612b6e565b8454606754604051631bb98a3360e01b815260009273__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a3392612389928a9260019260ff62010000840481169363010000009004169161ffff600160b01b9091041690899060040161493f565b6101406040518083038186803b1580156123a257600080fd5b505af41580156123b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123da9190614548565b8654606754604051631bb98a3360e01b815292935060009273__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a339261244392899287926301000000820460ff90811693620100009093041691600160b01b90910461ffff1690849060040161493f565b6101406040518083038186803b15801561245c57600080fd5b505af4158015612470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124949190614548565b905060006040518060600160405280848152602001838152602001600060028111156124d057634e487b7160e01b600052602160045260246000fd5b9052905080606b60006124e48c6003614bdf565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff19169190849081111561266657634e487b7160e01b600052602160045260246000fd5b0217905550508854606754604051631bb98a3360e01b81526000935073__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a33926126d4928d9260019262010000820460ff9081169363010000009093041691600160b01b90910461ffff1690849060040161493f565b6101406040518083038186803b1580156126ed57600080fd5b505af4158015612701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127259190614548565b6040805160608101825282815260208101869052919250810160019052915081606b60006127548d6003614bdf565b61275f906001614b65565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff1916919084908111156128e157634e487b7160e01b600052602160045260246000fd5b0217905550508954606754604051631bb98a3360e01b81526000935073__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a339261294f928c9287926301000000820460ff90811693620100009093041691600160b01b90910461ffff169060019060040161493f565b6101406040518083038186803b15801561296857600080fd5b505af415801561297c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a09190614548565b6040805160608101825287815260208101839052919250810160029052925082606b60006129cf8e6003614bdf565b6129da906002614b65565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff191691908490811115612b5c57634e487b7160e01b600052602160045260246000fd5b02179055505050505050505050505050505b80612b7881614cfb565b915050612058565b50606754600160b01b900461ffff1660011415612ba6576067805460ff60c01b19169055565b606754600160b01b900461ffff1660021415611c275760015b606754612bd790600160a01b900460ff166002614bdf565b60ff168160ff1611612c745760ff81166000908152606c60205260409081902090516366aef26360e01b815260048101919091526001602482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906366aef2639060440160006040518083038186803b158015612c4957600080fd5b505af4158015612c5d573d6000803e3d6000fd5b505050508080612c6c90614cfb565b915050612bbf565b50612c7d6135ed565b6067805460ff60c01b19169055565b6033546001600160a01b03163314612cb65760405162461bcd60e51b8152600401610aea90614891565b611a1f81613d0d565b6033546001600160a01b03163314612ce95760405162461bcd60e51b8152600401610aea90614891565b6001600160a01b038116612d4e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610aea565b611a1f81613be0565b8160ff811615801590612d875750606754612d7d90600160a01b900460ff166002614bdf565b60ff168160ff1611155b612d9057600080fd5b606754600160b01b900461ffff16612dd55760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610aea565b60008211612e0f5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610aea565b6000606a816002612e21600188614c91565b612e2b9190614b9e565b60ff908116825260208201929092526040016000206001810154909250600160a01b90041615612e8f5760405162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d111a5cd8589b1959608a1b6044820152606401610aea565b805460009060ff868116911614612eb35760018201546001600160a01b0316612ec6565b8154600160201b90046001600160a01b03165b90506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612ef257600080fd5b60ff85166000908152606c6020526040808220606754915163c502f99160e01b815273__$e36f5330ef2566ea8a183e1e27b10de643$__9363c502f99193612f53939233928b929091600160b01b90910461ffff1690600190600401614908565b60006040518083038186803b158015612f6b57600080fd5b505af4158015612f7f573d6000803e3d6000fd5b5050606754604051878152600160b01b90910461ffff16925033915060ff881690600080516020614d918339815191529060200160405180910390a4611dd16001600160a01b038216333087613cad565b6000612fdc8284614b4d565b9392505050565b60006001600160801b0382111561304c5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610aea565b5090565b8454600090613072906001600160801b0380821691600160801b900416613d5f565b60018801549091506001600160801b0316158015906130915750600082115b156130f05760018601546130cd90610f97906130b9908490600160901b900461ffff16613d6b565b60018a01546001600160801b031690613d8d565b6001880180546001600160801b0319166001600160801b03929092169190911790555b600387015460005b8181101561338057600089600301828154811061312557634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048d0190915260409091206001810154919250906001600160801b031661316857505061336e565b60018101548a54600091613196918a916001600160801b03600160801b918290048116929190910416613da8565b905080156131dd5760038201546131ba90610f97906001600160801b031683612fd0565b6003830180546001600160801b0319166001600160801b03929092169190911790555b6001820154600090613202906001600160801b0380821691600160801b900416613d5f565b9050600061321189838a613da8565b905080156133595760018d01546000908190613239908590600160901b900461ffff16613d6b565b60028701549091506001600160801b0316811061327157600286015461326a9084906001600160801b031683613da8565b9150613275565b8291505b73__$e36f5330ef2566ea8a183e1e27b10de643$__63c502f9918f8986866001606760169054906101000a900461ffff166132b09190614c57565b60006040518763ffffffff1660e01b81526004016132d396959493929190614908565b60006040518083038186803b1580156132eb57600080fd5b505af41580156132ff573d6000803e3d6000fd5b505060675461331d925060019150600160b01b900461ffff16614c57565b61ffff16876001600160a01b03168e60ff16600080516020614d918339815191528660405161334e91815260200190565b60405180910390a450505b50505060010180546001600160801b03169055505b8061337881614ce0565b9150506130f8565b505050505050505050565b82546000906133ad906001600160801b0380821691600160801b900416613d5f565b600387015490915060005b818110156135e35760008860030182815481106133e557634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048c0190915260409091206001810154919250906001600160801b03166134285750506135d1565b60018101548854600091613456918a916001600160801b03600160801b918290048116929190910416613da8565b905080156134a157600282015461348190610f9790600160801b90046001600160801b031683612fd0565b6002830180546001600160801b03928316600160801b0292169190911790555b60018201546000906134d29089906134cc906001600160801b0380821691600160801b900416613d5f565b89613da8565b905080156135bd5773__$e36f5330ef2566ea8a183e1e27b10de643$__63c502f9918d868460006001606760169054906101000a900461ffff166135169190614c57565b60006040518763ffffffff1660e01b815260040161353996959493929190614908565b60006040518083038186803b15801561355157600080fd5b505af4158015613565573d6000803e3d6000fd5b5050606754613583925060019150600160b01b900461ffff16614c57565b61ffff16846001600160a01b03168c60ff16600080516020614d91833981519152846040516135b491815260200190565b60405180910390a45b505060010180546001600160801b03169055505b806135db81614ce0565b9150506133b8565b5050505050505050565b60005b60675460ff600160a81b90910481169082161015611a1f5760ff81166000908152606d60209081526040808320546001600160a01b039081168085526069845282852083516080810185528154600160801b8082046001600160801b03908116845291821683890190815260018086018054600f90810b810b878c01908152606088018a81528a8f526068909d529a909c20865193519386169386168502939093178355985190820180546001600160801b031916918c0b85169190911790559751600290980180546001600160a01b031916989096169790971790945581549454929691959094808516946136ec949290910416910b614ad9565b6136f69190614c08565b600183018054600f9290920b6001600160801b03166001600160801b03199092169190911790555060009055508061372d81614cfb565b9150506135f0565b606554156137555760405162461bcd60e51b8152600401610aea906148c6565b60016065558061378d576001600160a01b038216600090815260696020526040812060010154600f90810b900b121561378d57600080fd5b604051631a4ca37b60e21b81526001600160a01b038086166004830152602482018590528316604482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906369328dec9060640160006040518083038186803b1580156137ef57600080fd5b505af4158015613803573d6000803e3d6000fd5b50506000606555505050505050565b805160675460ff600160a01b8204811691600160a81b90041660005b83811015613b5757600085828151811061385857634e487b7160e01b600052603260045260246000fd5b6020026020010151905083600261386f9190614bdf565b61387a906001614b65565b60ff1680825261388b906001614b65565b60ff16602082015280606a6000866138a281614cfb565b60ff91821683526020808401949094526040928301600020855181549587015194870151606088015160808901516001600160a01b03908116600160201b02640100000000600160c01b031992881663010000000263ff0000001994891662010000029490941663ffff0000199989166101000261ffff19909b1695891695909517999099179790971692909217171694909417845560a08501516001909401805460c0909601511515600160a01b026001600160a81b0319909616949093169390931793909317905594508316613a14576080810151606d60008561398781614cfb565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060a00151606d600085806139d590614cfb565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550613b44565b60008060005b8560ff168160ff161015613a9a57608084015160ff82166000908152606d60205260409020546001600160a01b0390811691161415613a5857600192505b60a084015160ff82166000908152606d60205260409020546001600160a01b0390811691161415613a8857600191505b80613a9281614cfb565b915050613a1a565b5081613aee576080830151606d600087613ab381614cfb565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80613b415760a0830151606d600087613b0681614cfb565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b50505b5080613b4f81614ce0565b91505061382e565b506067805461ffff60a01b1916600160a01b60ff9485160260ff60a81b191617600160a81b92909316919091029190911790555050565b606780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f90600090a35050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680613c4b575060005460ff16155b613c675760405162461bcd60e51b8152600401610aea90614843565b600054610100900460ff16158015613c89576000805461ffff19166101011790555b613c91613df0565b613c99613e5a565b8015611a1f576000805461ff001916905550565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052613d07908590613eba565b50505050565b606680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435090600090a35050565b6000612fdc8284614c7a565b6000612fdc612710613d87613d808583614b4d565b8690613f8c565b90613f98565b600081831015613d9e576000612fdc565b612fdc8284614c7a565b6000821580613db5575081155b80613dbe575083155b15613dcb57506000612fdc565b81831015613de657613de182613d878686613f8c565b613de8565b835b949350505050565b600054610100900460ff1680613e09575060005460ff16155b613e255760405162461bcd60e51b8152600401610aea90614843565b600054610100900460ff16158015613c99576000805461ffff19166101011790558015611a1f576000805461ff001916905550565b600054610100900460ff1680613e73575060005460ff16155b613e8f5760405162461bcd60e51b8152600401610aea90614843565b600054610100900460ff16158015613eb1576000805461ffff19166101011790555b613c9933613be0565b6000613f0f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613fa49092919063ffffffff16565b8051909150156117a65780806020019051810190613f2d9190614473565b6117a65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610aea565b6000612fdc8284614bc0565b6000612fdc8284614b8a565b6060613de8848460008585843b613ffd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aea565b600080866001600160a01b0316858760405161401991906147d4565b60006040518083038185875af1925050503d8060008114614056576040519150601f19603f3d011682016040523d82523d6000602084013e61405b565b606091505b509150915061406b828286614076565b979650505050505050565b60608315614085575081612fdc565b8251156140955782518084602001fd5b8160405162461bcd60e51b8152600401610aea91906147f0565b80356001600160a01b03811681146140c657600080fd5b919050565b600082601f8301126140db578081fd5b813560206140f06140eb83614ab5565b614a84565b8281528181019085830160e08086028801850189101561410e578687fd5b865b868110156141b15781838b031215614126578788fd5b61412e614a13565b61413784614282565b8152614144878501614282565b878201526040614155818601614282565b908201526060614166858201614282565b9082015260806141778582016140af565b9082015260a06141888582016140af565b9082015260c08481013561419b81614d82565b9082015285529385019391810191600101614110565b509198975050505050505050565b80516140c681614d82565b600060c082840312156141db578081fd5b60405160c0810181811067ffffffffffffffff821117156141fe576141fe614d6c565b60405290508061420d8361426b565b815261421b6020840161426b565b602082015261422c6040840161426b565b604082015261423d6060840161426b565b606082015261424e6080840161426b565b608082015261425f60a0840161426b565b60a08201525092915050565b80516001600160801b03811681146140c657600080fd5b803560ff811681146140c657600080fd5b6000602082840312156142a4578081fd5b612fdc826140af565b600080600080608085870312156142c2578283fd5b6142cb856140af565b93506142d9602086016140af565b92506142e7604086016140af565b9150606085013567ffffffffffffffff811115614302578182fd5b61430e878288016140cb565b91505092959194509250565b6000602080838503121561432c578182fd5b823567ffffffffffffffff811115614342578283fd5b8301601f81018513614352578283fd5b80356143606140eb82614ab5565b80828252848201915084840188868560051b870101111561437f578687fd5b8694505b838510156143ad57803560038110614399578788fd5b835260019490940193918501918501614383565b50979650505050505050565b6000602082840312156143ca578081fd5b813567ffffffffffffffff8111156143e0578182fd5b613de8848285016140cb565b600060208083850312156143fe578182fd5b823567ffffffffffffffff811115614414578283fd5b8301601f81018513614424578283fd5b80356144326140eb82614ab5565b80828252848201915084840188868560051b8701011115614451578687fd5b8694505b838510156143ad578035835260019490940193918501918501614455565b600060208284031215614484578081fd5b8151612fdc81614d82565b600061018082840312156144a1578081fd5b6144a9614a3c565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101608084015181830152508091505092915050565b600060c0828403121561453e578081fd5b612fdc83836141ca565b6000610140828403121561455a578081fd5b614562614a60565b61456b8361426b565b81526145796020840161426b565b602082015261458a6040840161426b565b604082015261459b6060840161426b565b60608201526145ac6080840161426b565b60808201526145bd60a0840161426b565b60a08201526145ce60c0840161426b565b60c08201526145df60e0840161426b565b60e08201526101006145f281850161426b565b908201526101206146048482016141bf565b908201529392505050565b600060208284031215614620578081fd5b612fdc8261426b565b60006020828403121561463a578081fd5b612fdc82614282565b60008060408385031215614655578182fd5b61465e83614282565b9150602083013561ffff81168114614674578182fd5b809150509250929050565b60008060408385031215614691578182fd5b61469a83614282565b946020939093013593505050565b6000806000606084860312156146bc578081fd5b6146c584614282565b9250602084013591506146da604085016140af565b90509250925092565b80516001600160801b03168252602081015161470a60208401826001600160801b03169052565b50604081015161472560408401826001600160801b03169052565b50606081015161474060608401826001600160801b03169052565b50608081015161475b60808401826001600160801b03169052565b5060a081015161477660a08401826001600160801b03169052565b5060c081015161479160c08401826001600160801b03169052565b5060e08101516147ac60e08401826001600160801b03169052565b50610100818101516001600160801b0316908301526101208082015180151582850152613d07565b600082516147e6818460208701614cb4565b9190910192915050565b602081526000825180602084015261480f816040850160208701614cb4565b601f01601f19169190910160400192915050565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600690820152651b1bd8dad95960d21b604082015260600190565b60208082526008908201526710b6b0b730b3b2b960c11b604082015260600190565b9586526001600160a01b039490941660208601526040850192909252606084015261ffff166080830152151560a082015260c00190565b958652931515602086015260ff92831660408601529116606084015261ffff166080830152151560a082015260c00190565b60c08101611b1182846001600160801b038082511683528060208301511660208401528060408301511660408401528060608301511660608401528060808301511660808401528060a08301511660a0840152505050565b6102a081016149d882866146e3565b6149e66101408301856146e3565b60038310614a0457634e487b7160e01b600052602160045260246000fd5b82610280830152949350505050565b60405160e0810167ffffffffffffffff81118282101715614a3657614a36614d6c565b60405290565b604051610180810167ffffffffffffffff81118282101715614a3657614a36614d6c565b604051610140810167ffffffffffffffff81118282101715614a3657614a36614d6c565b604051601f8201601f1916810167ffffffffffffffff81118282101715614aad57614aad614d6c565b604052919050565b600067ffffffffffffffff821115614acf57614acf614d6c565b5060051b60200190565b600081600f0b83600f0b8282128260016001607f1b0303821381151615614b0257614b02614d40565b8260016001607f1b0319038212811615614b1e57614b1e614d40565b50019392505050565b600061ffff808316818516808303821115614b4457614b44614d40565b01949350505050565b60008219821115614b6057614b60614d40565b500190565b600060ff821660ff84168060ff03821115614b8257614b82614d40565b019392505050565b600082614b9957614b99614d56565b500490565b600060ff831680614bb157614bb1614d56565b8060ff84160491505092915050565b6000816000190483118215151615614bda57614bda614d40565b500290565b600060ff821660ff84168160ff0481118215151615614c0057614c00614d40565b029392505050565b600081600f0b83600f0b8281128160016001607f1b031901831281151615614c3257614c32614d40565b8160016001607f1b03018313811615614c4d57614c4d614d40565b5090039392505050565b600061ffff83811690831681811015614c7257614c72614d40565b039392505050565b600082821015614c8c57614c8c614d40565b500390565b600060ff821660ff841680821015614cab57614cab614d40565b90039392505050565b60005b83811015614ccf578181015183820152602001614cb7565b83811115613d075750506000910152565b6000600019821415614cf457614cf4614d40565b5060010190565b600060ff821660ff811415614d1257614d12614d40565b60010192915050565b600081600f0b60016001607f1b0319811415614d3957614d39614d40565b9003919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114611a1f57600080fdfee963a73e630cb9812a026653bfb6b1e14ffa92f8c38b79f318f2637557ea9f12a26469706673582212205a8cc729b5b992f65076db27274a962021fc1c651f1cc771db5d06c0b632372564736f6c63430008040033",
  "libraries": {
    "OptionLifecycle": "0x1EB69103a625085be89785Fe7555fC767d9F6D7F"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 213,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7109,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "locked",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 7111,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "managerRoleAddress",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 7113,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "adminRoleAddress",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 7115,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "optionPairCount",
        "offset": 20,
        "slot": "103",
        "type": "t_uint8"
      },
      {
        "astId": 7117,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "assetCount",
        "offset": 21,
        "slot": "103",
        "type": "t_uint8"
      },
      {
        "astId": 7119,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "currentRound",
        "offset": 22,
        "slot": "103",
        "type": "t_uint16"
      },
      {
        "astId": 7121,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "underSettlement",
        "offset": 24,
        "slot": "103",
        "type": "t_bool"
      },
      {
        "astId": 7126,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "settlementCashflowResult",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_struct(SettlementCashflowResult)6848_storage)"
      },
      {
        "astId": 7131,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "assetData",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_struct(AssetData)6726_storage)"
      },
      {
        "astId": 7136,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "optionPairs",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint8,t_struct(OptionPairDefinition)6804_storage)"
      },
      {
        "astId": 7141,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "executionAccountingResult",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint8,t_struct(OptionPairExecutionAccountingResult)6839_storage)"
      },
      {
        "astId": 7146,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "optionData",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_uint8,t_struct(OptionData)6746_storage)"
      },
      {
        "astId": 7150,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "asset",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_uint8,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(OptionExecution)6829": {
        "encoding": "inplace",
        "label": "enum StructureData.OptionExecution",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_struct(AssetData)6726_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.AssetData)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetData)6726_storage"
      },
      "t_mapping(t_address,t_struct(SettlementCashflowResult)6848_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.SettlementCashflowResult)",
        "numberOfBytes": "32",
        "value": "t_struct(SettlementCashflowResult)6848_storage"
      },
      "t_mapping(t_address,t_struct(UserState)6763_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)6763_storage"
      },
      "t_mapping(t_uint16,t_struct(OptionState)6694_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct StructureData.OptionState)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionState)6694_storage"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint8,t_struct(OptionData)6746_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StructureData.OptionData)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionData)6746_storage"
      },
      "t_mapping(t_uint8,t_struct(OptionPairDefinition)6804_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StructureData.OptionPairDefinition)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionPairDefinition)6804_storage"
      },
      "t_mapping(t_uint8,t_struct(OptionPairExecutionAccountingResult)6839_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StructureData.OptionPairExecutionAccountingResult)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionPairExecutionAccountingResult)6839_storage"
      },
      "t_struct(AssetData)6726_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.AssetData",
        "members": [
          {
            "astId": 6721,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6723,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "depositAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6725,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "leftOverAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_int128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OptionData)6746_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionData",
        "members": [
          {
            "astId": 6728,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "totalReleasedDepositAssetAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6730,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "totalReleasedCounterPartyAssetAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6732,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "assetToTerminateForNextRound",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6737,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "optionStates",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint16,t_struct(OptionState)6694_storage)"
          },
          {
            "astId": 6740,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "usersInvolved",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 6745,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "userStates",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(UserState)6763_storage)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(OptionPairDefinition)6804_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionPairDefinition",
        "members": [
          {
            "astId": 6791,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "callOptionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6793,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "putOptionId",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6795,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "depositAssetAmountDecimals",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6797,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "counterPartyAssetAmountDecimals",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6799,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "depositAsset",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6801,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "counterPartyAsset",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6803,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "manualDepositDisabled",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OptionPairExecutionAccountingResult)6839_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionPairExecutionAccountingResult",
        "members": [
          {
            "astId": 6832,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "callOptionResult",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(SettlementAccountingResult)6825_storage"
          },
          {
            "astId": 6835,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "putOptionResult",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(SettlementAccountingResult)6825_storage"
          },
          {
            "astId": 6838,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "execute",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(OptionExecution)6829"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(OptionState)6694_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionState",
        "members": [
          {
            "astId": 6681,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6683,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "totalTerminate",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6685,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "strikePrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6687,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "round",
            "offset": 16,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 6689,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "premiumRate",
            "offset": 18,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 6691,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "executed",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 6693,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "callOrPut",
            "offset": 21,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SettlementAccountingResult)6825_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.SettlementAccountingResult",
        "members": [
          {
            "astId": 6806,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "depositAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6808,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "autoRollAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6810,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "autoRollPremium",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6812,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedAmount",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6814,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedPremium",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6816,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "autoRollCounterPartyAmount",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6818,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "autoRollCounterPartyPremium",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 6820,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedCounterPartyAmount",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 6822,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedCounterPartyPremium",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 6824,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "executed",
            "offset": 16,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(SettlementCashflowResult)6848_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.SettlementCashflowResult",
        "members": [
          {
            "astId": 6841,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "newDepositAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6843,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "newReleasedAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6845,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "leftOverAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_int128"
          },
          {
            "astId": 6847,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "contractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserState)6763_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.UserState",
        "members": [
          {
            "astId": 6748,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "pendingAsset",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6750,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "tempLocked",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6752,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "ongoingAsset",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6754,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "assetToTerminate",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6756,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "assetToTerminateForNextRound",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6758,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedDepositAssetAmount",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6760,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedCounterPartyAssetAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 6762,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "hasState",
            "offset": 16,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}