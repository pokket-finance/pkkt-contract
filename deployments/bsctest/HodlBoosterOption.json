{
  "address": "0xecD5A8AAffbd97ad9097EeC4498Fd14AfBaA48a8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "optionId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSettler",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSettler",
          "type": "address"
        }
      ],
      "name": "SettlerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "optionId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "callOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "putOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "depositAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "counterPartyAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterPartyAsset",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "manualDepositDisabled",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionPairDefinition[]",
          "name": "_optionPairDefinitions",
          "type": "tuple[]"
        }
      ],
      "name": "addOptionPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "balanceEnough",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        }
      ],
      "name": "batchWithdrawAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_assetToTerminate",
          "type": "uint256"
        }
      ],
      "name": "cancelWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        }
      ],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "executionAccountingResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "depositAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.SettlementAccountingResult",
          "name": "callOptionResult",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "depositAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "autoRollCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyPremium",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.SettlementAccountingResult",
          "name": "putOptionResult",
          "type": "tuple"
        },
        {
          "internalType": "enum StructureData.OptionExecution",
          "name": "execute",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        }
      ],
      "name": "getAccountBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "pendingDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lockedDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "terminatingDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "toTerminateDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedDepositAssetAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "releasedCounterPartyAssetAmount",
              "type": "uint128"
            }
          ],
          "internalType": "struct StructureData.UserBalance",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        }
      ],
      "name": "getOptionSnapShot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "totalPending",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalLocked",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalTerminating",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalToTerminate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalReleasedDeposit",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalReleasedCounterParty",
              "type": "uint128"
            }
          ],
          "internalType": "struct StructureData.OptionSnapshot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "_round",
          "type": "uint16"
        }
      ],
      "name": "getOptionStateByRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "totalAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalTerminate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "strikePrice",
              "type": "uint128"
            },
            {
              "internalType": "uint16",
              "name": "round",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callOrPut",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_settler",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "callOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "putOptionId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "depositAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "counterPartyAssetAmountDecimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterPartyAsset",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "manualDepositDisabled",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionPairDefinition[]",
          "name": "_optionPairDefinitions",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initiateSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_assetToTerminate",
          "type": "uint256"
        }
      ],
      "name": "initiateWithraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionPairCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "optionPairs",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "callOptionId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "putOptionId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "depositAssetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "counterPartyAssetAmountDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "depositAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "counterPartyAsset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "manualDepositDisabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_parameters",
          "type": "uint256[]"
        }
      ],
      "name": "setOptionParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_settler",
          "type": "address"
        }
      ],
      "name": "setSettler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StructureData.OptionExecution[]",
          "name": "_execution",
          "type": "uint8[]"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "settlementCashflowResult",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "newDepositAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "newReleasedAmount",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "leftOverAmount",
          "type": "int128"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pairId",
          "type": "uint8"
        }
      ],
      "name": "toggleOptionPairDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underSettlement",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_optionId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdrawAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc69febe0984b477824b7cf4bbce0fe508530fa3983203f63196a19ef388d49ef",
  "receipt": {
    "to": null,
    "from": "0x7BC55d94EEC38E15fE84c90Bf2B10BF4Eabd1189",
    "contractAddress": "0xecD5A8AAffbd97ad9097EeC4498Fd14AfBaA48a8",
    "transactionIndex": 2,
    "gasUsed": "4585195",
    "logsBloom": "0x
    "blockHash": "0xcd335f33e3e2318b4e41fd92a1cc8e99e1dfe8a0625893a125c6c7a7cfcbd33b",
    "transactionHash": "0xc69febe0984b477824b7cf4bbce0fe508530fa3983203f63196a19ef388d49ef",
    "logs": [],
    "blockNumber": 17780302,
    "cumulativeGasUsed": "4838223",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5e0af13d801843fffcbb105865742253",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"optionId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSettler\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSettler\",\"type\":\"address\"}],\"name\":\"SettlerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"optionId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"callOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"putOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"counterPartyAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterPartyAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"manualDepositDisabled\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionPairDefinition[]\",\"name\":\"_optionPairDefinitions\",\"type\":\"tuple[]\"}],\"name\":\"addOptionPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"balanceEnough\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"batchWithdrawAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_assetToTerminate\",\"type\":\"uint256\"}],\"name\":\"cancelWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"executionAccountingResult\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"depositAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.SettlementAccountingResult\",\"name\":\"callOptionResult\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"depositAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"autoRollCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyPremium\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.SettlementAccountingResult\",\"name\":\"putOptionResult\",\"type\":\"tuple\"},{\"internalType\":\"enum StructureData.OptionExecution\",\"name\":\"execute\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"}],\"name\":\"getAccountBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"pendingDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockedDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"terminatingDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"toTerminateDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedDepositAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"releasedCounterPartyAssetAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct StructureData.UserBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"}],\"name\":\"getOptionSnapShot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"totalPending\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalLocked\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalTerminating\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalToTerminate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalReleasedDeposit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalReleasedCounterParty\",\"type\":\"uint128\"}],\"internalType\":\"struct StructureData.OptionSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_round\",\"type\":\"uint16\"}],\"name\":\"getOptionStateByRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"totalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalTerminate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"strikePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_settler\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"callOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"putOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"counterPartyAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterPartyAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"manualDepositDisabled\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionPairDefinition[]\",\"name\":\"_optionPairDefinitions\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_assetToTerminate\",\"type\":\"uint256\"}],\"name\":\"initiateWithraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionPairCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"optionPairs\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"callOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"putOptionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"depositAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"counterPartyAssetAmountDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterPartyAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"manualDepositDisabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_parameters\",\"type\":\"uint256[]\"}],\"name\":\"setOptionParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_settler\",\"type\":\"address\"}],\"name\":\"setSettler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StructureData.OptionExecution[]\",\"name\":\"_execution\",\"type\":\"uint8[]\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"settlementCashflowResult\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"newDepositAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"newReleasedAmount\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"leftOverAmount\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pairId\",\"type\":\"uint8\"}],\"name\":\"toggleOptionPairDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underSettlement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HodlBoosterOptionUpgradeable.sol\":\"HodlBoosterOptionUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/HodlBoosterOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";\\nimport {Utils} from \\\"./libraries/Utils.sol\\\";\\nimport {OptionLifecycle} from \\\"./libraries/OptionLifecycle.sol\\\";\\nimport \\\"./interfaces/IPKKTStructureOption.sol\\\";\\nimport \\\"./OptionVaultBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract HodlBoosterOption is OptionVaultBase, IPKKTStructureOption {\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using Utils for uint256;\\n    using OptionLifecycle for StructureData.UserState;\\n \\n\\n    modifier validateOptionById(uint8 _optionId) {\\n        require(_optionId != 0 && _optionId <= optionPairCount * 2);\\n        _;\\n    }\\n\\n    function getAccountBalance(uint8 _optionId)\\n        external\\n        view\\n        override\\n        returns (StructureData.UserBalance memory)\\n    {\\n        return\\n            OptionLifecycle.getAccountBalance(\\n                optionData[_optionId],\\n                msg.sender,\\n                underSettlement,\\n                currentRound\\n            );\\n    }\\n\\n    function getOptionSnapShot(uint8 _optionId)\\n        external\\n        view\\n        override\\n        returns (StructureData.OptionSnapshot memory)\\n    {\\n        return\\n            OptionLifecycle.getOptionSnapShot(\\n                optionData[_optionId],\\n                underSettlement,\\n                currentRound\\n            );\\n    }\\n\\n    function initiateWithraw(uint8 _optionId, uint256 _assetToTerminate)\\n        external\\n        override \\n        validateOptionById(_optionId)\\n    {\\n        //require(_assetToTerminate > 0 , \\\"!_assetToTerminate\\\");\\n        //require(currentRound > 1, \\\"No on going\\\"); \\n        OptionLifecycle.initiateWithrawStorage(\\n            optionData[_optionId],\\n            msg.sender,\\n            _assetToTerminate,\\n            underSettlement,\\n            currentRound\\n        );\\n    }\\n\\n    function cancelWithdraw(uint8 _optionId, uint256 _assetToTerminate)\\n        external\\n        override\\n        validateOptionById(_optionId)\\n    {\\n        //require(_assetToTerminate > 0 , \\\"!_assetToTerminate\\\");\\n        //require(currentRound > 1, \\\"No on going\\\"); \\n\\n        OptionLifecycle.cancelWithdrawStorage(\\n            optionData[_optionId],\\n            msg.sender,\\n            _assetToTerminate,\\n            underSettlement,\\n            currentRound\\n        );\\n    }\\n\\n    function withdraw(\\n        uint8 _optionId,\\n        uint256 _amount,\\n        address _asset\\n    ) external override \\n        validateOptionById(_optionId){\\n        //require(_amount > 0, \\\"!amount\\\"); \\n        StructureData.OptionPairDefinition storage pair = optionPairs[\\n            (_optionId - 1) / 2\\n        ];\\n        //require(_asset == pair.depositAsset || _asset == pair.counterPartyAsset, \\\"!asset\\\");\\n        OptionLifecycle.withdrawStorage(\\n            optionData[_optionId],\\n            msg.sender,\\n            _amount,\\n            currentRound,\\n            (_optionId == pair.callOptionId && _asset == pair.depositAsset) ||\\n            (_optionId == pair.putOptionId && _asset == pair.counterPartyAsset)\\n        );\\n        clientWithdraw(msg.sender, _amount, _asset, false);\\n        emit Withdraw(_optionId, msg.sender, _asset, _amount);\\n    }\\n\\n    //deposit eth\\n    function depositETH(uint8 _optionId) external payable override \\n        validateOptionById(_optionId){\\n        require(currentRound > 0, \\\"!Started\\\");\\n        require(msg.value > 0, \\\"no value\\\");\\n \\n        StructureData.OptionPairDefinition storage pair = optionPairs[\\n            (_optionId - 1) / 2\\n        ];\\n        require(!pair.manualDepositDisabled, \\\"DepositDisabled\\\");  \\n        address depositAsset = pair.callOptionId == _optionId\\n            ? pair.depositAsset\\n            : pair.counterPartyAsset;\\n        require(depositAsset == address(0));\\n\\n        //todo: convert to weth\\n        OptionLifecycle.depositFor(\\n            optionData[_optionId],\\n            msg.sender,\\n            msg.value,\\n            0,\\n            currentRound,\\n            true\\n        );\\n\\n        emit Deposit(_optionId, msg.sender, currentRound, msg.value);\\n        //payable(vaultAddress()).transfer(msg.value);\\n    }\\n\\n    //deposit other erc20 coin, take wbtc\\n    function deposit(uint8 _optionId, uint256 _amount) external override \\n        validateOptionById(_optionId){\\n        require(currentRound > 0, \\\"!Started\\\");\\n        require(_amount > 0, \\\"!amount\\\"); \\n        StructureData.OptionPairDefinition storage pair = optionPairs[\\n            (_optionId - 1) / 2\\n        ];\\n        require(!pair.manualDepositDisabled, \\\"DepositDisabled\\\");  \\n        address depositAsset = pair.callOptionId == _optionId\\n            ? pair.depositAsset\\n            : pair.counterPartyAsset;\\n        require(depositAsset != address(0));\\n\\n        OptionLifecycle.depositFor(\\n            optionData[_optionId],\\n            msg.sender,\\n            _amount,\\n            0,\\n            currentRound,\\n            true\\n        );\\n        emit Deposit(_optionId, msg.sender, currentRound, _amount);\\n        IERC20(depositAsset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n    }\\n \\n\\n    //used to render the history at client side, reading the minting transactions of a specific address,\\n    //for each transaction, read the blockheight and call this method to get the result\\n    //the blockheight is the the height when the round is committed\\n    //function getRoundData(uint8 _optionId, uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\\n    //    return optionStates[_optionId][optionHeights[_blockHeight]];\\n    //}\\n\\n    /*function getRoundDataByBlock(uint8 _optionId, uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\\n        return optionData[_optionId].optionStates[optionHeights[_blockHeight]];\\n    }*/\\n\\n    function getOptionStateByRound(uint8 _optionId, uint16 _round)\\n        external\\n        view\\n        override\\n        returns (StructureData.OptionState memory)\\n    {\\n        return optionData[_optionId].optionStates[_round];\\n    }\\n\\n    function autoRollToCounterPartyByOption(\\n        StructureData.OptionData storage _option,\\n        StructureData.OptionState storage _optionState,\\n        StructureData.OptionData storage _counterPartyOption,\\n        uint8 _counterPartyOptionId,\\n        uint256 _totalReleased,\\n        uint256 _totalAutoRoll\\n    ) internal override {\\n        uint256 totalAutoRollBase = uint256(_optionState.totalAmount).sub(\\n            _optionState.totalTerminate\\n        );\\n        if (_option.assetToTerminateForNextRound > 0 && _totalAutoRoll > 0) {\\n            _option.assetToTerminateForNextRound = uint256(_option\\n                .assetToTerminateForNextRound)\\n                .subOrZero(\\n                    totalAutoRollBase.withPremium(_optionState.premiumRate)\\n                ).toUint128();\\n        }\\n        uint256 userCount = _option.usersInvolved.length;\\n        for (uint256 i = 0; i < userCount; i++) {\\n            address userAddress = _option.usersInvolved[i];\\n            StructureData.UserState storage userState = _option.userStates[\\n                userAddress\\n            ];\\n\\n            if (userState.ongoingAsset == 0) {\\n                continue;\\n            }\\n            uint256 amountToTerminate = Utils.getAmountToTerminate(\\n                _totalReleased,\\n                userState.assetToTerminate,\\n                _optionState.totalTerminate\\n            );\\n            if (amountToTerminate > 0) {\\n                userState.releasedCounterPartyAssetAmount = uint256(userState\\n                    .releasedCounterPartyAssetAmount)\\n                    .add(amountToTerminate).toUint128();\\n            }\\n            uint256 onGoing = uint256(userState.ongoingAsset).sub(\\n                userState.assetToTerminate\\n            );\\n            uint256 remainingAmount = Utils.getAmountToTerminate(\\n                _totalAutoRoll,\\n                onGoing,\\n                totalAutoRollBase\\n            );\\n            if (remainingAmount > 0) {\\n                uint256 onGoingTerminate = 0;\\n                uint256 virtualOnGoing = onGoing.withPremium(\\n                    _optionState.premiumRate\\n                );\\n                if (userState.assetToTerminateForNextRound <= virtualOnGoing) {\\n                    onGoingTerminate = Utils.getAmountToTerminate(\\n                        remainingAmount,\\n                        userState.assetToTerminateForNextRound,\\n                        virtualOnGoing\\n                    );\\n                } else {\\n                    onGoingTerminate = remainingAmount;\\n                }\\n                OptionLifecycle.depositFor(\\n                    _counterPartyOption,\\n                    userAddress,\\n                    remainingAmount,\\n                    onGoingTerminate,\\n                    currentRound - 1,\\n                    false\\n                );\\n                emit Deposit(\\n                    _counterPartyOptionId,\\n                    userAddress,\\n                    currentRound - 1,\\n                    remainingAmount\\n                );\\n            }\\n            userState.assetToTerminate = 0;\\n        }\\n    }\\n\\n    function autoRollByOption(\\n        StructureData.OptionData storage _option,\\n        uint8 _optionId,\\n        StructureData.OptionState storage _optionState,\\n        uint256 _totalReleased,\\n        uint256 _totalAutoRoll\\n    ) internal override {\\n        //uint256 lockedRound = currentRound - 1;\\n\\n        uint256 totalAutoRollBase = uint256(_optionState.totalAmount).sub(\\n            _optionState.totalTerminate\\n        );\\n        uint256 userCount = _option.usersInvolved.length;\\n        for (uint256 i = 0; i < userCount; i++) {\\n            address userAddress = _option.usersInvolved[i];\\n            StructureData.UserState storage userState = _option.userStates[\\n                userAddress\\n            ];\\n            if (userState.ongoingAsset == 0) {\\n                continue;\\n            }\\n\\n            uint256 amountToTerminate = Utils.getAmountToTerminate(\\n                _totalReleased,\\n                userState.assetToTerminate,\\n                _optionState.totalTerminate\\n            );\\n            if (amountToTerminate > 0) {\\n                userState.releasedDepositAssetAmount = uint256(userState\\n                    .releasedDepositAssetAmount)\\n                    .add(amountToTerminate).toUint128();\\n            }\\n            uint256 remainingAmount = Utils.getAmountToTerminate(\\n                _totalAutoRoll,\\n                uint256(userState.ongoingAsset).sub(userState.assetToTerminate),\\n                totalAutoRollBase\\n            );\\n            if (remainingAmount > 0) {\\n                OptionLifecycle.depositFor(\\n                    _option,\\n                    userAddress,\\n                    remainingAmount,\\n                    0,\\n                    currentRound - 1,\\n                    false\\n                );\\n                emit Deposit(\\n                    _optionId,\\n                    userAddress,\\n                    currentRound - 1,\\n                    remainingAmount\\n                );\\n            }\\n\\n            userState.assetToTerminate = 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xadc69dc0c25ef040292e5d11e681d50743d5d317f9cfc826ac39c329fd322ee8\",\"license\":\"MIT\"},\"contracts/HodlBoosterOptionUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {HodlBoosterOption} from \\\"./HodlBoosterOption.sol\\\";\\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";\\ncontract HodlBoosterOptionUpgradeable is OwnableUpgradeable, HodlBoosterOption {\\n    function initialize(\\n        address _owner,\\n        address _settler,\\n         StructureData.OptionPairDefinition[] memory _optionPairDefinitions\\n    ) external initializer { \\n \\n        __Ownable_init();\\n        \\n        require(_owner != address(0));\\n        require(_settler != address(0));\\n        transferOwnership(_owner);\\n        settlerRoleAddress = _settler;\\n        locked = 0;\\n        addOptionPairsInternal(_optionPairDefinitions);  \\n    }\\n\\n    function setSettler(address _settler) external onlyOwner{\\n        setSettlerInternal(_settler);\\n    }  \\n    function addOptionPairs(StructureData.OptionPairDefinition[] memory _optionPairDefinitions) external onlyOwner{\\n        addOptionPairsInternal(_optionPairDefinitions);\\n    }\\n}\\n \",\"keccak256\":\"0xdb14cc5d6803ebc283cd942c6de4ca9e7a451f617982f92cae273e2489b9a372\",\"license\":\"MIT\"},\"contracts/OptionVaultBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\"; \\n//import \\\"hardhat/console.sol\\\";\\n\\nimport {StructureData} from \\\"./libraries/StructureData.sol\\\";\\nimport {Utils} from \\\"./libraries/Utils.sol\\\";\\nimport {OptionLifecycle} from \\\"./libraries/OptionLifecycle.sol\\\";\\nimport {OptionVaultStorage} from \\\"./storage/OptionVaultStorage.sol\\\";\\nimport \\\"./interfaces/ISettlementAggregator.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nabstract contract OptionVaultBase is\\n    OptionVaultStorage, \\n    ISettlementAggregator\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using Utils for uint256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    event SettlerChanged(address indexed previousSettler, address indexed newSettler); \\n\\n\\n    function clientWithdraw(\\n        address _target,\\n        uint256 _amount,\\n        address _contractAddress,\\n        bool _redeem\\n    ) internal lock {\\n        if (!_redeem) {\\n            require(balanceEnough(_contractAddress));\\n        }\\n        OptionLifecycle.withdraw(_target, _amount, _contractAddress);\\n    }\\n    function setSettlerInternal(address _settler) internal {\\n        address oldSettlerAddress = settlerRoleAddress;\\n        settlerRoleAddress = _settler;\\n        emit SettlerChanged(oldSettlerAddress, _settler);\\n    }  \\n    function addOptionPairsInternal(\\n        StructureData.OptionPairDefinition[] memory _optionPairDefinitions\\n    ) internal { \\n        uint256 length = _optionPairDefinitions.length;\\n        uint8 optionPairCount_ = optionPairCount;\\n        uint8 assetCount_ = assetCount;\\n        for (uint256 i = 0; i < length; i++) {\\n            StructureData.OptionPairDefinition\\n                memory pair = _optionPairDefinitions[i];\\n            pair.callOptionId = optionPairCount_ * 2 + 1;\\n            pair.putOptionId = pair.callOptionId + 1;\\n            optionPairs[optionPairCount_++] = pair;\\n            if (assetCount_ == 0) {\\n                asset[assetCount_++] = pair.depositAsset;\\n                asset[assetCount_++] = pair.counterPartyAsset;\\n            } else {\\n                bool callAdded = false;\\n                bool putAdded = false;\\n                for (uint8 j = 0; j < assetCount_; j++) {\\n                    if (asset[j] == pair.depositAsset) {\\n                        callAdded = true;\\n                    }\\n                    if (asset[j] == pair.counterPartyAsset) {\\n                        putAdded = true;\\n                    }\\n                }\\n                if (!callAdded) {\\n                    asset[assetCount_++] = pair.depositAsset;\\n                }\\n                if (!putAdded) {\\n                    asset[assetCount_++] = pair.counterPartyAsset;\\n                }\\n            }\\n        }\\n        optionPairCount = optionPairCount_;\\n        assetCount = assetCount_;\\n    }\\n\\n\\n    function toggleOptionPairDeposit(uint8 _pairId) external override settlerOnly {\\n        StructureData.OptionPairDefinition storage pair = optionPairs[_pairId];\\n        pair.manualDepositDisabled = !pair.manualDepositDisabled;\\n    }\\n    \\n    function initiateSettlement() external override settlerOnly { \\n        require(!underSettlement);\\n        currentRound = currentRound + 1;\\n        underSettlement = true;\\n        for (uint8 i = 0; i < optionPairCount; i++) {\\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\\n            StructureData.OptionData storage callOption = optionData[\\n                pair.callOptionId\\n            ];\\n            uint128 pending1 = OptionLifecycle.rollToNextByOption(\\n                callOption,\\n                currentRound,\\n                true\\n            );\\n            StructureData.OptionData storage putOption = optionData[\\n                pair.putOptionId\\n            ];\\n            uint128 pending2 = OptionLifecycle.rollToNextByOption(\\n                putOption,\\n                currentRound,\\n                false\\n            );\\n            if (pending1 > 0) {\\n                assetData[pair.depositAsset].depositAmount = uint256(assetData[\\n                    pair.depositAsset\\n                ].depositAmount).add(pending1).toUint128();\\n            }\\n            if (pending2 > 0) {\\n                assetData[pair.counterPartyAsset].depositAmount = uint256(assetData[\\n                    pair.counterPartyAsset\\n                ].depositAmount).add(pending2).toUint128();\\n            }\\n            if (currentRound <= 2) {\\n                continue;\\n            }\\n\\n            StructureData.SettlementAccountingResult\\n                memory noneExecuteCallOption = OptionLifecycle\\n                    .dryRunSettlementByOption(\\n                        callOption, \\n                        true,\\n                        pair.depositAssetAmountDecimals,\\n                        pair.counterPartyAssetAmountDecimals,\\n                        currentRound,\\n                        false\\n                    );\\n            StructureData.SettlementAccountingResult\\n                memory noneExecutePutOption = OptionLifecycle\\n                    .dryRunSettlementByOption(\\n                        putOption, \\n                        false,\\n                        pair.counterPartyAssetAmountDecimals,\\n                        pair.depositAssetAmountDecimals,\\n                        currentRound,\\n                        false\\n                    );\\n\\n            StructureData.OptionPairExecutionAccountingResult\\n                memory pairResult = StructureData\\n                    .OptionPairExecutionAccountingResult({\\n                        execute: StructureData.OptionExecution.NoExecution,\\n                        callOptionResult: noneExecuteCallOption,\\n                        putOptionResult: noneExecutePutOption\\n                    });\\n            executionAccountingResult[i * 3] = pairResult;\\n            StructureData.SettlementAccountingResult\\n                memory executeCallOption = OptionLifecycle\\n                    .dryRunSettlementByOption(\\n                        callOption, \\n                        true,\\n                        pair.depositAssetAmountDecimals,\\n                        pair.counterPartyAssetAmountDecimals,\\n                        currentRound,\\n                        true\\n                    );\\n            pairResult = StructureData.OptionPairExecutionAccountingResult({\\n                execute: StructureData.OptionExecution.ExecuteCall,\\n                callOptionResult: executeCallOption,\\n                putOptionResult: noneExecutePutOption\\n            });\\n            executionAccountingResult[i * 3 + 1] = pairResult;\\n\\n            StructureData.SettlementAccountingResult\\n                memory executePutOption = OptionLifecycle\\n                    .dryRunSettlementByOption(\\n                        putOption, \\n                        false,\\n                        pair.counterPartyAssetAmountDecimals,\\n                        pair.depositAssetAmountDecimals,\\n                        currentRound,\\n                        true\\n                    );\\n            pairResult = StructureData.OptionPairExecutionAccountingResult({\\n                execute: StructureData.OptionExecution.ExecutePut,\\n                callOptionResult: noneExecuteCallOption,\\n                putOptionResult: executePutOption\\n            });\\n            executionAccountingResult[i * 3 + 2] = pairResult;\\n        }\\n\\n        if (currentRound == 1) {\\n            underSettlement = false;\\n            return;\\n        }\\n        if (currentRound == 2) {\\n            for(uint8 i = 1; i <= optionPairCount * 2; i++) { \\n                OptionLifecycle.commitByOption(optionData[i], 1); \\n            }            \\n            updateAsset();\\n            underSettlement = false;\\n        }\\n    }\\n\\n    function settle(StructureData.OptionExecution[] memory _execution)\\n        external\\n        override \\n        settlerOnly\\n    { \\n        require(underSettlement);\\n        uint256 count = _execution.length;\\n        require(count == optionPairCount);\\n        uint16 previousRound = currentRound - 1;\\n        for (uint8 i = 0; i < count; i++) {\\n            StructureData.OptionExecution execution = _execution[i];\\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\\n\\n            StructureData.OptionData storage callOption = optionData[\\n                pair.callOptionId\\n            ];\\n            StructureData.OptionData storage putOption = optionData[\\n                pair.putOptionId\\n            ];\\n            StructureData.MaturedState memory maturedState;\\n            StructureData.OptionState\\n                storage previousCallOptionState = callOption.optionStates[\\n                    previousRound - 1\\n                ];\\n            if (previousCallOptionState.totalAmount > 0) { \\n                maturedState = OptionLifecycle.closePreviousByOption(\\n                    callOption,\\n                    previousCallOptionState,\\n                    true,\\n                    pair.depositAssetAmountDecimals,\\n                    pair.counterPartyAssetAmountDecimals,\\n                    execution == StructureData.OptionExecution.ExecuteCall\\n                );\\n                if (maturedState.releasedDepositAssetAmount > 0) {\\n                    assetData[pair.depositAsset].releasedAmount = uint256(assetData[\\n                        pair.depositAsset\\n                    ].releasedAmount).add(\\n                            maturedState.releasedDepositAssetAmountWithPremium\\n                        ).toUint128();\\n                } else if (maturedState.releasedCounterPartyAssetAmount > 0) {\\n                    assetData[pair.counterPartyAsset]\\n                        .releasedAmount = uint256(assetData[pair.counterPartyAsset]\\n                        .releasedAmount)\\n                        .add(\\n                            maturedState\\n                                .releasedCounterPartyAssetAmountWithPremium\\n                        ).toUint128();\\n                }\\n                if (execution == StructureData.OptionExecution.ExecuteCall) {\\n                    autoRollToCounterPartyByOption(\\n                        callOption,\\n                        previousCallOptionState,\\n                        putOption,\\n                        pair.putOptionId,\\n                        maturedState.releasedCounterPartyAssetAmountWithPremium,\\n                        maturedState.autoRollCounterPartyAssetAmountWithPremium\\n                    );\\n                } else {\\n                    autoRollByOption(\\n                        callOption,\\n                        pair.callOptionId,\\n                        previousCallOptionState,\\n                        maturedState.releasedDepositAssetAmountWithPremium,\\n                        maturedState.autoRollDepositAssetAmountWithPremium\\n                    );\\n                }\\n            }\\n\\n            StructureData.OptionState storage previousPutOptionState = putOption\\n                .optionStates[previousRound - 1];\\n\\n            if (previousPutOptionState.totalAmount > 0) { \\n                maturedState = OptionLifecycle.closePreviousByOption(\\n                    putOption,\\n                    previousPutOptionState,\\n                    false,\\n                    pair.counterPartyAssetAmountDecimals,\\n                    pair.depositAssetAmountDecimals,\\n                    execution == StructureData.OptionExecution.ExecutePut\\n                );\\n                if (maturedState.releasedDepositAssetAmount > 0) {\\n                    assetData[pair.counterPartyAsset]\\n                        .releasedAmount = uint256(assetData[pair.counterPartyAsset]\\n                        .releasedAmount)\\n                        .add(\\n                            maturedState.releasedDepositAssetAmountWithPremium\\n                        ).toUint128();\\n                } else if (maturedState.releasedCounterPartyAssetAmount > 0) {\\n                    assetData[pair.depositAsset].releasedAmount = uint256(assetData[\\n                        pair.depositAsset\\n                    ].releasedAmount).add(\\n                            maturedState\\n                                .releasedCounterPartyAssetAmountWithPremium\\n                        ).toUint128();\\n                }\\n                if (execution == StructureData.OptionExecution.ExecutePut) {\\n                    autoRollToCounterPartyByOption(\\n                        putOption,\\n                        previousPutOptionState,\\n                        callOption,\\n                        pair.callOptionId,\\n                        maturedState.releasedCounterPartyAssetAmountWithPremium,\\n                        maturedState.autoRollCounterPartyAssetAmountWithPremium\\n                    );\\n                } else {\\n                    autoRollByOption(\\n                        putOption,\\n                        pair.putOptionId,\\n                        previousPutOptionState,\\n                        maturedState.releasedDepositAssetAmountWithPremium,\\n                        maturedState.autoRollDepositAssetAmountWithPremium\\n                    );\\n                }\\n            }\\n            OptionLifecycle.commitByOption(callOption, previousRound);\\n            OptionLifecycle.commitByOption(putOption, previousRound);\\n        }\\n\\n        updateAsset();\\n        underSettlement = false;\\n    }\\n\\n    function updateAsset() private {\\n        for (uint8 i = 0; i < assetCount; i++) {\\n            address assetAddress = asset[i];\\n            StructureData.AssetData storage assetSubData = assetData[\\n                assetAddress\\n            ];\\n            //no snaphot previously, so, no balance change\\n            //todo: room for gas improvement\\n            int128 leftOver = assetSubData.leftOverAmount +\\n                (\\n                    currentRound == 2\\n                        ? int128(0)\\n                        : (int128(getBalanceChange(assetAddress)) -\\n                            int128(assetSubData.depositAmount) +\\n                            int128(assetSubData.releasedAmount))\\n                );\\n\\n            assetSubData.traderWithdrawn = 0;\\n            assetSubData.balanceAfterSettle = OptionLifecycle.getAvailableBalance(assetAddress, address(this)).toUint128();\\n            assetSubData.withdrawableAfterSettle = collectWithdrawable(\\n                assetAddress\\n            ).toUint128();\\n            StructureData.SettlementCashflowResult\\n                memory instruction = StructureData.SettlementCashflowResult({\\n                    newReleasedAmount: assetSubData.releasedAmount,\\n                    newDepositAmount: assetSubData.depositAmount,\\n                    leftOverAmount: leftOver,\\n                    contractAddress: assetAddress\\n                });\\n            settlementCashflowResult[assetAddress] = instruction;\\n            //todo: check overflow\\n            assetSubData.leftOverAmount =\\n                int128(leftOver +\\n                int128(assetSubData.depositAmount) -\\n                int128(assetSubData.releasedAmount));\\n            assetSubData.depositAmount = 0;\\n            assetSubData.releasedAmount = 0;\\n        }\\n    }\\n\\n    function setOptionParameters(\\n        uint256[] memory _parameters\\n    ) external override settlerOnly { \\n        uint256 count = _parameters.length; \\n        require(!underSettlement);\\n        require(currentRound > 1);\\n        require(count == optionPairCount*2);\\n        for (uint8 i = 0; i < count; i++) {\\n            uint256 parameter = _parameters[i];\\n            StructureData.OptionState storage optionState = optionData[i+1].optionStates[currentRound - 1];\\n            OptionLifecycle.setOptionParameters(parameter, optionState); \\n        }\\n    }\\n\\n    //todo: whitelist\\n    function withdrawAsset(address _trader, address _asset) external override lock settlerOnly { \\n        StructureData.AssetData storage assetSubData = assetData[_asset];\\n        require(assetSubData.leftOverAmount > 0); \\n        uint128 balance = uint128(assetSubData.leftOverAmount);\\n        OptionLifecycle.withdraw(_trader, uint256(balance), _asset);\\n        assetSubData.traderWithdrawn = balance;\\n        assetSubData.leftOverAmount = 0;\\n    }\\n\\n    function batchWithdrawAssets(address _trader, address[] memory _assets) external override lock settlerOnly{ \\n        uint256 count = _assets.length;\\n        for(uint256 i = 0; i < count; i++) {\\n            StructureData.AssetData storage assetSubData = assetData[_assets[i]];\\n            require(assetSubData.leftOverAmount > 0); \\n            uint128 balance = uint128(assetSubData.leftOverAmount);\\n            OptionLifecycle.withdraw(_trader, uint256(balance), _assets[i]);\\n            assetSubData.traderWithdrawn = balance;\\n            assetSubData.leftOverAmount = 0;\\n        }  \\n    }\\n\\n    function balanceEnough(address _asset) public view override returns (bool) {\\n        StructureData.AssetData storage assetSubData = assetData[_asset];\\n        int128 balance = assetSubData.leftOverAmount;\\n        if (balance >= 0) {\\n            return true;\\n        }\\n        if (OptionLifecycle.getAvailableBalance(_asset, address(this)) == 0) {\\n            return false;\\n        }\\n\\n        return balance >= -getBalanceChange(_asset);\\n    }\\n\\n    function getBalanceChange(address _asset) private view returns (int256) {\\n        StructureData.AssetData storage assetSubData = assetData[_asset];\\n        // int128 leastBalance = int128(assetSubData.balanceAfterSettle + collectWithdrawable(_asset) - assetSubData.withdrawableAfterSettle);\\n        //return  int128(uint128(getAvailableBalance(_asset))) - leastBalance + int128(assetSubData.traderWithdrawn);\\n        return\\n            int256(\\n                OptionLifecycle.getAvailableBalance(_asset, address(this))\\n                .add(assetSubData.traderWithdrawn).add(assetSubData.withdrawableAfterSettle)\\n            ) -\\n            int256(\\n                uint256(assetSubData.balanceAfterSettle).add(collectWithdrawable(_asset))\\n            );\\n    }\\n\\n    function collectWithdrawable(address _asset)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        uint256 total = 0;\\n        for (uint8 i = 0; i < optionPairCount; i++) {\\n            StructureData.OptionPairDefinition storage pair = optionPairs[i];\\n            if (\\n                pair.depositAsset == _asset || pair.counterPartyAsset == _asset\\n            ) {\\n                StructureData.OptionData storage callOption = optionData[\\n                    pair.callOptionId\\n                ];\\n                total = total.add(\\n                    pair.depositAsset == _asset\\n                        ? uint256(callOption.optionStates[currentRound].totalAmount).add(\\n                            callOption.totalReleasedDepositAssetAmount\\n                        )\\n                        : callOption.totalReleasedCounterPartyAssetAmount\\n                );\\n\\n                StructureData.OptionData storage putOption = optionData[\\n                    pair.putOptionId\\n                ];\\n                total = total.add(\\n                    pair.counterPartyAsset == _asset\\n                        ? uint256(putOption.optionStates[currentRound].totalAmount).add(\\n                            putOption.totalReleasedDepositAssetAmount\\n                        )\\n                        : putOption.totalReleasedCounterPartyAssetAmount\\n                );\\n            }\\n        }\\n        return total;\\n    }\\n\\n    receive() external payable {}\\n\\n    modifier lock {\\n        require(locked == 0, \\\"locked\\\");\\n        locked = 1;\\n        _;\\n        locked = 0;\\n    }\\n    modifier settlerOnly() {\\n         require(settlerRoleAddress == msg.sender, \\\"!settler\\\"); \\n         _;\\n    }\\n    function autoRollToCounterPartyByOption(\\n        StructureData.OptionData storage _option,\\n        StructureData.OptionState storage _optionState,\\n        StructureData.OptionData storage _counterPartyOption,\\n        uint8 _counterPartyOptionId,\\n        uint256 _totalReleased,\\n        uint256 _totalAutoRoll\\n    ) internal virtual;\\n\\n    function autoRollByOption(\\n        StructureData.OptionData storage _option,\\n        uint8 _optionId,\\n        StructureData.OptionState storage _optionState,\\n        uint256 _totalReleased,\\n        uint256 _totalAutoRoll\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x22a34f30fd1b6119b38617bff6336b05cc50ba2bd4e3f638a9b91166d8415635\",\"license\":\"MIT\"},\"contracts/interfaces/IPKKTStructureOption.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.4;\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";\\n \\ninterface IPKKTStructureOption {\\n \\n     event Deposit(uint8 indexed optionId, address indexed account, uint16 indexed round, uint256 amount);\\n     event Withdraw(uint8 indexed optionId, address indexed account, address indexed asset, uint256 amount);\\n     //event CloseOption(uint8 indexed optionId, uint16 indexed round);\\n     //event CommitOption(uint8 indexed optionId, uint16 indexed round);\\n     //event OpenOption(uint8 indexed optionId, uint16 indexed round);\\n     //event OptionCreated(uint8 indexed optionId, string name);\\n     //event OptionTransfer(uint8 indexed optionId, address indexed account, uint16 premium, uint16 round);\\n\\n    function getAccountBalance(uint8 _optionId) external view returns (StructureData.UserBalance memory); \\n\\n    //ISettlementAggregator.balanceEnough needs to be called if there is any release amount\\n    function getOptionSnapShot(uint8 _optionId) external view returns(StructureData.OptionSnapshot memory); \\n\\n    //deposit eth\\n    function depositETH(uint8 _optionId) external payable;\\n\\n    //deposit other erc20 coin, take wbtc or stable coin\\n    function deposit(uint8 _optionId, uint256 _amount) external;\\n\\n    //complete withdraw happens on the option vault\\n    function initiateWithraw(uint8 _optionId, uint256 _assetToTerminate) external; \\n\\n    function cancelWithdraw(uint8 _optionId, uint256 _assetToTerminate) external;\\n \\n    \\n    function withdraw(uint8 _optionId, uint256 _amount, address _asset) external; \\n \\n \\n\\n    //used to render the history at client side, reading the minting transactions of a specific address,\\n    //for each transaction, read the blockheight and call this method to get the result\\n    //the blockheight is the the height when the round is committed \\n    //function getRoundDataByBlock(uint8 _optionId, uint256 _blockHeight) external view returns(StructureData.OptionState memory);\\n\\n    function getOptionStateByRound(uint8 _optionId, uint16 _round) external view returns(StructureData.OptionState memory);\\n \\n}\\n\\n\",\"keccak256\":\"0x85ec604d9e24179daaf62c94a5b879977da88fae7b00a7c9371a1d03504d6f3f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISettlementAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.4;\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";  \\n\\ninterface ISettlementAggregator {\\n         \\n    \\n    function toggleOptionPairDeposit(uint8 _pairId) external; \\n    \\n    //rollToNext + dryRunSettlement\\n    //todo: specifying quota\\n    function initiateSettlement() external; \\n\\n    //closePrevious + calculate cash flow \\n    function settle(StructureData.OptionExecution[] memory _execution) external;\\n\\n    function setOptionParameters(uint256[] memory _paramters) external;\\n\\n    function withdrawAsset(address _trader, address _asset) external;\\n\\n    function batchWithdrawAssets(address _trader, address[] memory _assets) external;\\n\\n    function balanceEnough(address _asset) external view returns(bool); \\n}\",\"keccak256\":\"0x282237ad01e1277ca7e83d49ce634fec99d60e4d705afa036673348014c613cd\",\"license\":\"UNLICENSED\"},\"contracts/libraries/OptionLifecycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./StructureData.sol\\\";\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary OptionLifecycle {\\n    using SafeERC20 for IERC20;\\n    using Utils for uint128;\\n    using Utils for uint256;\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using StructureData for StructureData.UserState;\\n\\n    function deriveVirtualLocked(\\n        StructureData.UserState memory userState,\\n        uint16 premiumRate\\n    ) internal pure returns (uint256) {\\n        uint256 onGoing = uint256(userState.ongoingAsset);\\n        if (onGoing == 0) {\\n            return uint256(userState.tempLocked);\\n        }\\n        onGoing = (onGoing.sub(userState.assetToTerminate)).withPremium(\\n            premiumRate\\n        );\\n        if (userState.tempLocked == 0) {\\n            return onGoing;\\n        }\\n        return uint256(userState.tempLocked).add(onGoing);\\n    }\\n\\n    function getAvailableBalance(address _asset, address _source)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (_asset != address(0)) {\\n            return IERC20(_asset).balanceOf(_source);\\n        } else {\\n            return _source.balance;\\n        }\\n    }\\n\\n    function withdraw(\\n        address _target,\\n        uint256 _amount,\\n        address _contractAddress\\n    ) external {\\n        require(_amount > 0, \\\"!amt\\\");\\n        if (_contractAddress == address(0)) {\\n            payable(_target).transfer(_amount);\\n        } else {\\n            IERC20(_contractAddress).safeTransfer(_target, _amount);\\n        }\\n    }\\n\\n    function calculateMaturity(\\n        bool _execute,\\n        StructureData.OptionState memory _optionState,\\n        bool _callOrPut,\\n        uint8 _depositAssetAmountDecimals,\\n        uint8 _counterPartyAssetAmountDecimals\\n    ) public pure returns (StructureData.MaturedState memory) {\\n        StructureData.MaturedState memory state = StructureData.MaturedState({\\n            releasedDepositAssetAmount: 0,\\n            releasedDepositAssetPremiumAmount: 0,\\n            releasedDepositAssetAmountWithPremium: 0,\\n            autoRollDepositAssetAmount: 0,\\n            autoRollDepositAssetPremiumAmount: 0,\\n            autoRollDepositAssetAmountWithPremium: 0,\\n            releasedCounterPartyAssetAmount: 0,\\n            releasedCounterPartyAssetPremiumAmount: 0,\\n            releasedCounterPartyAssetAmountWithPremium: 0,\\n            autoRollCounterPartyAssetAmount: 0,\\n            autoRollCounterPartyAssetPremiumAmount: 0,\\n            autoRollCounterPartyAssetAmountWithPremium: 0\\n        });\\n        if (_execute) {\\n            uint256 maturedCounterPartyAssetAmount = \\n                _callOrPut\\n                    ? uint256(_optionState.totalAmount)\\n                        .mul(_optionState.strikePrice)\\n                        .mul(10**_counterPartyAssetAmountDecimals)\\n                        .div(\\n                            10 **\\n                                (StructureData.PRICE_PRECISION +\\n                                    _depositAssetAmountDecimals)\\n                        )\\n                    : uint256(_optionState.totalAmount)\\n                        .mul(\\n                            10 **\\n                                (StructureData.PRICE_PRECISION +\\n                                    _counterPartyAssetAmountDecimals)\\n                        )\\n                        .div(_optionState.strikePrice)\\n                        .div(10**_depositAssetAmountDecimals);\\n\\n            uint256 maturedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetAmount\\n                    .premium(_optionState.premiumRate);\\n            if (_optionState.totalTerminate > 0) {\\n                state\\n                    .releasedCounterPartyAssetAmount = maturedCounterPartyAssetAmount\\n                    .getAmountToTerminate(\\n                        _optionState.totalTerminate,\\n                        _optionState.totalAmount\\n                    );\\n                state\\n                    .releasedCounterPartyAssetPremiumAmount = maturedCounterPartyAssetPremiumAmount\\n                    .getAmountToTerminate(\\n                        _optionState.totalTerminate,\\n                        _optionState.totalAmount\\n                    );\\n                state.releasedCounterPartyAssetAmountWithPremium =\\n                    state.releasedCounterPartyAssetAmount.add(\\n                    state.releasedCounterPartyAssetPremiumAmount);\\n            }\\n            state.autoRollCounterPartyAssetAmount =\\n                maturedCounterPartyAssetAmount.sub(\\n                state.releasedCounterPartyAssetAmount);\\n            state.autoRollCounterPartyAssetPremiumAmount =\\n                maturedCounterPartyAssetPremiumAmount.sub(\\n                state.releasedCounterPartyAssetPremiumAmount);\\n            state.autoRollCounterPartyAssetAmountWithPremium =\\n                state.autoRollCounterPartyAssetAmount.add(\\n                state.autoRollCounterPartyAssetPremiumAmount);\\n        } else {\\n            uint256 maturedDepositAssetAmount = uint256(_optionState.totalAmount);\\n            uint256 maturedDepositAssetPremiumAmount = maturedDepositAssetAmount\\n                .premium(_optionState.premiumRate);\\n            if (_optionState.totalTerminate > 0) {\\n                state.releasedDepositAssetAmount = maturedDepositAssetAmount\\n                    .getAmountToTerminate(\\n                        _optionState.totalTerminate,\\n                        _optionState.totalAmount\\n                    );\\n                state\\n                    .releasedDepositAssetPremiumAmount = maturedDepositAssetPremiumAmount\\n                    .getAmountToTerminate(\\n                        _optionState.totalTerminate,\\n                        _optionState.totalAmount\\n                    );\\n                state.releasedDepositAssetAmountWithPremium =\\n                    state.releasedDepositAssetAmount.add(\\n                    state.releasedDepositAssetPremiumAmount);\\n            }\\n            state.autoRollDepositAssetAmount =\\n                maturedDepositAssetAmount.sub(\\n                state.releasedDepositAssetAmount);\\n            state.autoRollDepositAssetPremiumAmount =\\n                maturedDepositAssetPremiumAmount.sub(\\n                state.releasedDepositAssetPremiumAmount);\\n            state.autoRollDepositAssetAmountWithPremium =\\n                state.autoRollDepositAssetAmount.add(\\n                state.autoRollDepositAssetPremiumAmount);\\n        }\\n        return state;\\n    }\\n\\n    function commitByOption(\\n        StructureData.OptionData storage _option,\\n        uint16 _roundToCommit\\n    ) external {\\n        uint256 userCount = _option.usersInvolved.length;\\n        for (uint256 i = 0; i < userCount; i++) {\\n            StructureData.UserState storage userState = _option.userStates[\\n                _option.usersInvolved[i]\\n            ];\\n            if (userState.assetToTerminateForNextRound != 0) {\\n                userState.assetToTerminate = userState\\n                    .assetToTerminateForNextRound;\\n                userState.assetToTerminateForNextRound = 0;\\n            } else if (userState.assetToTerminate != 0) {\\n                userState.assetToTerminate = 0;\\n            }\\n            if (userState.tempLocked == 0) {\\n                userState.ongoingAsset = 0;\\n                continue;\\n            }\\n            userState.ongoingAsset = userState.tempLocked;\\n            userState.tempLocked = 0;\\n        } \\n        _option.optionStates[_roundToCommit].totalTerminate = uint256(_option\\n            .optionStates[_roundToCommit]\\n            .totalTerminate)\\n            .add(_option.assetToTerminateForNextRound).toUint128();\\n        _option.assetToTerminateForNextRound = 0;\\n    }\\n\\n    function rollToNextByOption(\\n        StructureData.OptionData storage _option,\\n        uint16 _currentRound,\\n        bool _callOrPut\\n    ) external returns (uint128 _pendingAmount) { \\n        StructureData.OptionState memory currentOption = StructureData\\n            .OptionState({\\n                round: _currentRound,\\n                totalAmount: 0,\\n                totalTerminate: 0,\\n                premiumRate: 0,\\n                strikePrice: 0,\\n                executed: false,\\n                callOrPut: _callOrPut\\n            });\\n        _option.optionStates[_currentRound] = currentOption;\\n        if (_currentRound > 1) {\\n            uint256 userCount = _option.usersInvolved.length;\\n            for (uint256 i = 0; i < userCount; i++) {\\n                StructureData.UserState storage userState = _option.userStates[\\n                    _option.usersInvolved[i]\\n                ];\\n                if (userState.pendingAsset != 0) {\\n                    userState.tempLocked = userState.pendingAsset;\\n                }\\n                userState.pendingAsset = 0;\\n            }\\n        } \\n        return\\n            _currentRound > 1\\n                ? _option.optionStates[_currentRound - 1].totalAmount\\n                : 0;\\n    }\\n\\n    function dryRunSettlementByOption(\\n        StructureData.OptionData storage _option,\\n        bool _isCall,\\n        uint8 _depositAssetAmountDecimals,\\n        uint8 _counterPartyAssetAmountDecimals,\\n        uint16 _currentRound,\\n        bool _execute\\n    )\\n        external\\n        view\\n        returns (StructureData.SettlementAccountingResult memory _result)\\n    {\\n        StructureData.SettlementAccountingResult memory result = StructureData\\n            .SettlementAccountingResult({ \\n                depositAmount: _option\\n                    .optionStates[_currentRound - 1]\\n                    .totalAmount,\\n                executed: _execute,\\n                autoRollAmount: 0,\\n                autoRollPremium: 0,\\n                releasedAmount: 0,\\n                releasedPremium: 0,\\n                autoRollCounterPartyAmount: 0,\\n                autoRollCounterPartyPremium: 0,\\n                releasedCounterPartyAmount: 0,\\n                releasedCounterPartyPremium: 0\\n            });\\n        if (_currentRound > 2) {\\n            StructureData.OptionState storage previousOptionState = _option\\n                .optionStates[_currentRound - 2];\\n            if (previousOptionState.totalAmount == 0) {\\n                return result;\\n            }\\n            StructureData.MaturedState memory maturedState = calculateMaturity(\\n                _execute,\\n                previousOptionState,\\n                _isCall,\\n                _depositAssetAmountDecimals,\\n                _counterPartyAssetAmountDecimals\\n            );\\n            if (_execute) {\\n                result.autoRollCounterPartyAmount = maturedState\\n                    .autoRollCounterPartyAssetAmount.toUint128();\\n                result.autoRollCounterPartyPremium = maturedState\\n                    .autoRollCounterPartyAssetPremiumAmount.toUint128();\\n                result.releasedCounterPartyAmount = maturedState\\n                    .releasedCounterPartyAssetAmount.toUint128();\\n                result.releasedCounterPartyPremium = maturedState\\n                    .releasedCounterPartyAssetPremiumAmount.toUint128();\\n            } else {\\n                result.autoRollAmount = maturedState.autoRollDepositAssetAmount.toUint128();\\n                result.autoRollPremium = maturedState\\n                    .autoRollDepositAssetPremiumAmount.toUint128();\\n                result.releasedAmount = maturedState.releasedDepositAssetAmount.toUint128();\\n                result.releasedPremium = maturedState\\n                    .releasedDepositAssetPremiumAmount.toUint128();\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function closePreviousByOption(\\n        StructureData.OptionData storage _option,\\n        StructureData.OptionState storage previousOptionState,\\n        bool _isCall,\\n        uint8 _depositAssetAmountDecimals,\\n        uint8 _counterPartyAssetAmountDecimals,\\n        bool _execute\\n    ) external returns (StructureData.MaturedState memory _maturedState) {\\n        //uint16 maturedRound = currentRound - 2;\\n        StructureData.MaturedState memory maturedState = calculateMaturity(\\n            _execute,\\n            previousOptionState,\\n            _isCall,\\n            _depositAssetAmountDecimals,\\n            _counterPartyAssetAmountDecimals\\n        );\\n        previousOptionState.executed = _execute;\\n\\n        if (_execute) {\\n            _option.totalReleasedCounterPartyAssetAmount =uint256(_option\\n                .totalReleasedCounterPartyAssetAmount)\\n                .add(maturedState.releasedCounterPartyAssetAmountWithPremium).toUint128();\\n        } else {\\n            _option.totalReleasedDepositAssetAmount = uint256(_option\\n                .totalReleasedDepositAssetAmount)\\n                .add(maturedState.releasedDepositAssetAmountWithPremium).toUint128();\\n        }\\n        return maturedState;\\n    }\\n    /*\\n        struct OptionParameters { \\n        uint128 strikePrice; // strike price if executed\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n    }\\n*/\\n    function setOptionParameters(uint256 _parameters, StructureData.OptionState storage _optionState) external {\\n \\n        require(_optionState.strikePrice == 0); \\n        _optionState.strikePrice = uint128(_parameters >> 16);\\n        _optionState.premiumRate = uint16(_parameters & 0xffff);     \\n    }\\n    function getAccountBalance(\\n        StructureData.OptionData storage _option,\\n        address _user,\\n        bool _underSettlement,\\n        uint16 _currentRound\\n    ) external view returns (StructureData.UserBalance memory) {\\n        StructureData.UserState storage userState = _option.userStates[_user];\\n\\n        StructureData.UserBalance memory result = StructureData.UserBalance({\\n            pendingDepositAssetAmount: userState.pendingAsset,\\n            releasedDepositAssetAmount: userState.releasedDepositAssetAmount,\\n            releasedCounterPartyAssetAmount: userState\\n                .releasedCounterPartyAssetAmount,\\n            lockedDepositAssetAmount: 0,\\n            terminatingDepositAssetAmount: 0,\\n            toTerminateDepositAssetAmount: 0\\n        });\\n        if (_underSettlement) {\\n            if (_currentRound > 2) {\\n                //when there are maturing round waiting for settlement, it becomes complex\\n                uint16 premiumRate = _option\\n                    .optionStates[_currentRound - 2]\\n                    .premiumRate;\\n                result.lockedDepositAssetAmount = deriveVirtualLocked(\\n                    userState,\\n                    premiumRate\\n                ).toUint128();\\n                result.terminatingDepositAssetAmount = uint256(userState\\n                    .assetToTerminate)\\n                    .withPremium(premiumRate).toUint128();\\n            } else {\\n                result.lockedDepositAssetAmount = userState.tempLocked;\\n            }\\n            result.toTerminateDepositAssetAmount = userState\\n                    .assetToTerminateForNextRound;\\n        } else {\\n            result.lockedDepositAssetAmount = userState.ongoingAsset;\\n            result.toTerminateDepositAssetAmount = userState.assetToTerminate;\\n        }\\n        return result;\\n    }\\n\\n    function getOptionSnapShot(\\n        StructureData.OptionData storage _option,\\n        bool _underSettlement,\\n        uint16 _currentRound\\n    ) external view returns (StructureData.OptionSnapshot memory) {\\n        StructureData.OptionState memory lockedOption;\\n        StructureData.OptionState memory onGoingOption;\\n        StructureData.OptionSnapshot memory result = StructureData\\n            .OptionSnapshot({\\n                totalPending: _option.optionStates[_currentRound].totalAmount,\\n                totalReleasedDeposit: _option.totalReleasedDepositAssetAmount,\\n                totalReleasedCounterParty: _option\\n                    .totalReleasedCounterPartyAssetAmount,\\n                totalLocked: 0,\\n                totalTerminating: 0,\\n                totalToTerminate: 0\\n            });\\n        if (_underSettlement) {\\n            lockedOption = _option.optionStates[_currentRound - 1];\\n            result.totalToTerminate = _option.assetToTerminateForNextRound;\\n            if (_currentRound > 2) {\\n                //when there are maturing round waiting for settlement, it becomes complex\\n                onGoingOption = _option.optionStates[_currentRound - 2];\\n                result.totalTerminating = uint256(onGoingOption\\n                    .totalTerminate)\\n                    .withPremium(onGoingOption.premiumRate).toUint128();\\n                result.totalLocked = uint256(lockedOption\\n                    .totalAmount)\\n                    .add(\\n                        onGoingOption.totalAmount.withPremium(\\n                            onGoingOption.premiumRate\\n                        )\\n                    )\\n                    .sub(result.totalTerminating).toUint128();\\n            } else {\\n                result.totalLocked = lockedOption.totalAmount;\\n            }\\n        } else if (_currentRound > 1) {\\n            onGoingOption = _option.optionStates[_currentRound - 1];\\n            result.totalLocked = onGoingOption.totalAmount;\\n            result.totalToTerminate = onGoingOption.totalTerminate;\\n        }\\n        return result;\\n    }\\n\\n    function initiateWithrawStorage(\\n        StructureData.OptionData storage _option,\\n        address _user,\\n        uint256 _assetToTerminate,\\n        bool _underSettlement,\\n        uint16 _currentRound\\n    ) external {\\n        StructureData.UserState storage userState = _option.userStates[_user];\\n        if (_underSettlement) {\\n            uint256 newAssetToTerminate = uint256(userState\\n                .assetToTerminateForNextRound)\\n                .add(_assetToTerminate);\\n            if (_currentRound == 2) {\\n                require(newAssetToTerminate <= userState.tempLocked);\\n                StructureData.OptionState storage previousOption = _option\\n                    .optionStates[_currentRound - 1];\\n                previousOption.totalTerminate = uint256(previousOption\\n                    .totalTerminate)\\n                    .add(_assetToTerminate).toUint128();\\n            } else {\\n                StructureData.OptionState storage onGoingOption = _option\\n                    .optionStates[_currentRound - 2];\\n                uint256 totalLocked = deriveVirtualLocked(\\n                    userState,\\n                    onGoingOption.premiumRate\\n                );\\n                require(newAssetToTerminate <= totalLocked);\\n                //store temporarily\\n                _option.assetToTerminateForNextRound = uint256(_option\\n                    .assetToTerminateForNextRound)\\n                    .add(_assetToTerminate).toUint128();\\n            }\\n            userState.assetToTerminateForNextRound = newAssetToTerminate.toUint128();\\n        } else {\\n            uint256 newAssetToTerminate = uint256(userState.assetToTerminate).add(\\n                _assetToTerminate\\n            );\\n            require(newAssetToTerminate <= userState.ongoingAsset);\\n            userState.assetToTerminate = newAssetToTerminate.toUint128();\\n            StructureData.OptionState storage previousOption = _option\\n                .optionStates[_currentRound - 1];\\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).add(\\n                _assetToTerminate\\n            ).toUint128();\\n        }\\n    }\\n\\n    function cancelWithdrawStorage(\\n        StructureData.OptionData storage _option,\\n        address _user,\\n        uint256 _assetToTerminate,\\n        bool _underSettlement,\\n        uint16 _currentRound\\n    ) external {\\n        StructureData.UserState storage userState = _option.userStates[_user];\\n        if (_underSettlement) {\\n            userState.assetToTerminateForNextRound = uint256(userState\\n                .assetToTerminateForNextRound)\\n                .sub(_assetToTerminate).toUint128();\\n            if (_currentRound == 2) {\\n                StructureData.OptionState storage previousOption = _option\\n                    .optionStates[_currentRound - 1];\\n                previousOption.totalTerminate = uint256(previousOption\\n                    .totalTerminate)\\n                    .sub(_assetToTerminate).toUint128();\\n            } else {\\n                //store temporarily\\n                _option.assetToTerminateForNextRound = uint256(_option\\n                    .assetToTerminateForNextRound)\\n                    .sub(_assetToTerminate).toUint128();\\n            }\\n        } else {\\n            userState.assetToTerminate = uint256(userState.assetToTerminate).sub(\\n                _assetToTerminate\\n            ).toUint128();\\n            StructureData.OptionState storage previousOption = _option\\n                .optionStates[_currentRound - 1];\\n            previousOption.totalTerminate = uint256(previousOption.totalTerminate).sub(\\n                _assetToTerminate\\n            ).toUint128();\\n        }\\n    }\\n\\n    function withdrawStorage(\\n        StructureData.OptionData storage _option,\\n        address _user,\\n        uint256 _amount,\\n        uint16 _currentRound,\\n        bool _isDeposit\\n    ) external {\\n        //require(_amount > 0, \\\"!amount\\\");\\n        StructureData.UserState storage userState = _option.userStates[_user];\\n        if (_isDeposit) {\\n            //todo: 0 out released amount if missing balance from trader\\n            uint256 releasedAmount = uint256(userState.releasedDepositAssetAmount);\\n            if (releasedAmount <= _amount) {\\n                uint256 redeemAmount = _amount.sub(releasedAmount);\\n                userState.pendingAsset = uint256(userState.pendingAsset).sub(\\n                    redeemAmount\\n                ).toUint128();\\n                userState.releasedDepositAssetAmount = 0;\\n                _option.totalReleasedDepositAssetAmount = uint256(_option\\n                    .totalReleasedDepositAssetAmount)\\n                    .sub(releasedAmount).toUint128();\\n                StructureData.OptionState storage optionState = _option\\n                    .optionStates[_currentRound];\\n                optionState.totalAmount = uint256(optionState.totalAmount).sub(\\n                    redeemAmount\\n                ).toUint128();\\n            } else {\\n                userState.releasedDepositAssetAmount = releasedAmount.sub(\\n                    _amount\\n                ).toUint128();\\n                _option.totalReleasedDepositAssetAmount = uint256(_option\\n                    .totalReleasedDepositAssetAmount)\\n                    .sub(_amount).toUint128();\\n            }\\n        } else {\\n            //same result as completeWithdraw\\n            userState.releasedCounterPartyAssetAmount = uint256(userState\\n                .releasedCounterPartyAssetAmount)\\n                .sub(_amount).toUint128();\\n            _option.totalReleasedCounterPartyAssetAmount = uint256(_option\\n                .totalReleasedCounterPartyAssetAmount)\\n                .sub(_amount).toUint128();\\n        }\\n    }\\n\\n    function depositFor(\\n        StructureData.OptionData storage _option,\\n        address _userAddress,\\n        uint256 _amount,\\n        uint256 _toTerminate,\\n        uint16 _round,\\n        bool _isOpenRound\\n    ) external {\\n        //require(optionState.totalAmount + (_amount) <= quota[_optionId], \\\"Not enough quota\\\");\\n\\n        StructureData.OptionState storage optionState = _option.optionStates[\\n            _round\\n        ];\\n        StructureData.UserState storage userState = _option.userStates[\\n            _userAddress\\n        ];\\n        //first time added\\n        if (!userState.hasState) {\\n            userState.hasState = true;\\n            _option.usersInvolved.push(_userAddress);\\n        }\\n        if (!_isOpenRound) {\\n            userState.tempLocked = uint256(userState.tempLocked).add(_amount).toUint128();\\n            if (_toTerminate > 0) {\\n                userState.assetToTerminateForNextRound = uint256(userState\\n                    .assetToTerminateForNextRound)\\n                    .add(_toTerminate).toUint128();\\n                _option.assetToTerminateForNextRound = uint256(_option\\n                    .assetToTerminateForNextRound)\\n                    .add(_toTerminate).toUint128();\\n            }\\n        } else {\\n            userState.pendingAsset = uint256(userState.pendingAsset).add(_amount).toUint128();\\n        }\\n        optionState.totalAmount = uint256(optionState.totalAmount).add(_amount).toUint128();\\n    }\\n}\\n\",\"keccak256\":\"0x504a1220ad518cc592449db834b6f4254b6b39b6bf737abee3166df993ababf3\",\"license\":\"MIT\"},\"contracts/libraries/StructureData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary StructureData {\\n    bytes32 public constant OPTION_ROLE = keccak256(\\\"OPTION_ROLE\\\");\\n    bytes32 public constant SETTLER_ROLE = keccak256(\\\"SETTLER_ROLE\\\");\\n    uint8 public constant MATUREROUND = 1; //7 for daily settlement, 1 for daily settlement\\n    uint8 public constant PRICE_PRECISION = 4;\\n    struct OptionParameters { \\n        uint128 strikePrice; // strike price if executed\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n    }\\n\\n    struct OptionState {\\n        uint128 totalAmount;\\n        uint128 totalTerminate;\\n        uint128 strikePrice;\\n        uint16 round;\\n        uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n        bool executed;\\n        bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral;\\n    }\\n\\n    struct MaturedState {\\n        uint256 releasedDepositAssetAmount;\\n        uint256 releasedDepositAssetPremiumAmount;\\n        uint256 releasedDepositAssetAmountWithPremium;\\n        uint256 releasedCounterPartyAssetAmount;\\n        uint256 releasedCounterPartyAssetPremiumAmount;\\n        uint256 releasedCounterPartyAssetAmountWithPremium;\\n        uint256 autoRollDepositAssetAmount;\\n        uint256 autoRollDepositAssetPremiumAmount;\\n        uint256 autoRollDepositAssetAmountWithPremium;\\n        uint256 autoRollCounterPartyAssetAmount;\\n        uint256 autoRollCounterPartyAssetPremiumAmount;\\n        uint256 autoRollCounterPartyAssetAmountWithPremium;\\n    }\\n\\n    struct AssetData {\\n        uint128 releasedAmount; //debit\\n        uint128 depositAmount; //credit\\n        int128 leftOverAmount; //history balance\\n        /*\\n         *  actual balance perspective\\n         *  withdrawable = redeemable + released\\n         *  balance = withdrawable + leftOver\\n         */\\n        uint128 balanceAfterSettle;\\n        uint128 withdrawableAfterSettle;\\n        uint128 traderWithdrawn;\\n    }\\n\\n    struct OptionData {\\n        uint128 totalReleasedDepositAssetAmount;\\n        uint128 totalReleasedCounterPartyAssetAmount;\\n        uint128 assetToTerminateForNextRound;\\n        mapping(uint16 => StructureData.OptionState) optionStates;\\n        address[] usersInvolved;\\n        mapping(address => StructureData.UserState) userStates;\\n    }\\n\\n    struct UserState {\\n        uint128 pendingAsset; //for current round\\n        uint128 tempLocked; //asset not sent to trader yet, but closed for deposit\\n        uint128 ongoingAsset;\\n        uint128 assetToTerminate;\\n        uint128 assetToTerminateForNextRound;\\n        uint128 releasedDepositAssetAmount;\\n        uint128 releasedCounterPartyAssetAmount;\\n        bool hasState;\\n    }\\n\\n    struct OptionSnapshot {\\n        uint128 totalPending;\\n        //total tvl = totalLocked + totalTerminating\\n        uint128 totalLocked;\\n        //only set during settlement\\n        uint128 totalTerminating;\\n        //amount to terminate in next round,  totalToTerminate <= totalLocked\\n        uint128 totalToTerminate;\\n        uint128 totalReleasedDeposit;\\n        uint128 totalReleasedCounterParty;\\n    }\\n\\n    struct UserBalance {\\n        uint128 pendingDepositAssetAmount;\\n        //tvl = lockedDepositAssetAmount + terminatingDepositAssetAmount\\n        uint128 lockedDepositAssetAmount;\\n        //only set during settlement\\n        uint128 terminatingDepositAssetAmount;\\n        //amount to terminate in next round, toTerminateDepositAssetAmount <= lockedDepositAssetAmount\\n        uint128 toTerminateDepositAssetAmount;\\n        uint128 releasedDepositAssetAmount;\\n        uint128 releasedCounterPartyAssetAmount;\\n    }\\n    struct OptionPairDefinition {\\n        uint8 callOptionId;\\n        uint8 putOptionId;\\n        uint8 depositAssetAmountDecimals;\\n        uint8 counterPartyAssetAmountDecimals;\\n        address depositAsset;\\n        address counterPartyAsset;\\n        bool manualDepositDisabled;\\n    }\\n    struct SettlementAccountingResult {\\n        uint128 depositAmount;\\n        uint128 autoRollAmount; //T-1 Carried (filled only when not executed)\\n        uint128 autoRollPremium; //Premium (filled only when not executed)\\n        //maturedAmount+maturedPremium = requested withdrawal for deposit asset(filled only when not executed and with withdraw request)\\n        uint128 releasedAmount;\\n        uint128 releasedPremium;\\n        //autoRollCounterPartyAmount + autoRollCounterPartyPremium = Execution rolled-out for deposit asset (Execution roll-in for counter party option)\\n        //filled only when executed\\n        uint128 autoRollCounterPartyAmount;\\n        uint128 autoRollCounterPartyPremium;\\n        //maturedCounterPartyAmount+maturedCounterPartyPremium= requested withdrawal for couter party asset(filled only when executed and with withdraw request)\\n        uint128 releasedCounterPartyAmount;\\n        uint128 releasedCounterPartyPremium;  \\n        bool executed;\\n    }\\n\\n    enum OptionExecution {\\n        NoExecution,\\n        ExecuteCall,\\n        ExecutePut\\n    }\\n\\n    struct OptionPairExecutionAccountingResult {\\n        SettlementAccountingResult callOptionResult;\\n        SettlementAccountingResult putOptionResult;\\n        OptionExecution execute;\\n    }\\n\\n    struct SettlementCashflowResult {\\n        uint128 newDepositAmount;\\n        uint128 newReleasedAmount;\\n        int128 leftOverAmount; //positive, if trader didn't withdraw last time; negative, if trader failed to send back last time;\\n        address contractAddress; //0 for eth\\n    }\\n}\\n\",\"keccak256\":\"0x72a19f2e13ed93e50af73e5a197eb2a39419d2e9a535171b688428a3ed1ac7da\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nlibrary Utils { \\n     \\n    uint256 public constant RATIOMULTIPLIER = 10000;\\n \\n     using SafeMath for uint256;\\n      function StringConcat(bytes memory _base, bytes memory _value) internal pure returns (string memory) {\\n        string memory _tmpValue = new string(_base.length + _value.length);\\n        bytes memory _newValue = bytes(_tmpValue);\\n\\n        uint i;\\n        uint j;\\n\\n        for(i=0; i<_base.length; i++) {\\n            _newValue[j++] = _base[i];\\n        }\\n\\n        for(i=0; i<_value.length; i++) {\\n            _newValue[j++] = _value[i++];\\n        }\\n\\n        return string(_newValue);\\n    }\\n\\n    function Uint8Sub(uint8 a, uint8 b) internal pure returns (uint8) {\\n        require(b <= a);\\n        return a - b;\\n    }\\n    \\n \\n    function getAmountToTerminate(uint256 _maturedAmount, uint256 _assetToTerminate, uint256 _assetAmount) \\n    internal pure returns(uint256) {\\n       if (_assetToTerminate == 0 || _assetAmount == 0 || _maturedAmount == 0) return 0;\\n       return _assetToTerminate >= _assetAmount ?  _maturedAmount  : _maturedAmount.mul(_assetToTerminate).div(_assetAmount);\\n   }\\n\\n   function withPremium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\n       return  _baseAmount.mul(RATIOMULTIPLIER + _premimumRate).div(RATIOMULTIPLIER);\\n   }\\n   \\n   function premium(uint256 _baseAmount, uint256 _premimumRate) internal pure returns(uint256) {\\n       return   _baseAmount.mul(_premimumRate).div(RATIOMULTIPLIER);\\n   }\\n   \\n   function subOrZero(uint256 _base, uint256 _substractor) internal pure returns (uint256) {\\n       return _base >= _substractor ? _base - _substractor : 0;\\n   }\\n  \\n    /*function assertUint104(uint256 num) internal pure {\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\n    }\\n\\n    function assertUint128(uint256 num) internal pure {\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\n    }*/\\n\\n}\",\"keccak256\":\"0x6277c7104f3569aebb54e17a5701db95d342ef407f03b64eca935e18ea5d5d2c\",\"license\":\"MIT\"},\"contracts/storage/OptionVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\"; \\nabstract contract OptionVaultStorageV1 { \\n    uint256 internal locked;\\n    address internal settlerRoleAddress;\\n    uint8 public optionPairCount;\\n    uint8 internal assetCount;\\n    uint16 public currentRound;\\n    bool public underSettlement;\\n\\n    mapping(address => StructureData.SettlementCashflowResult)\\n        public settlementCashflowResult; \\n    mapping(address => StructureData.AssetData) internal assetData;\\n\\n    mapping(uint8 => StructureData.OptionPairDefinition) public optionPairs;\\n\\n    mapping(uint8 => StructureData.OptionPairExecutionAccountingResult)\\n        public executionAccountingResult; \\n\\n    mapping(uint8 => StructureData.OptionData) internal optionData;\\n    mapping(uint8 => address) internal asset;\\n    \\n}\\n\\nabstract contract OptionVaultStorage is OptionVaultStorageV1 {\\n\\n}\",\"keccak256\":\"0x9833da5d1453486ac02076bc304c86b9784a86b6ac3176fa5934803b30ffc595\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506151fa806100206000396000f3fe6080604052600436106101a05760003560e01c80636386bcc4116100ec5780638a19c8bc1161008a578063c78b432e11610064578063c78b432e14610871578063ddd0247514610886578063f2fde38b146108b9578063f4d4c9d7146108d957600080fd5b80638a19c8bc146106ab5780638da5cb5b146106e0578063c5cfc5be1461070857600080fd5b806371018682116100c657806371018682146105bd578063715018a6146105dd5780637332655b146105f257806383eb772e1461061257600080fd5b80636386bcc4146104ad578063644d41ed146105705780636b37e4e31461059057600080fd5b806326b516991161015957806351fe669e1161013357806351fe669e146102d757806355bf621f1461044d5780635d3e0e4d1461046d5780635edae4db1461048d57600080fd5b806326b516991461027757806332b76e86146102975780634dd96f86146102b757600080fd5b806302c178d7146101ac5780630748248f146101ce57806307f19eba1461020457806310a1f8b414610224578063222f6b8314610244578063256d43d71461026457600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101cc6101c73660046145c7565b6108f9565b005b3480156101da57600080fd5b506066546101ef90600160c01b900460ff1681565b60405190151581526020015b60405180910390f35b34801561021057600080fd5b506101cc61021f3660046145ad565b610a4a565b34801561023057600080fd5b506101cc61023f3660046145f9565b610a80565b34801561025057600080fd5b506101cc61025f366004614a7f565b610b4f565b6101cc610272366004614a29565b610c37565b34801561028357600080fd5b506101cc610292366004614655565b610e8c565b3480156102a357600080fd5b506101cc6102b2366004614702565b611076565b3480156102c357600080fd5b506101cc6102d23660046147d4565b611820565b3480156102e357600080fd5b5061043e6102f2366004614a29565b606a602090815260009182526040918290208251610140808201855282546001600160801b038082168452600160801b918290048116848701526001850154808216858901528290048116606080860191909152600286015480831660808088019190915290849004831660a080880191909152600388015480851660c0808a019190915290869004851660e0808a019190915260048a0154808716610100808c01919091529088900460ff9081161515610120808d01919091528e519a8b018f5260058d0154808a168c528a900489169d8b019d909d5260068c01548089169e8b019e909e529c88900487169589019590955260078a01548087169489019490945292869004851691870191909152600888015480851691870191909152849004831690850152600986015491821690840152048516151593810193909352600a9091015490921683565b6040516101fb93929190614da9565b34801561045957600080fd5b506101cc610468366004614aa8565b6119c6565b34801561047957600080fd5b506101cc610488366004614a29565b611ba7565b34801561049957600080fd5b506101cc6104a83660046147a1565b611c07565b3480156104b957600080fd5b506105226104c8366004614a29565b6069602052600090815260409020805460019091015460ff808316926101008104821692620100008204831692630100000083048116926001600160a01b03600160201b90910481169290811691600160a01b9091041687565b6040805160ff98891681529688166020880152948716948601949094529490911660608401526001600160a01b03908116608084015290921660a082015290151560c082015260e0016101fb565b34801561057c57600080fd5b506101ef61058b3660046145ad565b611c3a565b34801561059c57600080fd5b506105b06105ab366004614a29565b611d30565b6040516101fb9190614d51565b3480156105c957600080fd5b506105b06105d8366004614a29565b611e25565b3480156105e957600080fd5b506101cc611ece565b3480156105fe57600080fd5b506101cc61060d366004614a7f565b611f04565b34801561061e57600080fd5b5061066e61062d3660046145ad565b6067602052600090815260409020805460018201546002909201546001600160801b0380831693600160801b9093041691600f0b906001600160a01b031684565b604080516001600160801b039586168152949093166020850152600f9190910b918301919091526001600160a01b031660608201526080016101fb565b3480156106b757600080fd5b506066546106cd90600160b01b900461ffff1681565b60405161ffff90911681526020016101fb565b3480156106ec57600080fd5b506033546040516001600160a01b0390911681526020016101fb565b34801561071457600080fd5b506107fe610723366004614a43565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060ff8083166000908152606b6020908152604080832061ffff80871685526002909101835292819020815160e08101835281546001600160801b038082168352600160801b9182900481169583019590955260019092015493841692810192909252820483166060820152600160901b82049092166080830152600160a01b81048316151560a0830152600160a81b9004909116151560c082015292915050565b6040516101fb9190600060e0820190506001600160801b0380845116835280602085015116602084015280604085015116604084015250606083015161ffff8082166060850152806080860151166080850152505060a0830151151560a083015260c0830151151560c083015292915050565b34801561087d57600080fd5b506101cc611fbb565b34801561089257600080fd5b506066546108a790600160a01b900460ff1681565b60405160ff90911681526020016101fb565b3480156108c557600080fd5b506101cc6108d43660046145ad565b612c7e565b3480156108e557600080fd5b506101cc6108f4366004614a7f565b612d16565b606554156109225760405162461bcd60e51b815260040161091990614cc8565b60405180910390fd5b60016065556066546001600160a01b031633146109515760405162461bcd60e51b815260040161091990614c23565b6001600160a01b038116600090815260686020526040812060018101549091600f91820b90910b1361098257600080fd5b6001810154604051631a4ca37b60e21b81526001600160a01b0380861660048301526001600160801b03600f9390930b9283166024830152841660448201527387aF61d9cABe914e7b623924Ac51d0159A918d22906369328dec9060640160006040518083038186803b1580156109f857600080fd5b505af4158015610a0c573d6000803e3d6000fd5b5050506002830180546001600160801b03938416600160801b029316929092179091555060010180546001600160801b031916905550506000606555565b6033546001600160a01b03163314610a745760405162461bcd60e51b815260040161091990614c93565b610a7d81612f7f565b50565b600054610100900460ff1680610a99575060005460ff16155b610ab55760405162461bcd60e51b815260040161091990614c45565b600054610100900460ff16158015610ad7576000805461ffff19166101011790555b610adf612fd1565b6001600160a01b038416610af257600080fd5b6001600160a01b038316610b0557600080fd5b610b0e84612c7e565b606680546001600160a01b0319166001600160a01b0385161790556000606555610b378261304c565b8015610b49576000805461ff00191690555b50505050565b8160ff811615801590610b7f5750606654610b7590600160a01b900460ff166002614fbf565b60ff168160ff1611155b610b8857600080fd5b60ff8381166000908152606b6020526040908190206066549151638a229a5760e01b8152600481019190915233602482015260448101859052600160c01b820490921615156064830152600160b01b900461ffff1660848201527387aF61d9cABe914e7b623924Ac51d0159A918d2290638a229a579060a4015b60006040518083038186803b158015610c1a57600080fd5b505af4158015610c2e573d6000803e3d6000fd5b50505050505050565b8060ff811615801590610c675750606654610c5d90600160a01b900460ff166002614fbf565b60ff168160ff1611155b610c7057600080fd5b606654600160b01b900461ffff16610cb55760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610919565b60003411610cf05760405162461bcd60e51b81526020600482015260086024820152676e6f2076616c756560c01b6044820152606401610919565b60006069816002610d026001876150b0565b610d0c9190614f7e565b60ff908116825260208201929092526040016000206001810154909250600160a01b90041615610d705760405162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d111a5cd8589b1959608a1b6044820152606401610919565b805460009060ff858116911614610d945760018201546001600160a01b0316610da7565b8154600160201b90046001600160a01b03165b90506001600160a01b03811615610dbd57600080fd5b60ff84166000908152606b6020526040808220606654915163c502f99160e01b81527387aF61d9cABe914e7b623924Ac51d0159A918d229363c502f99193610e1e9392339234929091600160b01b90910461ffff1690600190600401614ce8565b60006040518083038186803b158015610e3657600080fd5b505af4158015610e4a573d6000803e3d6000fd5b5050606654604051348152600160b01b90910461ffff16925033915060ff8716906000805160206151a58339815191529060200160405180910390a450505050565b60655415610eac5760405162461bcd60e51b815260040161091990614cc8565b60016065556066546001600160a01b03163314610edb5760405162461bcd60e51b815260040161091990614c23565b805160005b8181101561106b57600060686000858481518110610f0e57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905060008160010160009054906101000a9004600f0b600f0b13610f5957600080fd5b60008160010160009054906101000a9004600f0b90507387aF61d9cABe914e7b623924Ac51d0159A918d226369328dec87836001600160801b0316888781518110610fb457634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401610ff8939291906001600160a01b0393841681526020810192909252909116604082015260600190565b60006040518083038186803b15801561101057600080fd5b505af4158015611024573d6000803e3d6000fd5b5050506002830180546001600160801b03938416600160801b029316929092179091555060010180546001600160801b031916905580611063816150ff565b915050610ee0565b505060006065555050565b6066546001600160a01b031633146110a05760405162461bcd60e51b815260040161091990614c23565b606654600160c01b900460ff166110b657600080fd5b8051606654600160a01b900460ff1681146110d057600080fd5b6066546000906110ed90600190600160b01b900461ffff16615076565b905060005b828160ff161015611805576000848260ff168151811061112257634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160ff808516600090815260698452604080822080548085168452606b8752828420610100918290049095168452828420835161018081018552858152978801859052928701849052606087018490526080870184905260a0870184905260c0870184905260e0870184905286018390526101208601839052610140860183905261016086019290925292945092909190600060028401816111d060018b615076565b61ffff168152602081019190915260400160002080549091506001600160801b03161561146a5784547387aF61d9cABe914e7b623924Ac51d0159A918d229063aab69633908690849060019060ff6201000082048116916301000000900416828d600281111561125057634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b1580156112ae57600080fd5b505af41580156112c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e69190614877565b805190925015611376576040828101518654600160201b90046001600160a01b03166000908152606860205291909120546113339161132e916001600160801b0316906133c8565b6133db565b8554600160201b90046001600160a01b0316600090815260686020526040902080546001600160801b0319166001600160801b03929092169190911790556113f4565b6060820151156113f45760a082015160018601546001600160a01b03166000908152606860205260409020546113b99161132e916001600160801b0316906133c8565b60018601546001600160a01b0316600090815260686020526040902080546001600160801b0319166001600160801b03929092169190911790555b600186600281111561141657634e487b7160e01b600052602160045260246000fd5b1415611449576114448482858860000160019054906101000a900460ff168660a00151876101600151613448565b61146a565b8454604083015161010084015161146a92879260ff90911691859190613783565b6000600284018161147c60018c615076565b61ffff168152602081019190915260400160002080549091506001600160801b0316156117115785547387aF61d9cABe914e7b623924Ac51d0159A918d229063aab69633908690849060009060ff630100000082048116916201000090041660028e60028111156114fd57634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b15801561155b57600080fd5b505af415801561156f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115939190614877565b8051909350156116165760408084015160018801546001600160a01b03166000908152606860205291909120546115d79161132e916001600160801b0316906133c8565b60018701546001600160a01b0316600090815260686020526040902080546001600160801b0319166001600160801b039290921691909117905561169c565b60608301511561169c5760a08301518654600160201b90046001600160a01b031660009081526068602052604090205461165d9161132e916001600160801b0316906133c8565b8654600160201b90046001600160a01b0316600090815260686020526040902080546001600160801b0319166001600160801b03929092169190911790555b60028760028111156116be57634e487b7160e01b600052602160045260246000fd5b14156116ea57855460a08401516101608501516116e592879285928a9260ff169190613448565b611711565b611711848760000160019054906101000a900460ff16838660400151876101000151613783565b6040516366aef26360e01b81526004810186905261ffff8a1660248201527387aF61d9cABe914e7b623924Ac51d0159A918d22906366aef2639060440160006040518083038186803b15801561176657600080fd5b505af415801561177a573d6000803e3d6000fd5b50506040516366aef26360e01b81526004810187905261ffff8c1660248201527387aF61d9cABe914e7b623924Ac51d0159A918d2292506366aef263915060440160006040518083038186803b1580156117d357600080fd5b505af41580156117e7573d6000803e3d6000fd5b505050505050505050505080806117fd9061511a565b9150506110f2565b5061180e6139e5565b50506066805460ff60c01b1916905550565b6066546001600160a01b0316331461184a5760405162461bcd60e51b815260040161091990614c23565b8051606654600160c01b900460ff161561186357600080fd5b6066546001600160b01b90910461ffff161161187e57600080fd5b60665461189690600160a01b900460ff166002614fbf565b60ff1681146118a457600080fd5b60005b818160ff1610156119c1576000838260ff16815181106118d757634e487b7160e01b600052603260045260246000fd5b602002602001015190506000606b60008460016118f49190614f45565b60ff1660ff16815260200190815260200160002060020160006001606660169054906101000a900461ffff1661192a9190615076565b61ffff16815260208101919091526040908101600020905163338dfe2f60e21b815260048101849052602481018290529091507387aF61d9cABe914e7b623924Ac51d0159A918d229063ce37f8bc9060440160006040518083038186803b15801561199457600080fd5b505af41580156119a8573d6000803e3d6000fd5b50505050505080806119b99061511a565b9150506118a7565b505050565b8260ff8116158015906119f657506066546119ec90600160a01b900460ff166002614fbf565b60ff168160ff1611155b6119ff57600080fd5b60006069816002611a116001896150b0565b611a1b9190614f7e565b60ff908116825260208083019390935260409182016000908120898316808352606b90955292902060665483549395507387aF61d9cABe914e7b623924Ac51d0159A918d2294637441e8bb94929333938b93600160b01b900461ffff16929116148015611a9b575086546001600160a01b038a8116600160201b90920416145b80611acb5750865460ff8c811661010090920416148015611acb575060018701546001600160a01b038a81169116145b6040516001600160e01b031960e088901b16815260048101959095526001600160a01b039093166024850152604484019190915261ffff1660648301521515608482015260a40160006040518083038186803b158015611b2a57600080fd5b505af4158015611b3e573d6000803e3d6000fd5b50505050611b4f3385856000613c71565b826001600160a01b0316336001600160a01b03168660ff167f9ac0ff79dc491174b021e6532a2fc734e82751bba8672e9183a76cb994a5f65a87604051611b9891815260200190565b60405180910390a45050505050565b6066546001600160a01b03163314611bd15760405162461bcd60e51b815260040161091990614c23565b60ff9081166000908152606960205260409020600101805460ff60a01b198116600160a01b918290049093161502919091179055565b6033546001600160a01b03163314611c315760405162461bcd60e51b815260040161091990614c93565b610a7d8161304c565b6001600160a01b03811660009081526068602052604081206001810154600f90810b9081900b8313611c70575060019392505050565b60405163b2838a7360e01b81526001600160a01b03851660048201523060248201527387aF61d9cABe914e7b623924Ac51d0159A918d229063b2838a739060440160206040518083038186803b158015611cc957600080fd5b505af4158015611cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d019190614a11565b611d0f575060009392505050565b611d1884613d32565b611d219061513a565b81600f0b121592505050919050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff8281166000908152606b602052604090819020606654915163c975707360e01b81526004810191909152600160c01b820490921615156024830152600160b01b900461ffff1660448201527387aF61d9cABe914e7b623924Ac51d0159A918d229063c9757073906064015b60c06040518083038186803b158015611de757600080fd5b505af4158015611dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1f9190614915565b92915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff8281166000908152606b6020526040908190206066549151634ed14a7f60e01b81526004810191909152336024820152600160c01b820490921615156044830152600160b01b900461ffff1660648201527387aF61d9cABe914e7b623924Ac51d0159A918d2290634ed14a7f90608401611dcf565b6033546001600160a01b03163314611ef85760405162461bcd60e51b815260040161091990614c93565b611f026000613e36565b565b8160ff811615801590611f345750606654611f2a90600160a01b900460ff166002614fbf565b60ff168160ff1611155b611f3d57600080fd5b60ff8381166000908152606b6020526040908190206066549151630f681f9360e31b8152600481019190915233602482015260448101859052600160c01b820490921615156064830152600160b01b900461ffff1660848201527387aF61d9cABe914e7b623924Ac51d0159A918d2290637b40fc989060a401610c02565b6066546001600160a01b03163314611fe55760405162461bcd60e51b815260040161091990614c23565b606654600160c01b900460ff1615611ffc57600080fd5b60665461201590600160b01b900461ffff166001614f07565b6066805460ff60c01b1961ffff93909316600160b01b029290921662ffffff60b01b1990921691909117600160c01b17905560005b60665460ff600160a01b90910481169082161015612b725760ff818116600090815260696020908152604080832080549094168352606b909152808220606654915163161dd97560e31b815260048101829052600160b01b90920461ffff1660248301526001604483015291907387aF61d9cABe914e7b623924Ac51d0159A918d229063b0eecba89060640160206040518083038186803b1580156120ee57600080fd5b505af4158015612102573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212691906149f7565b8354610100900460ff166000908152606b6020526040808220606654915163161dd97560e31b815260048101829052600160b01b90920461ffff166024830152604482018390529293507387aF61d9cABe914e7b623924Ac51d0159A918d229063b0eecba89060640160206040518083038186803b1580156121a757600080fd5b505af41580156121bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121df91906149f7565b90506001600160801b03831615612270578454600160201b90046001600160a01b03166000908152606860205260409020546122339061132e906001600160801b03600160801b90910481169086166133c8565b85546001600160a01b03600160201b90910416600090815260686020526040902080546001600160801b03928316600160801b0292169190911790555b6001600160801b038116156122f65760018501546001600160a01b03166000908152606860205260409020546122be9061132e90600160801b90046001600160801b039081169084166133c8565b60018601546001600160a01b0316600090815260686020526040902080546001600160801b03928316600160801b0292169190911790555b6066546002600160b01b90910461ffff1611612316575050505050612b60565b8454606654604051631bb98a3360e01b81526000927387aF61d9cABe914e7b623924Ac51d0159A918d2292631bb98a339261237b928a9260019260ff62010000840481169363010000009004169161ffff600160b01b90910416908990600401614d1f565b6101406040518083038186803b15801561239457600080fd5b505af41580156123a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cc9190614930565b8654606654604051631bb98a3360e01b81529293506000927387aF61d9cABe914e7b623924Ac51d0159A918d2292631bb98a339261243592899287926301000000820460ff90811693620100009093041691600160b01b90910461ffff16908490600401614d1f565b6101406040518083038186803b15801561244e57600080fd5b505af4158015612462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124869190614930565b905060006040518060600160405280848152602001838152602001600060028111156124c257634e487b7160e01b600052602160045260246000fd5b9052905080606a60006124d68c6003614fbf565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff19169190849081111561265857634e487b7160e01b600052602160045260246000fd5b0217905550508854606654604051631bb98a3360e01b8152600093507387aF61d9cABe914e7b623924Ac51d0159A918d2292631bb98a33926126c6928d9260019262010000820460ff9081169363010000009093041691600160b01b90910461ffff16908490600401614d1f565b6101406040518083038186803b1580156126df57600080fd5b505af41580156126f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127179190614930565b6040805160608101825282815260208101869052919250810160019052915081606a60006127468d6003614fbf565b612751906001614f45565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff1916919084908111156128d357634e487b7160e01b600052602160045260246000fd5b0217905550508954606654604051631bb98a3360e01b8152600093507387aF61d9cABe914e7b623924Ac51d0159A918d2292631bb98a3392612941928c9287926301000000820460ff90811693620100009093041691600160b01b90910461ffff1690600190600401614d1f565b6101406040518083038186803b15801561295a57600080fd5b505af415801561296e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129929190614930565b6040805160608101825287815260208101839052919250810160029052925082606a60006129c18e6003614fbf565b6129cc906002614f45565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff191691908490811115612b4e57634e487b7160e01b600052602160045260246000fd5b02179055505050505050505050505050505b80612b6a8161511a565b91505061204a565b50606654600160b01b900461ffff1660011415612b98576066805460ff60c01b19169055565b606654600160b01b900461ffff1660021415611f025760015b606654612bc990600160a01b900460ff166002614fbf565b60ff168160ff1611612c665760ff81166000908152606b60205260409081902090516366aef26360e01b81526004810191909152600160248201527387aF61d9cABe914e7b623924Ac51d0159A918d22906366aef2639060440160006040518083038186803b158015612c3b57600080fd5b505af4158015612c4f573d6000803e3d6000fd5b505050508080612c5e9061511a565b915050612bb1565b50612c6f6139e5565b6066805460ff60c01b19169055565b6033546001600160a01b03163314612ca85760405162461bcd60e51b815260040161091990614c93565b6001600160a01b038116612d0d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610919565b610a7d81613e36565b8160ff811615801590612d465750606654612d3c90600160a01b900460ff166002614fbf565b60ff168160ff1611155b612d4f57600080fd5b606654600160b01b900461ffff16612d945760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610919565b60008211612dce5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610919565b60006069816002612de06001886150b0565b612dea9190614f7e565b60ff908116825260208201929092526040016000206001810154909250600160a01b90041615612e4e5760405162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d111a5cd8589b1959608a1b6044820152606401610919565b805460009060ff868116911614612e725760018201546001600160a01b0316612e85565b8154600160201b90046001600160a01b03165b90506001600160a01b038116612e9a57600080fd5b60ff85166000908152606b6020526040808220606654915163c502f99160e01b81527387aF61d9cABe914e7b623924Ac51d0159A918d229363c502f99193612efb939233928b929091600160b01b90910461ffff1690600190600401614ce8565b60006040518083038186803b158015612f1357600080fd5b505af4158015612f27573d6000803e3d6000fd5b5050606654604051878152600160b01b90910461ffff16925033915060ff8816906000805160206151a58339815191529060200160405180910390a4612f786001600160a01b038216333087613e88565b5050505050565b606680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f57e8def7e592578c5fbf9abfe6d3897d7daf10cf7e179f320d944cf71a76493e90600090a35050565b600054610100900460ff1680612fea575060005460ff16155b6130065760405162461bcd60e51b815260040161091990614c45565b600054610100900460ff16158015613028576000805461ffff19166101011790555b613030613ee2565b613038613f4c565b8015610a7d576000805461ff001916905550565b805160665460ff600160a01b8204811691600160a81b90041660005b8381101561339157600085828151811061309257634e487b7160e01b600052603260045260246000fd5b602002602001015190508360026130a99190614fbf565b6130b4906001614f45565b60ff168082526130c5906001614f45565b60ff1660208201528060696000866130dc8161511a565b60ff91821683526020808401949094526040928301600020855181549587015194870151606088015160808901516001600160a01b03908116600160201b02640100000000600160c01b031992881663010000000263ff0000001994891662010000029490941663ffff0000199989166101000261ffff19909b1695891695909517999099179790971692909217171694909417845560a08501516001909401805460c0909601511515600160a01b026001600160a81b031990961694909316939093179390931790559450831661324e576080810151606c6000856131c18161511a565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060a00151606c6000858061320f9061511a565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061337e565b60008060005b8560ff168160ff1610156132d457608084015160ff82166000908152606c60205260409020546001600160a01b039081169116141561329257600192505b60a084015160ff82166000908152606c60205260409020546001600160a01b03908116911614156132c257600191505b806132cc8161511a565b915050613254565b5081613328576080830151606c6000876132ed8161511a565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8061337b5760a0830151606c6000876133408161511a565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b50505b5080613389816150ff565b915050613068565b506066805461ffff60a01b1916600160a01b60ff9485160260ff60a81b191617600160a81b92909316919091029190911790555050565b60006133d48284614f2d565b9392505050565b60006001600160801b038211156134445760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610919565b5090565b845460009061346a906001600160801b0380821691600160801b900416613fac565b60018801549091506001600160801b0316158015906134895750600082115b156134e85760018601546134c59061132e906134b1908490600160901b900461ffff16613fb8565b60018a01546001600160801b031690613fda565b6001880180546001600160801b0319166001600160801b03929092169190911790555b600387015460005b8181101561377857600089600301828154811061351d57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048d0190915260409091206001810154919250906001600160801b0316613560575050613766565b60018101548a5460009161358e918a916001600160801b03600160801b918290048116929190910416613ff5565b905080156135d55760038201546135b29061132e906001600160801b0316836133c8565b6003830180546001600160801b0319166001600160801b03929092169190911790555b60018201546000906135fa906001600160801b0380821691600160801b900416613fac565b9050600061360989838a613ff5565b905080156137515760018d01546000908190613631908590600160901b900461ffff16613fb8565b60028701549091506001600160801b031681106136695760028601546136629084906001600160801b031683613ff5565b915061366d565b8291505b7387aF61d9cABe914e7b623924Ac51d0159A918d2263c502f9918f8986866001606660169054906101000a900461ffff166136a89190615076565b60006040518763ffffffff1660e01b81526004016136cb96959493929190614ce8565b60006040518083038186803b1580156136e357600080fd5b505af41580156136f7573d6000803e3d6000fd5b5050606654613715925060019150600160b01b900461ffff16615076565b61ffff16876001600160a01b03168e60ff166000805160206151a58339815191528660405161374691815260200190565b60405180910390a450505b50505060010180546001600160801b03169055505b80613770816150ff565b9150506134f0565b505050505050505050565b82546000906137a5906001600160801b0380821691600160801b900416613fac565b600387015490915060005b818110156139db5760008860030182815481106137dd57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048c0190915260409091206001810154919250906001600160801b03166138205750506139c9565b6001810154885460009161384e918a916001600160801b03600160801b918290048116929190910416613ff5565b905080156138995760028201546138799061132e90600160801b90046001600160801b0316836133c8565b6002830180546001600160801b03928316600160801b0292169190911790555b60018201546000906138ca9089906138c4906001600160801b0380821691600160801b900416613fac565b89613ff5565b905080156139b5577387aF61d9cABe914e7b623924Ac51d0159A918d2263c502f9918d868460006001606660169054906101000a900461ffff1661390e9190615076565b60006040518763ffffffff1660e01b815260040161393196959493929190614ce8565b60006040518083038186803b15801561394957600080fd5b505af415801561395d573d6000803e3d6000fd5b505060665461397b925060019150600160b01b900461ffff16615076565b61ffff16846001600160a01b03168c60ff166000805160206151a5833981519152846040516139ac91815260200190565b60405180910390a45b505060010180546001600160801b03169055505b806139d3816150ff565b9150506137b0565b5050505050505050565b60005b60665460ff600160a81b90910481169082161015610a7d5760ff81166000908152606c60209081526040808320546001600160a01b03168084526068909252822060665491929091600160b01b900461ffff16600214613a7a5781546001600160801b0380821691600160801b900416613a6185613d32565b613a6b9190614fe8565b613a759190614eb9565b613a7d565b60005b6001830154613a8f9190600f0b614eb9565b6002830180546001600160801b0316905560405163b2838a7360e01b81526001600160a01b0385166004820152306024820152909150613b38907387aF61d9cABe914e7b623924Ac51d0159A918d229063b2838a739060440160206040518083038186803b158015613b0057600080fd5b505af4158015613b14573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e9190614a11565b6001830180546001600160801b03928316600160801b029216919091179055613b6361132e8461403d565b600283810180546001600160801b03199081166001600160801b0394851617909155604080516080810182528654600160801b808204871683529086166020808401918252600f89810b8587019081526001600160a01b038d811660608801818152600091825260679095529790972086519451948b16948b16860294909417845551600184018054909816910b89161790955593519390940180546001600160a01b031916939092169290921790558454909281811692613c2792041684614eb9565b613c319190614fe8565b600184018054600f9290920b6001600160801b03166001600160801b03199092169190911790555050600090555080613c698161511a565b9150506139e8565b60655415613c915760405162461bcd60e51b815260040161091990614cc8565b600160655580613cad57613ca482611c3a565b613cad57600080fd5b604051631a4ca37b60e21b81526001600160a01b03808616600483015260248201859052831660448201527387aF61d9cABe914e7b623924Ac51d0159A918d22906369328dec9060640160006040518083038186803b158015613d0f57600080fd5b505af4158015613d23573d6000803e3d6000fd5b50506000606555505050505050565b6001600160a01b0381166000908152606860205260408120613d71613d568461403d565b6001830154600160801b90046001600160801b0316906133c8565b600282015460405163b2838a7360e01b81526001600160a01b0386166004820152306024820152613e2c916001600160801b0380821692613e2692600160801b9004909116907387aF61d9cABe914e7b623924Ac51d0159A918d229063b2838a739060440160206040518083038186803b158015613dee57600080fd5b505af4158015613e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e269190614a11565b906133c8565b6133d49190615037565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610b499085906141d4565b600054610100900460ff1680613efb575060005460ff16155b613f175760405162461bcd60e51b815260040161091990614c45565b600054610100900460ff16158015613038576000805461ffff19166101011790558015610a7d576000805461ff001916905550565b600054610100900460ff1680613f65575060005460ff16155b613f815760405162461bcd60e51b815260040161091990614c45565b600054610100900460ff16158015613fa3576000805461ffff19166101011790555b61303833613e36565b60006133d48284615099565b60006133d4612710613fd4613fcd8583614f2d565b86906142a6565b906142b2565b600081831015613feb5760006133d4565b6133d48284615099565b6000821580614002575081155b8061400b575083155b15614018575060006133d4565b818310156140335761402e82613fd486866142a6565b614035565b835b949350505050565b600080805b60665460ff600160a01b909104811690821610156141cd5760ff8116600090815260696020526040902080546001600160a01b03868116600160201b90920416148061409d575060018101546001600160a01b038681169116145b156141ba57805460ff81166000908152606b6020526040902090614129906001600160a01b03888116600160201b90920416146140eb578154600160801b90046001600160801b0316614122565b8154606654600160b01b900461ffff166000908152600284016020526040902054614122916001600160801b0391821691166133c8565b85906133c8565b8254610100900460ff166000908152606b602052604090206001840154919550906141b5906001600160a01b03898116911614614177578154600160801b90046001600160801b03166141ae565b8154606654600160b01b900461ffff1660009081526002840160205260409020546141ae916001600160801b0391821691166133c8565b86906133c8565b945050505b50806141c58161511a565b915050614042565b5092915050565b6000614229826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142be9092919063ffffffff16565b8051909150156119c15780806020019051810190614247919061485b565b6119c15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610919565b60006133d48284614fa0565b60006133d48284614f6a565b6060614035848460008585843b6143175760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610919565b600080866001600160a01b031685876040516143339190614bd4565b60006040518083038185875af1925050503d8060008114614370576040519150601f19603f3d011682016040523d82523d6000602084013e614375565b606091505b5091509150614385828286614390565b979650505050505050565b6060831561439f5750816133d4565b8251156143af5782518084602001fd5b8160405162461bcd60e51b81526004016109199190614bf0565b80356001600160a01b03811681146143e057600080fd5b919050565b600082601f8301126143f5578081fd5b8135602061440a61440583614e95565b614e64565b8281528181019085830160e080860288018501891015614428578687fd5b865b868110156144cb5781838b031215614440578788fd5b614448614df3565b6144518461459c565b815261445e87850161459c565b87820152604061446f81860161459c565b90820152606061448085820161459c565b9082015260806144918582016143c9565b9082015260a06144a28582016143c9565b9082015260c0848101356144b581615196565b908201528552938501939181019160010161442a565b509198975050505050505050565b80516143e081615196565b600060c082840312156144f5578081fd5b60405160c0810181811067ffffffffffffffff8211171561451857614518615180565b60405290508061452783614585565b815261453560208401614585565b602082015261454660408401614585565b604082015261455760608401614585565b606082015261456860808401614585565b608082015261457960a08401614585565b60a08201525092915050565b80516001600160801b03811681146143e057600080fd5b803560ff811681146143e057600080fd5b6000602082840312156145be578081fd5b6133d4826143c9565b600080604083850312156145d9578081fd5b6145e2836143c9565b91506145f0602084016143c9565b90509250929050565b60008060006060848603121561460d578081fd5b614616846143c9565b9250614624602085016143c9565b9150604084013567ffffffffffffffff81111561463f578182fd5b61464b868287016143e5565b9150509250925092565b60008060408385031215614667578182fd5b614670836143c9565b915060208084013567ffffffffffffffff81111561468c578283fd5b8401601f8101861361469c578283fd5b80356146aa61440582614e95565b80828252848201915084840189868560051b87010111156146c9578687fd5b8694505b838510156146f2576146de816143c9565b8352600194909401939185019185016146cd565b5080955050505050509250929050565b60006020808385031215614714578182fd5b823567ffffffffffffffff81111561472a578283fd5b8301601f8101851361473a578283fd5b803561474861440582614e95565b80828252848201915084840188868560051b8701011115614767578687fd5b8694505b8385101561479557803560038110614781578788fd5b83526001949094019391850191850161476b565b50979650505050505050565b6000602082840312156147b2578081fd5b813567ffffffffffffffff8111156147c8578182fd5b614035848285016143e5565b600060208083850312156147e6578182fd5b823567ffffffffffffffff8111156147fc578283fd5b8301601f8101851361480c578283fd5b803561481a61440582614e95565b80828252848201915084840188868560051b8701011115614839578687fd5b8694505b8385101561479557803583526001949094019391850191850161483d565b60006020828403121561486c578081fd5b81516133d481615196565b60006101808284031215614889578081fd5b614891614e1c565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101608084015181830152508091505092915050565b600060c08284031215614926578081fd5b6133d483836144e4565b60006101408284031215614942578081fd5b61494a614e40565b61495383614585565b815261496160208401614585565b602082015261497260408401614585565b604082015261498360608401614585565b606082015261499460808401614585565b60808201526149a560a08401614585565b60a08201526149b660c08401614585565b60c08201526149c760e08401614585565b60e08201526101006149da818501614585565b908201526101206149ec8482016144d9565b908201529392505050565b600060208284031215614a08578081fd5b6133d482614585565b600060208284031215614a22578081fd5b5051919050565b600060208284031215614a3a578081fd5b6133d48261459c565b60008060408385031215614a55578182fd5b614a5e8361459c565b9150602083013561ffff81168114614a74578182fd5b809150509250929050565b60008060408385031215614a91578182fd5b614a9a8361459c565b946020939093013593505050565b600080600060608486031215614abc578081fd5b614ac58461459c565b925060208401359150614ada604085016143c9565b90509250925092565b80516001600160801b031682526020810151614b0a60208401826001600160801b03169052565b506040810151614b2560408401826001600160801b03169052565b506060810151614b4060608401826001600160801b03169052565b506080810151614b5b60808401826001600160801b03169052565b5060a0810151614b7660a08401826001600160801b03169052565b5060c0810151614b9160c08401826001600160801b03169052565b5060e0810151614bac60e08401826001600160801b03169052565b50610100818101516001600160801b0316908301526101208082015180151582850152610b49565b60008251614be68184602087016150d3565b9190910192915050565b6020815260008251806020840152614c0f8160408501602087016150d3565b601f01601f19169190910160400192915050565b60208082526008908201526710b9b2ba3a3632b960c11b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600690820152651b1bd8dad95960d21b604082015260600190565b9586526001600160a01b039490941660208601526040850192909252606084015261ffff166080830152151560a082015260c00190565b958652931515602086015260ff92831660408601529116606084015261ffff166080830152151560a082015260c00190565b60c08101611e1f82846001600160801b038082511683528060208301511660208401528060408301511660408401528060608301511660608401528060808301511660808401528060a08301511660a0840152505050565b6102a08101614db88286614ae3565b614dc6610140830185614ae3565b60038310614de457634e487b7160e01b600052602160045260246000fd5b82610280830152949350505050565b60405160e0810167ffffffffffffffff81118282101715614e1657614e16615180565b60405290565b604051610180810167ffffffffffffffff81118282101715614e1657614e16615180565b604051610140810167ffffffffffffffff81118282101715614e1657614e16615180565b604051601f8201601f1916810167ffffffffffffffff81118282101715614e8d57614e8d615180565b604052919050565b600067ffffffffffffffff821115614eaf57614eaf615180565b5060051b60200190565b600081600f0b83600f0b8282128260016001607f1b0303821381151615614ee257614ee2615154565b8260016001607f1b0319038212811615614efe57614efe615154565b50019392505050565b600061ffff808316818516808303821115614f2457614f24615154565b01949350505050565b60008219821115614f4057614f40615154565b500190565b600060ff821660ff84168060ff03821115614f6257614f62615154565b019392505050565b600082614f7957614f7961516a565b500490565b600060ff831680614f9157614f9161516a565b8060ff84160491505092915050565b6000816000190483118215151615614fba57614fba615154565b500290565b600060ff821660ff84168160ff0481118215151615614fe057614fe0615154565b029392505050565b600081600f0b83600f0b8281128160016001607f1b03190183128115161561501257615012615154565b8160016001607f1b0301831381161561502d5761502d615154565b5090039392505050565b60008083128015600160ff1b85018412161561505557615055615154565b6001600160ff1b038401831381161561507057615070615154565b50500390565b600061ffff8381169083168181101561509157615091615154565b039392505050565b6000828210156150ab576150ab615154565b500390565b600060ff821660ff8416808210156150ca576150ca615154565b90039392505050565b60005b838110156150ee5781810151838201526020016150d6565b83811115610b495750506000910152565b600060001982141561511357615113615154565b5060010190565b600060ff821660ff81141561513157615131615154565b60010192915050565b6000600160ff1b82141561515057615150615154565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610a7d57600080fdfee963a73e630cb9812a026653bfb6b1e14ffa92f8c38b79f318f2637557ea9f12a2646970667358221220073b85bbf23fc6eb0590eb224d238926159e6a15fe00fc7b8e4d044650a120b264736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c80636386bcc4116100ec5780638a19c8bc1161008a578063c78b432e11610064578063c78b432e14610871578063ddd0247514610886578063f2fde38b146108b9578063f4d4c9d7146108d957600080fd5b80638a19c8bc146106ab5780638da5cb5b146106e0578063c5cfc5be1461070857600080fd5b806371018682116100c657806371018682146105bd578063715018a6146105dd5780637332655b146105f257806383eb772e1461061257600080fd5b80636386bcc4146104ad578063644d41ed146105705780636b37e4e31461059057600080fd5b806326b516991161015957806351fe669e1161013357806351fe669e146102d757806355bf621f1461044d5780635d3e0e4d1461046d5780635edae4db1461048d57600080fd5b806326b516991461027757806332b76e86146102975780634dd96f86146102b757600080fd5b806302c178d7146101ac5780630748248f146101ce57806307f19eba1461020457806310a1f8b414610224578063222f6b8314610244578063256d43d71461026457600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101cc6101c73660046145c7565b6108f9565b005b3480156101da57600080fd5b506066546101ef90600160c01b900460ff1681565b60405190151581526020015b60405180910390f35b34801561021057600080fd5b506101cc61021f3660046145ad565b610a4a565b34801561023057600080fd5b506101cc61023f3660046145f9565b610a80565b34801561025057600080fd5b506101cc61025f366004614a7f565b610b4f565b6101cc610272366004614a29565b610c37565b34801561028357600080fd5b506101cc610292366004614655565b610e8c565b3480156102a357600080fd5b506101cc6102b2366004614702565b611076565b3480156102c357600080fd5b506101cc6102d23660046147d4565b611820565b3480156102e357600080fd5b5061043e6102f2366004614a29565b606a602090815260009182526040918290208251610140808201855282546001600160801b038082168452600160801b918290048116848701526001850154808216858901528290048116606080860191909152600286015480831660808088019190915290849004831660a080880191909152600388015480851660c0808a019190915290869004851660e0808a019190915260048a0154808716610100808c01919091529088900460ff9081161515610120808d01919091528e519a8b018f5260058d0154808a168c528a900489169d8b019d909d5260068c01548089169e8b019e909e529c88900487169589019590955260078a01548087169489019490945292869004851691870191909152600888015480851691870191909152849004831690850152600986015491821690840152048516151593810193909352600a9091015490921683565b6040516101fb93929190614da9565b34801561045957600080fd5b506101cc610468366004614aa8565b6119c6565b34801561047957600080fd5b506101cc610488366004614a29565b611ba7565b34801561049957600080fd5b506101cc6104a83660046147a1565b611c07565b3480156104b957600080fd5b506105226104c8366004614a29565b6069602052600090815260409020805460019091015460ff808316926101008104821692620100008204831692630100000083048116926001600160a01b03600160201b90910481169290811691600160a01b9091041687565b6040805160ff98891681529688166020880152948716948601949094529490911660608401526001600160a01b03908116608084015290921660a082015290151560c082015260e0016101fb565b34801561057c57600080fd5b506101ef61058b3660046145ad565b611c3a565b34801561059c57600080fd5b506105b06105ab366004614a29565b611d30565b6040516101fb9190614d51565b3480156105c957600080fd5b506105b06105d8366004614a29565b611e25565b3480156105e957600080fd5b506101cc611ece565b3480156105fe57600080fd5b506101cc61060d366004614a7f565b611f04565b34801561061e57600080fd5b5061066e61062d3660046145ad565b6067602052600090815260409020805460018201546002909201546001600160801b0380831693600160801b9093041691600f0b906001600160a01b031684565b604080516001600160801b039586168152949093166020850152600f9190910b918301919091526001600160a01b031660608201526080016101fb565b3480156106b757600080fd5b506066546106cd90600160b01b900461ffff1681565b60405161ffff90911681526020016101fb565b3480156106ec57600080fd5b506033546040516001600160a01b0390911681526020016101fb565b34801561071457600080fd5b506107fe610723366004614a43565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060ff8083166000908152606b6020908152604080832061ffff80871685526002909101835292819020815160e08101835281546001600160801b038082168352600160801b9182900481169583019590955260019092015493841692810192909252820483166060820152600160901b82049092166080830152600160a01b81048316151560a0830152600160a81b9004909116151560c082015292915050565b6040516101fb9190600060e0820190506001600160801b0380845116835280602085015116602084015280604085015116604084015250606083015161ffff8082166060850152806080860151166080850152505060a0830151151560a083015260c0830151151560c083015292915050565b34801561087d57600080fd5b506101cc611fbb565b34801561089257600080fd5b506066546108a790600160a01b900460ff1681565b60405160ff90911681526020016101fb565b3480156108c557600080fd5b506101cc6108d43660046145ad565b612c7e565b3480156108e557600080fd5b506101cc6108f4366004614a7f565b612d16565b606554156109225760405162461bcd60e51b815260040161091990614cc8565b60405180910390fd5b60016065556066546001600160a01b031633146109515760405162461bcd60e51b815260040161091990614c23565b6001600160a01b038116600090815260686020526040812060018101549091600f91820b90910b1361098257600080fd5b6001810154604051631a4ca37b60e21b81526001600160a01b0380861660048301526001600160801b03600f9390930b92831660248301528416604482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906369328dec9060640160006040518083038186803b1580156109f857600080fd5b505af4158015610a0c573d6000803e3d6000fd5b5050506002830180546001600160801b03938416600160801b029316929092179091555060010180546001600160801b031916905550506000606555565b6033546001600160a01b03163314610a745760405162461bcd60e51b815260040161091990614c93565b610a7d81612f7f565b50565b600054610100900460ff1680610a99575060005460ff16155b610ab55760405162461bcd60e51b815260040161091990614c45565b600054610100900460ff16158015610ad7576000805461ffff19166101011790555b610adf612fd1565b6001600160a01b038416610af257600080fd5b6001600160a01b038316610b0557600080fd5b610b0e84612c7e565b606680546001600160a01b0319166001600160a01b0385161790556000606555610b378261304c565b8015610b49576000805461ff00191690555b50505050565b8160ff811615801590610b7f5750606654610b7590600160a01b900460ff166002614fbf565b60ff168160ff1611155b610b8857600080fd5b60ff8381166000908152606b6020526040908190206066549151638a229a5760e01b8152600481019190915233602482015260448101859052600160c01b820490921615156064830152600160b01b900461ffff16608482015273__$e36f5330ef2566ea8a183e1e27b10de643$__90638a229a579060a4015b60006040518083038186803b158015610c1a57600080fd5b505af4158015610c2e573d6000803e3d6000fd5b50505050505050565b8060ff811615801590610c675750606654610c5d90600160a01b900460ff166002614fbf565b60ff168160ff1611155b610c7057600080fd5b606654600160b01b900461ffff16610cb55760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610919565b60003411610cf05760405162461bcd60e51b81526020600482015260086024820152676e6f2076616c756560c01b6044820152606401610919565b60006069816002610d026001876150b0565b610d0c9190614f7e565b60ff908116825260208201929092526040016000206001810154909250600160a01b90041615610d705760405162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d111a5cd8589b1959608a1b6044820152606401610919565b805460009060ff858116911614610d945760018201546001600160a01b0316610da7565b8154600160201b90046001600160a01b03165b90506001600160a01b03811615610dbd57600080fd5b60ff84166000908152606b6020526040808220606654915163c502f99160e01b815273__$e36f5330ef2566ea8a183e1e27b10de643$__9363c502f99193610e1e9392339234929091600160b01b90910461ffff1690600190600401614ce8565b60006040518083038186803b158015610e3657600080fd5b505af4158015610e4a573d6000803e3d6000fd5b5050606654604051348152600160b01b90910461ffff16925033915060ff8716906000805160206151a58339815191529060200160405180910390a450505050565b60655415610eac5760405162461bcd60e51b815260040161091990614cc8565b60016065556066546001600160a01b03163314610edb5760405162461bcd60e51b815260040161091990614c23565b805160005b8181101561106b57600060686000858481518110610f0e57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905060008160010160009054906101000a9004600f0b600f0b13610f5957600080fd5b60008160010160009054906101000a9004600f0b905073__$e36f5330ef2566ea8a183e1e27b10de643$__6369328dec87836001600160801b0316888781518110610fb457634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401610ff8939291906001600160a01b0393841681526020810192909252909116604082015260600190565b60006040518083038186803b15801561101057600080fd5b505af4158015611024573d6000803e3d6000fd5b5050506002830180546001600160801b03938416600160801b029316929092179091555060010180546001600160801b031916905580611063816150ff565b915050610ee0565b505060006065555050565b6066546001600160a01b031633146110a05760405162461bcd60e51b815260040161091990614c23565b606654600160c01b900460ff166110b657600080fd5b8051606654600160a01b900460ff1681146110d057600080fd5b6066546000906110ed90600190600160b01b900461ffff16615076565b905060005b828160ff161015611805576000848260ff168151811061112257634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160ff808516600090815260698452604080822080548085168452606b8752828420610100918290049095168452828420835161018081018552858152978801859052928701849052606087018490526080870184905260a0870184905260c0870184905260e0870184905286018390526101208601839052610140860183905261016086019290925292945092909190600060028401816111d060018b615076565b61ffff168152602081019190915260400160002080549091506001600160801b03161561146a57845473__$e36f5330ef2566ea8a183e1e27b10de643$__9063aab69633908690849060019060ff6201000082048116916301000000900416828d600281111561125057634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b1580156112ae57600080fd5b505af41580156112c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e69190614877565b805190925015611376576040828101518654600160201b90046001600160a01b03166000908152606860205291909120546113339161132e916001600160801b0316906133c8565b6133db565b8554600160201b90046001600160a01b0316600090815260686020526040902080546001600160801b0319166001600160801b03929092169190911790556113f4565b6060820151156113f45760a082015160018601546001600160a01b03166000908152606860205260409020546113b99161132e916001600160801b0316906133c8565b60018601546001600160a01b0316600090815260686020526040902080546001600160801b0319166001600160801b03929092169190911790555b600186600281111561141657634e487b7160e01b600052602160045260246000fd5b1415611449576114448482858860000160019054906101000a900460ff168660a00151876101600151613448565b61146a565b8454604083015161010084015161146a92879260ff90911691859190613783565b6000600284018161147c60018c615076565b61ffff168152602081019190915260400160002080549091506001600160801b03161561171157855473__$e36f5330ef2566ea8a183e1e27b10de643$__9063aab69633908690849060009060ff630100000082048116916201000090041660028e60028111156114fd57634e487b7160e01b600052602160045260246000fd5b6040516001600160e01b031960e08a901b16815260048101979097526024870195909552921515604486015260ff91821660648601521660848401521460a482015260c4016101806040518083038186803b15801561155b57600080fd5b505af415801561156f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115939190614877565b8051909350156116165760408084015160018801546001600160a01b03166000908152606860205291909120546115d79161132e916001600160801b0316906133c8565b60018701546001600160a01b0316600090815260686020526040902080546001600160801b0319166001600160801b039290921691909117905561169c565b60608301511561169c5760a08301518654600160201b90046001600160a01b031660009081526068602052604090205461165d9161132e916001600160801b0316906133c8565b8654600160201b90046001600160a01b0316600090815260686020526040902080546001600160801b0319166001600160801b03929092169190911790555b60028760028111156116be57634e487b7160e01b600052602160045260246000fd5b14156116ea57855460a08401516101608501516116e592879285928a9260ff169190613448565b611711565b611711848760000160019054906101000a900460ff16838660400151876101000151613783565b6040516366aef26360e01b81526004810186905261ffff8a16602482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906366aef2639060440160006040518083038186803b15801561176657600080fd5b505af415801561177a573d6000803e3d6000fd5b50506040516366aef26360e01b81526004810187905261ffff8c16602482015273__$e36f5330ef2566ea8a183e1e27b10de643$__92506366aef263915060440160006040518083038186803b1580156117d357600080fd5b505af41580156117e7573d6000803e3d6000fd5b505050505050505050505080806117fd9061511a565b9150506110f2565b5061180e6139e5565b50506066805460ff60c01b1916905550565b6066546001600160a01b0316331461184a5760405162461bcd60e51b815260040161091990614c23565b8051606654600160c01b900460ff161561186357600080fd5b6066546001600160b01b90910461ffff161161187e57600080fd5b60665461189690600160a01b900460ff166002614fbf565b60ff1681146118a457600080fd5b60005b818160ff1610156119c1576000838260ff16815181106118d757634e487b7160e01b600052603260045260246000fd5b602002602001015190506000606b60008460016118f49190614f45565b60ff1660ff16815260200190815260200160002060020160006001606660169054906101000a900461ffff1661192a9190615076565b61ffff16815260208101919091526040908101600020905163338dfe2f60e21b8152600481018490526024810182905290915073__$e36f5330ef2566ea8a183e1e27b10de643$__9063ce37f8bc9060440160006040518083038186803b15801561199457600080fd5b505af41580156119a8573d6000803e3d6000fd5b50505050505080806119b99061511a565b9150506118a7565b505050565b8260ff8116158015906119f657506066546119ec90600160a01b900460ff166002614fbf565b60ff168160ff1611155b6119ff57600080fd5b60006069816002611a116001896150b0565b611a1b9190614f7e565b60ff908116825260208083019390935260409182016000908120898316808352606b909552929020606654835493955073__$e36f5330ef2566ea8a183e1e27b10de643$__94637441e8bb94929333938b93600160b01b900461ffff16929116148015611a9b575086546001600160a01b038a8116600160201b90920416145b80611acb5750865460ff8c811661010090920416148015611acb575060018701546001600160a01b038a81169116145b6040516001600160e01b031960e088901b16815260048101959095526001600160a01b039093166024850152604484019190915261ffff1660648301521515608482015260a40160006040518083038186803b158015611b2a57600080fd5b505af4158015611b3e573d6000803e3d6000fd5b50505050611b4f3385856000613c71565b826001600160a01b0316336001600160a01b03168660ff167f9ac0ff79dc491174b021e6532a2fc734e82751bba8672e9183a76cb994a5f65a87604051611b9891815260200190565b60405180910390a45050505050565b6066546001600160a01b03163314611bd15760405162461bcd60e51b815260040161091990614c23565b60ff9081166000908152606960205260409020600101805460ff60a01b198116600160a01b918290049093161502919091179055565b6033546001600160a01b03163314611c315760405162461bcd60e51b815260040161091990614c93565b610a7d8161304c565b6001600160a01b03811660009081526068602052604081206001810154600f90810b9081900b8313611c70575060019392505050565b60405163b2838a7360e01b81526001600160a01b038516600482015230602482015273__$e36f5330ef2566ea8a183e1e27b10de643$__9063b2838a739060440160206040518083038186803b158015611cc957600080fd5b505af4158015611cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d019190614a11565b611d0f575060009392505050565b611d1884613d32565b611d219061513a565b81600f0b121592505050919050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff8281166000908152606b602052604090819020606654915163c975707360e01b81526004810191909152600160c01b820490921615156024830152600160b01b900461ffff16604482015273__$e36f5330ef2566ea8a183e1e27b10de643$__9063c9757073906064015b60c06040518083038186803b158015611de757600080fd5b505af4158015611dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1f9190614915565b92915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260ff8281166000908152606b6020526040908190206066549151634ed14a7f60e01b81526004810191909152336024820152600160c01b820490921615156044830152600160b01b900461ffff16606482015273__$e36f5330ef2566ea8a183e1e27b10de643$__90634ed14a7f90608401611dcf565b6033546001600160a01b03163314611ef85760405162461bcd60e51b815260040161091990614c93565b611f026000613e36565b565b8160ff811615801590611f345750606654611f2a90600160a01b900460ff166002614fbf565b60ff168160ff1611155b611f3d57600080fd5b60ff8381166000908152606b6020526040908190206066549151630f681f9360e31b8152600481019190915233602482015260448101859052600160c01b820490921615156064830152600160b01b900461ffff16608482015273__$e36f5330ef2566ea8a183e1e27b10de643$__90637b40fc989060a401610c02565b6066546001600160a01b03163314611fe55760405162461bcd60e51b815260040161091990614c23565b606654600160c01b900460ff1615611ffc57600080fd5b60665461201590600160b01b900461ffff166001614f07565b6066805460ff60c01b1961ffff93909316600160b01b029290921662ffffff60b01b1990921691909117600160c01b17905560005b60665460ff600160a01b90910481169082161015612b725760ff818116600090815260696020908152604080832080549094168352606b909152808220606654915163161dd97560e31b815260048101829052600160b01b90920461ffff16602483015260016044830152919073__$e36f5330ef2566ea8a183e1e27b10de643$__9063b0eecba89060640160206040518083038186803b1580156120ee57600080fd5b505af4158015612102573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212691906149f7565b8354610100900460ff166000908152606b6020526040808220606654915163161dd97560e31b815260048101829052600160b01b90920461ffff1660248301526044820183905292935073__$e36f5330ef2566ea8a183e1e27b10de643$__9063b0eecba89060640160206040518083038186803b1580156121a757600080fd5b505af41580156121bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121df91906149f7565b90506001600160801b03831615612270578454600160201b90046001600160a01b03166000908152606860205260409020546122339061132e906001600160801b03600160801b90910481169086166133c8565b85546001600160a01b03600160201b90910416600090815260686020526040902080546001600160801b03928316600160801b0292169190911790555b6001600160801b038116156122f65760018501546001600160a01b03166000908152606860205260409020546122be9061132e90600160801b90046001600160801b039081169084166133c8565b60018601546001600160a01b0316600090815260686020526040902080546001600160801b03928316600160801b0292169190911790555b6066546002600160b01b90910461ffff1611612316575050505050612b60565b8454606654604051631bb98a3360e01b815260009273__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a339261237b928a9260019260ff62010000840481169363010000009004169161ffff600160b01b90910416908990600401614d1f565b6101406040518083038186803b15801561239457600080fd5b505af41580156123a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cc9190614930565b8654606654604051631bb98a3360e01b815292935060009273__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a339261243592899287926301000000820460ff90811693620100009093041691600160b01b90910461ffff16908490600401614d1f565b6101406040518083038186803b15801561244e57600080fd5b505af4158015612462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124869190614930565b905060006040518060600160405280848152602001838152602001600060028111156124c257634e487b7160e01b600052602160045260246000fd5b9052905080606a60006124d68c6003614fbf565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff19169190849081111561265857634e487b7160e01b600052602160045260246000fd5b0217905550508854606654604051631bb98a3360e01b81526000935073__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a33926126c6928d9260019262010000820460ff9081169363010000009093041691600160b01b90910461ffff16908490600401614d1f565b6101406040518083038186803b1580156126df57600080fd5b505af41580156126f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127179190614930565b6040805160608101825282815260208101869052919250810160019052915081606a60006127468d6003614fbf565b612751906001614f45565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff1916919084908111156128d357634e487b7160e01b600052602160045260246000fd5b0217905550508954606654604051631bb98a3360e01b81526000935073__$e36f5330ef2566ea8a183e1e27b10de643$__92631bb98a3392612941928c9287926301000000820460ff90811693620100009093041691600160b01b90910461ffff1690600190600401614d1f565b6101406040518083038186803b15801561295a57600080fd5b505af415801561296e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129929190614930565b6040805160608101825287815260208101839052919250810160029052925082606a60006129c18e6003614fbf565b6129cc906002614f45565b60ff168152602080820192909252604090810160002083518051818501516001600160801b03908116600160801b90810292821692909217845582850151606080850151831684029183169190911760018087019190915560808086015160a08088015186168702918616919091176002808a019190915560c08089015160e0808b015189168a029189169190911760038c0155610100808b015160048d0180546101209d8e015115158d026001600160881b0319918216938d16939093179290921790558f8f015180519f8101518b168c029f8b169f909f1760058e01558e8e0151988f01518a168b02988a169890981760068d0155948d0151938d0151881689029388169390931760078b01558b0151918b015186168702918616919091176008890155908901516009880180549a9097015115159095029890921693909216929092179590951790915591840151600a8201805492949193909260ff191691908490811115612b4e57634e487b7160e01b600052602160045260246000fd5b02179055505050505050505050505050505b80612b6a8161511a565b91505061204a565b50606654600160b01b900461ffff1660011415612b98576066805460ff60c01b19169055565b606654600160b01b900461ffff1660021415611f025760015b606654612bc990600160a01b900460ff166002614fbf565b60ff168160ff1611612c665760ff81166000908152606b60205260409081902090516366aef26360e01b815260048101919091526001602482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906366aef2639060440160006040518083038186803b158015612c3b57600080fd5b505af4158015612c4f573d6000803e3d6000fd5b505050508080612c5e9061511a565b915050612bb1565b50612c6f6139e5565b6066805460ff60c01b19169055565b6033546001600160a01b03163314612ca85760405162461bcd60e51b815260040161091990614c93565b6001600160a01b038116612d0d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610919565b610a7d81613e36565b8160ff811615801590612d465750606654612d3c90600160a01b900460ff166002614fbf565b60ff168160ff1611155b612d4f57600080fd5b606654600160b01b900461ffff16612d945760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610919565b60008211612dce5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610919565b60006069816002612de06001886150b0565b612dea9190614f7e565b60ff908116825260208201929092526040016000206001810154909250600160a01b90041615612e4e5760405162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d111a5cd8589b1959608a1b6044820152606401610919565b805460009060ff868116911614612e725760018201546001600160a01b0316612e85565b8154600160201b90046001600160a01b03165b90506001600160a01b038116612e9a57600080fd5b60ff85166000908152606b6020526040808220606654915163c502f99160e01b815273__$e36f5330ef2566ea8a183e1e27b10de643$__9363c502f99193612efb939233928b929091600160b01b90910461ffff1690600190600401614ce8565b60006040518083038186803b158015612f1357600080fd5b505af4158015612f27573d6000803e3d6000fd5b5050606654604051878152600160b01b90910461ffff16925033915060ff8816906000805160206151a58339815191529060200160405180910390a4612f786001600160a01b038216333087613e88565b5050505050565b606680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f57e8def7e592578c5fbf9abfe6d3897d7daf10cf7e179f320d944cf71a76493e90600090a35050565b600054610100900460ff1680612fea575060005460ff16155b6130065760405162461bcd60e51b815260040161091990614c45565b600054610100900460ff16158015613028576000805461ffff19166101011790555b613030613ee2565b613038613f4c565b8015610a7d576000805461ff001916905550565b805160665460ff600160a01b8204811691600160a81b90041660005b8381101561339157600085828151811061309257634e487b7160e01b600052603260045260246000fd5b602002602001015190508360026130a99190614fbf565b6130b4906001614f45565b60ff168082526130c5906001614f45565b60ff1660208201528060696000866130dc8161511a565b60ff91821683526020808401949094526040928301600020855181549587015194870151606088015160808901516001600160a01b03908116600160201b02640100000000600160c01b031992881663010000000263ff0000001994891662010000029490941663ffff0000199989166101000261ffff19909b1695891695909517999099179790971692909217171694909417845560a08501516001909401805460c0909601511515600160a01b026001600160a81b031990961694909316939093179390931790559450831661324e576080810151606c6000856131c18161511a565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060a00151606c6000858061320f9061511a565b965060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061337e565b60008060005b8560ff168160ff1610156132d457608084015160ff82166000908152606c60205260409020546001600160a01b039081169116141561329257600192505b60a084015160ff82166000908152606c60205260409020546001600160a01b03908116911614156132c257600191505b806132cc8161511a565b915050613254565b5081613328576080830151606c6000876132ed8161511a565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8061337b5760a0830151606c6000876133408161511a565b985060ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b50505b5080613389816150ff565b915050613068565b506066805461ffff60a01b1916600160a01b60ff9485160260ff60a81b191617600160a81b92909316919091029190911790555050565b60006133d48284614f2d565b9392505050565b60006001600160801b038211156134445760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610919565b5090565b845460009061346a906001600160801b0380821691600160801b900416613fac565b60018801549091506001600160801b0316158015906134895750600082115b156134e85760018601546134c59061132e906134b1908490600160901b900461ffff16613fb8565b60018a01546001600160801b031690613fda565b6001880180546001600160801b0319166001600160801b03929092169190911790555b600387015460005b8181101561377857600089600301828154811061351d57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048d0190915260409091206001810154919250906001600160801b0316613560575050613766565b60018101548a5460009161358e918a916001600160801b03600160801b918290048116929190910416613ff5565b905080156135d55760038201546135b29061132e906001600160801b0316836133c8565b6003830180546001600160801b0319166001600160801b03929092169190911790555b60018201546000906135fa906001600160801b0380821691600160801b900416613fac565b9050600061360989838a613ff5565b905080156137515760018d01546000908190613631908590600160901b900461ffff16613fb8565b60028701549091506001600160801b031681106136695760028601546136629084906001600160801b031683613ff5565b915061366d565b8291505b73__$e36f5330ef2566ea8a183e1e27b10de643$__63c502f9918f8986866001606660169054906101000a900461ffff166136a89190615076565b60006040518763ffffffff1660e01b81526004016136cb96959493929190614ce8565b60006040518083038186803b1580156136e357600080fd5b505af41580156136f7573d6000803e3d6000fd5b5050606654613715925060019150600160b01b900461ffff16615076565b61ffff16876001600160a01b03168e60ff166000805160206151a58339815191528660405161374691815260200190565b60405180910390a450505b50505060010180546001600160801b03169055505b80613770816150ff565b9150506134f0565b505050505050505050565b82546000906137a5906001600160801b0380821691600160801b900416613fac565b600387015490915060005b818110156139db5760008860030182815481106137dd57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260048c0190915260409091206001810154919250906001600160801b03166138205750506139c9565b6001810154885460009161384e918a916001600160801b03600160801b918290048116929190910416613ff5565b905080156138995760028201546138799061132e90600160801b90046001600160801b0316836133c8565b6002830180546001600160801b03928316600160801b0292169190911790555b60018201546000906138ca9089906138c4906001600160801b0380821691600160801b900416613fac565b89613ff5565b905080156139b55773__$e36f5330ef2566ea8a183e1e27b10de643$__63c502f9918d868460006001606660169054906101000a900461ffff1661390e9190615076565b60006040518763ffffffff1660e01b815260040161393196959493929190614ce8565b60006040518083038186803b15801561394957600080fd5b505af415801561395d573d6000803e3d6000fd5b505060665461397b925060019150600160b01b900461ffff16615076565b61ffff16846001600160a01b03168c60ff166000805160206151a5833981519152846040516139ac91815260200190565b60405180910390a45b505060010180546001600160801b03169055505b806139d3816150ff565b9150506137b0565b5050505050505050565b60005b60665460ff600160a81b90910481169082161015610a7d5760ff81166000908152606c60209081526040808320546001600160a01b03168084526068909252822060665491929091600160b01b900461ffff16600214613a7a5781546001600160801b0380821691600160801b900416613a6185613d32565b613a6b9190614fe8565b613a759190614eb9565b613a7d565b60005b6001830154613a8f9190600f0b614eb9565b6002830180546001600160801b0316905560405163b2838a7360e01b81526001600160a01b0385166004820152306024820152909150613b389073__$e36f5330ef2566ea8a183e1e27b10de643$__9063b2838a739060440160206040518083038186803b158015613b0057600080fd5b505af4158015613b14573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e9190614a11565b6001830180546001600160801b03928316600160801b029216919091179055613b6361132e8461403d565b600283810180546001600160801b03199081166001600160801b0394851617909155604080516080810182528654600160801b808204871683529086166020808401918252600f89810b8587019081526001600160a01b038d811660608801818152600091825260679095529790972086519451948b16948b16860294909417845551600184018054909816910b89161790955593519390940180546001600160a01b031916939092169290921790558454909281811692613c2792041684614eb9565b613c319190614fe8565b600184018054600f9290920b6001600160801b03166001600160801b03199092169190911790555050600090555080613c698161511a565b9150506139e8565b60655415613c915760405162461bcd60e51b815260040161091990614cc8565b600160655580613cad57613ca482611c3a565b613cad57600080fd5b604051631a4ca37b60e21b81526001600160a01b038086166004830152602482018590528316604482015273__$e36f5330ef2566ea8a183e1e27b10de643$__906369328dec9060640160006040518083038186803b158015613d0f57600080fd5b505af4158015613d23573d6000803e3d6000fd5b50506000606555505050505050565b6001600160a01b0381166000908152606860205260408120613d71613d568461403d565b6001830154600160801b90046001600160801b0316906133c8565b600282015460405163b2838a7360e01b81526001600160a01b0386166004820152306024820152613e2c916001600160801b0380821692613e2692600160801b90049091169073__$e36f5330ef2566ea8a183e1e27b10de643$__9063b2838a739060440160206040518083038186803b158015613dee57600080fd5b505af4158015613e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e269190614a11565b906133c8565b6133d49190615037565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610b499085906141d4565b600054610100900460ff1680613efb575060005460ff16155b613f175760405162461bcd60e51b815260040161091990614c45565b600054610100900460ff16158015613038576000805461ffff19166101011790558015610a7d576000805461ff001916905550565b600054610100900460ff1680613f65575060005460ff16155b613f815760405162461bcd60e51b815260040161091990614c45565b600054610100900460ff16158015613fa3576000805461ffff19166101011790555b61303833613e36565b60006133d48284615099565b60006133d4612710613fd4613fcd8583614f2d565b86906142a6565b906142b2565b600081831015613feb5760006133d4565b6133d48284615099565b6000821580614002575081155b8061400b575083155b15614018575060006133d4565b818310156140335761402e82613fd486866142a6565b614035565b835b949350505050565b600080805b60665460ff600160a01b909104811690821610156141cd5760ff8116600090815260696020526040902080546001600160a01b03868116600160201b90920416148061409d575060018101546001600160a01b038681169116145b156141ba57805460ff81166000908152606b6020526040902090614129906001600160a01b03888116600160201b90920416146140eb578154600160801b90046001600160801b0316614122565b8154606654600160b01b900461ffff166000908152600284016020526040902054614122916001600160801b0391821691166133c8565b85906133c8565b8254610100900460ff166000908152606b602052604090206001840154919550906141b5906001600160a01b03898116911614614177578154600160801b90046001600160801b03166141ae565b8154606654600160b01b900461ffff1660009081526002840160205260409020546141ae916001600160801b0391821691166133c8565b86906133c8565b945050505b50806141c58161511a565b915050614042565b5092915050565b6000614229826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142be9092919063ffffffff16565b8051909150156119c15780806020019051810190614247919061485b565b6119c15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610919565b60006133d48284614fa0565b60006133d48284614f6a565b6060614035848460008585843b6143175760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610919565b600080866001600160a01b031685876040516143339190614bd4565b60006040518083038185875af1925050503d8060008114614370576040519150601f19603f3d011682016040523d82523d6000602084013e614375565b606091505b5091509150614385828286614390565b979650505050505050565b6060831561439f5750816133d4565b8251156143af5782518084602001fd5b8160405162461bcd60e51b81526004016109199190614bf0565b80356001600160a01b03811681146143e057600080fd5b919050565b600082601f8301126143f5578081fd5b8135602061440a61440583614e95565b614e64565b8281528181019085830160e080860288018501891015614428578687fd5b865b868110156144cb5781838b031215614440578788fd5b614448614df3565b6144518461459c565b815261445e87850161459c565b87820152604061446f81860161459c565b90820152606061448085820161459c565b9082015260806144918582016143c9565b9082015260a06144a28582016143c9565b9082015260c0848101356144b581615196565b908201528552938501939181019160010161442a565b509198975050505050505050565b80516143e081615196565b600060c082840312156144f5578081fd5b60405160c0810181811067ffffffffffffffff8211171561451857614518615180565b60405290508061452783614585565b815261453560208401614585565b602082015261454660408401614585565b604082015261455760608401614585565b606082015261456860808401614585565b608082015261457960a08401614585565b60a08201525092915050565b80516001600160801b03811681146143e057600080fd5b803560ff811681146143e057600080fd5b6000602082840312156145be578081fd5b6133d4826143c9565b600080604083850312156145d9578081fd5b6145e2836143c9565b91506145f0602084016143c9565b90509250929050565b60008060006060848603121561460d578081fd5b614616846143c9565b9250614624602085016143c9565b9150604084013567ffffffffffffffff81111561463f578182fd5b61464b868287016143e5565b9150509250925092565b60008060408385031215614667578182fd5b614670836143c9565b915060208084013567ffffffffffffffff81111561468c578283fd5b8401601f8101861361469c578283fd5b80356146aa61440582614e95565b80828252848201915084840189868560051b87010111156146c9578687fd5b8694505b838510156146f2576146de816143c9565b8352600194909401939185019185016146cd565b5080955050505050509250929050565b60006020808385031215614714578182fd5b823567ffffffffffffffff81111561472a578283fd5b8301601f8101851361473a578283fd5b803561474861440582614e95565b80828252848201915084840188868560051b8701011115614767578687fd5b8694505b8385101561479557803560038110614781578788fd5b83526001949094019391850191850161476b565b50979650505050505050565b6000602082840312156147b2578081fd5b813567ffffffffffffffff8111156147c8578182fd5b614035848285016143e5565b600060208083850312156147e6578182fd5b823567ffffffffffffffff8111156147fc578283fd5b8301601f8101851361480c578283fd5b803561481a61440582614e95565b80828252848201915084840188868560051b8701011115614839578687fd5b8694505b8385101561479557803583526001949094019391850191850161483d565b60006020828403121561486c578081fd5b81516133d481615196565b60006101808284031215614889578081fd5b614891614e1c565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101608084015181830152508091505092915050565b600060c08284031215614926578081fd5b6133d483836144e4565b60006101408284031215614942578081fd5b61494a614e40565b61495383614585565b815261496160208401614585565b602082015261497260408401614585565b604082015261498360608401614585565b606082015261499460808401614585565b60808201526149a560a08401614585565b60a08201526149b660c08401614585565b60c08201526149c760e08401614585565b60e08201526101006149da818501614585565b908201526101206149ec8482016144d9565b908201529392505050565b600060208284031215614a08578081fd5b6133d482614585565b600060208284031215614a22578081fd5b5051919050565b600060208284031215614a3a578081fd5b6133d48261459c565b60008060408385031215614a55578182fd5b614a5e8361459c565b9150602083013561ffff81168114614a74578182fd5b809150509250929050565b60008060408385031215614a91578182fd5b614a9a8361459c565b946020939093013593505050565b600080600060608486031215614abc578081fd5b614ac58461459c565b925060208401359150614ada604085016143c9565b90509250925092565b80516001600160801b031682526020810151614b0a60208401826001600160801b03169052565b506040810151614b2560408401826001600160801b03169052565b506060810151614b4060608401826001600160801b03169052565b506080810151614b5b60808401826001600160801b03169052565b5060a0810151614b7660a08401826001600160801b03169052565b5060c0810151614b9160c08401826001600160801b03169052565b5060e0810151614bac60e08401826001600160801b03169052565b50610100818101516001600160801b0316908301526101208082015180151582850152610b49565b60008251614be68184602087016150d3565b9190910192915050565b6020815260008251806020840152614c0f8160408501602087016150d3565b601f01601f19169190910160400192915050565b60208082526008908201526710b9b2ba3a3632b960c11b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600690820152651b1bd8dad95960d21b604082015260600190565b9586526001600160a01b039490941660208601526040850192909252606084015261ffff166080830152151560a082015260c00190565b958652931515602086015260ff92831660408601529116606084015261ffff166080830152151560a082015260c00190565b60c08101611e1f82846001600160801b038082511683528060208301511660208401528060408301511660408401528060608301511660608401528060808301511660808401528060a08301511660a0840152505050565b6102a08101614db88286614ae3565b614dc6610140830185614ae3565b60038310614de457634e487b7160e01b600052602160045260246000fd5b82610280830152949350505050565b60405160e0810167ffffffffffffffff81118282101715614e1657614e16615180565b60405290565b604051610180810167ffffffffffffffff81118282101715614e1657614e16615180565b604051610140810167ffffffffffffffff81118282101715614e1657614e16615180565b604051601f8201601f1916810167ffffffffffffffff81118282101715614e8d57614e8d615180565b604052919050565b600067ffffffffffffffff821115614eaf57614eaf615180565b5060051b60200190565b600081600f0b83600f0b8282128260016001607f1b0303821381151615614ee257614ee2615154565b8260016001607f1b0319038212811615614efe57614efe615154565b50019392505050565b600061ffff808316818516808303821115614f2457614f24615154565b01949350505050565b60008219821115614f4057614f40615154565b500190565b600060ff821660ff84168060ff03821115614f6257614f62615154565b019392505050565b600082614f7957614f7961516a565b500490565b600060ff831680614f9157614f9161516a565b8060ff84160491505092915050565b6000816000190483118215151615614fba57614fba615154565b500290565b600060ff821660ff84168160ff0481118215151615614fe057614fe0615154565b029392505050565b600081600f0b83600f0b8281128160016001607f1b03190183128115161561501257615012615154565b8160016001607f1b0301831381161561502d5761502d615154565b5090039392505050565b60008083128015600160ff1b85018412161561505557615055615154565b6001600160ff1b038401831381161561507057615070615154565b50500390565b600061ffff8381169083168181101561509157615091615154565b039392505050565b6000828210156150ab576150ab615154565b500390565b600060ff821660ff8416808210156150ca576150ca615154565b90039392505050565b60005b838110156150ee5781810151838201526020016150d6565b83811115610b495750506000910152565b600060001982141561511357615113615154565b5060010190565b600060ff821660ff81141561513157615131615154565b60010192915050565b6000600160ff1b82141561515057615150615154565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610a7d57600080fdfee963a73e630cb9812a026653bfb6b1e14ffa92f8c38b79f318f2637557ea9f12a2646970667358221220073b85bbf23fc6eb0590eb224d238926159e6a15fe00fc7b8e4d044650a120b264736f6c63430008040033",
  "libraries": {
    "OptionLifecycle": "0x87aF61d9cABe914e7b623924Ac51d0159A918d22"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 213,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7276,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "locked",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 7278,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "settlerRoleAddress",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 7280,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "optionPairCount",
        "offset": 20,
        "slot": "102",
        "type": "t_uint8"
      },
      {
        "astId": 7282,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "assetCount",
        "offset": 21,
        "slot": "102",
        "type": "t_uint8"
      },
      {
        "astId": 7284,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "currentRound",
        "offset": 22,
        "slot": "102",
        "type": "t_uint16"
      },
      {
        "astId": 7286,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "underSettlement",
        "offset": 24,
        "slot": "102",
        "type": "t_bool"
      },
      {
        "astId": 7291,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "settlementCashflowResult",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_struct(SettlementCashflowResult)7015_storage)"
      },
      {
        "astId": 7296,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "assetData",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_struct(AssetData)6893_storage)"
      },
      {
        "astId": 7301,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "optionPairs",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint8,t_struct(OptionPairDefinition)6971_storage)"
      },
      {
        "astId": 7306,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "executionAccountingResult",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint8,t_struct(OptionPairExecutionAccountingResult)7006_storage)"
      },
      {
        "astId": 7311,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "optionData",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint8,t_struct(OptionData)6913_storage)"
      },
      {
        "astId": 7315,
        "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
        "label": "asset",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_uint8,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(OptionExecution)6996": {
        "encoding": "inplace",
        "label": "enum StructureData.OptionExecution",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_struct(AssetData)6893_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.AssetData)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetData)6893_storage"
      },
      "t_mapping(t_address,t_struct(SettlementCashflowResult)7015_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.SettlementCashflowResult)",
        "numberOfBytes": "32",
        "value": "t_struct(SettlementCashflowResult)7015_storage"
      },
      "t_mapping(t_address,t_struct(UserState)6930_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)6930_storage"
      },
      "t_mapping(t_uint16,t_struct(OptionState)6855_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct StructureData.OptionState)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionState)6855_storage"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint8,t_struct(OptionData)6913_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StructureData.OptionData)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionData)6913_storage"
      },
      "t_mapping(t_uint8,t_struct(OptionPairDefinition)6971_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StructureData.OptionPairDefinition)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionPairDefinition)6971_storage"
      },
      "t_mapping(t_uint8,t_struct(OptionPairExecutionAccountingResult)7006_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StructureData.OptionPairExecutionAccountingResult)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionPairExecutionAccountingResult)7006_storage"
      },
      "t_struct(AssetData)6893_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.AssetData",
        "members": [
          {
            "astId": 6882,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6884,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "depositAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6886,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "leftOverAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_int128"
          },
          {
            "astId": 6888,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "balanceAfterSettle",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6890,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "withdrawableAfterSettle",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6892,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "traderWithdrawn",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(OptionData)6913_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionData",
        "members": [
          {
            "astId": 6895,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "totalReleasedDepositAssetAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6897,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "totalReleasedCounterPartyAssetAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6899,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "assetToTerminateForNextRound",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6904,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "optionStates",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint16,t_struct(OptionState)6855_storage)"
          },
          {
            "astId": 6907,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "usersInvolved",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 6912,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "userStates",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(UserState)6930_storage)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(OptionPairDefinition)6971_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionPairDefinition",
        "members": [
          {
            "astId": 6958,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "callOptionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6960,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "putOptionId",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6962,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "depositAssetAmountDecimals",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6964,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "counterPartyAssetAmountDecimals",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6966,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "depositAsset",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6968,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "counterPartyAsset",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6970,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "manualDepositDisabled",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OptionPairExecutionAccountingResult)7006_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionPairExecutionAccountingResult",
        "members": [
          {
            "astId": 6999,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "callOptionResult",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(SettlementAccountingResult)6992_storage"
          },
          {
            "astId": 7002,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "putOptionResult",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(SettlementAccountingResult)6992_storage"
          },
          {
            "astId": 7005,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "execute",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(OptionExecution)6996"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(OptionState)6855_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionState",
        "members": [
          {
            "astId": 6842,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6844,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "totalTerminate",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6846,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "strikePrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6848,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "round",
            "offset": 16,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 6850,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "premiumRate",
            "offset": 18,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 6852,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "executed",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 6854,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "callOrPut",
            "offset": 21,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SettlementAccountingResult)6992_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.SettlementAccountingResult",
        "members": [
          {
            "astId": 6973,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "depositAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6975,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "autoRollAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6977,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "autoRollPremium",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6979,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedAmount",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6981,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedPremium",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6983,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "autoRollCounterPartyAmount",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6985,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "autoRollCounterPartyPremium",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 6987,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedCounterPartyAmount",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 6989,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedCounterPartyPremium",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 6991,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "executed",
            "offset": 16,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(SettlementCashflowResult)7015_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.SettlementCashflowResult",
        "members": [
          {
            "astId": 7008,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "newDepositAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 7010,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "newReleasedAmount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 7012,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "leftOverAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_int128"
          },
          {
            "astId": 7014,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "contractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserState)6930_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.UserState",
        "members": [
          {
            "astId": 6915,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "pendingAsset",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6917,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "tempLocked",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6919,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "ongoingAsset",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6921,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "assetToTerminate",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6923,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "assetToTerminateForNextRound",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6925,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedDepositAssetAmount",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6927,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "releasedCounterPartyAssetAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 6929,
            "contract": "contracts/HodlBoosterOptionUpgradeable.sol:HodlBoosterOptionUpgradeable",
            "label": "hasState",
            "offset": 16,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}