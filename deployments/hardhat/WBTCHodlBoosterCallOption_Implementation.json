{
  "address": "0x46b142DD1E924FAb83eCc3c08e4D46E82f005e0E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CloseOption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "CommitOption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "OpenOption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RATIOMULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callOrPut",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_underlyingPrice",
          "type": "uint256"
        }
      ],
      "name": "closePrevious",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitCurrent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterParty",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterPartyAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterPartyOption",
      "outputs": [
        {
          "internalType": "contract IPKKTStructureOption",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "depositFromCounterParty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_backwardRound",
          "type": "uint8"
        }
      ],
      "name": "getOngoingAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blockHeight",
          "type": "uint256"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "pricePrecision",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callOrPut",
              "type": "bool"
            }
          ],
          "internalType": "struct StructureData.OptionState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_underlyingDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_stableCoinDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetToTerminate",
          "type": "uint256"
        }
      ],
      "name": "initiateWithraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isEth",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maturedCounterPartyAssetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maturedDepositAssetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "optionHeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quota",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "pricePrecision",
          "type": "uint8"
        },
        {
          "internalType": "int16",
          "name": "strikePriceRatio",
          "type": "int16"
        },
        {
          "internalType": "uint16",
          "name": "premiumRate",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "optionStates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "underlyingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "premiumRate",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "pricePrecision",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "callOrPut",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionVault",
      "outputs": [
        {
          "internalType": "contract IOptionVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "quota",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "pricePrecision",
              "type": "uint8"
            },
            {
              "internalType": "int16",
              "name": "strikePriceRatio",
              "type": "int16"
            },
            {
              "internalType": "uint16",
              "name": "premiumRate",
              "type": "uint16"
            }
          ],
          "internalType": "struct StructureData.OptionParameters",
          "name": "_optionParameters",
          "type": "tuple"
        }
      ],
      "name": "rollToNext",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_counterParty",
          "type": "address"
        }
      ],
      "name": "setCounterPartyOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underSettlement",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingAsset",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "nextCursor",
          "type": "uint8"
        },
        {
          "internalType": "uint232",
          "name": "totalRound",
          "type": "uint232"
        },
        {
          "internalType": "bool",
          "name": "hasState",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "assetToTerminate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usersInvolved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd1866974ad801f4037e5b3c7f61df58a89f2e0add179df583ef475cb3e270d7a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x46b142DD1E924FAb83eCc3c08e4D46E82f005e0E",
    "transactionIndex": 0,
    "gasUsed": "3411464",
    "logsBloom": "0x
    "blockHash": "0xc82a2e230ebd462b2d281ee0f41f9e16588ae206e6adf4d88d551b4bb1c6141c",
    "transactionHash": "0xd1866974ad801f4037e5b3c7f61df58a89f2e0add179df583ef475cb3e270d7a",
    "logs": [],
    "blockNumber": 13600006,
    "cumulativeGasUsed": "3411464",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2c0b3141ab46ff26e37dcffb98655268",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CloseOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"CommitOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"OpenOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATIOMULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callOrPut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_underlyingPrice\",\"type\":\"uint256\"}],\"name\":\"closePrevious\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitCurrent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterParty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterPartyAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterPartyOption\",\"outputs\":[{\"internalType\":\"contract IPKKTStructureOption\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositFromCounterParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_backwardRound\",\"type\":\"uint8\"}],\"name\":\"getOngoingAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockHeight\",\"type\":\"uint256\"}],\"name\":\"getRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"pricePrecision\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"internalType\":\"struct StructureData.OptionState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_stableCoinDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetToTerminate\",\"type\":\"uint256\"}],\"name\":\"initiateWithraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maturedCounterPartyAssetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maturedDepositAssetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionHeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quota\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"pricePrecision\",\"type\":\"uint8\"},{\"internalType\":\"int16\",\"name\":\"strikePriceRatio\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"pricePrecision\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callOrPut\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionVault\",\"outputs\":[{\"internalType\":\"contract IOptionVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quota\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"pricePrecision\",\"type\":\"uint8\"},{\"internalType\":\"int16\",\"name\":\"strikePriceRatio\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"premiumRate\",\"type\":\"uint16\"}],\"internalType\":\"struct StructureData.OptionParameters\",\"name\":\"_optionParameters\",\"type\":\"tuple\"}],\"name\":\"rollToNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_counterParty\",\"type\":\"address\"}],\"name\":\"setCounterPartyOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underSettlement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"nextCursor\",\"type\":\"uint8\"},{\"internalType\":\"uint232\",\"name\":\"totalRound\",\"type\":\"uint232\"},{\"internalType\":\"bool\",\"name\":\"hasState\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"assetToTerminate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersInvolved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Options/PKKTHodlBoosterCallOption.sol\":\"PKKTHodlBoosterCallOption\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Options/PKKTHodlBoosterCallOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\"; \\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\"; \\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";  \\nimport \\\"./PKKTHodlBoosterOption.sol\\\"; \\nimport \\\"hardhat/console.sol\\\";\\ncontract PKKTHodlBoosterCallOption is PKKTHodlBoosterOption {\\n    \\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;  \\n    using StructureData for StructureData.UserState;\\n\\n   function initialize(\\n      string memory name,\\n      string memory symbol,\\n      address _underlying,\\n      address _stableCoin,\\n      uint8 _underlyingDecimals,\\n      uint8 _stableCoinDecimals,\\n      address _vaultAddress\\n    ) public initializer {\\n      PKKTHodlBoosterOption.initialize(\\n         name,\\n         symbol,\\n         _underlying,\\n         _stableCoin,\\n         _underlyingDecimals,\\n         _stableCoinDecimals, \\n         _vaultAddress,\\n         true\\n      );\\n   }\\n\\n     function _calculateMaturity(uint256 _underlyingPrice, StructureData.OptionState memory _optionState) internal override\\n     returns(StructureData.MaturedState memory) {\\n       StructureData.MaturedState memory state = StructureData.MaturedState({\\n          maturedDepositAssetAmount: 0,\\n          maturedCounterPartyAssetAmount: 0,\\n          executed: false,\\n          round: _optionState.round\\n       }); \\n        uint256 multipler = uint256(RATIOMULTIPLIER).add(_optionState.premiumRate);\\n        //todo: check callOrPut\\n        bool shouldConvert = _optionState.strikePrice < _underlyingPrice; \\n        state.executed = shouldConvert; \\n        if (shouldConvert) {  \\n           state.maturedCounterPartyAssetAmount = _optionState.totalAmount.mul(_optionState.strikePrice).\\n           mul(multipler).mul(10**counterPartyAssetAmountDecimals).\\n           div(RATIOMULTIPLIER).div(10**(_optionState.pricePrecision + depositAssetAmountDecimals)); \\n        }\\n        else {\\n           state.maturedDepositAssetAmount = _optionState.totalAmount.mul(multipler).div(RATIOMULTIPLIER);\\n\\n        }\\n \\n        uint256 userCount = usersInvolved.length; \\n        for (uint i=0; i < userCount; i++) {\\n            address userAddress = usersInvolved[i];\\n            StructureData.UserState storage userState = userStates[userAddress]; \\n            //since the onGoingAsset for current round is not filled yet, we make 5 instead of 6 backward\\n            uint256 ongoingAsset = userState.GetOngoingAsset(StructureData.MATUREROUND - 1);  \\n            if (ongoingAsset == 0) {\\n               pendingMaturedCounterPartyAssetAmount[userAddress] = \\n               pendingMaturedDepositAssetAmount[userAddress] = 0;\\n               continue;\\n            }\\n            if (shouldConvert) {  \\n               uint256 stableCoinAmount = state.maturedCounterPartyAssetAmount.mul(ongoingAsset).div(_optionState.totalAmount);\\n               pendingMaturedCounterPartyAssetAmount[userAddress] = stableCoinAmount; \\n               pendingMaturedDepositAssetAmount[userAddress] = 0;\\n            }\\n            else {  \\n                uint256 assetAmount = state.maturedDepositAssetAmount.mul(ongoingAsset).div(_optionState.totalAmount);\\n                pendingMaturedDepositAssetAmount[userAddress] = assetAmount;   \\n                pendingMaturedCounterPartyAssetAmount[userAddress] = 0;\\n            } \\n         }\\n         return state;\\n     }\\n}\",\"keccak256\":\"0x0b70ff2065cd2b11ffd6ab49e04d172e369b27419868285807e9c75505ba8a32\",\"license\":\"MIT\"},\"contracts/Options/PKKTHodlBoosterOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n \\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\"; \\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\"; \\nimport \\\"hardhat/console.sol\\\";\\n \\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";     \\nimport \\\"../interfaces/IPKKTStructureOption.sol\\\";\\nimport \\\"../interfaces/IExecuteSettlement.sol\\\"; \\nimport \\\"../interfaces/IOptionVault.sol\\\"; \\nabstract contract PKKTHodlBoosterOption is ERC20Upgradeable, OwnableUpgradeable, IPKKTStructureOption, IExecuteSettlement {\\n    \\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using StructureData for StructureData.UserState;\\n\\n    event Deposit(address indexed account, uint256 indexed round,uint256 amount);\\n    event Redeem(address indexed account, uint256 indexed round,uint256 amount);\\n    event CloseOption(uint256 indexed round);\\n    event CommitOption(uint256 indexed round);\\n    event OpenOption(uint256 indexed round);\\n \\n    uint256 public constant RATIOMULTIPLIER = 10000;\\n    uint8 internal depositAssetAmountDecimals;\\n    uint8 internal counterPartyAssetAmountDecimals;\\n      \\n    address public depositAsset;\\n    address public counterPartyAsset;\\n \\n    bool public isEth;\\n    StructureData.OptionParameters public optionParameters;  \\n     uint256 public currentRound;\\n     uint256 public previousUnderlyingPrice;  \\n     mapping(uint256=>uint256) public optionHeights;\\n     mapping(uint256=>StructureData.OptionState) public optionStates;\\n     address[] public usersInvolved;  \\n     mapping(address=>StructureData.UserState) public userStates; \\n     bool public underSettlement; \\n     bool public callOrPut; //put accept stablecoin only, call accept asset coins only\\n     IPKKTStructureOption public counterPartyOption;\\n     address public counterParty;\\n     IOptionVault public optionVault;\\n     \\n     //public data for complete withdrawal\\n     mapping(address=>uint256) public maturedDepositAssetAmount;\\n     mapping(address=>uint256) public maturedCounterPartyAssetAmount;\\n\\n     mapping(address=>uint256) internal pendingMaturedDepositAssetAmount;\\n     mapping(address=>uint256) internal pendingMaturedCounterPartyAssetAmount;\\n\\n\\n    //take if for eth, we make price precision as 4, then underlying price can be 40000000 for 4000$\\n    //for shib, we make price precision as 8, then underlying price can be 4000 for 0.00004000$\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address _depositAsset,\\n        address _counterPartyAsset,\\n        uint8 _depositAssetAmountDecimals,\\n        uint8 _counterPartyAssetAmountDecimals,\\n        address _vaultAddress,\\n        bool _callOrPut\\n    ) internal initializer {\\n        require(_vaultAddress != address(0), \\\"Empty vault address\\\");\\n        ERC20Upgradeable.__ERC20_init(name, symbol);\\n        OwnableUpgradeable.__Ownable_init();\\n        depositAsset = _depositAsset;\\n        counterPartyAsset = _counterPartyAsset;\\n        isEth = _depositAsset == address(0);\\n        depositAssetAmountDecimals = _depositAssetAmountDecimals;\\n        counterPartyAssetAmountDecimals = _counterPartyAssetAmountDecimals;\\n        optionVault = IOptionVault(_vaultAddress);\\n        callOrPut = _callOrPut;\\n    }\\n\\n    function setCounterPartyOption(address _counterParty) external {\\n        require(_counterParty != address(this), \\\"Cannot set self as counter party\\\");\\n        counterPartyOption = IPKKTStructureOption(_counterParty);\\n        counterParty = _counterParty;\\n    }\\n          \\n    function decimals() public view override returns (uint8) {\\n        return depositAssetAmountDecimals;\\n    }\\n\\n    function vaultAddress() public view override returns(address) {\\n        return optionVault.getAddress();\\n    }\\n\\n    function initiateWithraw(uint256 _assetToTerminate) external override {\\n        require(_assetToTerminate > 0 , \\\"!_assetToTerminate\\\");\\n        StructureData.UserState storage userState =  userStates[msg.sender];\\n        uint256 newAssetToTerminate = userState.assetToTerminate.add(_assetToTerminate);\\n        uint256 ongoing = userState.GetOngoingAsset(0);\\n        require(newAssetToTerminate <= ongoing, \\\"Exceeds available\\\");\\n        userState.assetToTerminate = newAssetToTerminate;\\n    }\\n\\n    /*function withraw(uint256 _amount) external override { \\n       require(!underSettlement, \\\"Being settled\\\");\\n       require(currentRound > 1, \\\"!No Matured\\\");\\n       require(_amount > 0, \\\"!amount\\\"); \\n      \\n        uint256 userMaturedAmount = maturedDepositAssetAmount[msg.sender];\\n        require(userMaturedAmount >= _amount, \\\"Exceed available\\\"); \\n        maturedDepositAssetAmount[msg.sender] = userMaturedAmount.sub(_amount); \\n        optionVault.withdraw(msg.sender, _amount, depositAsset);  \\n    }*/\\n\\n    function redeposit(uint256 _amount) external override {\\n       require(!underSettlement, \\\"Being settled\\\");\\n       require(currentRound > 1, \\\"!No Matured\\\");\\n       require(_amount > 0, \\\"!amount\\\"); \\n       uint256 maturedAmount = maturedDepositAssetAmount[msg.sender];\\n       require(maturedAmount >= _amount, \\\"Exceed available\\\");\\n       maturedDepositAssetAmount[msg.sender] = maturedAmount.sub(_amount);\\n       _depositFor(msg.sender, _amount);\\n    }\\n    //todo: what if quata is not enough\\n    function depositFromCounterParty(address[] memory addresses, uint256[] memory _amounts) override external {\\n        require(msg.sender == counterParty, \\\"Only counterparty option can call this method\\\");\\n        for(uint256 i = 0; i < 0 ; i++){\\n            _depositFor(addresses[i], _amounts[i]);\\n        } \\n    }\\n    //deposit eth\\n    function depositETH() external payable override {\\n       require(!underSettlement, \\\"Being settled\\\");\\n       require(currentRound > 0, \\\"!Started\\\");\\n       require(isEth, \\\"!ETH\\\");\\n       require(msg.value > 0, \\\"!value\\\"); \\n       \\n        //todo: convert to weth  \\n       _depositFor(msg.sender, msg.value);\\n       payable(vaultAddress()).transfer(msg.value);\\n    }\\n\\n    //deposit other erc20 coin, take wbtc\\n    function deposit(uint256 _amount) external override {  \\n        require(!underSettlement, \\\"Being settled\\\");\\n        require(currentRound > 0, \\\"!Started\\\");\\n        require(!isEth, \\\"!ERC20\\\");\\n        require(_amount > 0, \\\"!amount\\\"); \\n        _depositFor(msg.sender, _amount);  \\n        IERC20(depositAsset).safeTransferFrom(msg.sender, vaultAddress(), _amount);\\n    }\\n \\n  \\n    function _depositFor(address _userAddress, uint256 _amount) private { \\n        StructureData.OptionState storage optionState = optionStates[currentRound];\\n        require(optionState.totalAmount.add(_amount) <= optionParameters.quota, \\\"Not enough quota\\\");\\n        StructureData.UserState storage userState =  userStates[_userAddress]; \\n        //first time added\\n        if (!userState.hasState) { \\n            userState.hasState = true;\\n            usersInvolved.push(_userAddress);\\n        } \\n        userState.pendingAsset = userState.pendingAsset.add(_amount); \\n        optionState.totalAmount = optionState.totalAmount.add(_amount);\\n        \\n        emit Deposit(_userAddress, currentRound, _amount);\\n    }\\n\\n \\n    function redeem(uint256 _amount) external override { \\n        require(!underSettlement, \\\"Being settled\\\");\\n         require(_amount > 0, \\\"!amount\\\"); \\n         StructureData.UserState storage userState =  userStates[msg.sender]; \\n         require(userState.pendingAsset >= _amount, \\\"Exceeds available\\\");\\n         userState.pendingAsset = userState.pendingAsset.sub(_amount); \\n         StructureData.OptionState storage optionState = optionStates[currentRound];\\n         optionState.totalAmount = optionState.totalAmount.sub(_amount);\\n        optionVault.withdraw(msg.sender, _amount, depositAsset); \\n         emit Redeem(msg.sender, currentRound, _amount);\\n    }\\n\\n \\n    function getPendingAsset() external view override returns (uint256) {\\n         StructureData.UserState storage userState =  userStates[msg.sender]; \\n         return userState.pendingAsset;\\n    }\\n\\n    function getOngoingAsset(uint8 _backwardRound) external view override returns (uint256) { \\n         StructureData.UserState storage userState =  userStates[msg.sender]; \\n         return userState.GetOngoingAsset(_backwardRound);\\n    }\\n  \\n    //used to render the history at client side, reading the minting transactions of a specific address,\\n    //for each transaction, read the blockheight and call this method to get the result\\n    //the blockheight is the the height when the round is committed  \\n    function getRoundData(uint256 _blockHeight) external view override returns(StructureData.OptionState memory) {\\n        return optionStates[optionHeights[_blockHeight]];\\n    } \\n\\n   function closePrevious(uint256 _underlyingPrice) external override onlyOwner { \\n        require(!underSettlement, \\\"Being settled\\\");\\n        underSettlement = true;\\n        previousUnderlyingPrice = _underlyingPrice; \\n        if (currentRound == 0) {\\n            return;\\n        }\\n        \\n        if (currentRound <= StructureData.MATUREROUND) { \\n            return;\\n        }\\n        uint maturedRound = currentRound - StructureData.MATUREROUND;\\n        StructureData.OptionState storage previousOptionState = optionStates[maturedRound];   \\n        StructureData.MaturedState memory maturedState = _calculateMaturity(_underlyingPrice, previousOptionState);  \\n        optionVault.setMaturityState(maturedState, depositAsset, counterPartyAsset);\\n        previousOptionState.executed = maturedState.executed;\\n        emit CloseOption(maturedRound);\\n   }\\n   function _calculateMaturity(uint256 _underlyingPrice, StructureData.OptionState memory _optionState) \\n   internal virtual returns(StructureData.MaturedState memory _state); \\n\\n   function getAmountToTerminate(uint256 _maturedAmount, uint256 _assetToTerminate, uint256 _assetAmount) private pure returns(uint256) {\\n       if (_assetToTerminate == 0) return 0;\\n       return _assetToTerminate >= _assetAmount ?  _maturedAmount : _maturedAmount.mul(_assetToTerminate).div(_assetAmount);\\n   }\\n\\n   address[] private autoRolledUsers;\\n   uint256[] private autoRolledAmounts;\\n\\n   function autoRoll(bool _counterParty) private {\\n        uint256 userCount = usersInvolved.length;\\n        if (!_counterParty) {\\n            for (uint i=0; i < userCount; i++) {\\n                address userAddress = usersInvolved[i];\\n                StructureData.UserState storage userState = userStates[userAddress]; \\n                \\n                uint256 maturedAmount = pendingMaturedDepositAssetAmount[userAddress];\\n                if (maturedAmount == 0) {\\n                    userState.assetToTerminate = 0;\\n                    continue;\\n                }\\n                uint256 amountToTerminate = getAmountToTerminate(maturedAmount, userState.assetToTerminate, userState.GetOngoingAsset(0));\\n                if (amountToTerminate > 0){\\n                    maturedDepositAssetAmount[userAddress] = \\n                    maturedDepositAssetAmount[userAddress].add(amountToTerminate);\\n                }\\n                uint256 remainingAmount = maturedAmount.sub(amountToTerminate);\\n                if (remainingAmount > 0) { \\n                    _depositFor(userAddress, maturedAmount);\\n                }\\n                pendingMaturedDepositAssetAmount[userAddress] = 0;\\n                userState.assetToTerminate = 0;\\n            }  \\n            return;\\n        }\\n         \\n        for (uint i=0; i < userCount; i++) {\\n            address userAddress = usersInvolved[i];\\n            StructureData.UserState storage userState = userStates[userAddress];  \\n            uint256 maturedAmount = pendingMaturedCounterPartyAssetAmount[userAddress]; \\n            if (maturedAmount == 0) {\\n                userState.assetToTerminate = 0;\\n                continue;\\n            }\\n            uint256 amountToTerminate = getAmountToTerminate(maturedAmount, userState.assetToTerminate, userState.GetOngoingAsset(0));\\n            if (amountToTerminate > 0) {\\n                maturedCounterPartyAssetAmount[userAddress] = \\n                maturedCounterPartyAssetAmount[userAddress].add(amountToTerminate);\\n            }\\n            uint256 remainingAmount = maturedAmount.sub(amountToTerminate); \\n            if (remainingAmount > 0){   \\n                autoRolledAmounts.push(remainingAmount);\\n                autoRolledUsers.push(userAddress);\\n            }\\n            pendingMaturedCounterPartyAssetAmount[userAddress] = 0;\\n            userState.assetToTerminate = 0;\\n        } \\n        uint256 count = autoRolledAmounts.length;\\n        if (count == 0) {\\n            return;\\n        }\\n        \\n        address[] memory localAutoRolledUsers = new address[](count);\\n        uint256[] memory localAutoRolledAmounts = new uint256[](count);\\n        for(uint i = 0; i < count; i++) {\\n            localAutoRolledUsers[i] = autoRolledUsers[i];\\n            localAutoRolledAmounts[i] = autoRolledAmounts[i];\\n        }\\n        delete autoRolledUsers;\\n        delete autoRolledAmounts;\\n        counterPartyOption.depositFromCounterParty(localAutoRolledUsers, localAutoRolledAmounts);        \\n   }\\n\\n   //close pending option and autoroll if capacity is enough based on the maturity result\\n   function commitCurrent() external override onlyOwner {  \\n        require(underSettlement, \\\"Not being settled\\\");\\n        //return when there is no previous round\\n        //console.log(\\\"CommitCurrent: %s %d\\\", name(), currentRound);\\n        if (currentRound <= 0) return;\\n        if (currentRound > StructureData.MATUREROUND) {  \\n            StructureData.OptionState storage previousOptionState = optionStates[currentRound - StructureData.MATUREROUND];\\n            if (previousOptionState.totalAmount > 0) { \\n                autoRoll(previousOptionState.executed);\\n            }   \\n        } \\n        StructureData.OptionState storage optionState = optionStates[currentRound];\\n        optionVault.setCommittedState(optionState, depositAsset, counterPartyAsset);\\n        optionState.underlyingPrice = previousUnderlyingPrice; \\n        optionState.strikePrice =  optionState.underlyingPrice.mul(uint256(int256(RATIOMULTIPLIER) + int256(optionParameters.strikePriceRatio))).div(RATIOMULTIPLIER);  \\n        optionState.premiumRate = optionParameters.premiumRate;\\n        optionState.pricePrecision = optionParameters.pricePrecision;\\n        //mint for the current option\\n        _mint(address(this), optionState.totalAmount);\\n        uint256 userCount = usersInvolved.length;\\n        for (uint i=0; i < userCount; i++) {\\n            address userAddress = usersInvolved[i];\\n            StructureData.UserState storage userState = userStates[userAddress]; \\n            if(userState.pendingAsset != 0) {  \\n                //transfer each user a share of the option to trigger transfer event\\n                _transfer(address(this), userAddress, userState.pendingAsset);\\n            } \\n            userState.SetOngoingAsset(userState.pendingAsset); \\n            userState.pendingAsset = 0;\\n         }\\n\\n      \\n        optionHeights[block.number] = currentRound; //commit current option at current block\\n        emit CommitOption(currentRound);\\n   }\\n      \\n   \\n   function rollToNext(StructureData.OptionParameters memory _optionParameters) external override onlyOwner { \\n        currentRound = currentRound + 1;\\n        optionParameters = _optionParameters;  \\n        StructureData.OptionState memory currentOption =  \\n        StructureData.OptionState({\\n                            round: currentRound,\\n                            totalAmount: 0,\\n                            premiumRate:  _optionParameters.premiumRate,\\n                            pricePrecision: _optionParameters.pricePrecision,\\n                            strikePrice: 0,\\n                            underlyingPrice: 0,\\n                            executed: false,\\n                            callOrPut: callOrPut\\n                        });\\n        optionStates[currentRound] = currentOption;\\n        underSettlement = false;\\n        emit OpenOption(currentRound);\\n    }\\n\\n}\",\"keccak256\":\"0xea3a3cf697f980b30ccc12d9696f27731254ad6fb9a526c0918e8dc099dfbe53\",\"license\":\"MIT\"},\"contracts/interfaces/IExecuteSettlement.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.4;\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";  \\ninterface IExecuteSettlement {\\n \\n   //calculate the result of on going option    \\n   function closePrevious(uint256 _underlyingPrice) external;\\n\\n   //close pending option and autoroll if capacity is enough based on the maturity result\\n   function commitCurrent() external; \\n\\n    //open a new option\\n   function rollToNext(StructureData.OptionParameters memory _optionParameters) external; \\n\\n}\\n\",\"keccak256\":\"0xa9961c98b12bc0d3b22b2f53d189e56c55532102750d0267e38922a8e1e64039\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOptionVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.4;\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";\\n\\ninterface IOptionVault { \\n    function addOption(address _optionContract) external;\\n    function removeOption(address _optionContract) external;\\n    function getAddress() external view returns(address);\\n    function withdraw(address _target, uint256 _amount, address _contractAddress) external;\\n\\n    function prepareSettlement() external;\\n    \\n    function setCommittedState(StructureData.OptionState memory _currentState, address _depositAsset, address _counterPartyAsset)  external;   \\n    function setMaturityState(StructureData.MaturedState memory _maturedState, address _depositAsset, address _counterPartyAsset) external; \\n    \\n    function startSettlement(address _traderAddress) external;\\n    function finishSettlement() external;\\n\\n    function allSettled() external view returns(bool);\\n\\n    \\n    \\n}\\n\",\"keccak256\":\"0xf14319e980234130a50abc9ea718e39b0cf99cce126a0661ab8e33b14da719aa\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPKKTStructureOption.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.4;\\nimport {StructureData} from \\\"../libraries/StructureData.sol\\\";\\n \\ninterface IPKKTStructureOption {\\n\\n    \\n    function vaultAddress() external view returns(address);\\n\\n    //deposit eth\\n    function depositETH() external payable;\\n\\n    //deposit other erc20 coin, take wbtc or stable coin\\n    function deposit(uint256 _amount) external;\\n\\n    //redeem unsettled amount\\n    function redeem(uint256 _amount) external; \\n\\n    function getPendingAsset() external view returns (uint256);   \\n\\n    //0 for latest, 6 for 7 days ago\\n    function getOngoingAsset(uint8 _backwardRound) external view returns (uint256);\\n\\n    //complete withdraw happens on the option vault\\n    function initiateWithraw(uint256 _assetToTerminate) external; \\n\\n  \\n    function redeposit(uint256 _amount) external;\\n\\n    //can only be called from counterparty option\\n    function depositFromCounterParty(address[] memory _addresses, uint256[] memory _amounts) external;\\n\\n\\n    //used to render the history at client side, reading the minting transactions of a specific address,\\n    //for each transaction, read the blockheight and call this method to get the result\\n    //the blockheight is the the height when the round is committed \\n    function getRoundData(uint256 _blockHeight) external view returns(StructureData.OptionState memory);\\n\\n    \\n \\n}\\n\\n\",\"keccak256\":\"0xe644d8954e61f5a87d0a27e26468ce42e7b721e6c393df1375612d4dac4a5383\",\"license\":\"UNLICENSED\"},\"contracts/libraries/StructureData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary StructureData {\\n     \\n     uint8 public constant MATUREROUND= 1; //7 for daily settlement, 1 for daily settlement\\n    //the strike price is calculated based on assetPrice * (1 +/- strikePriceRatio/100)\\n    //for hodl, if the asset price is higher than the strike price, the option would be executed, it's a call option  \\n    struct OptionParameters {\\n         uint256 quota;  \\n         uint8 pricePrecision;\\n         int16 strikePriceRatio;  // take, 10% is represented as 1000, precision is 4\\n         uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n     }\\n\\n    struct OptionState {\\n         uint256 round;\\n         uint256 totalAmount; \\n         uint256 strikePrice;\\n         uint256 underlyingPrice; \\n         uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n         uint8 pricePrecision; \\n         bool executed; \\n         bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral;\\n    }\\n \\n   struct MaturedState {\\n       uint256 maturedDepositAssetAmount;\\n       uint256 maturedCounterPartyAssetAmount;\\n       bool executed;\\n       uint256 round;\\n       \\n   }\\n\\n    enum OptionType {\\n        HodlBooster,\\n        VolAlpha\\n    }\\n\\n    struct UserState {\\n        uint256 pendingAsset; //for current round\\n        uint256[MATUREROUND] ongoingAsset; //for previous 7 rounds\\n        uint8 nextCursor; //nextCursor\\n        uint232 totalRound; \\n        bool hasState;\\n        uint256 assetToTerminate; \\n        //bool shouldStop;\\n    }\\n    function SetOngoingAsset(UserState storage userState, uint256 newValue) internal { \\n        uint cursor = userState.nextCursor;\\n        userState.ongoingAsset[cursor] = newValue;\\n        uint8 nextCursor = cursor == (MATUREROUND - 1) ? uint8(0) : uint8(cursor + 1);\\n        userState.nextCursor = nextCursor;\\n        userState.totalRound = userState.totalRound + 1; //won't overflow\\n    }\\n    \\n    function GetOngoingAsset(UserState storage userState, uint8 backwardRound) internal view returns(uint256) {\\n        if (userState.totalRound <= backwardRound) return 0;\\n        require(backwardRound < MATUREROUND);\\n        int8 previousCursor = int8(userState.nextCursor) - int8(backwardRound) - 1;\\n        if (previousCursor < 0) {\\n            previousCursor = previousCursor + int8(MATUREROUND);\\n        }\\n        return userState.ongoingAsset[uint8(previousCursor)];\\n    }\\n\\n    enum Direction {\\n        None,\\n        SendToTrader,\\n        SendBackToVault\\n    }\\n    struct SettlementInstruction {\\n        uint256 amount;\\n        address contractAddress; //0 for eth\\n        address targetAddress; //vault address\\n        Direction direction;\\n        bool fullfilled;\\n    }\\n\\n}\",\"keccak256\":\"0x12d4f5e61cacb8308d0a12de4770b74cf28693bc5192f9cb52b345a694db5bc9\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613cc4806100206000396000f3fe6080604052600436106102885760003560e01c806376e7a4781161015a578063c02337df116100c1578063ded39ec91161007a578063ded39ec914610a72578063e5d455ce14610a92578063eef9f5a514610ab2578063efdd6cf814610ad8578063f2fde38b14610b05578063f6326fb314610b2557600080fd5b8063c02337df14610984578063c515d7e714610999578063ccc41f24146109b9578063daafe774146109df578063db006a7514610a0c578063dd62ed3e14610a2c57600080fd5b8063a457c2d711610113578063a457c2d714610873578063a49b41d414610893578063a5d3e5b1146108f7578063a9059cbb14610924578063b6b55f2514610944578063bb9662c81461096457600080fd5b806376e7a478146107d55780638a19c8bc146107eb5780638da5cb5b14610801578063902025391461081f57806395d89b411461083e578063a2589ef91461085357600080fd5b80632c453bdf116101fe578063511db114116101b7578063511db1141461067e5780635973ff3a1461069f5780635ce0d5a5146106bf57806365235474146106d557806370a082311461078a578063715018a6146107c057600080fd5b80632c453bdf146105c7578063313ce567146105e75780633950935114610609578063430bf08a146106295780634601c2a61461063e5780634d94f56d1461065e57600080fd5b80630ecc535f116102505780630ecc535f1461047b57806311c8556d1461050e578063140e56091461054657806318160ddd146105725780631de245af1461058757806323b872dd146105a757600080fd5b806306fdde031461028d5780630720da52146102b85780630748248f1461040f578063095ea7b3146104395780630e777b4b14610459575b600080fd5b34801561029957600080fd5b506102a2610b2d565b6040516102af9190613755565b60405180910390f35b3480156102c457600080fd5b506103a36102d3366004613691565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152506000908152609d60209081526040808320548352609e825291829020825161010081018452815481526001820154928101929092526002810154928201929092526003820154606082015260049091015461ffff8116608083015260ff620100008204811660a0840152630100000082048116151560c084015264010000000090910416151560e082015290565b6040516102af91906000610100820190508251825260208301516020830152604083015160408301526060830151606083015261ffff608084015116608083015260ff60a08401511660a083015260c0830151151560c083015260e0830151151560e083015292915050565b34801561041b57600080fd5b5060a1546104299060ff1681565b60405190151581526020016102af565b34801561044557600080fd5b50610429610454366004613443565b610bbf565b34801561046557600080fd5b50610479610474366004613691565b610bd6565b005b34801561048757600080fd5b506104d6610496366004613393565b60a060205260009081526040902080546002820154600390920154909160ff808216926001600160e81b0361010084041692600160f01b90049091169085565b6040805195865260ff90941660208601526001600160e81b03909216928401929092529015156060830152608082015260a0016102af565b34801561051a57600080fd5b5060a35461052e906001600160a01b031681565b6040516001600160a01b0390911681526020016102af565b34801561055257600080fd5b5033600090815260a060205260409020545b6040519081526020016102af565b34801561057e57600080fd5b50603554610564565b34801561059357600080fd5b5061052e6105a2366004613691565b610c9f565b3480156105b357600080fd5b506104296105c2366004613403565b610cc9565b3480156105d357600080fd5b5060a25461052e906001600160a01b031681565b3480156105f357600080fd5b5060975460405160ff90911681526020016102af565b34801561061557600080fd5b50610429610624366004613443565b610d75565b34801561063557600080fd5b5061052e610db1565b34801561064a57600080fd5b506105646106593660046136a9565b610e33565b34801561066a57600080fd5b50610479610679366004613691565b610e4c565b34801561068a57600080fd5b5060985461042990600160a01b900460ff1681565b3480156106ab57600080fd5b506104796106ba36600461346e565b611050565b3480156106cb57600080fd5b50610564609c5481565b3480156106e157600080fd5b506107446106f0366004613691565b609e60205260009081526040902080546001820154600283015460038401546004909401549293919290919061ffff81169060ff620100008204811691630100000081048216916401000000009091041688565b60408051988952602089019790975295870194909452606086019290925261ffff16608085015260ff1660a0840152151560c0830152151560e0820152610100016102af565b34801561079657600080fd5b506105646107a5366004613393565b6001600160a01b031660009081526033602052604090205490565b3480156107cc57600080fd5b506104796110c9565b3480156107e157600080fd5b5061056461271081565b3480156107f757600080fd5b50610564609b5481565b34801561080d57600080fd5b506065546001600160a01b031661052e565b34801561082b57600080fd5b5060a15461042990610100900460ff1681565b34801561084a57600080fd5b506102a26110ff565b34801561085f57600080fd5b5061047961086e366004613691565b61110e565b34801561087f57600080fd5b5061042961088e366004613443565b61120b565b34801561089f57600080fd5b50609954609a546108c7919060ff811690610100810460010b906301000000900461ffff1684565b6040516102af949392919093845260ff92909216602084015260010b604083015261ffff16606082015260800190565b34801561090357600080fd5b50610564610912366004613691565b609d6020526000908152604090205481565b34801561093057600080fd5b5061042961093f366004613443565b6112a4565b34801561095057600080fd5b5061047961095f366004613691565b6112b1565b34801561097057600080fd5b5060985461052e906001600160a01b031681565b34801561099057600080fd5b506104796113a4565b3480156109a557600080fd5b506104796109b4366004613393565b611663565b3480156109c557600080fd5b5060975461052e906201000090046001600160a01b031681565b3480156109eb57600080fd5b506105646109fa366004613393565b60a56020526000908152604090205481565b348015610a1857600080fd5b50610479610a27366004613691565b6116f7565b348015610a3857600080fd5b50610564610a473660046133cb565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b348015610a7e57600080fd5b50610479610a8d36600461360d565b611880565b348015610a9e57600080fd5b50610479610aad366004613551565b611ab1565b348015610abe57600080fd5b5060a15461052e906201000090046001600160a01b031681565b348015610ae457600080fd5b50610564610af3366004613393565b60a46020526000908152604090205481565b348015610b1157600080fd5b50610479610b20366004613393565b611b35565b610479611bcd565b606060368054610b3c90613bf7565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6890613bf7565b8015610bb55780601f10610b8a57610100808354040283529160200191610bb5565b820191906000526020600020905b815481529060010190602001808311610b9857829003601f168201915b5050505050905090565b6000610bcc338484611cf2565b5060015b92915050565b60008111610c205760405162461bcd60e51b8152602060048201526012602482015271215f6173736574546f5465726d696e61746560701b60448201526064015b60405180910390fd5b33600090815260a0602052604081206003810154909190610c419084611e0e565b90506000610c4f8382611e1a565b905080821115610c955760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b6044820152606401610c17565b5060039091015550565b609f8181548110610caf57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610cd6848484611ec1565b6001600160a01b038416600090815260346020908152604080832033845290915290205482811015610d5b5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610c17565b610d688533858403611cf2565b60019150505b9392505050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091610bcc918590610dac9086906139e6565b611cf2565b60a354604080516338cc483160e01b815290516000926001600160a01b0316916338cc4831916004808301926020929190829003018186803b158015610df657600080fd5b505afa158015610e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2e91906133af565b905090565b33600090815260a060205260408120610d6e8184611e1a565b6065546001600160a01b03163314610e765760405162461bcd60e51b8152600401610c17906137fd565b60a15460ff1615610e995760405162461bcd60e51b8152600401610c1790613788565b60a1805460ff19166001179055609c819055609b54610eb55750565b609b54600110610ec25750565b609b54600090610ed490600190613b91565b6000818152609e602090815260408083208151610100810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015461ffff8116608084015260ff620100008204811660a0850152630100000082048116151560c085015264010000000090910416151560e0830152929350610f61908590612091565b60a3546097546098546040805163193ef4d360e01b815285516004820152602086015160248201529085015115156044820152606085015160648201526001600160a01b03620100009093048316608482015290821660a4820152929350169063193ef4d39060c401600060405180830381600087803b158015610fe457600080fd5b505af1158015610ff8573d6000803e3d6000fd5b50505060408083015160048501805491151563010000000263ff00000019909216919091179055518491507f5fd55b58a9ef8c29a9db39dd9a05dec64993eb227ad0177941238778e9ea896290600090a25050505b50565b60a2546001600160a01b031633146110c05760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c7920636f756e7465727061727479206f7074696f6e2063616e2063616c60448201526c1b081d1a1a5cc81b595d1a1bd9609a1b6064820152608401610c17565b5050565b505050565b6065546001600160a01b031633146110f35760405162461bcd60e51b8152600401610c17906137fd565b6110fd600061244e565b565b606060378054610b3c90613bf7565b60a15460ff16156111315760405162461bcd60e51b8152600401610c1790613788565b6001609b54116111715760405162461bcd60e51b815260206004820152600b60248201526a08539bc813585d1d5c995960aa1b6044820152606401610c17565b600081116111915760405162461bcd60e51b8152600401610c1790613832565b33600090815260a46020526040902054818110156111e45760405162461bcd60e51b815260206004820152601060248201526f45786365656420617661696c61626c6560801b6044820152606401610c17565b6111ee81836124a0565b33600081815260a460205260409020919091556110c090836122fc565b3360009081526034602090815260408083206001600160a01b03861684529091528120548281101561128d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c17565b61129a3385858403611cf2565b5060019392505050565b6000610bcc338484611ec1565b60a15460ff16156112d45760405162461bcd60e51b8152600401610c1790613788565b6000609b54116113115760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610c17565b609854600160a01b900460ff16156113545760405162461bcd60e51b815260206004820152600660248201526502145524332360d41b6044820152606401610c17565b600081116113745760405162461bcd60e51b8152600401610c1790613832565b61137e33826122fc565b61104d3361138a610db1565b6097546201000090046001600160a01b03169190846124ac565b6065546001600160a01b031633146113ce5760405162461bcd60e51b8152600401610c17906137fd565b60a15460ff166114145760405162461bcd60e51b8152602060048201526011602482015270139bdd0818995a5b99c81cd95d1d1b1959607a1b6044820152606401610c17565b6000609b541161142057565b609b546001101561147a576000609e6000600160ff16609b546114439190613b91565b81526020019081526020016000209050600081600101541115611478576004810154611478906301000000900460ff16612506565b505b609b546000908152609e60205260409081902060a354609754609854935163042abd7d60e51b815292936001600160a01b0392831693638557afa0936114d193879362010000909104821692911690600401613853565b600060405180830381600087803b1580156114eb57600080fd5b505af11580156114ff573d6000803e3d6000fd5b5050609c5460038401555050609a54611541906127109061153b90611530906101009004600190810b900b8361393a565b600385015490612a0e565b90612a1a565b6002820155609a8054600483018054630100000090920461ffff1661ffff19831681178255925462ffffff1990921690921760ff90911662010000021790556001810154611590903090612a26565b609f5460005b81811015611623576000609f82815481106115c157634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260a09091526040909120805491925090156115ff576115ff30838360000154611ec1565b805461160c908290612b05565b60009055508061161b81613c32565b915050611596565b50609b54436000908152609d6020526040808220839055517ffa513f17b83baf0c2da337ab931a96429f75c55f0ee2115b7acd007a1a35dd519190a25050565b6001600160a01b0381163014156116bc5760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f74207365742073656c6620617320636f756e7465722070617274796044820152606401610c17565b60a1805462010000600160b01b031916620100006001600160a01b039390931692830217905560a280546001600160a01b0319169091179055565b60a15460ff161561171a5760405162461bcd60e51b8152600401610c1790613788565b6000811161173a5760405162461bcd60e51b8152600401610c1790613832565b33600090815260a060205260409020805482111561178e5760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b6044820152606401610c17565b805461179a90836124a0565b8155609b546000908152609e6020526040902060018101546117bc90846124a0565b600182015560a354609754604051631a4ca37b60e21b8152336004820152602481018690526001600160a01b0362010000909204821660448201529116906369328dec90606401600060405180830381600087803b15801561181d57600080fd5b505af1158015611831573d6000803e3d6000fd5b50505050609b54336001600160a01b03167fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a9298560405161187391815260200190565b60405180910390a3505050565b6065546001600160a01b031633146118aa5760405162461bcd60e51b8152600401610c17906137fd565b609b546118b89060016139e6565b609b819055508060996000820151816000015560208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548161ffff021916908360010b61ffff16021790555060608201518160010160036101000a81548161ffff021916908361ffff1602179055509050506000604051806101000160405280609b548152602001600081526020016000815260200160008152602001836060015161ffff168152602001836020015160ff16815260200160001515815260200160a160019054906101000a900460ff161515815250905080609e6000609b5481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548161ffff021916908361ffff16021790555060a08201518160040160026101000a81548160ff021916908360ff16021790555060c08201518160040160036101000a81548160ff02191690831515021790555060e08201518160040160046101000a81548160ff021916908315150217905550905050600060a160006101000a81548160ff021916908315150217905550609b547f10f419fb017d3101d854d4433e414ff27f232bb2f4aae83d987ad0219efa6c9b60405160405180910390a25050565b600054610100900460ff1680611aca575060005460ff16155b611ae65760405162461bcd60e51b8152600401610c17906137af565b600054610100900460ff16158015611b08576000805461ffff19166101011790555b611b19888888888888886001612bba565b8015611b2b576000805461ff00191690555b5050505050505050565b6065546001600160a01b03163314611b5f5760405162461bcd60e51b8152600401610c17906137fd565b6001600160a01b038116611bc45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c17565b61104d8161244e565b60a15460ff1615611bf05760405162461bcd60e51b8152600401610c1790613788565b6000609b5411611c2d5760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610c17565b609854600160a01b900460ff16611c6f5760405162461bcd60e51b8152600401610c17906020808252600490820152630428aa8960e31b604082015260600190565b60003411611ca85760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b6044820152606401610c17565b611cb233346122fc565b611cba610db1565b6001600160a01b03166108fc349081150290604051600060405180830381858888f1935050505015801561104d573d6000803e3d6000fd5b6001600160a01b038316611d545760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c17565b6001600160a01b038216611db55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c17565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101611873565b6000610d6e82846139e6565b600282015460009060ff83166101009091046001600160e81b031611611e4257506000610bd0565b600160ff831610611e5257600080fd5b6002830154600090600190611e6b90859060ff16613b50565b611e759190613b50565b905060008160000b1215611e9157611e8e60018261397b565b90505b836001018160ff1660018110611eb757634e487b7160e01b600052603260045260246000fd5b0154949350505050565b6001600160a01b038316611f255760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610c17565b6001600160a01b038216611f875760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c17565b6001600160a01b03831660009081526033602052604090205481811015611fff5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c17565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906120369084906139e6565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161208291815260200190565b60405180910390a35b50505050565b6120be60405180608001604052806000815260200160008152602001600015158152602001600081525090565b6040805160808082018352600080835260208301819052928201839052845160608301528401519091906120f9906127109061ffff16611e0e565b604080860151871190840181905290915080156121855760975460a086015161217b9161212b9160ff909116906139fe565b61213690600a613a86565b60975461153b9061271090829061215690610100900460ff16600a613a86565b612175886121758d604001518e60200151612a0e90919063ffffffff16565b90612a0e565b60208401526121a5565b6121a261271061153b848860200151612a0e90919063ffffffff16565b83525b609f5460005b818110156122f0576000609f82815481106121d657634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260a0909152604082209092509061221261220b600180613ba8565b8390611e1a565b9050806122455750506001600160a01b0316600090815260a66020908152604080832083905560a79091528120556122de565b851561229957600061226c8b6020015161153b848c60200151612a0e90919063ffffffff16565b6001600160a01b038516600090815260a7602090815260408083209390935560a6905290812055506122da565b60208a015188516000916122b19161153b9085612a0e565b6001600160a01b038516600090815260a6602090815260408083209390935560a7905290812055505b5050505b806122e881613c32565b9150506121ab565b50929695505050505050565b609b546000908152609e60205260409020609954600182015461231f9084611e0e565b11156123605760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682071756f746160801b6044820152606401610c17565b6001600160a01b038316600090815260a0602052604090206002810154600160f01b900460ff166123ee5760028101805460ff60f01b1916600160f01b179055609f80546001810182556000919091527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de280180546001600160a01b0386166001600160a01b03199091161790555b80546123fa9084611e0e565b8155600182015461240b9084611e0e565b6001830155609b546040518481526001600160a01b038616907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590602001612082565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610d6e8284613b91565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261208b908590612d1d565b609f548161263f5760005b818110156110c4576000609f828154811061253c57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260a08252604080842060a6909352909220549192509080612580575060006003909101555061262d565b60006125a482846003015461259f600087611e1a90919063ffffffff16565b612def565b905080156125e9576001600160a01b038416600090815260a460205260409020546125cf9082611e0e565b6001600160a01b038516600090815260a460205260409020555b60006125f583836124a0565b905080156126075761260785846122fc565b5050506001600160a01b03909116600090815260a6602052604081208190556003909101555b8061263781613c32565b915050612511565b60005b818110156127da576000609f828154811061266d57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260a08252604080842060a79093529092205491925090806126b157506000600390910155506127c8565b60006126d082846003015461259f600087611e1a90919063ffffffff16565b90508015612715576001600160a01b038416600090815260a560205260409020546126fb9082611e0e565b6001600160a01b038516600090815260a560205260409020555b600061272183836124a0565b905080156127a25760a9805460018082019092557fdc471888e6136f84c49e531e9c9240dc4e3fba66da9d3a49e2af6202133683e00182905560a8805491820181556000527fbee89403b5bf0e626c2f71adb366311c697013df53107181a963adc459ef4d990180546001600160a01b0319166001600160a01b0387161790555b5050506001600160a01b03909116600090815260a7602052604081208190556003909101555b806127d281613c32565b915050612642565b5060a954806127e857505050565b60008167ffffffffffffffff81111561281157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561283a578160200160208202803683370190505b50905060008267ffffffffffffffff81111561286657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561288f578160200160208202803683370190505b50905060005b838110156129855760a881815481106128be57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b03168382815181106128fc57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505060a9818154811061293d57634e487b7160e01b600052603260045260246000fd5b906000526020600020015482828151811061296857634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061297d81613c32565b915050612895565b5061299260a860006131ec565b61299e60a960006131ec565b60a154604051632cb9ff9d60e11b8152620100009091046001600160a01b031690635973ff3a906129d590859085906004016136df565b600060405180830381600087803b1580156129ef57600080fd5b505af1158015612a03573d6000803e3d6000fd5b505050505050505050565b6000610d6e8284613b31565b6000610d6e8284613a23565b6001600160a01b038216612a7c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610c17565b8060356000828254612a8e91906139e6565b90915550506001600160a01b03821660009081526033602052604081208054839290612abb9084906139e6565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600282015460ff168160018085019083908110612b3257634e487b7160e01b600052603260045260246000fd5b01556000612b41600180613ba8565b60ff168214612b5a57612b558260016139e6565b612b5d565b60005b60028501805460ff191660ff83161790819055909150612b8c9061010090046001600160e81b031660016139bb565b8460020160016101000a8154816001600160e81b0302191690836001600160e81b0316021790555050505050565b600054610100900460ff1680612bd3575060005460ff16155b612bef5760405162461bcd60e51b8152600401610c17906137af565b600054610100900460ff16158015612c11576000805461ffff19166101011790555b6001600160a01b038316612c5d5760405162461bcd60e51b8152602060048201526013602482015272456d707479207661756c74206164647265737360681b6044820152606401610c17565b612c678989612e23565b612c6f612ea2565b60978054609880546001600160a01b038a81166001600160a81b0319909216919091178b82168015600160a01b029190911790925560ff8981166001600160b01b03199094166201000090930261ffff1916929092179290921761010091881682021790925560a380546001600160a01b03191691861691909117905560a1805461ff0019168415159092029190911790558015612a03576000805461ff0019169055505050505050505050565b6000612d72826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f1d9092919063ffffffff16565b8051909150156110c45780806020019051810190612d909190613531565b6110c45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c17565b600082612dfe57506000610d6e565b81831015612e1957612e148261153b8686612a0e565b612e1b565b835b949350505050565b600054610100900460ff1680612e3c575060005460ff16155b612e585760405162461bcd60e51b8152600401610c17906137af565b600054610100900460ff16158015612e7a576000805461ffff19166101011790555b612e82612f2c565b612e8c8383612f96565b80156110c4576000805461ff0019169055505050565b600054610100900460ff1680612ebb575060005460ff16155b612ed75760405162461bcd60e51b8152600401610c17906137af565b600054610100900460ff16158015612ef9576000805461ffff19166101011790555b612f01612f2c565b612f0961302b565b801561104d576000805461ff001916905550565b6060612e1b848460008561308b565b600054610100900460ff1680612f45575060005460ff16155b612f615760405162461bcd60e51b8152600401610c17906137af565b600054610100900460ff16158015612f09576000805461ffff1916610101179055801561104d576000805461ff001916905550565b600054610100900460ff1680612faf575060005460ff16155b612fcb5760405162461bcd60e51b8152600401610c17906137af565b600054610100900460ff16158015612fed576000805461ffff19166101011790555b825161300090603690602086019061320a565b50815161301490603790602085019061320a565b5080156110c4576000805461ff0019169055505050565b600054610100900460ff1680613044575060005460ff16155b6130605760405162461bcd60e51b8152600401610c17906137af565b600054610100900460ff16158015613082576000805461ffff19166101011790555b612f093361244e565b6060824710156130ec5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c17565b843b61313a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c17565b600080866001600160a01b0316858760405161315691906136c3565b60006040518083038185875af1925050503d8060008114613193576040519150601f19603f3d011682016040523d82523d6000602084013e613198565b606091505b50915091506131a88282866131b3565b979650505050505050565b606083156131c2575081610d6e565b8251156131d25782518084602001fd5b8160405162461bcd60e51b8152600401610c179190613755565b508054600082559060005260206000209081019061104d919061328e565b82805461321690613bf7565b90600052602060002090601f016020900481019282613238576000855561327e565b82601f1061325157805160ff191683800117855561327e565b8280016001018555821561327e579182015b8281111561327e578251825591602001919060010190613263565b5061328a92915061328e565b5090565b5b8082111561328a576000815560010161328f565b600082601f8301126132b3578081fd5b813560206132c86132c383613916565b6138e5565b80838252828201915082860187848660051b89010111156132e7578586fd5b855b85811015613305578135845292840192908401906001016132e9565b5090979650505050505050565b600082601f830112613322578081fd5b813567ffffffffffffffff81111561333c5761333c613c63565b61334f601f8201601f19166020016138e5565b818152846020838601011115613363578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461338e57600080fd5b919050565b6000602082840312156133a4578081fd5b8135610d6e81613c79565b6000602082840312156133c0578081fd5b8151610d6e81613c79565b600080604083850312156133dd578081fd5b82356133e881613c79565b915060208301356133f881613c79565b809150509250929050565b600080600060608486031215613417578081fd5b833561342281613c79565b9250602084013561343281613c79565b929592945050506040919091013590565b60008060408385031215613455578182fd5b823561346081613c79565b946020939093013593505050565b60008060408385031215613480578182fd5b823567ffffffffffffffff80821115613497578384fd5b818501915085601f8301126134aa578384fd5b813560206134ba6132c383613916565b8083825282820191508286018a848660051b89010111156134d9578889fd5b8896505b848710156135045780356134f081613c79565b8352600196909601959183019183016134dd565b509650508601359250508082111561351a578283fd5b50613527858286016132a3565b9150509250929050565b600060208284031215613542578081fd5b81518015158114610d6e578182fd5b600080600080600080600060e0888a03121561356b578283fd5b873567ffffffffffffffff80821115613582578485fd5b61358e8b838c01613312565b985060208a01359150808211156135a3578485fd5b506135b08a828b01613312565b96505060408801356135c181613c79565b945060608801356135d181613c79565b93506135df6080890161337d565b92506135ed60a0890161337d565b915060c08801356135fd81613c79565b8091505092959891949750929550565b60006080828403121561361e578081fd5b6040516080810181811067ffffffffffffffff8211171561364157613641613c63565b604052823581526136546020840161337d565b602082015260408301358060010b811461366c578283fd5b6040820152606083013561ffff81168114613685578283fd5b60608201529392505050565b6000602082840312156136a2578081fd5b5035919050565b6000602082840312156136ba578081fd5b610d6e8261337d565b600082516136d5818460208701613bcb565b9190910192915050565b604080825283519082018190526000906020906060840190828701845b828110156137215781516001600160a01b0316845292840192908401906001016136fc565b50505083810382850152845180825285830191830190845b8181101561330557835183529284019291840191600101613739565b6020815260008251806020840152613774816040850160208701613bcb565b601f01601f19169190910160400192915050565b6020808252600d908201526c10995a5b99c81cd95d1d1b1959609a1b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526007908201526608585b5bdd5b9d60ca1b604082015260600190565b83548152600184015460208201526002840154604082015260038401546060820152600484015461ffff81166080830152610140820190601081901c60ff1660a08401526138ab60c0840160ff8360181c1615159052565b6138bf60e0840160ff8360201c1615159052565b506001600160a01b0384166101008301526001600160a01b038316610120830152612e1b565b604051601f8201601f1916810167ffffffffffffffff8111828210171561390e5761390e613c63565b604052919050565b600067ffffffffffffffff82111561393057613930613c63565b5060051b60200190565b600080821280156001600160ff1b038490038513161561395c5761395c613c4d565b600160ff1b839003841281161561397557613975613c4d565b50500190565b600081810b83820b82821282607f0382138115161561399c5761399c613c4d565b82607f190382128116156139b2576139b2613c4d565b50019392505050565b60006001600160e81b038281168482168083038211156139dd576139dd613c4d565b01949350505050565b600082198211156139f9576139f9613c4d565b500190565b600060ff821660ff84168060ff03821115613a1b57613a1b613c4d565b019392505050565b600082613a3e57634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115613a7e578160001904821115613a6457613a64613c4d565b80851615613a7157918102915b93841c9390800290613a48565b509250929050565b6000610d6e60ff841683600082613a9f57506001610bd0565b81613aac57506000610bd0565b8160018114613ac25760028114613acc57613ae8565b6001915050610bd0565b60ff841115613add57613add613c4d565b50506001821b610bd0565b5060208310610133831016604e8410600b8410161715613b0b575081810a610bd0565b613b158383613a43565b8060001904821115613b2957613b29613c4d565b029392505050565b6000816000190483118215151615613b4b57613b4b613c4d565b500290565b600081810b83820b8281128015607f19830184121615613b7257613b72613c4d565b81607f018313811615613b8757613b87613c4d565b5090039392505050565b600082821015613ba357613ba3613c4d565b500390565b600060ff821660ff841680821015613bc257613bc2613c4d565b90039392505050565b60005b83811015613be6578181015183820152602001613bce565b8381111561208b5750506000910152565b600181811c90821680613c0b57607f821691505b60208210811415613c2c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613c4657613c46613c4d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461104d57600080fdfea2646970667358221220df1b8175cf5c2eadca605b1681cf513bd5f22f988bab041c93d14570cca5cd3e64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102885760003560e01c806376e7a4781161015a578063c02337df116100c1578063ded39ec91161007a578063ded39ec914610a72578063e5d455ce14610a92578063eef9f5a514610ab2578063efdd6cf814610ad8578063f2fde38b14610b05578063f6326fb314610b2557600080fd5b8063c02337df14610984578063c515d7e714610999578063ccc41f24146109b9578063daafe774146109df578063db006a7514610a0c578063dd62ed3e14610a2c57600080fd5b8063a457c2d711610113578063a457c2d714610873578063a49b41d414610893578063a5d3e5b1146108f7578063a9059cbb14610924578063b6b55f2514610944578063bb9662c81461096457600080fd5b806376e7a478146107d55780638a19c8bc146107eb5780638da5cb5b14610801578063902025391461081f57806395d89b411461083e578063a2589ef91461085357600080fd5b80632c453bdf116101fe578063511db114116101b7578063511db1141461067e5780635973ff3a1461069f5780635ce0d5a5146106bf57806365235474146106d557806370a082311461078a578063715018a6146107c057600080fd5b80632c453bdf146105c7578063313ce567146105e75780633950935114610609578063430bf08a146106295780634601c2a61461063e5780634d94f56d1461065e57600080fd5b80630ecc535f116102505780630ecc535f1461047b57806311c8556d1461050e578063140e56091461054657806318160ddd146105725780631de245af1461058757806323b872dd146105a757600080fd5b806306fdde031461028d5780630720da52146102b85780630748248f1461040f578063095ea7b3146104395780630e777b4b14610459575b600080fd5b34801561029957600080fd5b506102a2610b2d565b6040516102af9190613755565b60405180910390f35b3480156102c457600080fd5b506103a36102d3366004613691565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152506000908152609d60209081526040808320548352609e825291829020825161010081018452815481526001820154928101929092526002810154928201929092526003820154606082015260049091015461ffff8116608083015260ff620100008204811660a0840152630100000082048116151560c084015264010000000090910416151560e082015290565b6040516102af91906000610100820190508251825260208301516020830152604083015160408301526060830151606083015261ffff608084015116608083015260ff60a08401511660a083015260c0830151151560c083015260e0830151151560e083015292915050565b34801561041b57600080fd5b5060a1546104299060ff1681565b60405190151581526020016102af565b34801561044557600080fd5b50610429610454366004613443565b610bbf565b34801561046557600080fd5b50610479610474366004613691565b610bd6565b005b34801561048757600080fd5b506104d6610496366004613393565b60a060205260009081526040902080546002820154600390920154909160ff808216926001600160e81b0361010084041692600160f01b90049091169085565b6040805195865260ff90941660208601526001600160e81b03909216928401929092529015156060830152608082015260a0016102af565b34801561051a57600080fd5b5060a35461052e906001600160a01b031681565b6040516001600160a01b0390911681526020016102af565b34801561055257600080fd5b5033600090815260a060205260409020545b6040519081526020016102af565b34801561057e57600080fd5b50603554610564565b34801561059357600080fd5b5061052e6105a2366004613691565b610c9f565b3480156105b357600080fd5b506104296105c2366004613403565b610cc9565b3480156105d357600080fd5b5060a25461052e906001600160a01b031681565b3480156105f357600080fd5b5060975460405160ff90911681526020016102af565b34801561061557600080fd5b50610429610624366004613443565b610d75565b34801561063557600080fd5b5061052e610db1565b34801561064a57600080fd5b506105646106593660046136a9565b610e33565b34801561066a57600080fd5b50610479610679366004613691565b610e4c565b34801561068a57600080fd5b5060985461042990600160a01b900460ff1681565b3480156106ab57600080fd5b506104796106ba36600461346e565b611050565b3480156106cb57600080fd5b50610564609c5481565b3480156106e157600080fd5b506107446106f0366004613691565b609e60205260009081526040902080546001820154600283015460038401546004909401549293919290919061ffff81169060ff620100008204811691630100000081048216916401000000009091041688565b60408051988952602089019790975295870194909452606086019290925261ffff16608085015260ff1660a0840152151560c0830152151560e0820152610100016102af565b34801561079657600080fd5b506105646107a5366004613393565b6001600160a01b031660009081526033602052604090205490565b3480156107cc57600080fd5b506104796110c9565b3480156107e157600080fd5b5061056461271081565b3480156107f757600080fd5b50610564609b5481565b34801561080d57600080fd5b506065546001600160a01b031661052e565b34801561082b57600080fd5b5060a15461042990610100900460ff1681565b34801561084a57600080fd5b506102a26110ff565b34801561085f57600080fd5b5061047961086e366004613691565b61110e565b34801561087f57600080fd5b5061042961088e366004613443565b61120b565b34801561089f57600080fd5b50609954609a546108c7919060ff811690610100810460010b906301000000900461ffff1684565b6040516102af949392919093845260ff92909216602084015260010b604083015261ffff16606082015260800190565b34801561090357600080fd5b50610564610912366004613691565b609d6020526000908152604090205481565b34801561093057600080fd5b5061042961093f366004613443565b6112a4565b34801561095057600080fd5b5061047961095f366004613691565b6112b1565b34801561097057600080fd5b5060985461052e906001600160a01b031681565b34801561099057600080fd5b506104796113a4565b3480156109a557600080fd5b506104796109b4366004613393565b611663565b3480156109c557600080fd5b5060975461052e906201000090046001600160a01b031681565b3480156109eb57600080fd5b506105646109fa366004613393565b60a56020526000908152604090205481565b348015610a1857600080fd5b50610479610a27366004613691565b6116f7565b348015610a3857600080fd5b50610564610a473660046133cb565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b348015610a7e57600080fd5b50610479610a8d36600461360d565b611880565b348015610a9e57600080fd5b50610479610aad366004613551565b611ab1565b348015610abe57600080fd5b5060a15461052e906201000090046001600160a01b031681565b348015610ae457600080fd5b50610564610af3366004613393565b60a46020526000908152604090205481565b348015610b1157600080fd5b50610479610b20366004613393565b611b35565b610479611bcd565b606060368054610b3c90613bf7565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6890613bf7565b8015610bb55780601f10610b8a57610100808354040283529160200191610bb5565b820191906000526020600020905b815481529060010190602001808311610b9857829003601f168201915b5050505050905090565b6000610bcc338484611cf2565b5060015b92915050565b60008111610c205760405162461bcd60e51b8152602060048201526012602482015271215f6173736574546f5465726d696e61746560701b60448201526064015b60405180910390fd5b33600090815260a0602052604081206003810154909190610c419084611e0e565b90506000610c4f8382611e1a565b905080821115610c955760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b6044820152606401610c17565b5060039091015550565b609f8181548110610caf57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610cd6848484611ec1565b6001600160a01b038416600090815260346020908152604080832033845290915290205482811015610d5b5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610c17565b610d688533858403611cf2565b60019150505b9392505050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091610bcc918590610dac9086906139e6565b611cf2565b60a354604080516338cc483160e01b815290516000926001600160a01b0316916338cc4831916004808301926020929190829003018186803b158015610df657600080fd5b505afa158015610e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2e91906133af565b905090565b33600090815260a060205260408120610d6e8184611e1a565b6065546001600160a01b03163314610e765760405162461bcd60e51b8152600401610c17906137fd565b60a15460ff1615610e995760405162461bcd60e51b8152600401610c1790613788565b60a1805460ff19166001179055609c819055609b54610eb55750565b609b54600110610ec25750565b609b54600090610ed490600190613b91565b6000818152609e602090815260408083208151610100810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015461ffff8116608084015260ff620100008204811660a0850152630100000082048116151560c085015264010000000090910416151560e0830152929350610f61908590612091565b60a3546097546098546040805163193ef4d360e01b815285516004820152602086015160248201529085015115156044820152606085015160648201526001600160a01b03620100009093048316608482015290821660a4820152929350169063193ef4d39060c401600060405180830381600087803b158015610fe457600080fd5b505af1158015610ff8573d6000803e3d6000fd5b50505060408083015160048501805491151563010000000263ff00000019909216919091179055518491507f5fd55b58a9ef8c29a9db39dd9a05dec64993eb227ad0177941238778e9ea896290600090a25050505b50565b60a2546001600160a01b031633146110c05760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c7920636f756e7465727061727479206f7074696f6e2063616e2063616c60448201526c1b081d1a1a5cc81b595d1a1bd9609a1b6064820152608401610c17565b5050565b505050565b6065546001600160a01b031633146110f35760405162461bcd60e51b8152600401610c17906137fd565b6110fd600061244e565b565b606060378054610b3c90613bf7565b60a15460ff16156111315760405162461bcd60e51b8152600401610c1790613788565b6001609b54116111715760405162461bcd60e51b815260206004820152600b60248201526a08539bc813585d1d5c995960aa1b6044820152606401610c17565b600081116111915760405162461bcd60e51b8152600401610c1790613832565b33600090815260a46020526040902054818110156111e45760405162461bcd60e51b815260206004820152601060248201526f45786365656420617661696c61626c6560801b6044820152606401610c17565b6111ee81836124a0565b33600081815260a460205260409020919091556110c090836122fc565b3360009081526034602090815260408083206001600160a01b03861684529091528120548281101561128d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c17565b61129a3385858403611cf2565b5060019392505050565b6000610bcc338484611ec1565b60a15460ff16156112d45760405162461bcd60e51b8152600401610c1790613788565b6000609b54116113115760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610c17565b609854600160a01b900460ff16156113545760405162461bcd60e51b815260206004820152600660248201526502145524332360d41b6044820152606401610c17565b600081116113745760405162461bcd60e51b8152600401610c1790613832565b61137e33826122fc565b61104d3361138a610db1565b6097546201000090046001600160a01b03169190846124ac565b6065546001600160a01b031633146113ce5760405162461bcd60e51b8152600401610c17906137fd565b60a15460ff166114145760405162461bcd60e51b8152602060048201526011602482015270139bdd0818995a5b99c81cd95d1d1b1959607a1b6044820152606401610c17565b6000609b541161142057565b609b546001101561147a576000609e6000600160ff16609b546114439190613b91565b81526020019081526020016000209050600081600101541115611478576004810154611478906301000000900460ff16612506565b505b609b546000908152609e60205260409081902060a354609754609854935163042abd7d60e51b815292936001600160a01b0392831693638557afa0936114d193879362010000909104821692911690600401613853565b600060405180830381600087803b1580156114eb57600080fd5b505af11580156114ff573d6000803e3d6000fd5b5050609c5460038401555050609a54611541906127109061153b90611530906101009004600190810b900b8361393a565b600385015490612a0e565b90612a1a565b6002820155609a8054600483018054630100000090920461ffff1661ffff19831681178255925462ffffff1990921690921760ff90911662010000021790556001810154611590903090612a26565b609f5460005b81811015611623576000609f82815481106115c157634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260a09091526040909120805491925090156115ff576115ff30838360000154611ec1565b805461160c908290612b05565b60009055508061161b81613c32565b915050611596565b50609b54436000908152609d6020526040808220839055517ffa513f17b83baf0c2da337ab931a96429f75c55f0ee2115b7acd007a1a35dd519190a25050565b6001600160a01b0381163014156116bc5760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f74207365742073656c6620617320636f756e7465722070617274796044820152606401610c17565b60a1805462010000600160b01b031916620100006001600160a01b039390931692830217905560a280546001600160a01b0319169091179055565b60a15460ff161561171a5760405162461bcd60e51b8152600401610c1790613788565b6000811161173a5760405162461bcd60e51b8152600401610c1790613832565b33600090815260a060205260409020805482111561178e5760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b6044820152606401610c17565b805461179a90836124a0565b8155609b546000908152609e6020526040902060018101546117bc90846124a0565b600182015560a354609754604051631a4ca37b60e21b8152336004820152602481018690526001600160a01b0362010000909204821660448201529116906369328dec90606401600060405180830381600087803b15801561181d57600080fd5b505af1158015611831573d6000803e3d6000fd5b50505050609b54336001600160a01b03167fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a9298560405161187391815260200190565b60405180910390a3505050565b6065546001600160a01b031633146118aa5760405162461bcd60e51b8152600401610c17906137fd565b609b546118b89060016139e6565b609b819055508060996000820151816000015560208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548161ffff021916908360010b61ffff16021790555060608201518160010160036101000a81548161ffff021916908361ffff1602179055509050506000604051806101000160405280609b548152602001600081526020016000815260200160008152602001836060015161ffff168152602001836020015160ff16815260200160001515815260200160a160019054906101000a900460ff161515815250905080609e6000609b5481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548161ffff021916908361ffff16021790555060a08201518160040160026101000a81548160ff021916908360ff16021790555060c08201518160040160036101000a81548160ff02191690831515021790555060e08201518160040160046101000a81548160ff021916908315150217905550905050600060a160006101000a81548160ff021916908315150217905550609b547f10f419fb017d3101d854d4433e414ff27f232bb2f4aae83d987ad0219efa6c9b60405160405180910390a25050565b600054610100900460ff1680611aca575060005460ff16155b611ae65760405162461bcd60e51b8152600401610c17906137af565b600054610100900460ff16158015611b08576000805461ffff19166101011790555b611b19888888888888886001612bba565b8015611b2b576000805461ff00191690555b5050505050505050565b6065546001600160a01b03163314611b5f5760405162461bcd60e51b8152600401610c17906137fd565b6001600160a01b038116611bc45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c17565b61104d8161244e565b60a15460ff1615611bf05760405162461bcd60e51b8152600401610c1790613788565b6000609b5411611c2d5760405162461bcd60e51b81526020600482015260086024820152670854dd185c9d195960c21b6044820152606401610c17565b609854600160a01b900460ff16611c6f5760405162461bcd60e51b8152600401610c17906020808252600490820152630428aa8960e31b604082015260600190565b60003411611ca85760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b6044820152606401610c17565b611cb233346122fc565b611cba610db1565b6001600160a01b03166108fc349081150290604051600060405180830381858888f1935050505015801561104d573d6000803e3d6000fd5b6001600160a01b038316611d545760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c17565b6001600160a01b038216611db55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c17565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101611873565b6000610d6e82846139e6565b600282015460009060ff83166101009091046001600160e81b031611611e4257506000610bd0565b600160ff831610611e5257600080fd5b6002830154600090600190611e6b90859060ff16613b50565b611e759190613b50565b905060008160000b1215611e9157611e8e60018261397b565b90505b836001018160ff1660018110611eb757634e487b7160e01b600052603260045260246000fd5b0154949350505050565b6001600160a01b038316611f255760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610c17565b6001600160a01b038216611f875760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c17565b6001600160a01b03831660009081526033602052604090205481811015611fff5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c17565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906120369084906139e6565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161208291815260200190565b60405180910390a35b50505050565b6120be60405180608001604052806000815260200160008152602001600015158152602001600081525090565b6040805160808082018352600080835260208301819052928201839052845160608301528401519091906120f9906127109061ffff16611e0e565b604080860151871190840181905290915080156121855760975460a086015161217b9161212b9160ff909116906139fe565b61213690600a613a86565b60975461153b9061271090829061215690610100900460ff16600a613a86565b612175886121758d604001518e60200151612a0e90919063ffffffff16565b90612a0e565b60208401526121a5565b6121a261271061153b848860200151612a0e90919063ffffffff16565b83525b609f5460005b818110156122f0576000609f82815481106121d657634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260a0909152604082209092509061221261220b600180613ba8565b8390611e1a565b9050806122455750506001600160a01b0316600090815260a66020908152604080832083905560a79091528120556122de565b851561229957600061226c8b6020015161153b848c60200151612a0e90919063ffffffff16565b6001600160a01b038516600090815260a7602090815260408083209390935560a6905290812055506122da565b60208a015188516000916122b19161153b9085612a0e565b6001600160a01b038516600090815260a6602090815260408083209390935560a7905290812055505b5050505b806122e881613c32565b9150506121ab565b50929695505050505050565b609b546000908152609e60205260409020609954600182015461231f9084611e0e565b11156123605760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682071756f746160801b6044820152606401610c17565b6001600160a01b038316600090815260a0602052604090206002810154600160f01b900460ff166123ee5760028101805460ff60f01b1916600160f01b179055609f80546001810182556000919091527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de280180546001600160a01b0386166001600160a01b03199091161790555b80546123fa9084611e0e565b8155600182015461240b9084611e0e565b6001830155609b546040518481526001600160a01b038616907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590602001612082565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610d6e8284613b91565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261208b908590612d1d565b609f548161263f5760005b818110156110c4576000609f828154811061253c57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260a08252604080842060a6909352909220549192509080612580575060006003909101555061262d565b60006125a482846003015461259f600087611e1a90919063ffffffff16565b612def565b905080156125e9576001600160a01b038416600090815260a460205260409020546125cf9082611e0e565b6001600160a01b038516600090815260a460205260409020555b60006125f583836124a0565b905080156126075761260785846122fc565b5050506001600160a01b03909116600090815260a6602052604081208190556003909101555b8061263781613c32565b915050612511565b60005b818110156127da576000609f828154811061266d57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835260a08252604080842060a79093529092205491925090806126b157506000600390910155506127c8565b60006126d082846003015461259f600087611e1a90919063ffffffff16565b90508015612715576001600160a01b038416600090815260a560205260409020546126fb9082611e0e565b6001600160a01b038516600090815260a560205260409020555b600061272183836124a0565b905080156127a25760a9805460018082019092557fdc471888e6136f84c49e531e9c9240dc4e3fba66da9d3a49e2af6202133683e00182905560a8805491820181556000527fbee89403b5bf0e626c2f71adb366311c697013df53107181a963adc459ef4d990180546001600160a01b0319166001600160a01b0387161790555b5050506001600160a01b03909116600090815260a7602052604081208190556003909101555b806127d281613c32565b915050612642565b5060a954806127e857505050565b60008167ffffffffffffffff81111561281157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561283a578160200160208202803683370190505b50905060008267ffffffffffffffff81111561286657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561288f578160200160208202803683370190505b50905060005b838110156129855760a881815481106128be57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b03168382815181106128fc57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505060a9818154811061293d57634e487b7160e01b600052603260045260246000fd5b906000526020600020015482828151811061296857634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061297d81613c32565b915050612895565b5061299260a860006131ec565b61299e60a960006131ec565b60a154604051632cb9ff9d60e11b8152620100009091046001600160a01b031690635973ff3a906129d590859085906004016136df565b600060405180830381600087803b1580156129ef57600080fd5b505af1158015612a03573d6000803e3d6000fd5b505050505050505050565b6000610d6e8284613b31565b6000610d6e8284613a23565b6001600160a01b038216612a7c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610c17565b8060356000828254612a8e91906139e6565b90915550506001600160a01b03821660009081526033602052604081208054839290612abb9084906139e6565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600282015460ff168160018085019083908110612b3257634e487b7160e01b600052603260045260246000fd5b01556000612b41600180613ba8565b60ff168214612b5a57612b558260016139e6565b612b5d565b60005b60028501805460ff191660ff83161790819055909150612b8c9061010090046001600160e81b031660016139bb565b8460020160016101000a8154816001600160e81b0302191690836001600160e81b0316021790555050505050565b600054610100900460ff1680612bd3575060005460ff16155b612bef5760405162461bcd60e51b8152600401610c17906137af565b600054610100900460ff16158015612c11576000805461ffff19166101011790555b6001600160a01b038316612c5d5760405162461bcd60e51b8152602060048201526013602482015272456d707479207661756c74206164647265737360681b6044820152606401610c17565b612c678989612e23565b612c6f612ea2565b60978054609880546001600160a01b038a81166001600160a81b0319909216919091178b82168015600160a01b029190911790925560ff8981166001600160b01b03199094166201000090930261ffff1916929092179290921761010091881682021790925560a380546001600160a01b03191691861691909117905560a1805461ff0019168415159092029190911790558015612a03576000805461ff0019169055505050505050505050565b6000612d72826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f1d9092919063ffffffff16565b8051909150156110c45780806020019051810190612d909190613531565b6110c45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c17565b600082612dfe57506000610d6e565b81831015612e1957612e148261153b8686612a0e565b612e1b565b835b949350505050565b600054610100900460ff1680612e3c575060005460ff16155b612e585760405162461bcd60e51b8152600401610c17906137af565b600054610100900460ff16158015612e7a576000805461ffff19166101011790555b612e82612f2c565b612e8c8383612f96565b80156110c4576000805461ff0019169055505050565b600054610100900460ff1680612ebb575060005460ff16155b612ed75760405162461bcd60e51b8152600401610c17906137af565b600054610100900460ff16158015612ef9576000805461ffff19166101011790555b612f01612f2c565b612f0961302b565b801561104d576000805461ff001916905550565b6060612e1b848460008561308b565b600054610100900460ff1680612f45575060005460ff16155b612f615760405162461bcd60e51b8152600401610c17906137af565b600054610100900460ff16158015612f09576000805461ffff1916610101179055801561104d576000805461ff001916905550565b600054610100900460ff1680612faf575060005460ff16155b612fcb5760405162461bcd60e51b8152600401610c17906137af565b600054610100900460ff16158015612fed576000805461ffff19166101011790555b825161300090603690602086019061320a565b50815161301490603790602085019061320a565b5080156110c4576000805461ff0019169055505050565b600054610100900460ff1680613044575060005460ff16155b6130605760405162461bcd60e51b8152600401610c17906137af565b600054610100900460ff16158015613082576000805461ffff19166101011790555b612f093361244e565b6060824710156130ec5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c17565b843b61313a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c17565b600080866001600160a01b0316858760405161315691906136c3565b60006040518083038185875af1925050503d8060008114613193576040519150601f19603f3d011682016040523d82523d6000602084013e613198565b606091505b50915091506131a88282866131b3565b979650505050505050565b606083156131c2575081610d6e565b8251156131d25782518084602001fd5b8160405162461bcd60e51b8152600401610c179190613755565b508054600082559060005260206000209081019061104d919061328e565b82805461321690613bf7565b90600052602060002090601f016020900481019282613238576000855561327e565b82601f1061325157805160ff191683800117855561327e565b8280016001018555821561327e579182015b8281111561327e578251825591602001919060010190613263565b5061328a92915061328e565b5090565b5b8082111561328a576000815560010161328f565b600082601f8301126132b3578081fd5b813560206132c86132c383613916565b6138e5565b80838252828201915082860187848660051b89010111156132e7578586fd5b855b85811015613305578135845292840192908401906001016132e9565b5090979650505050505050565b600082601f830112613322578081fd5b813567ffffffffffffffff81111561333c5761333c613c63565b61334f601f8201601f19166020016138e5565b818152846020838601011115613363578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461338e57600080fd5b919050565b6000602082840312156133a4578081fd5b8135610d6e81613c79565b6000602082840312156133c0578081fd5b8151610d6e81613c79565b600080604083850312156133dd578081fd5b82356133e881613c79565b915060208301356133f881613c79565b809150509250929050565b600080600060608486031215613417578081fd5b833561342281613c79565b9250602084013561343281613c79565b929592945050506040919091013590565b60008060408385031215613455578182fd5b823561346081613c79565b946020939093013593505050565b60008060408385031215613480578182fd5b823567ffffffffffffffff80821115613497578384fd5b818501915085601f8301126134aa578384fd5b813560206134ba6132c383613916565b8083825282820191508286018a848660051b89010111156134d9578889fd5b8896505b848710156135045780356134f081613c79565b8352600196909601959183019183016134dd565b509650508601359250508082111561351a578283fd5b50613527858286016132a3565b9150509250929050565b600060208284031215613542578081fd5b81518015158114610d6e578182fd5b600080600080600080600060e0888a03121561356b578283fd5b873567ffffffffffffffff80821115613582578485fd5b61358e8b838c01613312565b985060208a01359150808211156135a3578485fd5b506135b08a828b01613312565b96505060408801356135c181613c79565b945060608801356135d181613c79565b93506135df6080890161337d565b92506135ed60a0890161337d565b915060c08801356135fd81613c79565b8091505092959891949750929550565b60006080828403121561361e578081fd5b6040516080810181811067ffffffffffffffff8211171561364157613641613c63565b604052823581526136546020840161337d565b602082015260408301358060010b811461366c578283fd5b6040820152606083013561ffff81168114613685578283fd5b60608201529392505050565b6000602082840312156136a2578081fd5b5035919050565b6000602082840312156136ba578081fd5b610d6e8261337d565b600082516136d5818460208701613bcb565b9190910192915050565b604080825283519082018190526000906020906060840190828701845b828110156137215781516001600160a01b0316845292840192908401906001016136fc565b50505083810382850152845180825285830191830190845b8181101561330557835183529284019291840191600101613739565b6020815260008251806020840152613774816040850160208701613bcb565b601f01601f19169190910160400192915050565b6020808252600d908201526c10995a5b99c81cd95d1d1b1959609a1b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526007908201526608585b5bdd5b9d60ca1b604082015260600190565b83548152600184015460208201526002840154604082015260038401546060820152600484015461ffff81166080830152610140820190601081901c60ff1660a08401526138ab60c0840160ff8360181c1615159052565b6138bf60e0840160ff8360201c1615159052565b506001600160a01b0384166101008301526001600160a01b038316610120830152612e1b565b604051601f8201601f1916810167ffffffffffffffff8111828210171561390e5761390e613c63565b604052919050565b600067ffffffffffffffff82111561393057613930613c63565b5060051b60200190565b600080821280156001600160ff1b038490038513161561395c5761395c613c4d565b600160ff1b839003841281161561397557613975613c4d565b50500190565b600081810b83820b82821282607f0382138115161561399c5761399c613c4d565b82607f190382128116156139b2576139b2613c4d565b50019392505050565b60006001600160e81b038281168482168083038211156139dd576139dd613c4d565b01949350505050565b600082198211156139f9576139f9613c4d565b500190565b600060ff821660ff84168060ff03821115613a1b57613a1b613c4d565b019392505050565b600082613a3e57634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115613a7e578160001904821115613a6457613a64613c4d565b80851615613a7157918102915b93841c9390800290613a48565b509250929050565b6000610d6e60ff841683600082613a9f57506001610bd0565b81613aac57506000610bd0565b8160018114613ac25760028114613acc57613ae8565b6001915050610bd0565b60ff841115613add57613add613c4d565b50506001821b610bd0565b5060208310610133831016604e8410600b8410161715613b0b575081810a610bd0565b613b158383613a43565b8060001904821115613b2957613b29613c4d565b029392505050565b6000816000190483118215151615613b4b57613b4b613c4d565b500290565b600081810b83820b8281128015607f19830184121615613b7257613b72613c4d565b81607f018313811615613b8757613b87613c4d565b5090039392505050565b600082821015613ba357613ba3613c4d565b500390565b600060ff821660ff841680821015613bc257613bc2613c4d565b90039392505050565b60005b83811015613be6578181015183820152602001613bce565b8381111561208b5750506000910152565b600181811c90821680613c0b57607f821691505b60208210811415613c2c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613c4657613c46613c4d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461104d57600080fdfea2646970667358221220df1b8175cf5c2eadca605b1681cf513bd5f22f988bab041c93d14570cca5cd3e64736f6c63430008040033",
  "libraries": {
    "StructureData": "0x2B0d36FACD61B71CC05ab8F3D2355ec3631C0dd5"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 538,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 541,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1297,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 597,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 603,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 605,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 607,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 609,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1150,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 418,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 531,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4880,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "depositAssetAmountDecimals",
        "offset": 0,
        "slot": "151",
        "type": "t_uint8"
      },
      {
        "astId": 4882,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "counterPartyAssetAmountDecimals",
        "offset": 1,
        "slot": "151",
        "type": "t_uint8"
      },
      {
        "astId": 4884,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "depositAsset",
        "offset": 2,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 4886,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "counterPartyAsset",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 4888,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "isEth",
        "offset": 20,
        "slot": "152",
        "type": "t_bool"
      },
      {
        "astId": 4891,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "optionParameters",
        "offset": 0,
        "slot": "153",
        "type": "t_struct(OptionParameters)11459_storage"
      },
      {
        "astId": 4893,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "currentRound",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 4895,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "previousUnderlyingPrice",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 4899,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "optionHeights",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4904,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "optionStates",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_uint256,t_struct(OptionState)11476_storage)"
      },
      {
        "astId": 4907,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "usersInvolved",
        "offset": 0,
        "slot": "159",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4912,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "userStates",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_address,t_struct(UserState)11503_storage)"
      },
      {
        "astId": 4914,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "underSettlement",
        "offset": 0,
        "slot": "161",
        "type": "t_bool"
      },
      {
        "astId": 4916,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "callOrPut",
        "offset": 1,
        "slot": "161",
        "type": "t_bool"
      },
      {
        "astId": 4919,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "counterPartyOption",
        "offset": 2,
        "slot": "161",
        "type": "t_contract(IPKKTStructureOption)11392"
      },
      {
        "astId": 4921,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "counterParty",
        "offset": 0,
        "slot": "162",
        "type": "t_address"
      },
      {
        "astId": 4924,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "optionVault",
        "offset": 0,
        "slot": "163",
        "type": "t_contract(IOptionVault)11330"
      },
      {
        "astId": 4928,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "maturedDepositAssetAmount",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4932,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "maturedCounterPartyAssetAmount",
        "offset": 0,
        "slot": "165",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4936,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "pendingMaturedDepositAssetAmount",
        "offset": 0,
        "slot": "166",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4940,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "pendingMaturedCounterPartyAssetAmount",
        "offset": 0,
        "slot": "167",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5662,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "autoRolledUsers",
        "offset": 0,
        "slot": "168",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5665,
        "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
        "label": "autoRolledAmounts",
        "offset": 0,
        "slot": "169",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)1_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[1]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOptionVault)11330": {
        "encoding": "inplace",
        "label": "contract IOptionVault",
        "numberOfBytes": "20"
      },
      "t_contract(IPKKTStructureOption)11392": {
        "encoding": "inplace",
        "label": "contract IPKKTStructureOption",
        "numberOfBytes": "20"
      },
      "t_int16": {
        "encoding": "inplace",
        "label": "int16",
        "numberOfBytes": "2"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserState)11503_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StructureData.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)11503_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(OptionState)11476_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StructureData.OptionState)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionState)11476_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(OptionParameters)11459_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionParameters",
        "members": [
          {
            "astId": 11452,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "quota",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11454,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "pricePrecision",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 11456,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "strikePriceRatio",
            "offset": 1,
            "slot": "1",
            "type": "t_int16"
          },
          {
            "astId": 11458,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "premiumRate",
            "offset": 3,
            "slot": "1",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OptionState)11476_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.OptionState",
        "members": [
          {
            "astId": 11461,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11463,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "totalAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11465,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "strikePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11467,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "underlyingPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11469,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "premiumRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 11471,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "pricePrecision",
            "offset": 2,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 11473,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "executed",
            "offset": 3,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 11475,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "callOrPut",
            "offset": 4,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserState)11503_storage": {
        "encoding": "inplace",
        "label": "struct StructureData.UserState",
        "members": [
          {
            "astId": 11490,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "pendingAsset",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11494,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "ongoingAsset",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)1_storage"
          },
          {
            "astId": 11496,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "nextCursor",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 11498,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "totalRound",
            "offset": 1,
            "slot": "2",
            "type": "t_uint232"
          },
          {
            "astId": 11500,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "hasState",
            "offset": 30,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 11502,
            "contract": "contracts/Options/PKKTHodlBoosterCallOption.sol:PKKTHodlBoosterCallOption",
            "label": "assetToTerminate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint232": {
        "encoding": "inplace",
        "label": "uint232",
        "numberOfBytes": "29"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}