{
  "address": "0x2B0d36FACD61B71CC05ab8F3D2355ec3631C0dd5",
  "abi": [
    {
      "inputs": [],
      "name": "MATUREROUND",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x575181fe5ba2712be4c4b561a3fa7814ecb7343825a7ab008d7bf57292857842",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2B0d36FACD61B71CC05ab8F3D2355ec3631C0dd5",
    "transactionIndex": 0,
    "gasUsed": "83654",
    "logsBloom": "0x
    "blockHash": "0x8829e3e82719da6958fda7b6f72916817fcc6e40ede924c87538090dc53f8dd2",
    "transactionHash": "0x575181fe5ba2712be4c4b561a3fa7814ecb7343825a7ab008d7bf57292857842",
    "logs": [],
    "blockNumber": 13600004,
    "cumulativeGasUsed": "83654",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05eb61b57dafebd451a9ce700d94b145",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MATUREROUND\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/StructureData.sol\":\"StructureData\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/StructureData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary StructureData {\\n     \\n     uint8 public constant MATUREROUND= 1; //7 for daily settlement, 1 for daily settlement\\n \\n     struct OptionParameters {\\n         address option;\\n         uint256 strikePrice;  // strike price if executed\\n         uint8 pricePrecision;\\n         uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n     }\\n\\n    struct OptionState {\\n         uint256 round;\\n         uint256 totalAmount; \\n         uint256 totalTerminate;   \\n         uint256 strikePrice; \\n         uint16 premiumRate; //take, 0.01% is represented as 1, precision is 4\\n         uint8 pricePrecision; \\n         bool executed; \\n         bool callOrPut; //call for collateral -> stablecoin; put for stablecoin->collateral;\\n    }\\n \\n   struct MaturedState {\\n       uint256 releasedDepositAssetAmount;\\n       uint256 releasedDepositAssetPremiumAmount;\\n       uint256 releasedCounterPartyAssetAmount; \\n       uint256 releasedCounterPartyAssetPremiumAmount; \\n       uint256 autoRollDepositAssetAmount;\\n       uint256 autoRollDepositAssetPremiumAmount;\\n       uint256 autoRollCounterPartyAssetAmount; \\n       uint256 autoRollCounterPartyAssetPremiumAmount; \\n\\n       uint256 round;\\n       \\n   }\\n\\n    enum OptionType {\\n        HodlBooster,\\n        VolAlpha\\n    }\\n\\n    struct UserState {\\n        uint256 pendingAsset; //for current round\\n        uint256 lockedAsset;//asset undersettlement\\n        uint256[MATUREROUND] ongoingAsset; //for previous 7 rounds\\n        uint8 nextCursor; //nextCursor\\n        uint232 totalRound; \\n        bool hasState;\\n        uint256 assetToTerminate;  \\n        uint256 assetToTerminateForNextRound;  \\n    }\\n\\n    struct OptionSnapshot {\\n        uint256 totalPending;\\n        uint256 totalLocked;\\n        uint256 totalOngoing;\\n        uint256 totalReleasedDeposit;\\n        uint256 totalReleasedCounterParty; \\n    }\\n\\n    struct UserBalance {\\n        uint256 pendingDepositAssetAmount; \\n        uint256 lockedDepositAssetAmount; \\n        uint256 ongoingDepositAssetAmount;\\n        uint256 releasedDepositAssetAmount;\\n        uint256 releasedCounterPartyAssetAmount;\\n    }\\n\\n    function SetOngoingAsset(UserState storage userState, uint256 newValue) internal { \\n        uint cursor = userState.nextCursor;\\n        userState.ongoingAsset[cursor] = newValue;\\n        uint8 nextCursor = cursor == (MATUREROUND - 1) ? uint8(0) : uint8(cursor + 1);\\n        userState.nextCursor = nextCursor;\\n        userState.totalRound = userState.totalRound + 1; //won't overflow\\n    }\\n    \\n    function GetOngoingAsset(UserState storage userState, uint8 backwardRound) internal view returns(uint256) {\\n        if (userState.totalRound <= backwardRound) return 0;\\n        require(backwardRound < MATUREROUND);\\n        int8 previousCursor = int8(userState.nextCursor) - int8(backwardRound) - 1;\\n        if (previousCursor < 0) {\\n            previousCursor = previousCursor + int8(MATUREROUND);\\n        }\\n        return userState.ongoingAsset[uint8(previousCursor)];\\n    }\\n  \\n    struct OptionPairDefinition{\\n        address callOption;\\n        address putOption;\\n        address callOptionDeposit;\\n        address putOptionDeposit;\\n    }\\n    struct SettlementAccountingResult {\\n        //won't change regardless execute or not\\n        address option;\\n        uint256 round;\\n        uint256 depositAmount;  \\n\\n        //following will change if execute or not\\n        bool executed;\\n        uint256 autoRollAmount; //T-1 Carried (filled only when not executed)\\n        uint256 autoRollPremium; //Premium (filled only when not executed)\\n        //maturedAmount+maturedPremium = requested withdrawal for deposit asset(filled only when not executed and with withdraw request)\\n        uint256 releasedAmount;  \\n        uint256 releasedPremium;\\n        //autoRollCounterPartyAmount + autoRollCounterPartyPremium = Execution rolled-out for deposit asset (Execution roll-in for counter party option)\\n        //filled only when executed\\n        uint256 autoRollCounterPartyAmount;\\n        uint256 autoRollCounterPartyPremium;\\n        //maturedCounterPartyAmount+maturedCounterPartyPremium= requested withdrawal for couter party asset(filled only when executed and with withdraw request)\\n        uint256 releasedCounterPartyAmount;\\n        uint256 releasedCounterPartyPremium; \\n\\n    }\\n\\n    enum OptionExecution{\\n        NoExecution,\\n        ExecuteCall,\\n        ExecutePut\\n    }\\n\\n    struct OptionPairExecutionAccountingResult {  \\n        SettlementAccountingResult callOptionResult;\\n        SettlementAccountingResult putOptionResult;\\n        OptionExecution execute;\\n    }\\n\\n    struct OptionPairExecution {\\n        address callOption;\\n        address putOption;\\n        OptionExecution execute; \\n    }\\n\\n    \\n\\n    struct SettlementCashflowResult{ \\n        address contractAddress; //0 for eth \\n        uint256 newDepositAmount;\\n        uint256 newReleasedAmount;\\n        int256 leftOverAmount; //positive, if trader didn't withdraw last time; negative, if trader failed to send back last time; \\n    }\\n \\n}\",\"keccak256\":\"0x5e0adb375c34b2f8ee9371b6b82d76b930ff57e4b7b98e99d92aecfbcd8ec653\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608b610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063f747e177146038575b600080fd5b603f600181565b60405160ff909116815260200160405180910390f3fea264697066735822122061ca618ac2b9f55cd62788d7fe00d175321a4e93ed2580d4aff9fd646548356664736f6c63430008040033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063f747e177146038575b600080fd5b603f600181565b60405160ff909116815260200160405180910390f3fea264697066735822122061ca618ac2b9f55cd62788d7fe00d175321a4e93ed2580d4aff9fd646548356664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}