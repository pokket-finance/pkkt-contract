/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OptionLifecycleInterface extends ethers.utils.Interface {
  functions: {
    "calculateMaturity(bool,(uint128,uint128,uint128,uint16,uint16,bool,bool),bool,uint8,uint8)": FunctionFragment;
    "getAvailableBalance(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateMaturity",
    values: [
      boolean,
      {
        totalAmount: BigNumberish;
        totalTerminate: BigNumberish;
        strikePrice: BigNumberish;
        round: BigNumberish;
        premiumRate: BigNumberish;
        executed: boolean;
        callOrPut: boolean;
      },
      boolean,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableBalance",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableBalance",
    data: BytesLike
  ): Result;

  events: {};
}

export class OptionLifecycle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OptionLifecycleInterface;

  functions: {
    calculateMaturity(
      _execute: boolean,
      _optionState: {
        totalAmount: BigNumberish;
        totalTerminate: BigNumberish;
        strikePrice: BigNumberish;
        round: BigNumberish;
        premiumRate: BigNumberish;
        executed: boolean;
        callOrPut: boolean;
      },
      _callOrPut: boolean,
      _depositAssetAmountDecimals: BigNumberish,
      _counterPartyAssetAmountDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          releasedDepositAssetAmount: BigNumber;
          releasedDepositAssetPremiumAmount: BigNumber;
          releasedDepositAssetAmountWithPremium: BigNumber;
          releasedCounterPartyAssetAmount: BigNumber;
          releasedCounterPartyAssetPremiumAmount: BigNumber;
          releasedCounterPartyAssetAmountWithPremium: BigNumber;
          autoRollDepositAssetAmount: BigNumber;
          autoRollDepositAssetPremiumAmount: BigNumber;
          autoRollDepositAssetAmountWithPremium: BigNumber;
          autoRollCounterPartyAssetAmount: BigNumber;
          autoRollCounterPartyAssetPremiumAmount: BigNumber;
          autoRollCounterPartyAssetAmountWithPremium: BigNumber;
        }
      ]
    >;

    getAvailableBalance(
      _asset: string,
      _source: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  calculateMaturity(
    _execute: boolean,
    _optionState: {
      totalAmount: BigNumberish;
      totalTerminate: BigNumberish;
      strikePrice: BigNumberish;
      round: BigNumberish;
      premiumRate: BigNumberish;
      executed: boolean;
      callOrPut: boolean;
    },
    _callOrPut: boolean,
    _depositAssetAmountDecimals: BigNumberish,
    _counterPartyAssetAmountDecimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      releasedDepositAssetAmount: BigNumber;
      releasedDepositAssetPremiumAmount: BigNumber;
      releasedDepositAssetAmountWithPremium: BigNumber;
      releasedCounterPartyAssetAmount: BigNumber;
      releasedCounterPartyAssetPremiumAmount: BigNumber;
      releasedCounterPartyAssetAmountWithPremium: BigNumber;
      autoRollDepositAssetAmount: BigNumber;
      autoRollDepositAssetPremiumAmount: BigNumber;
      autoRollDepositAssetAmountWithPremium: BigNumber;
      autoRollCounterPartyAssetAmount: BigNumber;
      autoRollCounterPartyAssetPremiumAmount: BigNumber;
      autoRollCounterPartyAssetAmountWithPremium: BigNumber;
    }
  >;

  getAvailableBalance(
    _asset: string,
    _source: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    calculateMaturity(
      _execute: boolean,
      _optionState: {
        totalAmount: BigNumberish;
        totalTerminate: BigNumberish;
        strikePrice: BigNumberish;
        round: BigNumberish;
        premiumRate: BigNumberish;
        executed: boolean;
        callOrPut: boolean;
      },
      _callOrPut: boolean,
      _depositAssetAmountDecimals: BigNumberish,
      _counterPartyAssetAmountDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        releasedDepositAssetAmount: BigNumber;
        releasedDepositAssetPremiumAmount: BigNumber;
        releasedDepositAssetAmountWithPremium: BigNumber;
        releasedCounterPartyAssetAmount: BigNumber;
        releasedCounterPartyAssetPremiumAmount: BigNumber;
        releasedCounterPartyAssetAmountWithPremium: BigNumber;
        autoRollDepositAssetAmount: BigNumber;
        autoRollDepositAssetPremiumAmount: BigNumber;
        autoRollDepositAssetAmountWithPremium: BigNumber;
        autoRollCounterPartyAssetAmount: BigNumber;
        autoRollCounterPartyAssetPremiumAmount: BigNumber;
        autoRollCounterPartyAssetAmountWithPremium: BigNumber;
      }
    >;

    getAvailableBalance(
      _asset: string,
      _source: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calculateMaturity(
      _execute: boolean,
      _optionState: {
        totalAmount: BigNumberish;
        totalTerminate: BigNumberish;
        strikePrice: BigNumberish;
        round: BigNumberish;
        premiumRate: BigNumberish;
        executed: boolean;
        callOrPut: boolean;
      },
      _callOrPut: boolean,
      _depositAssetAmountDecimals: BigNumberish,
      _counterPartyAssetAmountDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableBalance(
      _asset: string,
      _source: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateMaturity(
      _execute: boolean,
      _optionState: {
        totalAmount: BigNumberish;
        totalTerminate: BigNumberish;
        strikePrice: BigNumberish;
        round: BigNumberish;
        premiumRate: BigNumberish;
        executed: boolean;
        callOrPut: boolean;
      },
      _callOrPut: boolean,
      _depositAssetAmountDecimals: BigNumberish,
      _counterPartyAssetAmountDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableBalance(
      _asset: string,
      _source: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
