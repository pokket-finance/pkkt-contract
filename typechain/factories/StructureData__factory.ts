/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { StructureData, StructureDataInterface } from "../StructureData";

const _abi = [
  {
    inputs: [],
    name: "MANAGER_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "OPTION_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60d6610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c806347276abf146042578063ec87621c14607a575b600080fd5b60687ffd0eee74c7609b4290ae42cfa22435eabf285017ea12017ed27c2e820eae6a7781565b60405190815260200160405180910390f35b60687f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b088156fea26469706673582212206612027f3c438c55417dcc28d9bbeb77057ee9d0cbecea171e343cb20084fc1564736f6c63430008040033";

export class StructureData__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StructureData> {
    return super.deploy(overrides || {}) as Promise<StructureData>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): StructureData {
    return super.attach(address) as StructureData;
  }
  connect(signer: Signer): StructureData__factory {
    return super.connect(signer) as StructureData__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StructureDataInterface {
    return new utils.Interface(_abi) as StructureDataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StructureData {
    return new Contract(address, _abi, signerOrProvider) as StructureData;
  }
}
