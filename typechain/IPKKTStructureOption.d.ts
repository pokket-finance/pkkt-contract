/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPKKTStructureOptionInterface extends ethers.utils.Interface {
  functions: {
    "cancelWithdraw(uint8,uint256)": FunctionFragment;
    "deposit(uint8,uint256)": FunctionFragment;
    "depositETH(uint8)": FunctionFragment;
    "getAccountBalance(uint8)": FunctionFragment;
    "getOptionSnapShot(uint8)": FunctionFragment;
    "getOptionStateByRound(uint8,uint16)": FunctionFragment;
    "initiateWithraw(uint8,uint256)": FunctionFragment;
    "withdraw(uint8,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelWithdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionSnapShot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionStateByRound",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionSnapShot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionStateByRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(uint8,address,uint16,uint256)": EventFragment;
    "Withdraw(uint8,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [number, string, number, BigNumber] & {
    optionId: number;
    account: string;
    round: number;
    amount: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<
  [number, string, string, BigNumber] & {
    optionId: number;
    account: string;
    asset: string;
    amount: BigNumber;
  }
>;

export class IPKKTStructureOption extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPKKTStructureOptionInterface;

  functions: {
    cancelWithdraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositETH(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountBalance(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          pendingDepositAssetAmount: BigNumber;
          lockedDepositAssetAmount: BigNumber;
          terminatingDepositAssetAmount: BigNumber;
          toTerminateDepositAssetAmount: BigNumber;
          releasedDepositAssetAmount: BigNumber;
          releasedCounterPartyAssetAmount: BigNumber;
        }
      ]
    >;

    getOptionSnapShot(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          totalPending: BigNumber;
          totalLocked: BigNumber;
          totalTerminating: BigNumber;
          totalToTerminate: BigNumber;
          totalReleasedDeposit: BigNumber;
          totalReleasedCounterParty: BigNumber;
        }
      ]
    >;

    getOptionStateByRound(
      _optionId: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, number, number, boolean, boolean] & {
          totalAmount: BigNumber;
          totalTerminate: BigNumber;
          strikePrice: BigNumber;
          round: number;
          premiumRate: number;
          executed: boolean;
          callOrPut: boolean;
        }
      ]
    >;

    initiateWithraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelWithdraw(
    _optionId: BigNumberish,
    _assetToTerminate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _optionId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositETH(
    _optionId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountBalance(
    _optionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      pendingDepositAssetAmount: BigNumber;
      lockedDepositAssetAmount: BigNumber;
      terminatingDepositAssetAmount: BigNumber;
      toTerminateDepositAssetAmount: BigNumber;
      releasedDepositAssetAmount: BigNumber;
      releasedCounterPartyAssetAmount: BigNumber;
    }
  >;

  getOptionSnapShot(
    _optionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalPending: BigNumber;
      totalLocked: BigNumber;
      totalTerminating: BigNumber;
      totalToTerminate: BigNumber;
      totalReleasedDeposit: BigNumber;
      totalReleasedCounterParty: BigNumber;
    }
  >;

  getOptionStateByRound(
    _optionId: BigNumberish,
    _round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, number, boolean, boolean] & {
      totalAmount: BigNumber;
      totalTerminate: BigNumber;
      strikePrice: BigNumber;
      round: number;
      premiumRate: number;
      executed: boolean;
      callOrPut: boolean;
    }
  >;

  initiateWithraw(
    _optionId: BigNumberish,
    _assetToTerminate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _optionId: BigNumberish,
    _amount: BigNumberish,
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelWithdraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETH(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountBalance(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        pendingDepositAssetAmount: BigNumber;
        lockedDepositAssetAmount: BigNumber;
        terminatingDepositAssetAmount: BigNumber;
        toTerminateDepositAssetAmount: BigNumber;
        releasedDepositAssetAmount: BigNumber;
        releasedCounterPartyAssetAmount: BigNumber;
      }
    >;

    getOptionSnapShot(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalPending: BigNumber;
        totalLocked: BigNumber;
        totalTerminating: BigNumber;
        totalToTerminate: BigNumber;
        totalReleasedDeposit: BigNumber;
        totalReleasedCounterParty: BigNumber;
      }
    >;

    getOptionStateByRound(
      _optionId: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number, boolean, boolean] & {
        totalAmount: BigNumber;
        totalTerminate: BigNumber;
        strikePrice: BigNumber;
        round: number;
        premiumRate: number;
        executed: boolean;
        callOrPut: boolean;
      }
    >;

    initiateWithraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      _asset: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(uint8,address,uint16,uint256)"(
      optionId?: BigNumberish | null,
      account?: string | null,
      round?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [number, string, number, BigNumber],
      { optionId: number; account: string; round: number; amount: BigNumber }
    >;

    Deposit(
      optionId?: BigNumberish | null,
      account?: string | null,
      round?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [number, string, number, BigNumber],
      { optionId: number; account: string; round: number; amount: BigNumber }
    >;

    "Withdraw(uint8,address,address,uint256)"(
      optionId?: BigNumberish | null,
      account?: string | null,
      asset?: string | null,
      amount?: null
    ): TypedEventFilter<
      [number, string, string, BigNumber],
      { optionId: number; account: string; asset: string; amount: BigNumber }
    >;

    Withdraw(
      optionId?: BigNumberish | null,
      account?: string | null,
      asset?: string | null,
      amount?: null
    ): TypedEventFilter<
      [number, string, string, BigNumber],
      { optionId: number; account: string; asset: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    cancelWithdraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositETH(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountBalance(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOptionSnapShot(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOptionStateByRound(
      _optionId: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateWithraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelWithdraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositETH(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountBalance(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOptionSnapShot(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOptionStateByRound(
      _optionId: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateWithraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
