/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HodlBoosterOptionUpgradeableInterface extends ethers.utils.Interface {
  functions: {
    "addOptionPairs((uint8,uint8,uint8,uint8,address,address,bool)[])": FunctionFragment;
    "adminRoleAddress()": FunctionFragment;
    "balanceEnough(address)": FunctionFragment;
    "cancelWithdraw(uint8,uint256)": FunctionFragment;
    "currentRound()": FunctionFragment;
    "deposit(uint8,uint256)": FunctionFragment;
    "depositETH(uint8)": FunctionFragment;
    "executionAccountingResult(uint8)": FunctionFragment;
    "getAccountBalance(uint8)": FunctionFragment;
    "getMoneyMovements()": FunctionFragment;
    "getOptionSnapShot(uint8)": FunctionFragment;
    "getOptionStateByRound(uint8,uint16)": FunctionFragment;
    "initialize(address,address,address,(uint8,uint8,uint8,uint8,address,address,bool)[])": FunctionFragment;
    "initiateSettlement()": FunctionFragment;
    "initiateWithraw(uint8,uint256)": FunctionFragment;
    "managerRoleAddress()": FunctionFragment;
    "optionPairCount()": FunctionFragment;
    "optionPairs(uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendBackAssets()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setManager(address)": FunctionFragment;
    "setOptionParameters(uint256[])": FunctionFragment;
    "settle(uint8[])": FunctionFragment;
    "settlementCashflowResult(address)": FunctionFragment;
    "toggleOptionPairDeposit(uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underSettlement()": FunctionFragment;
    "withdraw(uint8,uint256,address)": FunctionFragment;
    "withdrawAssets()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addOptionPairs",
    values: [
      {
        callOptionId: BigNumberish;
        putOptionId: BigNumberish;
        depositAssetAmountDecimals: BigNumberish;
        counterPartyAssetAmountDecimals: BigNumberish;
        depositAsset: string;
        counterPartyAsset: string;
        manualDepositDisabled: boolean;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRoleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceEnough",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelWithdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executionAccountingResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMoneyMovements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionSnapShot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionStateByRound",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      {
        callOptionId: BigNumberish;
        putOptionId: BigNumberish;
        depositAssetAmountDecimals: BigNumberish;
        counterPartyAssetAmountDecimals: BigNumberish;
        depositAsset: string;
        counterPartyAsset: string;
        manualDepositDisabled: boolean;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managerRoleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionPairCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionPairs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendBackAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "setManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOptionParameters",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementCashflowResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleOptionPairDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAssets",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addOptionPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRoleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceEnough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executionAccountingResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMoneyMovements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionSnapShot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionStateByRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerRoleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionPairCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendBackAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOptionParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settlementCashflowResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleOptionPairDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAssets",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Deposit(uint8,address,uint16,uint256)": EventFragment;
    "ManagerChanged(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(uint8,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { oldAdmin: string; newAdmin: string }
>;

export type DepositEvent = TypedEvent<
  [number, string, number, BigNumber] & {
    optionId: number;
    account: string;
    round: number;
    amount: BigNumber;
  }
>;

export type ManagerChangedEvent = TypedEvent<
  [string, string] & { oldManager: string; newManager: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type WithdrawEvent = TypedEvent<
  [number, string, string, BigNumber] & {
    optionId: number;
    account: string;
    asset: string;
    amount: BigNumber;
  }
>;

export class HodlBoosterOptionUpgradeable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HodlBoosterOptionUpgradeableInterface;

  functions: {
    addOptionPairs(
      _optionPairDefinitions: {
        callOptionId: BigNumberish;
        putOptionId: BigNumberish;
        depositAssetAmountDecimals: BigNumberish;
        counterPartyAssetAmountDecimals: BigNumberish;
        depositAsset: string;
        counterPartyAsset: string;
        manualDepositDisabled: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminRoleAddress(overrides?: CallOverrides): Promise<[string]>;

    balanceEnough(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancelWithdraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentRound(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositETH(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executionAccountingResult(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          depositAmount: BigNumber;
          autoRollAmount: BigNumber;
          autoRollPremium: BigNumber;
          releasedAmount: BigNumber;
          releasedPremium: BigNumber;
          autoRollCounterPartyAmount: BigNumber;
          autoRollCounterPartyPremium: BigNumber;
          releasedCounterPartyAmount: BigNumber;
          releasedCounterPartyPremium: BigNumber;
          executed: boolean;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          depositAmount: BigNumber;
          autoRollAmount: BigNumber;
          autoRollPremium: BigNumber;
          releasedAmount: BigNumber;
          releasedPremium: BigNumber;
          autoRollCounterPartyAmount: BigNumber;
          autoRollCounterPartyPremium: BigNumber;
          releasedCounterPartyAmount: BigNumber;
          releasedCounterPartyPremium: BigNumber;
          executed: boolean;
        },
        number
      ] & {
        callOptionResult: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          depositAmount: BigNumber;
          autoRollAmount: BigNumber;
          autoRollPremium: BigNumber;
          releasedAmount: BigNumber;
          releasedPremium: BigNumber;
          autoRollCounterPartyAmount: BigNumber;
          autoRollCounterPartyPremium: BigNumber;
          releasedCounterPartyAmount: BigNumber;
          releasedCounterPartyPremium: BigNumber;
          executed: boolean;
        };
        putOptionResult: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          depositAmount: BigNumber;
          autoRollAmount: BigNumber;
          autoRollPremium: BigNumber;
          releasedAmount: BigNumber;
          releasedPremium: BigNumber;
          autoRollCounterPartyAmount: BigNumber;
          autoRollCounterPartyPremium: BigNumber;
          releasedCounterPartyAmount: BigNumber;
          releasedCounterPartyPremium: BigNumber;
          executed: boolean;
        };
        execute: number;
      }
    >;

    getAccountBalance(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          pendingDepositAssetAmount: BigNumber;
          lockedDepositAssetAmount: BigNumber;
          terminatingDepositAssetAmount: BigNumber;
          toTerminateDepositAssetAmount: BigNumber;
          releasedDepositAssetAmount: BigNumber;
          releasedCounterPartyAssetAmount: BigNumber;
        }
      ]
    >;

    getMoneyMovements(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, string] & {
          blockTime: BigNumber;
          movementAmount: BigNumber;
          asset: string;
        })[]
      ]
    >;

    getOptionSnapShot(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          totalPending: BigNumber;
          totalLocked: BigNumber;
          totalTerminating: BigNumber;
          totalToTerminate: BigNumber;
          totalReleasedDeposit: BigNumber;
          totalReleasedCounterParty: BigNumber;
        }
      ]
    >;

    getOptionStateByRound(
      _optionId: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, number, number, boolean, boolean] & {
          totalAmount: BigNumber;
          totalTerminate: BigNumber;
          strikePrice: BigNumber;
          round: number;
          premiumRate: number;
          executed: boolean;
          callOrPut: boolean;
        }
      ]
    >;

    initialize(
      _owner: string,
      _admin: string,
      _manager: string,
      _optionPairDefinitions: {
        callOptionId: BigNumberish;
        putOptionId: BigNumberish;
        depositAssetAmountDecimals: BigNumberish;
        counterPartyAssetAmountDecimals: BigNumberish;
        depositAsset: string;
        counterPartyAsset: string;
        manualDepositDisabled: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateSettlement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateWithraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerRoleAddress(overrides?: CallOverrides): Promise<[string]>;

    optionPairCount(overrides?: CallOverrides): Promise<[number]>;

    optionPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string, string, boolean] & {
        callOptionId: number;
        putOptionId: number;
        depositAssetAmountDecimals: number;
        counterPartyAssetAmountDecimals: number;
        depositAsset: string;
        counterPartyAsset: string;
        manualDepositDisabled: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendBackAssets(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOptionParameters(
      _parameters: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settle(
      _execution: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settlementCashflowResult(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        newDepositAmount: BigNumber;
        newReleasedAmount: BigNumber;
        leftOverAmount: BigNumber;
        contractAddress: string;
      }
    >;

    toggleOptionPairDeposit(
      _pairId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underSettlement(overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAssets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addOptionPairs(
    _optionPairDefinitions: {
      callOptionId: BigNumberish;
      putOptionId: BigNumberish;
      depositAssetAmountDecimals: BigNumberish;
      counterPartyAssetAmountDecimals: BigNumberish;
      depositAsset: string;
      counterPartyAsset: string;
      manualDepositDisabled: boolean;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminRoleAddress(overrides?: CallOverrides): Promise<string>;

  balanceEnough(_asset: string, overrides?: CallOverrides): Promise<boolean>;

  cancelWithdraw(
    _optionId: BigNumberish,
    _assetToTerminate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentRound(overrides?: CallOverrides): Promise<number>;

  deposit(
    _optionId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositETH(
    _optionId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executionAccountingResult(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        depositAmount: BigNumber;
        autoRollAmount: BigNumber;
        autoRollPremium: BigNumber;
        releasedAmount: BigNumber;
        releasedPremium: BigNumber;
        autoRollCounterPartyAmount: BigNumber;
        autoRollCounterPartyPremium: BigNumber;
        releasedCounterPartyAmount: BigNumber;
        releasedCounterPartyPremium: BigNumber;
        executed: boolean;
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        depositAmount: BigNumber;
        autoRollAmount: BigNumber;
        autoRollPremium: BigNumber;
        releasedAmount: BigNumber;
        releasedPremium: BigNumber;
        autoRollCounterPartyAmount: BigNumber;
        autoRollCounterPartyPremium: BigNumber;
        releasedCounterPartyAmount: BigNumber;
        releasedCounterPartyPremium: BigNumber;
        executed: boolean;
      },
      number
    ] & {
      callOptionResult: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        depositAmount: BigNumber;
        autoRollAmount: BigNumber;
        autoRollPremium: BigNumber;
        releasedAmount: BigNumber;
        releasedPremium: BigNumber;
        autoRollCounterPartyAmount: BigNumber;
        autoRollCounterPartyPremium: BigNumber;
        releasedCounterPartyAmount: BigNumber;
        releasedCounterPartyPremium: BigNumber;
        executed: boolean;
      };
      putOptionResult: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        depositAmount: BigNumber;
        autoRollAmount: BigNumber;
        autoRollPremium: BigNumber;
        releasedAmount: BigNumber;
        releasedPremium: BigNumber;
        autoRollCounterPartyAmount: BigNumber;
        autoRollCounterPartyPremium: BigNumber;
        releasedCounterPartyAmount: BigNumber;
        releasedCounterPartyPremium: BigNumber;
        executed: boolean;
      };
      execute: number;
    }
  >;

  getAccountBalance(
    _optionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      pendingDepositAssetAmount: BigNumber;
      lockedDepositAssetAmount: BigNumber;
      terminatingDepositAssetAmount: BigNumber;
      toTerminateDepositAssetAmount: BigNumber;
      releasedDepositAssetAmount: BigNumber;
      releasedCounterPartyAssetAmount: BigNumber;
    }
  >;

  getMoneyMovements(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, string] & {
      blockTime: BigNumber;
      movementAmount: BigNumber;
      asset: string;
    })[]
  >;

  getOptionSnapShot(
    _optionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalPending: BigNumber;
      totalLocked: BigNumber;
      totalTerminating: BigNumber;
      totalToTerminate: BigNumber;
      totalReleasedDeposit: BigNumber;
      totalReleasedCounterParty: BigNumber;
    }
  >;

  getOptionStateByRound(
    _optionId: BigNumberish,
    _round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, number, boolean, boolean] & {
      totalAmount: BigNumber;
      totalTerminate: BigNumber;
      strikePrice: BigNumber;
      round: number;
      premiumRate: number;
      executed: boolean;
      callOrPut: boolean;
    }
  >;

  initialize(
    _owner: string,
    _admin: string,
    _manager: string,
    _optionPairDefinitions: {
      callOptionId: BigNumberish;
      putOptionId: BigNumberish;
      depositAssetAmountDecimals: BigNumberish;
      counterPartyAssetAmountDecimals: BigNumberish;
      depositAsset: string;
      counterPartyAsset: string;
      manualDepositDisabled: boolean;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateSettlement(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateWithraw(
    _optionId: BigNumberish,
    _assetToTerminate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerRoleAddress(overrides?: CallOverrides): Promise<string>;

  optionPairCount(overrides?: CallOverrides): Promise<number>;

  optionPairs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, string, string, boolean] & {
      callOptionId: number;
      putOptionId: number;
      depositAssetAmountDecimals: number;
      counterPartyAssetAmountDecimals: number;
      depositAsset: string;
      counterPartyAsset: string;
      manualDepositDisabled: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendBackAssets(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManager(
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOptionParameters(
    _parameters: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settle(
    _execution: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settlementCashflowResult(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      newDepositAmount: BigNumber;
      newReleasedAmount: BigNumber;
      leftOverAmount: BigNumber;
      contractAddress: string;
    }
  >;

  toggleOptionPairDeposit(
    _pairId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underSettlement(overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    _optionId: BigNumberish,
    _amount: BigNumberish,
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAssets(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOptionPairs(
      _optionPairDefinitions: {
        callOptionId: BigNumberish;
        putOptionId: BigNumberish;
        depositAssetAmountDecimals: BigNumberish;
        counterPartyAssetAmountDecimals: BigNumberish;
        depositAsset: string;
        counterPartyAsset: string;
        manualDepositDisabled: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    adminRoleAddress(overrides?: CallOverrides): Promise<string>;

    balanceEnough(_asset: string, overrides?: CallOverrides): Promise<boolean>;

    cancelWithdraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentRound(overrides?: CallOverrides): Promise<number>;

    deposit(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETH(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executionAccountingResult(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          depositAmount: BigNumber;
          autoRollAmount: BigNumber;
          autoRollPremium: BigNumber;
          releasedAmount: BigNumber;
          releasedPremium: BigNumber;
          autoRollCounterPartyAmount: BigNumber;
          autoRollCounterPartyPremium: BigNumber;
          releasedCounterPartyAmount: BigNumber;
          releasedCounterPartyPremium: BigNumber;
          executed: boolean;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          depositAmount: BigNumber;
          autoRollAmount: BigNumber;
          autoRollPremium: BigNumber;
          releasedAmount: BigNumber;
          releasedPremium: BigNumber;
          autoRollCounterPartyAmount: BigNumber;
          autoRollCounterPartyPremium: BigNumber;
          releasedCounterPartyAmount: BigNumber;
          releasedCounterPartyPremium: BigNumber;
          executed: boolean;
        },
        number
      ] & {
        callOptionResult: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          depositAmount: BigNumber;
          autoRollAmount: BigNumber;
          autoRollPremium: BigNumber;
          releasedAmount: BigNumber;
          releasedPremium: BigNumber;
          autoRollCounterPartyAmount: BigNumber;
          autoRollCounterPartyPremium: BigNumber;
          releasedCounterPartyAmount: BigNumber;
          releasedCounterPartyPremium: BigNumber;
          executed: boolean;
        };
        putOptionResult: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          depositAmount: BigNumber;
          autoRollAmount: BigNumber;
          autoRollPremium: BigNumber;
          releasedAmount: BigNumber;
          releasedPremium: BigNumber;
          autoRollCounterPartyAmount: BigNumber;
          autoRollCounterPartyPremium: BigNumber;
          releasedCounterPartyAmount: BigNumber;
          releasedCounterPartyPremium: BigNumber;
          executed: boolean;
        };
        execute: number;
      }
    >;

    getAccountBalance(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        pendingDepositAssetAmount: BigNumber;
        lockedDepositAssetAmount: BigNumber;
        terminatingDepositAssetAmount: BigNumber;
        toTerminateDepositAssetAmount: BigNumber;
        releasedDepositAssetAmount: BigNumber;
        releasedCounterPartyAssetAmount: BigNumber;
      }
    >;

    getMoneyMovements(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, string] & {
        blockTime: BigNumber;
        movementAmount: BigNumber;
        asset: string;
      })[]
    >;

    getOptionSnapShot(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalPending: BigNumber;
        totalLocked: BigNumber;
        totalTerminating: BigNumber;
        totalToTerminate: BigNumber;
        totalReleasedDeposit: BigNumber;
        totalReleasedCounterParty: BigNumber;
      }
    >;

    getOptionStateByRound(
      _optionId: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number, boolean, boolean] & {
        totalAmount: BigNumber;
        totalTerminate: BigNumber;
        strikePrice: BigNumber;
        round: number;
        premiumRate: number;
        executed: boolean;
        callOrPut: boolean;
      }
    >;

    initialize(
      _owner: string,
      _admin: string,
      _manager: string,
      _optionPairDefinitions: {
        callOptionId: BigNumberish;
        putOptionId: BigNumberish;
        depositAssetAmountDecimals: BigNumberish;
        counterPartyAssetAmountDecimals: BigNumberish;
        depositAsset: string;
        counterPartyAsset: string;
        manualDepositDisabled: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    initiateSettlement(overrides?: CallOverrides): Promise<void>;

    initiateWithraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    managerRoleAddress(overrides?: CallOverrides): Promise<string>;

    optionPairCount(overrides?: CallOverrides): Promise<number>;

    optionPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, string, string, boolean] & {
        callOptionId: number;
        putOptionId: number;
        depositAssetAmountDecimals: number;
        counterPartyAssetAmountDecimals: number;
        depositAsset: string;
        counterPartyAsset: string;
        manualDepositDisabled: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendBackAssets(overrides?: CallOverrides): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setManager(_manager: string, overrides?: CallOverrides): Promise<void>;

    setOptionParameters(
      _parameters: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      _execution: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    settlementCashflowResult(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        newDepositAmount: BigNumber;
        newReleasedAmount: BigNumber;
        leftOverAmount: BigNumber;
        contractAddress: string;
      }
    >;

    toggleOptionPairDeposit(
      _pairId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underSettlement(overrides?: CallOverrides): Promise<boolean>;

    withdraw(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      _asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAssets(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      oldAdmin?: string | null,
      newAdmin?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      oldAdmin?: string | null,
      newAdmin?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldAdmin: string; newAdmin: string }
    >;

    "Deposit(uint8,address,uint16,uint256)"(
      optionId?: BigNumberish | null,
      account?: string | null,
      round?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [number, string, number, BigNumber],
      { optionId: number; account: string; round: number; amount: BigNumber }
    >;

    Deposit(
      optionId?: BigNumberish | null,
      account?: string | null,
      round?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [number, string, number, BigNumber],
      { optionId: number; account: string; round: number; amount: BigNumber }
    >;

    "ManagerChanged(address,address)"(
      oldManager?: string | null,
      newManager?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldManager: string; newManager: string }
    >;

    ManagerChanged(
      oldManager?: string | null,
      newManager?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldManager: string; newManager: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Withdraw(uint8,address,address,uint256)"(
      optionId?: BigNumberish | null,
      account?: string | null,
      asset?: string | null,
      amount?: null
    ): TypedEventFilter<
      [number, string, string, BigNumber],
      { optionId: number; account: string; asset: string; amount: BigNumber }
    >;

    Withdraw(
      optionId?: BigNumberish | null,
      account?: string | null,
      asset?: string | null,
      amount?: null
    ): TypedEventFilter<
      [number, string, string, BigNumber],
      { optionId: number; account: string; asset: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addOptionPairs(
      _optionPairDefinitions: {
        callOptionId: BigNumberish;
        putOptionId: BigNumberish;
        depositAssetAmountDecimals: BigNumberish;
        counterPartyAssetAmountDecimals: BigNumberish;
        depositAsset: string;
        counterPartyAsset: string;
        manualDepositDisabled: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminRoleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    balanceEnough(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelWithdraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositETH(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executionAccountingResult(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountBalance(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMoneyMovements(overrides?: CallOverrides): Promise<BigNumber>;

    getOptionSnapShot(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOptionStateByRound(
      _optionId: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _admin: string,
      _manager: string,
      _optionPairDefinitions: {
        callOptionId: BigNumberish;
        putOptionId: BigNumberish;
        depositAssetAmountDecimals: BigNumberish;
        counterPartyAssetAmountDecimals: BigNumberish;
        depositAsset: string;
        counterPartyAsset: string;
        manualDepositDisabled: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateSettlement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateWithraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerRoleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    optionPairCount(overrides?: CallOverrides): Promise<BigNumber>;

    optionPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendBackAssets(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOptionParameters(
      _parameters: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settle(
      _execution: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settlementCashflowResult(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleOptionPairDeposit(
      _pairId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underSettlement(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAssets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOptionPairs(
      _optionPairDefinitions: {
        callOptionId: BigNumberish;
        putOptionId: BigNumberish;
        depositAssetAmountDecimals: BigNumberish;
        counterPartyAssetAmountDecimals: BigNumberish;
        depositAsset: string;
        counterPartyAsset: string;
        manualDepositDisabled: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminRoleAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceEnough(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelWithdraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositETH(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executionAccountingResult(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountBalance(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMoneyMovements(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOptionSnapShot(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOptionStateByRound(
      _optionId: BigNumberish,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _admin: string,
      _manager: string,
      _optionPairDefinitions: {
        callOptionId: BigNumberish;
        putOptionId: BigNumberish;
        depositAssetAmountDecimals: BigNumberish;
        counterPartyAssetAmountDecimals: BigNumberish;
        depositAsset: string;
        counterPartyAsset: string;
        manualDepositDisabled: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateSettlement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateWithraw(
      _optionId: BigNumberish,
      _assetToTerminate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerRoleAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionPairCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendBackAssets(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOptionParameters(
      _parameters: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      _execution: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settlementCashflowResult(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleOptionPairDeposit(
      _pairId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underSettlement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAssets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
